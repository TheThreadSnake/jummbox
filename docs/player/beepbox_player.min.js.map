{"version":3,"sources":["../../src/synth/SynthConfig.ts","../../node_modules/imperative-html/src/elements-base.ts","../../node_modules/imperative-html/src/elements-strict.ts","../../src/editor/ColorConfig.ts","../../src/editor/EditorConfig.ts","../../src/synth/FFT.ts","../../src/synth/Deque.ts","../../src/synth/synth.ts","../../src/player/main.ts"],"names":["Config","centerWave","wave","sum","i","length","average","cumulative","wavePrev","push","Float64Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","getDrumWave","index","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","samples","Float32Array","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","Error","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","pow","highIndex","min","retroWave","combinedAmplitude","lerped","log","LN2","amplitude","spectrumMax","radians","PI","cos","sin","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","dictionary","value","name","result","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","reverbRange","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentsPerChannelMin","instrumentsPerChannelMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipWaves","volume","pitchFilterMult","isSoft","filterCutoffMaxHz","filterCutoffMinHz","filterMax","filterMaxResonance","filterCutoffRange","filterResonanceRange","transitions","isSeamless","attackSeconds","releases","releaseTicks","slides","slideTicks","vibratos","type","delayParts","vibratoTypes","periodsSeconds","period","arpSpeedScale","intervals","spread","offset","sign","effectsNames","volumeRange","volumeLogScale","panCenter","panMax","detuneMin","detuneMax","songDetuneMin","songDetuneMax","chords","harmonizes","customInterval","arpeggiates","isCustomInterval","strumParts","maxChordSize","operatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","harmonicsControlPoints","harmonicsRendered","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthRange","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","centerFrequency","pitchesPerOctave","drumCount","modCount","pitchOctaves","maxScrollableOctaves","maxPitch","maximumTonesPerChannel","sineWaveLength","sineWaveMask","sineWave","generateSineWave","barEditorHeight","applyElementArgs","element","args","args_1","__values","args_1_1","next","done","arg","Node","appendChild","document","createTextNode","Array","isArray","Symbol","iterator","__spread","constructor","Object","Element","_d","e_2","_e","key","setAttribute","join","console","warn","tagName","_f","e_3","_g","styleKey","style","setProperty","removeAttribute","svgNS","HTML","_i","arguments","createRange","createContextualFragment","SVG","fragment","createDocumentFragment","svgParser","DOMParser","parseFromString","documentElement","firstChild","importNode","name_1","createElement","_c","split","name_2","createElementNS","test","snakeCaseName","replace","ColorConfig","[object Object]","this","colorLookup","clear","song","channel","getComputedStyle","_styleElement","getPropertyValue","trim","base","getChannelColor","regex","secondaryChannel","getComputed","exec","primaryChannel","secondaryNote","primaryNote","pitchChannelCount","pitchChannels","noiseChannelCount","noiseChannels","modChannels","has","get","pitchSecondaryChannelHue","pitchSecondaryChannelHueScale","pitchSecondaryChannelSat","pitchSecondaryChannelSatScale","pitchSecondaryChannelLum","pitchSecondaryChannelLumScale","pitchPrimaryChannelHue","pitchPrimaryChannelHueScale","pitchPrimaryChannelSat","pitchPrimaryChannelSatScale","pitchPrimaryChannelLum","pitchPrimaryChannelLumScale","pitchSecondaryNoteHue","pitchSecondaryNoteHueScale","pitchSecondaryNoteSat","pitchSecondaryNoteSatScale","pitchSecondaryNoteLum","pitchSecondaryNoteLumScale","pitchPrimaryNoteHue","pitchPrimaryNoteHueScale","pitchPrimaryNoteSat","pitchPrimaryNoteSatScale","pitchPrimaryNoteLum","pitchPrimaryNoteLumScale","newChannelColors","floor","set","noiseSecondaryChannelHue","noiseSecondaryChannelHueScale","noiseSecondaryChannelSat","noiseSecondaryChannelSatScale","noiseSecondaryChannelLum","noiseSecondaryChannelLumScale","noisePrimaryChannelHue","noisePrimaryChannelHueScale","noisePrimaryChannelSat","noisePrimaryChannelSatScale","noisePrimaryChannelLum","noisePrimaryChannelLumScale","noiseSecondaryNoteHue","noiseSecondaryNoteHueScale","noiseSecondaryNoteSat","noiseSecondaryNoteSatScale","noiseSecondaryNoteLum","noiseSecondaryNoteLumScale","noisePrimaryNoteHue","noisePrimaryNoteHueScale","noisePrimaryNoteSat","noisePrimaryNoteSatScale","noisePrimaryNoteLum","noisePrimaryNoteLumScale","modSecondaryChannelHue","modSecondaryChannelHueScale","modSecondaryChannelSat","modSecondaryChannelSatScale","modSecondaryChannelLum","modSecondaryChannelLumScale","modPrimaryChannelHue","modPrimaryChannelHueScale","modPrimaryChannelSat","modPrimaryChannelSatScale","modPrimaryChannelLum","modPrimaryChannelLumScale","modSecondaryNoteHue","modSecondaryNoteHueScale","modSecondaryNoteSat","modSecondaryNoteSatScale","modSecondaryNoteLum","modSecondaryNoteLumScale","modPrimaryNoteHue","modPrimaryNoteHueScale","modPrimaryNoteSat","modPrimaryNoteSatScale","modPrimaryNoteLum","modPrimaryNoteLumScale","textContent","themes","themeColor","querySelector","resetColors","Map","dark classic","dark competition","light classic","jummbox classic","forest","canyon","midnight","microbox classic","jummbox light","pageMargin","editorBackground","hoverPreview","playhead","primaryText","secondaryText","invertedText","textSelection","boxSelectionFill","loopAccent","linkAccent","uiWidgetBackground","uiWidgetFocus","pitchBackground","tonic","fifthNote","whitePianoKey","blackPianoKey","useColorFormula","trackEditorBgPitch","trackEditorBgPitchDim","trackEditorBgNoise","trackEditorBgNoiseDim","trackEditorBgMod","trackEditorBgModDim","multiplicativeModSlider","overwritingModSlider","indicatorPrimary","indicatorSecondary","select2OptGroup","inputBoxOutline","muteButtonNormal","muteButtonMod","modLabelPrimary","modLabelSecondaryText","modLabelPrimaryText","head","navigator","userAgent","EditorConfig","presetValue","categoryIndex","presetIndex","presetCategories","presets","program","category","preset","generalMidi","midiProgram","presetName","factor","countBits","n","isPowerOf2","round","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","customType","settings","transition","effects","chord","filterCutoffHz","filterResonance","filterEnvelope","interval","vibrato","isNoise","algorithm","feedbackType","feedbackAmplitude","feedbackEnvelope","operators","frequency","envelope","customChipWave","harmonics","midiSubharmonicOctaves","pulseWidth","pulseEnvelope","spectrum","drums","Deque","_capacity","_buffer","undefined","_mask","_offset","_count","_expandCapacity","popFront","popBack","oldBuffer","size","base64IntToCharCode","base64CharCodeToInt","BitFieldReader","source","_bits","_readIndex","charCodeAt","minValue","minBits","numBits","readLongTail","read","BitFieldWriter","_index","writeLongTail","write","other","buffer","ceil","makeNotePin","time","clamp","max","val","validateRange","Note","pitch","start","end","fadeout","pitches","pins","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestVolume","pin","newNote","concat","Pattern","notes","instrument","note","clone","Operator","reset","SpectrumWave","isNoiseChannel","_wave","_waveIsReady","isHarmonic","lowestOctave","waveLength","highestOctave","falloffRatio","pitchTweak","controlPointToOctave","point","value1","value2","octave1","octave2","HarmonicsWave","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","Instrument","isModChannel","chipWave","chipNoise","filterCutoff","vibratoDepth","vibratoSpeed","vibratoDelay","vibratoType","pan","panDelay","arpeggioSpeed","fastTwoNoteArp","tieNoteTransition","clicklessTransition","detune","LFOtime","nextLFOtime","arpTime","customChipWaveIntegral","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modStatuses","modInstruments","modSettings","mod","ModStatus","msNone","ModSetting","mstNone","spectrumWave","instrumentObject","getChord","getFilterCutoffOctaves","getFilterEnvelope","getDrumsetEnvelope","operatorArray","operator","useSlowerRhythm","indexOf","valueOf","setTypeAndReset","oldTransitionNames","binary","sudden","smooth","transitionObject","findIndex","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","sustain sharp","sustain medium","sustain soft","decay sharp","legacyFilter","legacyEffectNames","drum","legacyWaveNames","triangle","square","pulse wide","pulse narrow","sawtooth","double saw","double pulse","spiky","plateau","legacyChorusNames","fifths","octaves","feedback","legacyEnvelopeNames","pluck 1","pluck 2","pluck 3","operatorObject","freq","frequencyFromPitch","drumsetIndexReferenceDelta","getCustomWave","_drumsetIndexToSpectrumOctave","Channel","octave","instruments","patterns","bars","muted","Song","string","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","mstMaxVols","mstSongVolume","mstTempo","mstReverb","mstNextBar","mstInsVolume","mstPan","mstFilterCut","mstFilterPeak","mstFMSlider1","mstFMSlider2","mstFMSlider3","mstFMSlider4","mstFMFeedback","mstPulseWidth","mstDetune","mstVibratoDepth","mstSongDetune","mstVibratoSpeed","mstVibratoDelay","mstArpeggioSpeed","mstPanDelay","mstResetArpeggio","mstMaxValue","mstNewNoteVols","getNewNoteVolume","isMod","modChannel","modInstrument","cap","realToModValue","tempo","getVolumeCap","getVolumeCapForSetting","modSetting","fromBase64String","initToDefault","setting","modChannelCount","andResetChannels","scale","loopStart","loopLength","reverb","beatsPerBar","barCount","patternsPerChannel","rhythm","instrumentsPerChannel","title","channelIndex","getChannelCount","pattern","bar","bits","_variant","_latestJummBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","o","spectrumBits","encodeBase64","harmonicsBits","neededBits","shapeBits","neededInstrumentBits","getChannelIsNoise","getChannelIsMod","instrumentIndex","modStatus","msForPitch","msForNoise","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","writePartDuration","writePinCount","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","splice","unshift","pop","allPitches","pitchIndex","pitchIter","writePitchInterval","stringLength","lengthBase64","digits","prototype","maxApplyArgs","slice","compressed","charIndex","fromJsonObject","JSON","parse","substring","variant","_latestBeepboxVersion","_oldestBeepboxVersion","_oldestJummBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","command","instrumentChannelIterator","instrumentIndexIterator","toSetOctaves","useSlowerArpSpeed","songNameLength","decodeURIComponent","window","localStorage","getItem","instrumentType","legacyWaves","legacyEffects","legacyEnvelopes","effect","originalValue","nextValue","channelNameLength","byteCount","markCustomWaveDirty","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","newPattern","newNotes","useOldShape","shape","pinObj","pinCount","readPinCount","initialVolume","bendCount","pitchBend","readLegacyPartDuration","readPartDuration","readPitchInterval","intervalIter","shift","isBackwards","restLength","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","toJsonObject","patternArray","noteArray","volumeCap","pointArray","useVol","tick","forMod","points","sequenceArray","l","octaveScrollBar","sequence","format","_format","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","oldScaleNames","romani :)","romani :(","enigma","scaleName","importedPartsPerBeat","maxInstruments","maxPatterns","maxBars","channelObject","newPitchChannels","newNoiseChannels","newModChannels","patternObject","maxNoteCount","noteObject","k","startInterval","pointObject","lowestPitch","highestPitch","patternIndex","getPattern","Tone","chordSize","drumsetPitch","prevNote","nextNote","prevNotePitchIndex","nextNotePitchIndex","active","noteStart","noteEnd","noteLengthTicks","ticksSinceReleased","liveInputSamplesHeld","lastInterval","lastVolume","stereoVolume1","stereoVolume2","stereoOffset","stereoDelay","sample","phases","phaseDeltas","volumeStarts","volumeDeltas","volumeStart","volumeDelta","phaseDeltaScale","pulseWidthDelta","filter","filterScale","filterSample0","filterSample1","vibratoScale","intervalMult","intervalVolumeMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","Synth","samplesPerSecond","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","loopRepeatCount","wantToSkip","playheadInternal","beat","part","tickSampleCountdown","isPlayingSong","liveInputEndTime","tonePool","activeTones","tyingOver","activeModTones","releasedTones","liveInputTones","limit","stereoBufferIndex","samplesForNone","samplesForReverb","samplesForChorus","samplesForChorusReverb","chorusDelayLine","chorusDelayPos","chorusPhase","reverbDelayLine","reverbDelayPos","reverbFeedback0","reverbFeedback1","reverbFeedback2","reverbFeedback3","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","synthesize","deactivateAudio","setSong","getInstrumentSynthFunction","warmUp","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","currentPart","currentBar","instrumentIdx","getPatternInstrument","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","msForSong","setModValue","playing","remainder","samplesPerTick","getSamplesPerTick","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","modValueToReal","ended","totalSamples","foundMod","find","sort","a","b","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getSamplesPerBar","getTotalBars","useLoopCount","volumeEnd","nextVal","channelAdjust","forSong","isModActive","AudioContext","webkitAudioContext","sampleRate","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","activateAudio","warmUpSynthesizer","computeLatestModValues","snapToBar","freeAllTones","oldBar","outputBufferLength","playSong","channelCount","idx","bufferIndex","pause","stereoBufferLength","chorusAngle","chorusRange","chorusOffset0","chorusOffset1","chorusOffset2","chorusOffset3","chorusOffset4","chorusOffset5","useReverb","getModValue","samplesLeftInBuffer","runLength","determineCurrentActiveTones","count","tone","playTone","skipBar","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","determineLiveInputTones","getTransition","freeReleasedTone","shouldFadeOutFast","chorusTap0Index","chorusTap1Index","chorusTap2Index","chorusTap3Index","chorusTap4Index","chorusTap5Index","chorusTap0Delta","chorusTap1Delta","chorusTap2Delta","chorusTap3Delta","chorusTap4Delta","chorusTap5Delta","runEnd","bufferIndexL","bufferIndexR","sampleForNoneL","sampleForNoneR","sampleForReverbL","sampleForReverbR","sampleForChorusL","sampleForChorusR","sampleForChorusReverbL","sampleForChorusReverbR","combinedChorusL","combinedChorusR","chorusTap0Ratio","chorusTap1Ratio","chorusTap2Ratio","chorusTap3Ratio","chorusTap4Ratio","chorusTap5Ratio","chorusTap0A","chorusTap0B","chorusTap1A","chorusTap1B","chorusTap2A","chorusTap2B","chorusTap3A","chorusTap3B","chorusTap4A","chorusTap4B","chorusTap5A","chorusSampleL","chorusSampleR","reverbDelayPos1","reverbDelayPos2","reverbDelayPos3","reverbSample0","reverbSample1","reverbSample2","reverbSample3","reverbTemp0","reverbTemp1","reverbTemp2","reverbTemp3","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","Number","isInteger","atEnd","carryOver","toneCount","targetBar","nextPattern","currNote","currVolume","p","releaseTone","freeTone","remove","resetEffects","epsilon","pushBack","pushFront","toneIndex","toneList","newTone","modChannelIdx","prevNotes","nextNotes","fillCount","syncTones","peakBack","noteStartAdjust","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","synthBuffer","computeTone","synthesizer","beats","customVolume","attack","synth","chordVolume","computeChordVolume","intervalScale","secondsPerPart","beatsPerPart","toneWasActive","treatAsSeamless","startPan","endPan","startPanDelay","endPanDelay","useStartPan","useEndPan","maxDelayStart","maxDelayEnd","delayEnd","stereoVolumeLEnd","stereoVolumeREnd","volumeReferencePitch","baseVolume","pitchDamping","resetPhases","partsSinceStart","intervalStart","intervalEnd","transitionVolumeStart","transitionVolumeEnd","chordVolumeStart","chordVolumeEnd","decayTimeStart","decayTimeEnd","ticksSoFar","startTicksSinceReleased","endTicksSinceReleased","startTick","endTick","toneTransition","expressionToVolumeMult","heldTicksStart","heldTicksEnd","heldPartsStart","heldPartsEnd","partsPerBar","endPinIndex","startPin","endPin","noteStartTick","pinStart","pinEnd","tickTimeStart","tickTimeEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","customVolumeTickStart","customVolumeTickEnd","transitionVolumeTickStart","transitionVolumeTickEnd","chordVolumeTickStart","chordVolumeTickEnd","intervalTickStart","intervalTickEnd","decayTimeTickStart","decayTimeTickEnd","maximumSlideTicks","slideRatioStartTick","slideRatioEndTick","intervalDiff","volumeDiff","decayTimeDiff","chordSizeDiff","sampleTime","lfoEffectStart","getLFOAmplitude","lfoEffectEnd","partsStart","partsEnd","useVibratoStart","useVibratoEnd","activeVibratoDelayMods","vibratoDelayStart","vibratoDelayEnd","MAX_VALUE","instrumentVolumeMult","instrumentVolumeToVolumeMult","pickMainInterval","cutoffOctavesModStart","cutoffOctavesModEnd","filterCutModStart","filterCutModEnd","filterCutoffHzStart","filterCutoffHzEnd","filterBaseStart","filterBaseEnd","filterMin","computeEnvelope","endFilter","filterVolumeStart","filterVolumeEnd","getFilterResonance","useFilterResonanceStart","useFilterResonanceEnd","filterResonanceEnd","sineVolumeBoostStart","sineVolumeBoostEnd","totalCarrierVolumeStart","totalCarrierVolumeEnd","arpeggioInterval","detuneStart","detuneEnd","associatedCarrierIndex","freqMult","startFreq","amplitudeStart","amplitudeEnd","amplitudeCurveStart","operatorAmplitudeCurve","amplitudeCurveEnd","startVal","endVal","endPitch","pitchVolumeStart","pitchVolumeEnd","operatorEnvelope","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","volumeMult","intervalOffset","settingsVolumeMultStart","settingsVolumeMultEnd","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulators","modulatorNumber","feedbackIndices","Function","chipSynth","harmonicsSynth","pulseWidthSynth","noiseSynth","spectrumSynth","drumsetSynth","modSynth","data","volumeScale","intervalA","intervalB","intervalSign","deltaRatio","phaseDeltaA","phaseDeltaB","phaseA","phaseB","filter1","filter2","filterScale1","filterScale2","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","prevWaveIntegralA","prevWaveIntegralB","delays","stereoVolumeL","stereoVolumeR","nextWaveIntegralA","nextWaveIntegralB","waveA","waveB","output","phaseDelta","phase","sawPhaseA","sawPhaseB","pulseWave","t","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","phaseRatio","getDrumsetWave","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","slope","instrumentVolume","expression","getBeatsPerMinute","beatsPerSecond","partsPerSecond","tickPerSecond","button","div","h1","input","svg","circle","rect","path","setTheme","animationRequest","prevHash","id","toString","pauseButtonDisplayed","zoomEnabled","timelineWidth","outVolumeHistoricTimer","outVolumeHistoricCap","titleText","editLink","target","copyLink","href","shareLink","fullscreenLink","draggingPlayhead","playButton","playButtonContainer","loopIcon","d","loopButton","width","height","viewBox","volumeIcon","fill","volumeSlider","step","zoomIcon","cx","cy","r","stroke-width","stroke","zoomButton","timeline","timelineContainer","visualizationContainer","outVolumeBarBg","pointer-events","x","y","outVolumeBar","stop1","stop","stop-color","stop2","stop3","gradient","linearGradient","gradientUnits","defs","volumeBarContainer","preserveAspectRatio","hashUpdatedExternally","myHash","location","hash","charAt","parameter","equalsIndex","paramName","snapToStart","renderLoopIcon","renderTimeline","animate","requestAnimationFrame","onTogglePlay","renderPlayhead","volumeUpdate","renderPlayButton","useOutVolumeCap","historicOutCap","cancelAnimationFrame","play","setItem","onTimelineMouseMove","event","preventDefault","onTimelineCursorMove","clientX","pageX","onTimelineTouchMove","touches","mouseX","boundingRect","getBoundingClientRect","left","right","onTimelineCursorUp","setSynthVolume","pos","scrollLeft","innerHTML","timelineHeight","windowOctaves","windowPitchCount","semitoneHeight","targetBeatWidth","targetSemitoneHeight","barWidth","partWidth","wavePitchHeight","drumPitchHeight","color","opacity","pitchHeight","configuredOctaveScroll","octavesToMove","newScrollableOctaves","newCenter","distanceFromCenter","offsetY","offsetX","drawNote","noteElement","radius","classList","add","innerText","renderZoomIcon","body","top","self","display","addEventListener","keyCode","prevBar","nextBar","nav","clipboard","writeText","catch","prompt","textField","select","succeeded","execCommand","share","url"],"mappings":";;;;;;;;;;;;;;;;;;;;;YAmJaA,GAgSb,SAASC,EAAWC,GACnB,IAAIC,EAAc,EAClB,IAAK,IAAIC,EAAY,EAAGA,EAAIF,EAAKG,OAAQD,IACxCD,GAAOD,EAAKE,GAEb,MAAME,EAAkBH,EAAMD,EAAKG,OAGnC,IAAIE,EAAqB,EACrBC,EAAmB,EACvB,IAAK,IAAIJ,EAAY,EAAGA,EAAIF,EAAKG,OAAQD,IACxCG,GAAcC,EACdA,EAAWN,EAAKE,GAAKE,EACrBJ,EAAKE,GAAKG,EAIX,OADAL,EAAKO,KAAK,GACH,IAAIC,aAAaR,GAGzB,SAASS,EAAuBT,GAC/B,IAAIC,EAAc,EACdS,EAAe,EACnB,IAAK,IAAIR,EAAY,EAAGA,EAAIF,EAAKG,OAAQD,IACxCD,GAAOD,EAAKE,GACZQ,GAAQC,KAAKC,IAAIZ,EAAKE,IAEvB,MAAME,EAAkBH,EAAMD,EAAKG,OAC7BU,EAAkBH,EAAOV,EAAKG,OAGpC,IAAIE,EAAqB,EACrBC,EAAmB,EACvB,IAAK,IAAIJ,EAAY,EAAGA,EAAIF,EAAKG,OAAQD,IACxCG,GAAcC,EACdA,GAAYN,EAAKE,GAAKE,GAAO,EAC7BJ,EAAKE,GAAKG,EAIX,OADAL,EAAKO,KAAK,GACH,IAAIC,aAAaR,YASTc,EAAYC,EAAeC,EAA+C,KAAMC,EAAyC,MACxI,IAAIjB,EAA4BF,EAAOoB,WAAWH,GAAOI,QACzD,GAAY,MAARnB,EAAc,CAIjB,GAHAA,EAAO,IAAIoB,aAAatB,EAAOuB,gBAAkB,GACjDvB,EAAOoB,WAAWH,GAAOI,QAAUnB,EAEtB,GAATe,EAAY,CAEf,IAAIO,EAAqB,EACzB,IAAK,IAAIpB,EAAY,EAAGA,EAAIJ,EAAOuB,gBAAiBnB,IAAK,CACxDF,EAAKE,GAAwB,GAAL,EAAboB,GAAwB,EACnC,IAAIC,EAAoBD,GAAc,EACA,IAAhCA,EAAaC,EAAa,KAC/BA,GAAa,OAEdD,EAAaC,QAER,GAAa,GAATR,EAEV,IAAK,IAAIb,EAAY,EAAGA,EAAIJ,EAAOuB,gBAAiBnB,IACnDF,EAAKE,GAAqB,EAAhBS,KAAKa,SAAiB,OAE3B,GAAa,GAATT,EAAY,CAEtB,IAAIO,EAAqB,EACzB,IAAK,IAAIpB,EAAY,EAAGA,EAAIJ,EAAOuB,gBAAiBnB,IAAK,CACxDF,EAAKE,GAAwB,GAAL,EAAboB,GAAwB,EACnC,IAAIC,EAAoBD,GAAc,EACA,IAAhCA,EAAaC,EAAa,KAC/BA,GAAa,OAEdD,EAAaC,QAER,GAAa,GAATR,EAAY,CAEtB,IAAIO,EAAqB,EACzB,IAAK,IAAIpB,EAAY,EAAGA,EAAIJ,EAAOuB,gBAAiBnB,IAAK,CACxDF,EAAKE,GAAwB,GAAL,EAAboB,GAAwB,EACnC,IAAIC,EAAoBD,GAAc,EACA,IAAhCA,EAAaC,EAAa,KAC/BA,GAAa,IAEdD,EAAaC,QAER,GAAa,GAATR,EAEVU,EAAkBzB,EAAM,GAAI,GAAI,EAAG,EAAG,GACtCyB,EAAkBzB,EAAM,GAAI,GAAI,MAAO,MAAO,GAC9CgB,EAA6BhB,EAAMF,EAAOuB,iBAC1CJ,EAAuBjB,EAAM,EAAMW,KAAKe,KAAK5B,EAAOuB,uBAC9C,GAAa,GAATN,EAGV,IADA,IAAIO,EAAa,EACRpB,EAAI,EAAGA,EAAIJ,EAAOuB,gBAAiBnB,IAAK,CAChDF,EAAKE,GAAwB,GAAL,EAAboB,GAAwB,EAEG,IAAhCA,GADFC,EAAYD,GAAc,GACE,KAC/BC,GAAa,IAEdD,EAAaC,OAER,GAAa,GAATR,EAEVU,EAAkBzB,EAAM,EAAG,GAAI,EAAG,EAAG,GACrCyB,EAAkBzB,EAAM,GAAI,IAAK,GAAI,EAAG,GACxCgB,EAA6BhB,EAAMF,EAAOuB,iBAC1CJ,EAAuBjB,EAAM,EAAMW,KAAKe,KAAK5B,EAAOuB,uBAC9C,GAAa,GAATN,EAGV,IADIO,EAAa,EACRpB,EAAI,EAAGA,EAAIJ,EAAOuB,gBAAiBnB,IAAK,CAChDF,EAAKE,GAAwB,GAAL,EAAboB,IAAyC,GAAhBX,KAAKa,SAAgB,GAEnB,IAAhCF,GADFC,EAAYD,GAAc,GACE,KAC/BC,GAAa,IAEdD,EAAaC,MAER,CAAA,GAAa,GAATR,EAYV,MAAM,IAAIY,MAAM,4BAA8BZ,GAT9C,IADIO,EAAa,EACRpB,EAAI,EAAGA,EAAI,MAAOA,IAAK,CAE/B,IAAIqB,EADJvB,EAAKE,IAAmB,EAAboB,GAAkB,EAAM,GAEG,IAAhCA,GADFC,EAAYD,GAAc,GACE,KAC/BC,GAAa,IAEdD,EAAaC,GAMfvB,EAAKF,EAAOuB,iBAAmBrB,EAAK,GAGrC,OAAOA,WAGQyB,EAAkBzB,EAAoB4B,EAAmBC,EAAoBC,EAAkBC,EAAmBC,GACjI,MAEMC,EAA4C,EAAzBtB,KAAKuB,IAAI,EAAGN,GAC/BO,EAAoBxB,KAAKyB,IAAItC,EAAOuB,iBAAmB,EAA6B,EAA1BV,KAAKuB,IAAI,EAAGL,IACtEQ,EAA0BvB,EAAY,GAC5C,IAAIwB,EAA4B,EAChC,IAAK,IAAIpC,EAAY+B,EAAU/B,EAAIiC,EAAWjC,IAAK,CAElD,IAAIqC,EAAiBT,GAAYC,EAAYD,IAAanB,KAAK6B,IAAItC,GAAKS,KAAK8B,IAAMb,IAAcC,EAAaD,GAG1Gc,EAAoB/B,KAAKuB,IAAI,GAAIK,EAAS,GAAKzC,EAAO6C,YAAc,GAAKJ,EAE7EG,GAAa/B,KAAKuB,IAAIhC,EAZQ,KAYY8B,GAE1CM,GAAqBI,EAQrBA,GAAaL,EAAUnC,GACvB,MAAM0C,EAAkB,aAAgB1C,EAAIA,EAAIS,KAAKkC,GAAK,EAE1D7C,EAAKE,GAAKS,KAAKmC,IAAIF,GAAWF,EAC9B1C,EAAKF,EAAOuB,gBAAkBnB,GAAKS,KAAKoC,IAAIH,GAAWF,EAGxD,OAAOJ,WAWQU,EAAsBC,EAAoBC,EAA4BC,GACrF,IAAIC,EAAyCtD,EAAOuD,iBAAiBJ,EAAa,GAClF,OAAuB,MAAnBG,GACe,GAAdH,GAAwC,GAArBC,IACtBE,EAAkB,CAAC,EAAG,EAAG,EAAG,IAEtBA,EAAgBD,EAAWC,EAAgBjD,SAE3CgD,EAAWF,WAKJK,EAAmCC,GAClD,MAAMC,EAA4B,GAClC,IAAK,IAAItD,EAAY,EAAGA,EAAIqD,EAAMpD,OAAQD,IAAK,CAC9C,MAAMuD,EAAaF,EAAMrD,GACzBuD,EAAM1C,MAAQb,EACdsD,EAAWC,EAAMC,MAAWD,EAE7B,MAAME,EAAsDJ,EAE5D,OADAI,EAAOH,WAAaA,EACbG,EAlfO7D,EAAA8D,cAAwB,GACxB9D,EAAA+D,QAAkB,GAClB/D,EAAAgE,SAAmB,GACnBhE,EAAAiE,UAAoB,EACpBjE,EAAAkE,WAAqB,IAEZlE,EAAAmE,OAAiCX,EAAU,CAGjE,CAAEI,KAAM,OAAQQ,SAAU,YAAaC,MAAO,EAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IACjH,CAAET,KAAM,QAASQ,SAAU,SAAUC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,IACpH,CAAET,KAAM,QAASQ,SAAU,UAAWC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,IACpH,CAAET,KAAM,aAAcQ,SAAU,aAAcC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,IAC5H,CAAET,KAAM,SAAUQ,SAAU,SAAUC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,IACrH,CAAET,KAAM,SAAUQ,SAAU,SAAUC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,IACpH,CAAET,KAAM,WAAYQ,SAAU,WAAYC,MAAO,EAAC,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,IACxH,CAAET,KAAM,UAAWQ,SAAU,UAAWC,MAAO,EAAC,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,IACtH,CAAET,KAAM,kBAAmBQ,SAAU,kBAAmBC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAM,IACtI,CAAET,KAAM,oBAAqBQ,SAAU,oBAAqBC,MAAO,EAAC,GAAM,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,IAC1I,CAAET,KAAM,iBAAkBQ,SAAU,iBAAkBC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,IACrI,CAAET,KAAM,iBAAkBQ,SAAU,iBAAkBC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GAAO,IACrI,CAAET,KAAM,gBAAiBQ,SAAU,gBAAiBC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,IACnI,CAAET,KAAM,QAASQ,SAAU,QAASC,MAAO,EAAC,GAAM,GAAO,GAAO,GAAM,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GAAM,IACnH,CAAET,KAAM,UAAWQ,SAAU,UAAWC,MAAO,EAAC,GAAM,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,IACtH,CAAET,KAAM,mBAAoBQ,SAAU,mBAAoBC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAO,GAAM,GAAO,GAAM,GAAO,IAC1I,CAAET,KAAM,mBAAoBQ,SAAU,mBAAoBC,MAAO,EAAC,GAAM,GAAO,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAO,GAAM,IAC1I,CAAET,KAAM,aAAcQ,SAAU,aAAcC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,IAC7H,CAAET,KAAM,YAAaQ,SAAU,YAAaC,MAAO,EAAC,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAM,GAAO,IAC1H,CAAET,KAAM,YAAaQ,SAAU,YAAaC,MAAO,EAAC,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GAAO,GAAM,GAAM,GAAO,GAAO,MAItGrE,EAAAsE,KAA6Bd,EAAU,CAC7D,CAAEI,KAAM,IAAKW,YAAY,EAAMC,UAAW,GAC1C,CAAEZ,KAAM,IAAKW,YAAY,EAAOC,UAAW,GAC3C,CAAEZ,KAAM,IAAKW,YAAY,EAAMC,UAAW,GAC1C,CAAEZ,KAAM,IAAKW,YAAY,EAAOC,UAAW,GAC3C,CAAEZ,KAAM,IAAKW,YAAY,EAAMC,UAAW,GAC1C,CAAEZ,KAAM,IAAKW,YAAY,EAAMC,UAAW,GAC1C,CAAEZ,KAAM,IAAKW,YAAY,EAAOC,UAAW,GAC3C,CAAEZ,KAAM,IAAKW,YAAY,EAAMC,UAAW,GAC1C,CAAEZ,KAAM,IAAKW,YAAY,EAAOC,UAAW,GAC3C,CAAEZ,KAAM,IAAKW,YAAY,EAAMC,UAAW,GAC1C,CAAEZ,KAAM,IAAKW,YAAY,EAAOC,UAAW,IAC3C,CAAEZ,KAAM,IAAKW,YAAY,EAAMC,UAAW,MAGpBxE,EAAAyE,oBAA6C,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3FzE,EAAA0E,SAAmB,GACnB1E,EAAA2E,SAAmB,IACnB3E,EAAA4E,YAAsB,GACtB5E,EAAA6E,eAAyB,EACzB7E,EAAA8E,eAAyB,GACzB9E,EAAA+E,YAAsB,EACtB/E,EAAAgF,YAAsB,IACtBhF,EAAAiF,yBAAmC,EACnCjF,EAAAkF,yBAAmC,GACnClF,EAAAmF,aAAuB,GACvBnF,EAAAoF,aAAuB,EACvBpF,EAAAqF,iBAA2B,EAC3BrF,EAAAuD,iBAAyD,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACrLvD,EAAAsF,QAAmC9B,EAAU,CAGnE,CAAEI,KAAM,gBAAiB2B,aAAc,EAA8FC,kBAAmB,CAAO,EAAS,GAAW,KACnL,CAAE5B,KAAM,gBAAiB2B,aAAc,EAA8FC,kBAAmB,CAAO,EAAS,EAAU,GAAW,KAC7L,CAAE5B,KAAM,KAAM2B,aAAc,EAAwFC,kBAAmB,MACvI,CAAE5B,KAAM,KAAM2B,aAAc,EAAwFC,kBAAmB,MACvI,CAAE5B,KAAM,KAAM2B,aAAc,EAAwFC,kBAAmB,MACvI,CAAE5B,KAAM,KAAM2B,aAAc,EAAwFC,kBAAmB,MACvI,CAAE5B,KAAM,MAAO2B,aAAc,GAAyFC,kBAAmB,MACzI,CAAE5B,KAAM,MAAO2B,aAAc,GAAyFC,kBAAmB,MACzI,CAAE5B,KAAM,iBAAkB2B,aAAc,GAAyFC,kBAAmB,QAG9HxF,EAAAyF,oBAA6C,CAAC,OAAQ,KAAM,QAAS,WAAY,UAAW,YAAa,MAAO,cAAe,OAC/HzF,EAAA0F,iCAA2D,EAAC,GAAM,GAAM,GAAO,GAAO,GAAO,GAAM,GAAO,GAC1G1F,EAAA2F,UAAuCnC,EAAU,CACvE,CAAEI,KAAM,UAAWgC,OAAQ,IAAMvE,QAASpB,EAAW,CAAC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAAM,GAAK,IAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,IAAM,GAAK,IAAM,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAAO,IAAM,KAAO,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,KAAO,IAAM,KAAO,IAAM,IAAM,IAAM,IAAM,IAAM,MACtZ,CAAE2D,KAAM,WAAYgC,OAAQ,EAAKvE,QAASpB,EAAW,CAAC,EAAM,GAAM,GAAY,EAAM,GAAM,EAAM,GAAM,GAAY,GAAO,GAAM,GAAO,GAAM,EAAa,EAAa,GAAO,GAAM,GAAO,GAAM,GAAY,EAAM,GAAM,EAAM,GAAM,GAAY,EAAM,IAAO,EAAM,IAAM,IAAc,EAAM,IAAO,EAAM,IAAM,IAAc,GAAO,IAAO,GAAO,IAAM,GAAc,GAAe,GAAO,IAAO,GAAO,IAAM,IAAc,EAAM,IAAO,EAAM,IAAM,IAAc,EAAM,MAC5c,CAAE2D,KAAM,SAAUgC,OAAQ,GAAKvE,QAASpB,EAAW,CAAC,GAAM,KAC1D,CAAE2D,KAAM,YAAagC,OAAQ,GAAKvE,QAASpB,EAAW,CAAC,GAAM,GAAM,GAAM,KACzE,CAAE2D,KAAM,YAAagC,OAAQ,GAAKvE,QAASpB,EAAW,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,KACjG,CAAE2D,KAAM,WAAYgC,OAAQ,IAAMvE,QAASpB,EAAW,CAAC,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAAM,GAAa,GAAe,GAAO,IAAO,GAAO,IAAO,GAAO,IAAO,GAAO,IAAO,GAAO,IAAO,GAAO,IAAO,GAAO,IAAO,GAAO,IAAO,GAAO,IAAO,GAAO,IAAO,EAAM,IAAO,EAAM,IAAO,EAAM,IAAO,EAAM,IAAO,EAAM,MACvd,CAAE2D,KAAM,aAAcgC,OAAQ,GAAKvE,QAASpB,EAAW,CAAC,GAAM,IAAM,IAAM,IAAM,IAAM,EAAK,GAAM,IAAM,IAAM,IAAM,GAAK,EAAK,GAAK,GAAK,GAAK,MAC5I,CAAE2D,KAAM,eAAgBgC,OAAQ,GAAKvE,QAASpB,EAAW,CAAC,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,GAAM,KAC5I,CAAE2D,KAAM,QAASgC,OAAQ,GAAKvE,QAASpB,EAAW,CAAC,GAAM,EAAK,GAAM,EAAK,EAAK,KAC9E,CAAE2D,KAAM,OAAQgC,OAAQ,IAAMvE,QAASV,EAAuB,CAAC,EAAK,EAAK,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KACvO,CAAEiD,KAAM,QAASgC,OAAQ,GAAKvE,QAASV,EAAuB,CAAC,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAK,EAAK,KACnJ,CAAEiD,KAAM,OAAQgC,OAAQ,GAAKvE,QAASV,EAAuB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KACnO,CAAEiD,KAAM,iBAAkBgC,OAAQ,IAAMvE,QAASV,EAAuB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KACrO,CAAEiD,KAAM,gBAAiBgC,OAAQ,IAAMvE,QAASV,EAAuB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KACzO,CAAEiD,KAAM,WAAYgC,OAAQ,GAAKvE,QAASV,EAAuB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KACrO,CAAEiD,KAAM,UAAWgC,OAAQ,IAAMvE,QAASV,EAAuB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,MACpO,CAAEiD,KAAM,UAAWgC,OAAQ,IAAMvE,QAASV,EAAuB,CAAC,GAAM,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,MAChO,CAAEiD,KAAM,kBAAmBgC,OAAQ,GAAKvE,QAASV,EAAuB,CAAC,GAAM,GAAM,GAAM,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,EAAK,GAAM,EAAK,EAAK,GAAM,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,EAAK,EAAK,GAAM,EAAK,EAAK,GAAM,GAAM,GAAM,MACjP,CAAEiD,KAAM,QAASgC,OAAQ,GAAKvE,QAASV,EAAuB,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,EAAK,GAAM,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,GAAM,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KACxO,CAAEiD,KAAM,YAAagC,OAAQ,IAAMvE,QAASV,EAAuB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAK,EAAK,EAAK,EAAK,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KAC1O,CAAEiD,KAAM,SAAUgC,OAAQ,GAAKvE,QAASpxrCD,EAAAoB,WAAyCoC,EAAU,CACzE,CAAEI,KAAM,QAASgC,OAAQ,IAAMpB,UAAW,GAAIqB,gBAAiB,KAAQC,QAAQ,EAAOzE,QAAS,MAC/F,CAAEuC,KAAM,QAASgC,OAAQ,EAAKpB,UAAW,GAAIqB,gBAAiB,EAAKC,QAAQ,EAAMzE,QAAS,MAE1F,CAAEuC,KAAM,QAASgC,OAAQ,GAAKpB,UAAW,GAAIqB,gBAAiB,KAAQC,QAAQ,EAAOzE,QAAS,MAC9F,CAAEuC,KAAM,OAAQgC,OAAQ,GAAKpB,UAAW,GAAIqB,gBAAiB,KAAQC,QAAQ,EAAOzE,QAAS,MAC7F,CAAEuC,KAAM,SAAUgC,OAAQ,IAAKpB,UAAW,GAAIqB,gBAAiB,EAAKC,QAAQ,EAAMzE,QAAS,MAC3F,CAAEuC,KAAM,QAASgC,OAAQ,EAAKpB,UAAW,GAAIqB,gBAAiB,KAAQC,QAAQ,EAAOzE,QAAS,MAC9F,CAAEuC,KAAM,OAAQgC,OAAQ,IAAKpB,UAAW,IAAKqB,gBAAiB,KAAQC,QAAQ,EAAMzE,QAAS,MAC7F,CAAEuC,KAAM,SAAUgC,OAAQ,KAAOpB,UAAW,GAAIqB,gBAAiB,KAAQC,QAAQ,EAAOzE,QAAS,MACjG,CAAEuC,KAAM,WAAYgC,OAAQ,EAAKpB,UAAW,GAAIqB,gBAAiB,KAAQC,QAAQ,EAAOzE,QAAS,QAE3ErB,EAAA+F,kBAA4B,IAC5B/F,EAAAgG,kBAA4B,EAC5BhG,EAAAiG,UAAoB,IACpBjG,EAAAkG,mBAA6B,IAC7BlG,EAAAmG,kBAA4B,GAC5BnG,EAAAoG,qBAA+B,EAC/BpG,EAAAqG,YAA2C7C,EAAU,CAC3E,CAAEI,KAAM,WAAY0C,YAAY,EAAMC,cAAe,EAAKC,UAAU,EAAOC,aAAc,EAAGC,QAAQ,EAAOC,WAAY,GACvH,CAAE/C,KAAM,OAAQ0C,YAAY,EAAOC,cAAe,EAAKC,UAAU,EAAOC,aAAc,EAAGC,QAAQ,EAAOC,WAAY,GACpH,CAAE/C,KAAM,OAAQ0C,YAAY,EAAOC,cAAe,KAAOC,UAAU,EAAOC,aAAc,EAAGC,QAAQ,EAAOC,WAAY,GACtH,CAAE/C,KAAM,QAAS0C,YAAY,EAAMC,cAAe,KAAOC,UAAU,EAAOC,aAAc,EAAGC,QAAQ,EAAMC,WAAY,GACrH,CAAE/C,KAAM,aAAc0C,YAAY,EAAOC,cAAe,IAAMC,UAAU,EAAMC,aAAc,EAAGC,QAAQ,EAAOC,WAAY,GAC1H,CAAE/C,KAAM,YAAa0C,YAAY,EAAOC,cAAe,EAAKC,UAAU,EAAMC,aAAc,GAAIC,QAAQ,EAAOC,WAAY,GACzH,CAAE/C,KAAM,cAAe0C,YAAY,EAAOC,cAAe,MAAQC,UAAU,EAAMC,aAAc,GAAIC,QAAQ,EAAOC,WAAY,GAC9H,CAAE/C,KAAM,YAAa0C,YAAY,EAAOC,cAAe,IAAMC,UAAU,EAAMC,aAAc,GAAIC,QAAQ,EAAOC,WAAY,KAEpG3G,EAAA4G,SAAqCpD,EAAU,CACrE,CAAEI,KAAM,OAAQhB,UAAW,EAAKiE,KAAM,EAAGC,WAAY,GACrD,CAAElD,KAAM,QAAShB,UAAW,IAAMiE,KAAM,EAAGC,WAAY,GACvD,CAAElD,KAAM,UAAWhB,UAAW,GAAKiE,KAAM,EAAGC,WAAY,IACxD,CAAElD,KAAM,QAAShB,UAAW,IAAMiE,KAAM,EAAGC,WAAY,GACvD,CAAElD,KAAM,QAAShB,UAAW,GAAKiE,KAAM,EAAGC,WAAY,KAEhC9G,EAAA+G,aAA6CvD,EAAU,CAC7E,CAAEI,KAAM,SAAUoD,eAAgB,CAAC,KAAOC,OAAQ,KAClD,CAAErD,KAAM,QAASoD,eAAgB,CAAC,IAAM,OAAc,KAAWC,OAAQ,UAInDjH,EAAAkH,cAAuC,CAAC,EAAG,MAAQ,KAAO,GAAK,IAAM,EAAI,EAAG,GAAK,GAAK,EAAI,EAAG,IAAM,GAAK,GAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,GAChSlH,EAAAmH,UAAuC3D,EAAU,CACvE,CAAEI,KAAM,QAASwD,OAAQ,EAAKC,OAAQ,EAAKzB,OAAQ,GAAK0B,KAAM,GAC9D,CAAE1D,KAAM,UAAWwD,OAAQ,KAAOC,OAAQ,EAAKzB,OAAQ,GAAK0B,KAAM,GAClE,CAAE1D,KAAM,MAAOwD,OAAQ,KAAOC,OAAQ,EAAKzB,OAAQ,EAAK0B,KAAM,GAC9D,CAAE1D,KAAM,aAAcwD,OAAQ,IAAMC,OAAQ,EAAKzB,OAAQ,EAAK0B,KAAM,GACpE,CAAE1D,KAAM,YAAawD,OAAQ,IAAMC,OAAQ,EAAKzB,OAAQ,GAAK0B,KAAM,GACnE,CAAE1D,KAAM,QAASwD,OAAQ,IAAKC,OAAQ,IAAKzB,OAAQ,GAAK0B,KAAM,GAC9D,CAAE1D,KAAM,SAAUwD,OAAQ,EAAKC,OAAQ,EAAKzB,OAAQ,GAAK0B,KAAM,GAC/D,CAAE1D,KAAM,QAASwD,OAAQ,IAAMC,OAAQ,EAAKzB,OAAQ,EAAK0B,MAAO,GAChE,CAAE1D,KAAM,QAASwD,OAAQ,IAAMC,OAAQ,EAAKzB,OAAQ,EAAK0B,KAAM,MAEzCtH,EAAAuH,aAAsC,CAAC,OAAQ,SAAU,SAAU,mBACnEvH,EAAAwH,YAAsB,GAGtBxH,EAAAyH,eAAyB,MACzBzH,EAAA0H,UAAoB,GACpB1H,EAAA2H,OAAoC,EAAnB3H,EAAO0H,UACxB1H,EAAA4H,WAAqB,GACrB5H,EAAA6H,UAAoB,GACpB7H,EAAA8H,eAAyB,IACzB9H,EAAA+H,cAAwB,IACxB/H,EAAAgI,OAAiCxE,EAAU,CACjE,CAAEI,KAAM,UAAWqE,YAAY,EAAMC,gBAAgB,EAAOC,aAAa,EAAOC,kBAAkB,EAAOC,WAAY,GACrH,CAAEzE,KAAM,QAASqE,YAAY,EAAMC,gBAAgB,EAAOC,aAAa,EAAOC,kBAAkB,EAAOC,WAAY,GACnH,CAAEzE,KAAM,WAAYqE,YAAY,EAAOC,gBAAgB,EAAOC,aAAa,EAAMC,kBAAkB,EAAOC,WAAY,GACtH,CAAEzE,KAAM,kBAAmBqE,YAAY,EAAMC,gBAAgB,EAAMC,aAAa,EAAMC,kBAAkB,EAAMC,WAAY,KAEpGrI,EAAAsI,aAAuB,EACvBtI,EAAAuI,cAAwB,EACxBvI,EAAAwI,WAAyChF,EAAU,CACzE,CAAEI,KAAM,YAAa6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,KACxG,CAAE/E,KAAM,YAAa6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,GAAI,CAAC,GAAI,KACtG,CAAE/E,KAAM,YAAa6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,KACtG,CAAE/E,KAAM,YAAa6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,CAAC,GAAI,KACvG,CAAE/E,KAAM,UAAW6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KAClG,CAAE/E,KAAM,UAAW6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,KACjG,CAAE/E,KAAM,YAAa6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,KACrG,CAAE/E,KAAM,UAAW6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACjG,CAAE/E,KAAM,YAAa6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACpG,CAAE/E,KAAM,cAAe6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,GAAI,KAC3G,CAAE/E,KAAM,UAAW6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,CAAC,GAAI,KAChG,CAAE/E,KAAM,YAAa6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACpG,CAAE/E,KAAM,UAAW6E,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,GAAI,OAEzE3I,EAAA4I,wBAAiD,CAAC,EAAK,KAAO,KAAO,MACrE5I,EAAA6I,qBAA+B,GAC/B7I,EAAA8I,oBAA0DtF,EAAU,CAC1F,CAAEI,KAAM,KAAMmF,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAErF,KAAM,MAAOmF,KAAM,EAAKC,SAAU,IAAKC,eAAgB,GACzD,CAAErF,KAAM,KAAMmF,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAErF,KAAM,MAAOmF,KAAM,EAAKC,UAAW,IAAKC,eAAgB,GAC1D,CAAErF,KAAM,KAAMmF,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAErF,KAAM,KAAMmF,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAErF,KAAM,KAAMmF,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAErF,KAAM,KAAMmF,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAErF,KAAM,KAAMmF,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAErF,KAAM,KAAMmF,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAErF,KAAM,KAAMmF,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAErF,KAAM,MAAOmF,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAErF,KAAM,MAAOmF,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAErF,KAAM,MAAOmF,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAErF,KAAM,MAAOmF,KAAM,GAAMC,SAAU,EAAKC,cAAe,KAEnCjJ,EAAAkJ,UAAuC1F,EAAU,CACvE,CAAEI,KAAM,SAAUiD,KAAI,EAAuBsC,MAAO,GACpD,CAAEvF,KAAM,SAAUiD,KAAI,EAAuBsC,MAAO,GACpD,CAAEvF,KAAM,QAASiD,KAAI,EAAsBsC,MAAO,GAClD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,IACpD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,GACpD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,GACpD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,IACpD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,GACpD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,GACpD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,IACpD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,GACpD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,GACpD,CAAEvF,KAAM,WAAYiD,KAAI,EAAwBsC,MAAO,GACvD,CAAEvF,KAAM,WAAYiD,KAAI,EAAwBsC,MAAO,GACvD,CAAEvF,KAAM,WAAYiD,KAAI,EAAwBsC,MAAO,GACvD,CAAEvF,KAAM,WAAYiD,KAAI,EAAyBsC,MAAO,GACxD,CAAEvF,KAAM,WAAYiD,KAAI,EAAyBsC,MAAO,GACxD,CAAEvF,KAAM,WAAYiD,KAAI,EAAyBsC,MAAO,GACxD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,IACpD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,GACpD,CAAEvF,KAAM,UAAWiD,KAAI,EAAsBsC,MAAO,KAE9BnJ,EAAAoJ,UAAuC5F,EAAU,CACvE,CAAEI,KAAM,KAAMyF,QAAS,CAAC,CAAC,GAAI,GAAI,GAAI,KACrC,CAAEzF,KAAM,KAAMyF,QAAS,CAAC,GAAI,CAAC,GAAI,GAAI,KACrC,CAAEzF,KAAM,KAAMyF,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,KACrC,CAAEzF,KAAM,KAAMyF,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACrC,CAAEzF,KAAM,QAASyF,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,KACzC,CAAEzF,KAAM,QAASyF,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,KACzC,CAAEzF,KAAM,WAAYyF,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KAC7C,CAAEzF,KAAM,WAAYyF,QAAS,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7C,CAAEzF,KAAM,cAAeyF,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KACjD,CAAEzF,KAAM,MAAOyF,QAAS,CAAC,GAAI,CAAC,GAAI,GAAI,KACtC,CAAEzF,KAAM,MAAOyF,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,KACtC,CAAEzF,KAAM,MAAOyF,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACtC,CAAEzF,KAAM,MAAOyF,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,KACtC,CAAEzF,KAAM,MAAOyF,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACtC,CAAEzF,KAAM,MAAOyF,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACtC,CAAEzF,KAAM,UAAWyF,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,KAC3C,CAAEzF,KAAM,UAAWyF,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,KAC3C,CAAEzF,KAAM,UAAWyF,QAAS,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,OAEtBrJ,EAAAuB,gBAA0B,MAC1BvB,EAAAsJ,kBAA4B,GAC5BtJ,EAAAuJ,sBAAgC,GAChCvJ,EAAAwJ,+BAAyC,EACzCxJ,EAAAyJ,yBAAmC,EACnCzJ,EAAA6C,aAAuB,GAAK7C,EAAOyJ,0BAA4B,EAC/DzJ,EAAA0J,uBAAiC,GACjC1J,EAAA2J,kBAA4B,GAC5B3J,EAAA4J,0BAAoC,EACpC5J,EAAA6J,cAAwB,GAAK7J,EAAO4J,2BAA6B,EACjE5J,EAAA8J,oBAA8B,KAC9B9J,EAAA+J,gBAA0B,GAC1B/J,EAAAgK,qBAA+B,EAC/BhK,EAAAiK,qBAA+B,GAC/BjK,EAAAkK,qBAA+B,EAC/BlK,EAAAmK,qBAA+B,EAC/BnK,EAAAoK,mBAA6B,EAC7BpK,EAAAqK,mBAA6B,EAC7BrK,EAAAsK,cAAwB,EACxBtK,EAAAuK,gBAAkB,WAClBvK,EAAAwK,iBAA2B,GAC3BxK,EAAAyK,UAAoB,GACpBzK,EAAA0K,SAAmB,EACnB1K,EAAA2K,aAAuB,EACvB3K,EAAA4K,qBAA+B,EAC/B5K,EAAA6K,SAAmB7K,EAAO2K,aAAe3K,EAAOwK,iBAChDxK,EAAA8K,uBAAuD,EAAtB9K,EAAOsI,aACxCtI,EAAA+K,eAAyB,IACzB/K,EAAAgL,aAAuBhL,EAAO+K,eAAiB,EAC/C/K,EAAAiL,SA6LxB,WACC,MAAM/K,EAAqB,IAAIQ,aAAaV,EAAO+K,eAAiB,GACpE,IAAK,IAAI3K,EAAY,EAAGA,EAAIJ,EAAO+K,eAAiB,EAAG3K,IACtDF,EAAKE,GAAKS,KAAKoC,IAAI7C,EAAIS,KAAKkC,GAAK,EAAM/C,EAAO+K,gBAE/C,OAAO7K,EAlMyCgL,GAGzBlL,EAAAmL,gBAA0B,ysBC7alCC,EAAwEC,EAAYC,uBACnG,IAAkB,IAAAC,EAAAC,EAAAF,GAAIG,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAE,CAAnB,IAAME,EAAGH,EAAA9H,MACb,GAAIiI,aAAeC,KAClBR,EAAQS,YAAYF,QACd,GAAmB,iBAARA,EACjBP,EAAQS,YAAYC,SAASC,eAAeJ,SACtC,GAAmB,mBAARA,EACjBR,EAAiBC,EAAS,CAACO,WACrB,GAAIK,MAAMC,QAAQN,GACxBR,EAAiBC,EAASO,QACpB,GAAIA,GAAyB,oBAAXO,QAA0D,mBAAzBP,EAAIO,OAAOC,UACpEhB,EAAiBC,EAAOgB,EAAMT,SACxB,GAAIA,GAAOA,EAAIU,cAAgBC,QAAUlB,aAAmBmB,YAElE,IAAkB,IAAAC,GAAAC,OAAA,EAAAlB,EAAAe,OAAOjI,KAAKsH,KAAIe,EAAAF,EAAAf,QAAAiB,EAAAhB,KAAAgB,EAAAF,EAAAf,OAAE,CAA/B,IAAMkB,EAAGD,EAAAhJ,MACPA,EAAQiI,EAAIgB,GAST,GAAY,UAARA,EACS,iBAAVjJ,EACV0H,EAAQwB,aAAa,QAASlJ,GACpBsI,MAAMC,QAAQN,IAASjI,GAA2B,oBAAXwI,QAA4D,mBAA3BxI,EAAMwI,OAAOC,UAC/Ff,EAAQwB,aAAa,QAASR,EAAI1I,GAAOmJ,KAAK,MAE9CC,QAAQC,KAAK,WAAaJ,EAAM,WAAcjJ,EAAQ,QAAW0H,EAAQ4B,QAAU,kBAE9E,GAAY,UAARL,EACV,GAAIjJ,GAASA,EAAM2I,cAAgBC,WAClC,IAAuB,IAAAW,GAAAC,OAAA,EAAA3B,EAAAe,OAAOjI,KAAKX,KAAMyJ,EAAAF,EAAAxB,QAAA0B,EAAAzB,KAAAyB,EAAAF,EAAAxB,OAAE,CAAtC,IAAM2B,EAAQD,EAAAzJ,MACd0J,KAAuChC,EAASiC,MAE5CjC,EAASiC,MAAMD,GAAY1J,EAAM0J,GAGbhC,EAASiC,MAAMC,YAAYF,EAAU1J,EAAM0J,2GAIxEhC,EAAQwB,aAAaD,EAAKjJ,OAEC,mBAAlB,EAEJ0H,EAASuB,GAAOjJ,EACM,kBAAlB,EAENA,EAAO0H,EAAQwB,aAAaD,EAAK,IAChCvB,EAAQmC,gBAAgBZ,GAG7BvB,EAAQwB,aAAaD,EAAKjJ,0GAK5B0H,EAAQS,YAAYC,SAASC,eAAeJ,sGAG9C,OAAOP,EAGD,IAAMoC,EAAgB,6VC8IhBC,iBD5Ia,IAAApC,EAAA,GAAAqC,EAAA,EAAAA,EAAAC,UAAAvN,OAAAsN,IAAArC,EAAAqC,GAAAC,UAAAD,GACzB,OAAO5B,SAAS8B,cAAcC,yBAAyBxC,EAAKwB,SC4IhDiB,iBDxIY,IAAAzC,EAAA,GAAAqC,EAAA,EAAAA,EAAAC,UAAAvN,OAAAsN,IAAArC,EAAAqC,GAAAC,UAAAD,GAUxB,IATA,IAAMK,EAA6BjC,SAASkC,yBAQtCC,GAAqB,IAAIC,WAAYC,gBAAgB,2CAA+C9C,EAAKwB,OAAS,SAAU,iBAAiBuB,gBACnH,OAAzBH,EAAUI,YAChBvC,SAASwC,WAAWL,EAAUI,YAAY,GAC1CN,EAASlC,YAAYoC,EAAUI,YAGhC,OAAON,cC2HGQ,GACJd,EAAMc,GAAQ,eAAC,IAAAlD,EAAA,GAAAqC,EAAA,EAAAA,EAAAC,UAAAvN,OAAAsN,IAAArC,EAAAqC,GAAAC,UAAAD,GAAwB,OAAAvC,EAAiBW,SAAS0C,cAAcD,GAAOlD,SAD7F,IAAmB,IAAAoD,EAAAlD,EAAA,+jBAA+jBmD,MAAM,MAAIlC,EAAAiC,EAAAhD,QAAAe,EAAAd,KAAAc,EAAAiC,EAAAhD,OAAA,GAA7kBe,EAAA9I,wHAGJiL,GAEV,GADMb,EAAKa,GAAQ,eAAC,IAAAtD,EAAA,GAAAqC,EAAA,EAAAA,EAAAC,UAAAvN,OAAAsN,IAAArC,EAAAqC,GAAAC,UAAAD,GAAwB,OAAAvC,EAA8BW,SAAS8C,gBAAgBpB,EAAOmB,GAAOtD,IAC7G,IAAIwD,KAAKF,GAAO,CACnB,IAAMG,EAAgBH,EAAKI,QAAQ,KAAM,KACnCjB,EAAKgB,GAAiB,eAAC,IAAAzD,EAAA,GAAAqC,EAAA,EAAAA,EAAAC,UAAAvN,OAAAsN,IAAArC,EAAAqC,GAAAC,UAAAD,GAAwB,OAAAvC,EAA8BW,SAAS8C,gBAAgBpB,EAAOmB,GAAOtD,UAJ5H,IAAmB,IAAAqB,EAAAnB,EAAA,8vBAA8vBmD,MAAM,MAAIzB,EAAAP,EAAAjB,QAAAwB,EAAAvB,KAAAuB,EAAAP,EAAAjB,OAAA,GAA5wBwB,EAAAvJ,+GC1MFsL,EA6uCLC,qBACNC,KAAKC,YAAYC,QAIXH,+BAA+BI,EAAYC,GACjD,GAA2F,SAAvFC,iBAAiBL,KAAKM,GAAeC,iBAAiB,uBAAuBC,OAAmB,CACnG,IAAIC,EAAsBX,EAAYY,gBAAgBP,EAAMC,GAE5D,IAAIO,EAAQ,cAKZ,MAAsB,CAAEC,iBAJUd,EAAYe,YAAaF,EAAMG,KAAKL,EAAKG,kBAAsC,IAIlDG,eAH/BjB,EAAYe,YAAaF,EAAMG,KAAKL,EAAKM,gBAAoC,IAGXC,cAFnElB,EAAYe,YAAaF,EAAMG,KAAKL,EAAKO,eAAmC,IAEwBC,YADtGnB,EAAYe,YAAaF,EAAMG,KAAKL,EAAKQ,aAAiC,KAIvG,OAAOnB,EAAYY,gBAAgBP,EAAMC,GAIpCL,uBAAuBI,EAAYC,GACzC,GAA2F,SAAvFC,iBAAiBL,KAAKM,GAAeC,iBAAiB,uBAAuBC,OAEhF,OAAIJ,EAAUD,EAAKe,kBACXpB,EAAYqB,cAAcf,EAAUN,EAAYqB,cAAcjQ,QAC3DkP,EAAUD,EAAKe,kBAAoBf,EAAKiB,kBAC3CtB,EAAYuB,eAAejB,EAAUD,EAAKe,mBAAqBpB,EAAYuB,cAAcnQ,QAEzF4O,EAAYwB,aAAalB,EAAUD,EAAKe,kBAAoBf,EAAKiB,mBAAqBtB,EAAYwB,YAAYpQ,QAKtH,GAAI4O,EAAYG,YAAYsB,IAAInB,GAC/B,OAAON,EAAYG,YAAYuB,IAAIpB,GAInC,GAAIA,EAAUD,EAAKe,kBAAmB,CAErC,MAAMO,GAAoCpB,iBAAiBL,KAAKM,GAAeC,iBAAiB,iCAC1FmB,GAAyCrB,iBAAiBL,KAAKM,GAAeC,iBAAiB,uCAC/FoB,GAAoCtB,iBAAiBL,KAAKM,GAAeC,iBAAiB,iCAC1FqB,GAAyCvB,iBAAiBL,KAAKM,GAAeC,iBAAiB,uCAC/FsB,GAAoCxB,iBAAiBL,KAAKM,GAAeC,iBAAiB,iCAC1FuB,GAAyCzB,iBAAiBL,KAAKM,GAAeC,iBAAiB,uCAC/FwB,GAAkC1B,iBAAiBL,KAAKM,GAAeC,iBAAiB,+BACxFyB,GAAuC3B,iBAAiBL,KAAKM,GAAeC,iBAAiB,qCAC7F0B,GAAkC5B,iBAAiBL,KAAKM,GAAeC,iBAAiB,+BACxF2B,GAAuC7B,iBAAiBL,KAAKM,GAAeC,iBAAiB,qCAC7F4B,GAAkC9B,iBAAiBL,KAAKM,GAAeC,iBAAiB,+BACxF6B,GAAuC/B,iBAAiBL,KAAKM,GAAeC,iBAAiB,qCAC7F8B,GAAiChC,iBAAiBL,KAAKM,GAAeC,iBAAiB,8BACvF+B,GAAsCjC,iBAAiBL,KAAKM,GAAeC,iBAAiB,oCAC5FgC,GAAiClC,iBAAiBL,KAAKM,GAAeC,iBAAiB,8BACvFiC,GAAsCnC,iBAAiBL,KAAKM,GAAeC,iBAAiB,oCAC5FkC,GAAiCpC,iBAAiBL,KAAKM,GAAeC,iBAAiB,8BACvFmC,GAAsCrC,iBAAiBL,KAAKM,GAAeC,iBAAiB,oCAC5FoC,GAA+BtC,iBAAiBL,KAAKM,GAAeC,iBAAiB,4BACrFqC,GAAoCvC,iBAAiBL,KAAKM,GAAeC,iBAAiB,kCAC1FsC,GAA+BxC,iBAAiBL,KAAKM,GAAeC,iBAAiB,4BACrFuC,GAAoCzC,iBAAiBL,KAAKM,GAAeC,iBAAiB,kCAC1FwC,GAA+B1C,iBAAiBL,KAAKM,GAAeC,iBAAiB,4BACrFyC,GAAoC3C,iBAAiBL,KAAKM,GAAeC,iBAAiB,kCAEhG,IAaI0C,EAAkC,CAAErC,iBAbN,SAAYa,EAA4BrB,GAAWsB,EAAgC7Q,EAAOiK,qBAAwB,KAAO,IAAO,MAC7J6G,GAA4B,GAAMC,EAAgClQ,KAAKwR,MAAM9C,EAAU,IAAQ,OAC/FyB,GAA4B,GAAMC,EAAgCpQ,KAAKwR,MAAM9C,EAAU,IAAQ,KAWrBW,eAV/C,SAAYgB,EAA0B3B,GAAW4B,EAA8BnR,EAAOiK,qBAAwB,KAAO,IAAO,MACvJmH,GAA0B,GAAMC,EAA8BxQ,KAAKwR,MAAM9C,EAAU,IAAQ,OAC3F+B,GAA0B,GAAMC,EAA8B1Q,KAAKwR,MAAM9C,EAAU,IAAQ,KAQkBY,cAPnF,SAAYqB,EAAyBjC,GAAWkC,EAA6BzR,EAAOiK,qBAAwB,KAAO,IAAO,MACpJyH,GAAyB,GAAMC,EAA6B9Q,KAAKwR,MAAM9C,EAAU,IAAQ,OACzFqC,GAAyB,GAAMC,EAA6BhR,KAAKwR,MAAM9C,EAAU,IAAQ,KAKqDa,YAJtH,SAAY0B,EAAuBvC,GAAWwC,EAA2B/R,EAAOiK,qBAAwB,KAAO,IAAO,MAC9I+H,GAAuB,GAAMC,EAA2BpR,KAAKwR,MAAM9C,EAAU,IAAQ,OACrF2C,GAAuB,GAAMC,EAA2BtR,KAAKwR,MAAM9C,EAAU,IAAQ,MAI1F,OADAN,EAAYG,YAAYkD,IAAI/C,EAAS6C,GAC9BA,EAGH,GAAI7C,EAAUD,EAAKe,kBAAoBf,EAAKiB,kBAAmB,CAEnE,MAAMgC,GAAoC/C,iBAAiBL,KAAKM,GAAeC,iBAAiB,iCAC1F8C,GAAyChD,iBAAiBL,KAAKM,GAAeC,iBAAiB,uCAC/F+C,GAAoCjD,iBAAiBL,KAAKM,GAAeC,iBAAiB,iCAC1FgD,GAAyClD,iBAAiBL,KAAKM,GAAeC,iBAAiB,uCAC/FiD,GAAoCnD,iBAAiBL,KAAKM,GAAeC,iBAAiB,iCAC1FkD,GAAyCpD,iBAAiBL,KAAKM,GAAeC,iBAAiB,uCAC/FmD,GAAkCrD,iBAAiBL,KAAKM,GAAeC,iBAAiB,+BACxFoD,GAAuCtD,iBAAiBL,KAAKM,GAAeC,iBAAiB,qCAC7FqD,GAAkCvD,iBAAiBL,KAAKM,GAAeC,iBAAiB,+BACxFsD,GAAuCxD,iBAAiBL,KAAKM,GAAeC,iBAAiB,qCAC7FuD,GAAkCzD,iBAAiBL,KAAKM,GAAeC,iBAAiB,+BACxFwD,GAAuC1D,iBAAiBL,KAAKM,GAAeC,iBAAiB,qCAC7FyD,GAAiC3D,iBAAiBL,KAAKM,GAAeC,iBAAiB,8BACvF0D,GAAsC5D,iBAAiBL,KAAKM,GAAeC,iBAAiB,oCAC5F2D,GAAiC7D,iBAAiBL,KAAKM,GAAeC,iBAAiB,8BACvF4D,GAAsC9D,iBAAiBL,KAAKM,GAAeC,iBAAiB,oCAC5F6D,GAAiC/D,iBAAiBL,KAAKM,GAAeC,iBAAiB,8BACvF8D,GAAsChE,iBAAiBL,KAAKM,GAAeC,iBAAiB,oCAC5F+D,GAA+BjE,iBAAiBL,KAAKM,GAAeC,iBAAiB,4BACrFgE,GAAoClE,iBAAiBL,KAAKM,GAAeC,iBAAiB,kCAC1FiE,GAA+BnE,iBAAiBL,KAAKM,GAAeC,iBAAiB,4BACrFkE,GAAoCpE,iBAAiBL,KAAKM,GAAeC,iBAAiB,kCAC1FmE,GAA+BrE,iBAAiBL,KAAKM,GAAeC,iBAAiB,4BACrFoE,GAAoCtE,iBAAiBL,KAAKM,GAAeC,iBAAiB,kCAEhG,IAaI0C,EAAkC,CAAErC,iBAbN,SAAYwC,GAA8BhD,EAAUD,EAAKe,oBAAsBmC,EAAiCxS,EAAOmK,qBAAwB,KAAO,IAAO,MAC1LsI,EAA2BlD,GAAWmD,GAAiC,OACvEC,EAA2BpD,GAAWqD,GAAiC,KAWG1C,eAV/C,SAAY2C,GAA4BtD,EAAUD,EAAKe,oBAAsByC,EAA+B9S,EAAOmK,qBAAwB,KAAO,IAAO,MACpL4I,EAAyBxD,GAAWyD,GAA+B,OACnEC,EAAyB1D,GAAW2D,GAA+B,KAQ0C/C,cAPnF,SAAYgD,GAA2B5D,EAAUD,EAAKe,oBAAsB+C,EAA8BpT,EAAOmK,qBAAwB,KAAO,IAAO,MACjLkJ,EAAwB9D,GAAW+D,GAA8B,OACjEC,EAAwBhE,GAAWiE,GAA8B,KAK6EpD,YAJtH,SAAYqD,GAAyBlE,EAAUD,EAAKe,oBAAsBqD,EAA4B1T,EAAOmK,qBAAwB,KAAO,IAAO,MAC3KwJ,EAAsBpE,GAAWqE,GAA4B,OAC7DC,EAAsBtE,GAAWuE,GAA4B,MAIlE,OADA7E,EAAYG,YAAYkD,IAAI/C,EAAS6C,GAC9BA,EAEH,CAEJ,MAAM2B,GAAkCvE,iBAAiBL,KAAKM,GAAeC,iBAAiB,+BACxFsE,GAAuCxE,iBAAiBL,KAAKM,GAAeC,iBAAiB,qCAC7FuE,GAAkCzE,iBAAiBL,KAAKM,GAAeC,iBAAiB,+BACxFwE,GAAuC1E,iBAAiBL,KAAKM,GAAeC,iBAAiB,qCAC7FyE,GAAkC3E,iBAAiBL,KAAKM,GAAeC,iBAAiB,+BACxF0E,GAAuC5E,iBAAiBL,KAAKM,GAAeC,iBAAiB,qCAC7F2E,GAAgC7E,iBAAiBL,KAAKM,GAAeC,iBAAiB,6BACtF4E,GAAqC9E,iBAAiBL,KAAKM,GAAeC,iBAAiB,mCAC3F6E,GAAgC/E,iBAAiBL,KAAKM,GAAeC,iBAAiB,6BACtF8E,GAAqChF,iBAAiBL,KAAKM,GAAeC,iBAAiB,mCAC3F+E,GAAgCjF,iBAAiBL,KAAKM,GAAeC,iBAAiB,6BACtFgF,GAAqClF,iBAAiBL,KAAKM,GAAeC,iBAAiB,mCAC3FiF,GAA+BnF,iBAAiBL,KAAKM,GAAeC,iBAAiB,4BACrFkF,GAAoCpF,iBAAiBL,KAAKM,GAAeC,iBAAiB,kCAC1FmF,GAA+BrF,iBAAiBL,KAAKM,GAAeC,iBAAiB,4BACrFoF,GAAoCtF,iBAAiBL,KAAKM,GAAeC,iBAAiB,kCAC1FqF,GAA+BvF,iBAAiBL,KAAKM,GAAeC,iBAAiB,4BACrFsF,GAAoCxF,iBAAiBL,KAAKM,GAAeC,iBAAiB,kCAC1FuF,GAA6BzF,iBAAiBL,KAAKM,GAAeC,iBAAiB,0BACnFwF,GAAkC1F,iBAAiBL,KAAKM,GAAeC,iBAAiB,gCACxFyF,GAA6B3F,iBAAiBL,KAAKM,GAAeC,iBAAiB,0BACnF0F,GAAkC5F,iBAAiBL,KAAKM,GAAeC,iBAAiB,gCACxF2F,GAA6B7F,iBAAiBL,KAAKM,GAAeC,iBAAiB,0BACnF4F,GAAkC9F,iBAAiBL,KAAKM,GAAeC,iBAAiB,gCAE9F,IAaI0C,EAAkC,CAAErC,iBAbN,SAAYgE,GAA4BxE,EAAUD,EAAKe,kBAAoBf,EAAKiB,oBAAsByD,EAA+BhU,EAAOqK,mBAAsB,KAAO,IAAO,MAC7M4J,EAAyB1E,GAAW2E,GAA+B,OACnEC,EAAyB5E,GAAW6E,GAA+B,KAWOlE,eAV/C,SAAYmE,GAA0B9E,EAAUD,EAAKe,kBAAoBf,EAAKiB,oBAAsB+D,EAA6BtU,EAAOqK,mBAAsB,KAAO,IAAO,MACvMkK,EAAuBhF,GAAWiF,GAA6B,OAC/DC,EAAuBlF,GAAWmF,GAA6B,KAQ8CvE,cAPnF,SAAYwE,GAAyBpF,EAAUD,EAAKe,kBAAoBf,EAAKiB,oBAAsBqE,EAA4B5U,EAAOqK,mBAAsB,KAAO,IAAO,MACpMwK,EAAsBtF,GAAWuF,GAA4B,OAC7DC,EAAsBxF,GAAWyF,GAA4B,KAKiF5E,YAJtH,SAAY6E,GAAuB1F,EAAUD,EAAKe,kBAAoBf,EAAKiB,oBAAsB2E,EAA0BlV,EAAOqK,mBAAsB,KAAO,IAAO,MAC9L8K,EAAoB5F,GAAW6F,GAA0B,OACzDC,EAAoB9F,GAAW+F,GAA0B,MAI9D,OADArG,EAAYG,YAAYkD,IAAI/C,EAAS6C,GAC9BA,GAQJlD,gBAAgBtL,GACtBuL,KAAKM,EAAc8F,YAAcpG,KAAKqG,OAAO5R,GAC7C,MAAM6R,EAA8B1J,SAAS2J,cAAc,4BACzC,MAAdD,GACHA,EAAW5I,aAAa,UAAW2C,iBAAiBzD,SAASsC,iBAAiBqB,iBAAiB,2BAGhGP,KAAKwG,cAGCzG,mBAAmBtL,GACzB,OAAO4L,iBAAiBL,KAAKM,GAAeC,iBAAiB9L,IAz6ChDqL,EAAAG,YAA0C,IAAIwG,IAErC3G,EAAAuG,OAAqC,CAC3DK,eAAgB,mzJAiHhBC,mBAAoB,o0JAiHpBC,gBAAiB,ooKAyHjBC,kBAAmB,iuJAgHnBC,OAAU,2uJAgHVC,OAAU,mwJAgHVC,SAAY,2yIAgHZC,mBAAoB,ouJAgHpBC,gBAAiB,sjKA2HKpH,EAAAqH,WAAqB,qBACrBrH,EAAAsH,iBAA2B,2BAC3BtH,EAAAuH,aAAuB,uBACvBvH,EAAAwH,SAAmB,kBACnBxH,EAAAyH,YAAsB,sBACtBzH,EAAA0H,cAAwB,wBACxB1H,EAAA2H,aAAuB,uBACvB3H,EAAA4H,cAAwB,wBACxB5H,EAAA6H,iBAA2B,4BAC3B7H,EAAA8H,WAAqB,qBACrB9H,EAAA+H,WAAqB,qBACrB/H,EAAAgI,mBAA6B,8BAC7BhI,EAAAiI,cAAwB,yBACxBjI,EAAAkI,gBAA0B,0BAC1BlI,EAAAmI,MAAgB,eAChBnI,EAAAoI,UAAoB,oBACpBpI,EAAAqI,cAAwB,yBACxBrI,EAAAsI,cAAwB,yBACxBtI,EAAAuI,gBAA0B,2BAC1BvI,EAAA2B,yBAAmC,qCACnC3B,EAAA4B,8BAAwC,2CACxC5B,EAAA6B,yBAAmC,qCACnC7B,EAAA8B,8BAAwC,2CACxC9B,EAAA+B,yBAAmC,qCACnC/B,EAAAgC,8BAAwC,2CACxChC,EAAAiC,uBAAiC,mCACjCjC,EAAAkC,4BAAsC,yCACtClC,EAAAmC,uBAAiC,mCACjCnC,EAAAoC,4BAAsC,yCACtCpC,EAAAqC,uBAAiC,mCACjCrC,EAAAsC,4BAAsC,yCACtCtC,EAAAuC,sBAAgC,kCAChCvC,EAAAwC,2BAAqC,wCACrCxC,EAAAyC,sBAAgC,kCAChCzC,EAAA0C,2BAAqC,wCACrC1C,EAAA2C,sBAAgC,kCAChC3C,EAAA4C,2BAAqC,wCACrC5C,EAAA6C,oBAA8B,gCAC9B7C,EAAA8C,yBAAmC,sCACnC9C,EAAA+C,oBAA8B,gCAC9B/C,EAAAgD,yBAAmC,sCACnChD,EAAAiD,oBAA8B,gCAC9BjD,EAAAkD,yBAAmC,sCACnClD,EAAA8E,uBAAiC,mCACjC9E,EAAA+E,4BAAsC,yCACtC/E,EAAAgF,uBAAiC,mCACjChF,EAAAiF,4BAAsC,yCACtCjF,EAAAkF,uBAAiC,mCACjClF,EAAAmF,4BAAsC,yCACtCnF,EAAAoF,qBAA+B,iCAC/BpF,EAAAqF,0BAAoC,uCACpCrF,EAAAsF,qBAA+B,iCAC/BtF,EAAAuF,0BAAoC,uCACpCvF,EAAAwF,qBAA+B,iCAC/BxF,EAAAyF,0BAAoC,uCACpCzF,EAAA0F,oBAA8B,gCAC9B1F,EAAA2F,yBAAmC,sCACnC3F,EAAA4F,oBAA8B,gCAC9B5F,EAAA6F,yBAAmC,sCACnC7F,EAAA8F,oBAA8B,gCAC9B9F,EAAA+F,yBAAmC,sCACnC/F,EAAAgG,kBAA4B,8BAC5BhG,EAAAiG,uBAAiC,oCACjCjG,EAAAkG,kBAA4B,8BAC5BlG,EAAAmG,uBAAiC,oCACjCnG,EAAAoG,kBAA4B,8BAC5BpG,EAAAqG,uBAAiC,oCACjCrG,EAAAsD,yBAAmC,qCACnCtD,EAAAuD,8BAAwC,2CACxCvD,EAAAwD,yBAAmC,qCACnCxD,EAAAyD,8BAAwC,2CACxCzD,EAAA0D,yBAAmC,qCACnC1D,EAAA2D,8BAAwC,2CACxC3D,EAAA4D,uBAAiC,mCACjC5D,EAAA6D,4BAAsC,yCACtC7D,EAAA8D,uBAAiC,mCACjC9D,EAAA+D,4BAAsC,yCACtC/D,EAAAgE,uBAAiC,mCACjChE,EAAAiE,4BAAsC,yCACtCjE,EAAAkE,sBAAgC,kCAChClE,EAAAmE,2BAAqC,wCACrCnE,EAAAoE,sBAAgC,kCAChCpE,EAAAqE,2BAAqC,wCACrCrE,EAAAsE,sBAAgC,kCAChCtE,EAAAuE,2BAAqC,wCACrCvE,EAAAwE,oBAA8B,gCAC9BxE,EAAAyE,yBAAmC,sCACnCzE,EAAA0E,oBAA8B,gCAC9B1E,EAAA2E,yBAAmC,sCACnC3E,EAAA4E,oBAA8B,gCAC9B5E,EAAA6E,yBAAmC,sCACnC7E,EAAAwI,mBAA6B,+BAC7BxI,EAAAyI,sBAAgC,mCAChCzI,EAAA0I,mBAA6B,+BAC7B1I,EAAA2I,sBAAgC,mCAChC3I,EAAA4I,iBAA2B,6BAC3B5I,EAAA6I,oBAA8B,iCAC9B7I,EAAA8I,wBAAkC,mCAClC9I,EAAA+I,qBAA+B,gCAC/B/I,EAAAgJ,iBAA2B,2BAC3BhJ,EAAAiJ,mBAA6B,6BAC7BjJ,EAAAkJ,gBAA0B,2BAC1BlJ,EAAAmJ,gBAA0B,2BAC1BnJ,EAAAoJ,iBAA2B,4BAC3BpJ,EAAAqJ,cAAwB,yBACxBrJ,EAAAsJ,gBAA0B,2BAC1BtJ,EAAAuJ,sBAAgC,kCAChCvJ,EAAAwJ,oBAA8B,gCAE9BxJ,EAAAqB,cAAgD9M,EAAU,CAChF,CACCI,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,UACNmM,iBAAkB,mCAClBG,eAAgB,iCAChBC,cAAe,gCACfC,YAAa,iCAGQnB,EAAAuB,cAAgDhN,EAAU,CAChF,CACCI,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACX,CACFxM,KAAM,SACNmM,iBAAkB,kCAClBG,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,gCAGQnB,EAAAwB,YAA8CjN,EAAU,CAC9E,CACCI,KAAM,OACNmM,iBAAkB,gCAClBG,eAAgB,8BAChBC,cAAe,6BACfC,YAAa,4BACX,CACFxM,KAAM,OACNmM,iBAAkB,gCAClBG,eAAgB,8BAChBC,cAAe,6BACfC,YAAa,4BACX,CACFxM,KAAM,OACNmM,iBAAkB,gCAClBG,eAAgB,8BAChBC,cAAe,6BACfC,YAAa,4BACX,CACFxM,KAAM,OACNmM,iBAAkB,gCAClBG,eAAgB,8BAChBC,cAAe,6BACfC,YAAa,8BAoLSnB,EAAAQ,EAAkC1D,SAAS2M,KAAK5M,YAAY4B,EAAKJ,MAAM,CAAEzG,KAAM,cCx5CvE,4FAA4FiI,KAAK6J,UAAUC,iBAM/HC,EAsQL3J,qBAAqB4J,GAC3B,MAAMC,EAAwBD,GAAe,EACvCE,EAAoC,GAAdF,EAC5B,OAAOD,EAAaI,iBAAiBF,GAAeG,QAAQF,GAEtD9J,gCAAgCiK,GACtC,IAAK,IAAIJ,EAAwB,EAAGA,EAAgBF,EAAaI,iBAAiB5Y,OAAQ0Y,IAAiB,CAC1G,MAAMK,EAA2BP,EAAaI,iBAAiBF,GAC/D,IAAK,IAAIC,EAAsB,EAAGA,EAAcI,EAASF,QAAQ7Y,OAAQ2Y,IAAe,CACvF,MAAMK,EAAiBD,EAASF,QAAQF,GACxC,GAAIK,EAAOC,aAAeD,EAAOE,aAAeJ,EAAS,OAAQJ,GAAiB,GAAKC,GAGzF,OAAO,KAGD9J,yBAAyBsK,GAC/B,IAAK,IAAIT,EAAwB,EAAGA,EAAgBF,EAAaI,iBAAiB5Y,OAAQ0Y,IAAiB,CAC1G,MAAMK,EAA2BP,EAAaI,iBAAiBF,GAC/D,IAAK,IAAIC,EAAsB,EAAGA,EAAcI,EAASF,QAAQ7Y,OAAQ2Y,IAAe,CAEvF,GADuBI,EAASF,QAAQF,GAC7BpV,MAAQ4V,EAAY,OAAQT,GAAiB,GAAKC,GAG/D,OAAO,eC1SO7X,EAAsBsC,EAAoBgW,GACzD,IAAK,IAAIrZ,EAAY,EAAGA,EAAIqD,EAAMpD,OAAQD,IACzCqD,EAAMrD,IAAMqZ,EAQd,SAASC,EAAUC,GAClB,IALD,SAAoBA,GACnB,SAASA,GAAOA,EAAKA,EAAI,GAIpBC,CAAWD,GAAI,MAAM,IAAI9X,MAAM,0CACpC,OAAOhB,KAAKgZ,MAAMhZ,KAAK6B,IAAIiX,GAAK9Y,KAAK6B,IAAI,aAwO1BxB,EAA4BuC,EAAoBqW,GAC/D,MAAMC,EAAsBL,EAAUI,GACtC,GAAIA,EAAkB,EAAG,MAAM,IAAIjY,MAAM,wCAGzC,IAAK,IAAImY,EAAeD,EAAc,EAAGC,GAAQ,EAAGA,IAAQ,CAC3D,MAAMC,EAAoB,GAAKD,EACzBE,EAAuBD,GAAa,EACpCE,EAAiBF,GAAa,EAC9BG,EAAqC,EAAVvZ,KAAKkC,GAAWoX,EAC3CE,EAAuBxZ,KAAKmC,IAAIoX,GAChCE,EAAuBzZ,KAAKoC,IAAImX,GAChCG,EAA+B,EAAMF,EAE3C,IAAK,IAAIG,EAAqB,EAAGA,EAAaV,EAAiBU,GAAcL,EAAQ,CACpF,MAAMM,EAAsBD,EACtBE,EAAoBD,EAAcP,EAClCS,EAAsBF,EAAcR,EACpCW,EAAoBD,EAAcT,EAClCW,EAAoBF,EAAcV,EAClCa,EAAqBrX,EAAMgX,GAC3BM,EAAqBtX,EAAMkX,GACjClX,EAAMgX,GAAeK,EAAaC,EAClCtX,EAAMiX,IAAc,EACpBjX,EAAMkX,GAAeG,EAAaC,EAClCtX,EAAMmX,IAAc,EACpB,IAAII,EAAYX,EACZY,GAAaX,EACbY,EAAgB,EAChBC,EAAgB,EACpB,IAAK,IAAIla,EAAgB,EAAGA,EAAQiZ,EAAcjZ,IAAS,CAC1D,MAAMma,EAAkBX,EAAcxZ,EAChCoa,EAAkBV,EAAc1Z,EAChCqa,EAAkBX,EAAc1Z,EAChCsa,EAAkBV,EAAY5Z,EAC9Bua,EAAgB/X,EAAM2X,GACtBK,EAAgBhY,EAAM4X,GACtBK,EAAgBjY,EAAM6X,GACtBK,EAAgBlY,EAAM8X,GACtBK,EAAgBJ,EAAQC,EACxBI,EAAgBH,EAAQC,EAC9BlY,EAAM2X,GAAWI,EAAQC,EACzBhY,EAAM4X,GAAWM,EAAQD,EACzBjY,EAAM6X,GAAWM,EAAQZ,EAAIa,EAAQZ,EACrCxX,EAAM8X,GAAWM,EAAQb,EAAIY,EAAQX,EACrC,MAAMa,EAAgBvB,EAAuBS,EAAIE,EAC3Ca,EAAgBxB,EAAuBU,EAAIE,EACjDD,EAAQF,EACRG,EAAQF,EACRD,EAAIc,EACJb,EAAIc,IAsCP,IAAK,IAAI9a,EAAgB,EAAGA,EAAQ6Y,EAAiB7Y,GAAS,EAAG,CAChE,MAAM+a,EAAiB/a,EAAQ,EACzBgb,EAAiBhb,EAAQ,EACzBib,EAAiBjb,EAAQ,EACzBua,EAAgB/X,EAAMxC,GACtBwa,EAAgC,EAAhBhY,EAAMuY,GACtBG,EAAgB1Y,EAAMwY,GACtBG,EAAgC,EAAhB3Y,EAAMyY,GACtBN,EAAgBJ,EAAQW,EACxBN,EAAgBL,EAAQW,EAC9B1Y,EAAMxC,GAAS2a,EAAQH,EACvBhY,EAAMuY,GAAUJ,EAAQH,EACxBhY,EAAMwY,GAAUJ,EAAQO,EACxB3Y,EAAMyY,GAAUL,EAAQO,GAvU1B,SAA0B3Y,EAAoBqW,GAC7C,MAAMuC,EAAmB3C,EAAUI,GACnC,GAAIuC,EAAW,GAAI,MAAM,IAAIxa,MAAM,mDACnC,MAAMya,EAAqB,GAAKD,EAChC,IAAK,IAAIjc,EAAY,EAAGA,EAAI0Z,EAAiB1Z,IAAK,CAEjD,IAAImc,EAKJ,GAJAA,GAAU,MAAJnc,IAAe,GAAW,MAAJA,IAAe,EAC3Cmc,GAAU,MAAJA,IAAe,GAAW,MAAJA,IAAe,EAC3CA,GAAU,MAAJA,IAAe,GAAW,KAAJA,IAAe,EAC3CA,GAAMA,GAAK,GAAW,IAAJA,IAAa,IAAOD,EAClCC,EAAInc,EAAG,CACV,IAAIoc,EAAe/Y,EAAMrD,GACzBqD,EAAMrD,GAAKqD,EAAM8Y,GACjB9Y,EAAM8Y,GAAKC,IA4TbC,CAAiBhZ,EAAOqW,GD/UDjB,EAAA6D,QAAkB,MAClB7D,EAAA8D,mBAA6B,YAAc9D,EAAa6D,QAExD7D,EAAAI,iBAAoDzV,EAAU,CACpF,CACCI,KAAM,qBAAsBsV,QAAkC1V,EAAU,CACvE,CAAEI,KAAM,YAAagZ,WAAU,GAC/B,CAAEhZ,KAAM,cAAegZ,WAAU,GACjC,CAAEhZ,KAAM,cAAegZ,WAAU,GACjC,CAAEhZ,KAAM,WAAYgZ,WAAU,GAC9B,CAAEhZ,KAAM,UAAWgZ,WAAU,GAC7B,CAAEhZ,KAAM,YAAagZ,WAAU,GAC/B,CAAEhZ,KAAM,cAAegZ,WAAU,GACjC,CAAEhZ,KAAM,cAAegZ,WAAU,MAGnC,CACChZ,KAAM,gBAAiBsV,QAAkC1V,EAAU,CAClE,CAAEI,KAAM,cAAe2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,OAAQiW,WAAc,WAAYC,QAAW,OAAQC,MAAS,WAAYC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUjd,KAAQ,SAAUkd,SAAY,QAASC,QAAW,SAClQ,CAAEzZ,KAAM,gBAAiB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,OAAQiW,WAAc,WAAYC,QAAW,OAAQC,MAAS,WAAYC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUjd,KAAQ,WAAYkd,SAAY,QAASC,QAAW,SACtQ,CAAEzZ,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,OAAQiW,WAAc,OAAQC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUjd,KAAQ,SAAUkd,SAAY,MAAOC,QAAW,SACjR,CAAEzZ,KAAM,kBAAmB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,OAAQiW,WAAc,OAAQC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUjd,KAAQ,WAAYkd,SAAY,UAAWC,QAAW,SAC3R,CAAEzZ,KAAM,kBAAmB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,OAAQkW,QAAW,SAAUD,WAAc,cAAeE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUjd,KAAQ,WAAYkd,SAAY,MAAOC,QAAW,UAC3Q,CAAEzZ,KAAM,aAAc2V,YAAa,IAAK+D,SAAS,EAAMT,SAAU,CAAEhW,KAAQ,QAASiW,WAAc,OAAQC,QAAW,OAAQC,MAAS,WAAYC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUjd,KAAQ,UACpO,CAAE0D,KAAM,WAAY2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMiW,WAAc,OAAQC,QAAW,OAAQC,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACxjB,CAAEja,KAAM,UAAW2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,kBAAmBC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cAClkB,CAAEja,KAAM,WAAY2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACzjB,CAAEja,KAAM,WAAY2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,kBAAmBC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,UAAWE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,aACrkB,CAAEja,KAAM,YAAa2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,cAAeiW,WAAc,OAAQC,QAAW,OAAQC,MAAS,WAAYC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUC,SAAY,QAASC,QAAW,OAAQS,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACxiB,CAAEla,KAAM,gBAAiB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,cAAeiW,WAAc,OAAQC,QAAW,OAAQC,MAAS,WAAYC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUC,SAAY,QAASC,QAAW,OAAQS,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC/f,CAAEla,KAAM,gBAAiB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,cAAeiW,WAAc,OAAQC,QAAW,OAAQC,MAAS,WAAYC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUC,SAAY,QAASC,QAAW,OAAQS,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC/f,CAAEla,KAAM,eAAgB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,cAAekW,QAAW,OAAQD,WAAc,WAAYE,MAAS,WAAYC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUC,SAAY,QAASC,QAAW,OAAQS,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACnjB,CAAEla,KAAM,aAAc2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,cAAekW,QAAW,OAAQD,WAAc,WAAYE,MAAS,WAAYC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUC,SAAY,QAASC,QAAW,OAAQS,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,SAGljB,CACCla,KAAM,mBAAoBsV,QAAkC1V,EAAU,CACrE,CAAEI,KAAM,gBAAiB2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAChZ,CAAEna,KAAM,eAAgB2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC/Y,CAAEna,KAAM,iBAAkB2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,OAAQkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWjd,KAAQ,YAAakd,SAAY,UAAWC,QAAW,SAChS,CAAEzZ,KAAM,mBAAoB2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,aAAcC,QAAW,OAAQU,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACzZ,CAAEna,KAAM,mBAAoB2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,KACrY,CAAEna,KAAM,mBAAoB2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cAC1lB,CAAEja,KAAM,cAAe2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACplB,CAAEja,KAAM,WAAY2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMiW,WAAc,OAAQC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC7kB,CAAEja,KAAM,WAAY2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,MACpZ,CAAEna,KAAM,gBAAiB2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,UAAWC,QAAW,OAAQU,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,SAGjZ,CACCna,KAAM,oBAAqBsV,QAAkC1V,EAAU,CACtE,CAAEI,KAAM,UAAW2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,cAAeC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cACtlB,CAAEja,KAAM,eAAgB2V,YAAa,EAAGD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cAC3lB,CAAEja,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,KACzX,CAAEna,KAAM,cAAe2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACjX,CAAEna,KAAM,aAAc2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACxlB,CAAEja,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACjlB,CAAEja,KAAM,UAAW2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACnlB,CAAEja,KAAM,YAAa2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cACnlB,CAAEja,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAM0E,uBAAwB,EAAGnB,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,MAAOC,QAAW,OAAQU,UAAa,CAAC,GAAI,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACla,CAAEna,KAAM,aAAc2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACnkB,CAAEja,KAAM,YAAa2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,cAAeC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,eACxlB,CAAEja,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,UAAWE,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,aAC7lB,CAAEja,KAAM,cAAe2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,aACplB,CAAEja,KAAM,QAAS2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,MAAOC,kBAAqB,GAAIC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,GAAIib,SAAY,gBAGllB,CACCja,KAAM,iBAAkBsV,QAAkC1V,EAAU,CACnE,CAAEI,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACnlB,CAAEja,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC/Y,CAAEna,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACzY,CAAEna,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC9Y,CAAEna,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,iBAGrlB,CACCja,KAAM,sBAAuBsV,QAAkC1V,EAAU,CACxE,CAAEI,KAAM,gBAAiB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC/Y,CAAEna,KAAM,gBAAiB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC/Y,CAAEna,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACrlB,CAAEja,KAAM,gBAAiB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC3Y,CAAEna,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC1Y,CAAEna,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,aAC7kB,CAAEja,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,GAAIib,SAAY,cACtlB,CAAEja,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACnlB,CAAEja,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,OAAQiW,WAAc,OAAQC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWjd,KAAQ,WAAYkd,SAAY,UAAWC,QAAW,YAG1R,CACCzZ,KAAM,wBAAyBsV,QAAkC1V,EAAU,CAC1E,CAAEI,KAAM,oBAAqB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,cAAeE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,cAAeC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,GAAIib,SAAY,aAC1mB,CAAEja,KAAM,OAAQ2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMiW,WAAc,YAAaC,QAAW,SAAUC,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC3kB,CAAEja,KAAM,QAAS2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMiW,WAAc,YAAaC,QAAW,SAAUC,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cACllB,CAAEja,KAAM,QAAS2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,aACllB,CAAEja,KAAM,UAAW2V,YAAa,IAAKsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,aAC/jB,CAAEja,KAAM,WAAY2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACvlB,CAAEja,KAAM,OAAQ2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,iBAGvlB,CACCja,KAAM,qBAAsBsV,QAAkC1V,EAAU,CACvE,CAAEI,KAAM,mBAAoB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cACtlB,CAAEja,KAAM,oBAAqB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cACxlB,CAAEja,KAAM,iBAAkB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,UAAWC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACvlB,CAAEja,KAAM,mBAAoB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,SAAW,CAAED,UAAa,MAAOhb,UAAa,GAAIib,SAAY,cACrlB,CAAEja,KAAM,oBAAqB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,MAAOkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUc,WAAc,GAAIC,cAAiB,QAASb,QAAW,SACxQ,CAAEzZ,KAAM,oBAAqB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,WAAYE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cACtkB,CAAEja,KAAM,oBAAqB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,UAAWE,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACvkB,CAAEja,KAAM,oBAAqB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,MAAOkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUc,WAAc,GAAIC,cAAiB,UAAWb,QAAW,eAG5Q,CACCzZ,KAAM,kBAAmBsV,QAAkC1V,EAAU,CACpE,CAAEI,KAAM,kBAAmB2V,YAAa,GAAID,aAAa,EAAM0E,uBAAwB,EAAGnB,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACjZ,CAAEna,KAAM,kBAAmB2V,YAAa,GAAIyE,uBAAwB,EAAGnB,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,IAAK,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,KACrY,CAAEna,KAAM,mBAAoB2V,YAAa,GAAID,aAAa,EAAM0E,uBAAwB,EAAGnB,SAAU,CAAEhW,KAAQ,KAAMiW,WAAc,OAAQC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASE,QAAW,QAASE,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAClnB,CAAEja,KAAM,aAAc2V,YAAa,GAAID,aAAa,EAAM0E,uBAAwB,EAAGnB,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASE,QAAW,UAAWE,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC1nB,CAAEja,KAAM,aAAc2V,YAAa,GAAID,aAAa,EAAM0E,uBAAwB,EAAGnB,SAAU,CAAEhW,KAAQ,KAAMiW,WAAc,aAAcC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACrnB,CAAEja,KAAM,aAAc2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACzY,CAAEna,KAAM,YAAa2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,OAAQkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWjd,KAAQ,aAAckd,SAAY,aAAcC,QAAW,SAChS,CAAEzZ,KAAM,YAAa2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,MAAOC,QAAW,OAAQU,UAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACrY,CAAEna,KAAM,UAAW2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,QAASC,SAAY,MAAOC,QAAW,OAAQU,UAAa,CAAC,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,SAG7Y,CACCna,KAAM,iBAAkBsV,QAAkC1V,EAAU,CACnE,CAAEI,KAAM,WAAY2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,UAAWE,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cACvlB,CAAEja,KAAM,QAAS2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,UAAWE,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC1lB,CAAEja,KAAM,QAAS2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,UAAWE,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACzlB,CAAEja,KAAM,aAAc2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,UAAWE,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cAC5lB,CAAEja,KAAM,SAAU2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,UAAWE,UAAa,cAAeC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,aACrlB,CAAEja,KAAM,kBAAmB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,cAAeE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,WAAYE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,GAAIC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACxmB,CAAEja,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cAC5lB,CAAEja,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cAClmB,CAAEja,KAAM,kBAAmB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,OAAQiW,WAAc,YAAaC,QAAW,kBAAmBC,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUjd,KAAQ,WAAYkd,SAAY,MAAOC,QAAW,YACrS,CAAEzZ,KAAM,kBAAmB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,GAAIC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACzmB,CAAEja,KAAM,kBAAmB2V,YAAa,GAAID,aAAa,EAAM0E,uBAAwB,EAAGnB,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,GAAIC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,cAC3oB,CAAEja,KAAM,WAAY2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,QAASE,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cACvlB,CAAEja,KAAM,kBAAmB2V,YAAa,GAAIyE,uBAAwB,EAAGnB,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,cAAeE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,UAAWE,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,GAAIC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,gBAG3nB,CACCja,KAAM,gBAAiBsV,QAAkC1V,EAAU,CAClE,CAAEI,KAAM,gBAAiB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,QAASU,UAAa,CAAC,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,KACvZ,CAAEna,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,QAASU,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAChZ,CAAEna,KAAM,aAAc2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,QAASU,UAAa,CAAC,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,KACpY,CAAEna,KAAM,eAAgB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,QAASU,UAAa,CAAC,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,KAC3X,CAAEna,KAAM,aAAc2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,QAASU,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACpX,CAAEna,KAAM,YAAa2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,QAASU,UAAa,CAAC,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,KAC3X,CAAEna,KAAM,YAAa2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,QAASU,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC3X,CAAEna,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,OAAQiW,WAAc,cAAeC,QAAW,kBAAmBC,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUjd,KAAQ,UAAWkd,SAAY,QAASC,QAAW,UACpS,CAAEzZ,KAAM,iBAAkB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,QAASE,UAAa,YAAaC,aAAgB,UAAWC,kBAAqB,EAAGC,iBAAoB,QAASC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,aACxmB,CAAEja,KAAM,aAAc2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMiW,WAAc,QAASC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,UAAWE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,SAAW,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC/jB,CAAEja,KAAM,QAAS2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,WAAYE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,GAAIC,iBAAoB,WAAYC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAClkB,CAAEja,KAAM,QAAS2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,QAASE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,QAASE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC1jB,CAAEja,KAAM,UAAW2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,SAAW,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,SAAW,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,SAAW,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,cAC7jB,CAAEja,KAAM,YAAa2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,QAASE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cAC1lB,CAAEja,KAAM,aAAc2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,QAGvV,CACCva,KAAM,gBAAiBsV,QAAkC1V,EAAU,CAClE,CAAEI,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC7kB,CAAEja,KAAM,WAAY2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC7kB,CAAEja,KAAM,OAAQ2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACzkB,CAAEja,KAAM,gBAAiB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cACplB,CAAEja,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMiW,WAAc,OAAQC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cACrlB,CAAEja,KAAM,gBAAiB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,QAASE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,GAAIib,SAAY,cACvlB,CAAEja,KAAM,gBAAiB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,GAAIC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cACxlB,CAAEja,KAAM,gBAAiB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMiW,WAAc,OAAQC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cACxlB,CAAEja,KAAM,cAAe2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,MAAOkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWc,WAAc,GAAIC,cAAiB,UAAWb,QAAW,YAGzQ,CACCzZ,KAAM,eAAgBsV,QAAkC1V,EAAU,CACjE,CAAEI,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,YAC/kB,CAAEja,KAAM,WAAY2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,QAASC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,aAC7kB,CAAEja,KAAM,YAAa2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC5kB,CAAEja,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,YAChlB,CAAEja,KAAM,YAAa2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,QAASE,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC9jB,CAAEja,KAAM,UAAW2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,QAASE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC5kB,CAAEja,KAAM,OAAQ2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,WAAYC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACjlB,CAAEja,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,SAAW,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACtlB,CAAEja,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAKC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC3kB,CAAEja,KAAM,WAAY2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtY,CAAEna,KAAM,YAAa2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,WAAYC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,gBAGrlB,CACCja,KAAM,gBAAiBsV,QAAkC1V,EAAU,CAClE,CAAEI,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,YAC7kB,CAAEja,KAAM,WAAY2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACvY,CAAEna,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,kBAAmBD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,UAAWU,UAAa,CAAC,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACvX,CAAEna,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,OAAQU,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAClX,CAAEna,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,GAAIC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,SAAW,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,YAC7kB,CAAEja,KAAM,aAAc2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,UAAWE,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,GAAIC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,SAAW,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,GAAIib,SAAY,aAC/lB,CAAEja,KAAM,YAAa2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUgB,SAAY,CAAC,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACxV,CAAEva,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,aACxmB,CAAEja,KAAM,WAAY2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,WAAYiW,WAAc,aAAcC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUgB,SAAY,CAAC,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC7V,CAAEva,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASgB,SAAY,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACpV,CAAEva,KAAM,eAAgB2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,KAClW,CAAEva,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,WAAYE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,UAAWU,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,QAG9Y,CACCna,KAAM,cAAesV,QAAkC1V,EAAU,CAChE,CAAEI,KAAM,cAAe2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,aACtmB,CAAEja,KAAM,WAAY2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC5lB,CAAEja,KAAM,gBAAiB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,OAAQiW,WAAc,YAAaC,QAAW,kBAAmBC,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWjd,KAAQ,WAAYkd,SAAY,MAAOC,QAAW,YACpS,CAAEzZ,KAAM,kBAAmB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,cAAeE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,cAAeC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,YAC9mB,CAAEja,KAAM,kBAAmB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cAC5lB,CAAEja,KAAM,eAAgB2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,cAAeE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,GAAIC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,aAC9lB,CAAEja,KAAM,YAAa2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,OAAQkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWjd,KAAQ,WAAYkd,SAAY,MAAOC,QAAW,SAChS,CAAEzZ,KAAM,aAAc2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cAChmB,CAAEja,KAAM,aAAc2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,kBAAmBD,WAAc,cAAeE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWC,SAAY,SAAUC,QAAW,OAAQU,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC3Z,CAAEna,KAAM,UAAW2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,GAAIC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,YAAc,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aAC/lB,CAAEja,KAAM,SAAU2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,cAAeE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,cAAeC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,eAC1mB,CAAEja,KAAM,cAAe2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWE,QAAW,UAAWE,UAAa,cAAeC,aAAgB,WAAYC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,YAAc,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,YACzlB,CAAEja,KAAM,eAAgB2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,kBAAmBC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,GAAIib,SAAY,gBAGvlB,CACCja,KAAM,eAAgBsV,QAAkC1V,EAAU,CACjE,CAAEI,KAAM,mBAAoB2V,YAAa,IAAK+D,SAAS,EAAMT,SAAU,CAAEhW,KAAQ,UAAWkW,QAAW,SAAUqB,MAAS,CAAC,CAAEjB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAM,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,OAChkE,CAAEva,KAAM,YAAa2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,WAAa,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,cAC/lB,CAAEja,KAAM,kBAAmB2V,YAAa,IAAKsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,UAAWC,UAAa,CAAC,CAAEC,UAAa,MAAOhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,WAAa,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,cACrkB,CAAEja,KAAM,UAAW2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,IAAK,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAClW,CAAEva,KAAM,cAAe2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,KAClV,CAAEva,KAAM,YAAa2V,YAAa,IAAKD,aAAa,EAAMgE,SAAS,EAAMU,wBAAyB,IAAKnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACrZ,CAAEva,KAAM,aAAc2V,YAAa,IAAKD,aAAa,EAAMgE,SAAS,EAAMU,wBAAyB,GAAKnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACzZ,CAAEva,KAAM,eAAgB2V,YAAa,IAAKD,aAAa,EAAMgE,SAAS,EAAMU,wBAAyB,IAAKnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC1Z,CAAEva,KAAM,aAAc2V,YAAa,IAAKD,aAAa,EAAMgE,SAAS,EAAMU,wBAAyB,EAAGnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACxZ,CAAEva,KAAM,UAAW2V,YAAa,IAAK+D,SAAS,EAAMU,wBAAyB,EAAGnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,IAAK,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC9X,CAAEva,KAAM,aAAc2V,YAAa,IAAK+D,SAAS,EAAMU,wBAAyB,IAAKnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,QAGhY,CACCva,KAAM,kBAAmBsV,QAAkC1V,EAAU,CACpE,CAAEI,KAAM,oBAAqB2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,KACzV,CAAEva,KAAM,iBAAkB2V,YAAa,GAAID,aAAa,EAAM0E,uBAAwB,EAAGnB,SAAU,CAAEhW,KAAQ,OAAQkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWjd,KAAQ,WAAYkd,SAAY,QAASC,QAAW,SAClU,CAAEzZ,KAAM,cAAe2V,YAAa,GAAIyE,uBAAwB,EAAGnB,SAAU,CAAEhW,KAAQ,OAAQkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWjd,KAAQ,WAAYkd,SAAY,QAASC,QAAW,SAC5S,CAAEzZ,KAAM,aAAc2V,YAAa,GAAID,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,OAAQkW,QAAW,kBAAmBD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWjd,KAAQ,WAAYkd,SAAY,QAASC,QAAW,SACnS,CAAEzZ,KAAM,iBAAkB2V,YAAa,IAAKD,aAAa,EAAMgE,SAAS,EAAMU,wBAAyB,EAAGnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,OAAQD,WAAc,OAAQE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,MACrZ,CAAEva,KAAM,WAAY2V,YAAa,IAAKD,aAAa,EAAMgE,SAAS,EAAMU,wBAAyB,EAAGnB,SAAU,CAAEhW,KAAQ,WAAYiW,WAAc,YAAaC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACpZ,CAAEva,KAAM,aAAc2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,OAAQE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWC,SAAY,MAAOC,QAAW,QAASU,UAAa,CAAC,EAAG,EAAG,GAAI,IAAK,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC/W,CAAEna,KAAM,iBAAkB2V,YAAa,IAAKD,aAAa,EAAMuD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,WAAYC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,WAAYE,QAAW,OAAQE,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,YAAc,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,EAAGib,SAAY,aACzlB,CAAEja,KAAM,aAAc2V,YAAa,IAAKD,aAAa,EAAMgE,SAAS,EAAMU,wBAAyB,GAAKnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,WAAYE,MAAS,WAAYC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,WAAYgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC1Z,CAAEva,KAAM,WAAY2V,YAAa,IAAKD,aAAa,EAAMgE,SAAS,EAAMU,wBAAyB,EAAGnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACrZ,CAAEva,KAAM,UAAW2V,YAAa,IAAKD,aAAa,EAAMgE,SAAS,EAAMU,wBAAyB,EAAGnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,QAASC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAClZ,CAAEva,KAAM,QAAS2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,OAAQiW,WAAc,OAAQC,QAAW,SAAUC,MAAS,UAAWC,eAAkB,IAAKC,gBAAmB,GAAIC,eAAkB,UAAWjd,KAAQ,WAAYkd,SAAY,UAAWC,QAAW,SAC9P,CAAEzZ,KAAM,WAAY2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,KAAMkW,QAAW,SAAUD,WAAc,OAAQE,MAAS,kBAAmBC,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUE,QAAW,OAAQE,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGC,iBAAoB,SAAUC,UAAa,CAAC,CAAEC,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,KAAMhb,UAAa,GAAIib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,EAAGib,SAAY,UAAY,CAAED,UAAa,MAAOhb,UAAa,GAAIib,SAAY,aAClkB,CAAEja,KAAM,WAAY2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,MAAOkW,QAAW,SAAUD,WAAc,aAAcE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUc,WAAc,EAAGC,cAAiB,WAAYb,QAAW,UACzQ,CAAEzZ,KAAM,YAAa2V,YAAa,IAAK+D,SAAS,EAAMU,wBAAyB,EAAGnB,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,YAAaE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACpY,CAAEva,KAAM,eAAgB2V,YAAa,IAAK+D,SAAS,EAAMU,wBAAyB,EAAGnB,SAAU,CAAEhW,KAAQ,QAASkW,QAAW,SAAUD,WAAc,QAASE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUjd,KAAQ,SACrQ,CAAE0D,KAAM,WAAY2V,YAAa,GAAIsD,SAAU,CAAEhW,KAAQ,YAAakW,QAAW,SAAUD,WAAc,QAASE,MAAS,UAAWC,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUC,SAAY,QAASC,QAAW,QAASU,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACvW,CAAEna,KAAM,aAAc2V,YAAa,IAAKsD,SAAU,CAAEhW,KAAQ,WAAYkW,QAAW,SAAUD,WAAc,cAAeE,MAAS,UAAWC,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWgB,SAAY,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,gBEvR/TE,EAAbnP,cACSC,KAAAmP,EAAoB,EACpBnP,KAAAoP,EAAgC,MAACC,GACjCrP,KAAAsP,EAAgB,EAChBtP,KAAAuP,EAAkB,EAClBvP,KAAAwP,EAAiB,EAElBzP,UAAU7D,GACZ8D,KAAKwP,GAAUxP,KAAKmP,GAAWnP,KAAKyP,IACxCzP,KAAKuP,EAAWvP,KAAKuP,EAAU,EAAKvP,KAAKsP,EACzCtP,KAAKoP,EAAQpP,KAAKuP,GAAWrT,EAC7B8D,KAAKwP,IAECzP,SAAS7D,GACX8D,KAAKwP,GAAUxP,KAAKmP,GAAWnP,KAAKyP,IACxCzP,KAAKoP,EAASpP,KAAKuP,EAAUvP,KAAKwP,EAAUxP,KAAKsP,GAASpT,EAC1D8D,KAAKwP,IAECzP,WACN,GAAIC,KAAKwP,GAAU,EAAG,MAAM,IAAI9c,MAAM,4BACtC,MAAMwJ,EAAgB8D,KAAKoP,EAAQpP,KAAKuP,GAIxC,OAHAvP,KAAKoP,EAAQpP,KAAKuP,QAAWF,EAC7BrP,KAAKuP,EAAWvP,KAAKuP,EAAU,EAAKvP,KAAKsP,EACzCtP,KAAKwP,IACEtT,EAED6D,UACN,GAAIC,KAAKwP,GAAU,EAAG,MAAM,IAAI9c,MAAM,4BACtCsN,KAAKwP,IACL,MAAM1d,EAAiBkO,KAAKuP,EAAUvP,KAAKwP,EAAUxP,KAAKsP,EACpDpT,EAAgB8D,KAAKoP,EAAQtd,GAEnC,OADAkO,KAAKoP,EAAQtd,QAASud,EACfnT,EAED6D,YACN,GAAIC,KAAKwP,GAAU,EAAG,MAAM,IAAI9c,MAAM,4BACtC,OAAUsN,KAAKoP,EAAQpP,KAAKuP,GAEtBxP,WACN,GAAIC,KAAKwP,GAAU,EAAG,MAAM,IAAI9c,MAAM,4BACtC,OAAUsN,KAAKoP,EAASpP,KAAKuP,EAAUvP,KAAKwP,EAAS,EAAKxP,KAAKsP,GAEzDvP,QACN,OAAOC,KAAKwP,EAENzP,IAAIjO,EAAeoK,GACzB,GAAIpK,EAAQ,GAAKA,GAASkO,KAAKwP,EAAQ,MAAM,IAAI9c,MAAM,iBACvDsN,KAAKoP,EAASpP,KAAKuP,EAAUzd,EAASkO,KAAKsP,GAASpT,EAE9C6D,IAAIjO,GACV,GAAIA,EAAQ,GAAKA,GAASkO,KAAKwP,EAAQ,MAAM,IAAI9c,MAAM,iBACvD,OAAUsN,KAAKoP,EAASpP,KAAKuP,EAAUzd,EAASkO,KAAKsP,GAE/CvP,OAAOjO,GACb,GAAIA,EAAQ,GAAKA,GAASkO,KAAKwP,EAAQ,MAAM,IAAI9c,MAAM,iBACvD,GAAIZ,GAAUkO,KAAKwP,GAAU,EAAI,CAChC,KAAO1d,EAAQ,GACdkO,KAAKmD,IAAIrR,EAAOkO,KAAKwB,IAAI1P,EAAQ,IACjCA,IAEDkO,KAAK0P,eACC,CAEN,IADA5d,IACOA,EAAQkO,KAAKwP,GACnBxP,KAAKmD,IAAIrR,EAAQ,EAAGkO,KAAKwB,IAAI1P,IAC7BA,IAEDkO,KAAK2P,WAGC5P,IACP,GAAIC,KAAKmP,GAAa,WAAY,MAAM,IAAIzc,MAAM,qBAClDsN,KAAKmP,EAAYnP,KAAKmP,GAAa,EACnC,MAAMS,EAAkC5P,KAAKoP,EACvC9c,EAAkC,IAAIwK,MAAMkD,KAAKmP,GACjDU,EAA6B,EAAd7P,KAAKwP,EACpBtX,EAAgC,EAAf8H,KAAKuP,EAC5B,IAAK,IAAIte,EAAI,EAAGA,EAAI4e,EAAM5e,IACzBqB,EAAUrB,GAAK2e,EAAW1X,EAASjH,EAAK+O,KAAKsP,GAE9C,IAAK,IAAIre,EAAI4e,EAAM5e,EAAI+O,KAAKmP,EAAWle,IACtCqB,EAAUrB,QAAKoe,EAEhBrP,KAAKuP,EAAU,EACfvP,KAAKoP,EAAU9c,EACf0N,KAAKsP,EAAQtP,KAAKmP,EAAY,GC0DhC,MAAMW,EAA6C,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACjxe,MAAMC,EAILjQ,YAAYkQ,EAAgB5E,EAAoBK,GAHxC1L,KAAAkQ,EAAkB,GAClBlQ,KAAAmQ,EAAqB,EAG5B,IAAK,IAAIlf,EAAYoa,EAAYpa,EAAIya,EAAWza,IAAK,CACpD,MAAMuD,EAAgBub,EAAoBE,EAAOG,WAAWnf,IAC5D+O,KAAKkQ,EAAM5e,KAAMkD,GAAS,EAAK,GAC/BwL,KAAKkQ,EAAM5e,KAAMkD,GAAS,EAAK,GAC/BwL,KAAKkQ,EAAM5e,KAAMkD,GAAS,EAAK,GAC/BwL,KAAKkQ,EAAM5e,KAAMkD,GAAS,EAAK,GAC/BwL,KAAKkQ,EAAM5e,KAAMkD,GAAS,EAAK,GAC/BwL,KAAKkQ,EAAM5e,KAAa,EAARkD,IAIXuL,KAAKmN,GACX,IAAIxY,EAAiB,EACrB,KAAOwY,EAAW,GACjBxY,IAAmB,EACnBA,GAAUsL,KAAKkQ,EAAMlQ,KAAKmQ,KAC1BjD,IAED,OAAOxY,EAGDqL,aAAasQ,EAAkBC,GACrC,IAAI5b,EAAiB2b,EACjBE,EAAkBD,EACtB,KAAOtQ,KAAKkQ,EAAMlQ,KAAKmQ,MACtBzb,GAAU,GAAK6b,EACfA,IAED,KAAOA,EAAU,GAChBA,IACIvQ,KAAKkQ,EAAMlQ,KAAKmQ,OACnBzb,GAAU,GAAK6b,GAGjB,OAAO7b,EAGDqL,mBACN,OAAOC,KAAKwQ,aAAa,EAAG,GAGtBzQ,yBACN,OAAOC,KAAKwQ,aAAa,EAAG,GAGtBzQ,eACN,OAAOC,KAAKwQ,aAAa,EAAG,GAGtBzQ,oBACN,OAAIC,KAAKyQ,KAAK,IACLzQ,KAAKwQ,aAAa,EAAG,GAEtBxQ,KAAKwQ,aAAa,EAAG,IAK/B,MAAME,EAAN3Q,cACSC,KAAA2Q,EAAiB,EACjB3Q,KAAAkQ,EAAkB,GAEnBnQ,QACNC,KAAK2Q,EAAS,EAGR5Q,MAAMmN,EAAkB1Y,GAE9B,IADA0Y,IACOA,GAAY,GAClBlN,KAAKkQ,EAAMlQ,KAAK2Q,KAAanc,IAAU0Y,EAAY,EACnDA,IAIKnN,cAAcsQ,EAAkBC,EAAiB9b,GACvD,GAAIA,EAAQ6b,EAAU,MAAM,IAAI3d,MAAM,uBACtC8B,GAAS6b,EACT,IAAIE,EAAkBD,EACtB,KAAO9b,GAAU,GAAK+b,GACrBvQ,KAAKkQ,EAAMlQ,KAAK2Q,KAAY,EAC5Bnc,GAAS,GAAK+b,EACdA,IAGD,IADAvQ,KAAKkQ,EAAMlQ,KAAK2Q,KAAY,EACrBJ,EAAU,GAChBA,IACAvQ,KAAKkQ,EAAMlQ,KAAK2Q,KAAanc,IAAU+b,EAAW,EAI7CxQ,kBAAkBvL,GACxBwL,KAAK4Q,cAAc,EAAG,EAAGpc,GAGnBuL,cAAcvL,GACpBwL,KAAK4Q,cAAc,EAAG,EAAGpc,GAGnBuL,mBAAmBvL,GACrBA,EAAQ,GACXwL,KAAK6Q,MAAM,EAAG,GACd7Q,KAAK4Q,cAAc,EAAG,GAAIpc,KAE1BwL,KAAK6Q,MAAM,EAAG,GACd7Q,KAAK4Q,cAAc,EAAG,EAAGpc,IAIpBuL,OAAO+Q,GACb,IAAK,IAAI7f,EAAY,EAAGA,EAAI6f,EAAMH,EAAQ1f,IACzC+O,KAAKkQ,EAAMlQ,KAAK2Q,KAAYG,EAAMZ,EAAMjf,GAInC8O,aAAagR,GAEnB,IAAK,IAAI9f,EAAY,EAAGA,EAAI+O,KAAK2Q,EAAQ1f,GAAK,EAAG,CAChD,MAAMuD,EAAiBwL,KAAKkQ,EAAMjf,IAAM,EAAM+O,KAAKkQ,EAAMjf,EAAI,IAAM,EAAM+O,KAAKkQ,EAAMjf,EAAI,IAAM,EAAM+O,KAAKkQ,EAAMjf,EAAI,IAAM,EAAM+O,KAAKkQ,EAAMjf,EAAI,IAAM,EAAK+O,KAAKkQ,EAAMjf,EAAI,GACxK8f,EAAOzf,KAAKwe,EAAoBtb,IAEjC,OAAOuc,EAGDhR,eACN,OAAOrO,KAAKsf,KAAKhR,KAAK2Q,EAAS,aAUjBM,EAAYhD,EAAkBiD,EAAcza,GAC3D,MAAO,CAAEwX,SAAUA,EAAUiD,KAAMA,EAAMza,OAAQA,GAGlD,SAAS0a,EAAMhe,EAAaie,EAAaC,GAExC,OAAIA,IADJD,GAAY,GAEPC,GAAOle,EAAYke,EACXle,EAELie,EAIT,SAASE,EAAcne,EAAaie,EAAaC,GAChD,GAAIle,GAAOke,GAAOA,GAAOD,EAAK,OAAOC,EACrC,MAAM,IAAI3e,MAAM,SAAS2e,mBAAqBle,MAAQie,YAG1CG,EAMZxR,YAAmByR,EAAeC,EAAeC,EAAajb,EAAgBkb,GAAmB,GAChG3R,KAAK4R,QAAU,CAACJ,GAChBxR,KAAK6R,KAAO,CAACZ,EAAY,EAAG,EAAGxa,GAASwa,EAAY,EAAGS,EAAMD,EAAOE,EAAU,EAAIlb,IAClFuJ,KAAKyR,MAAQA,EACbzR,KAAK0R,IAAMA,EAGL3R,mBACN,IAAI+R,EAAsC,EACtCC,EAAuB,EAC3B,IAAK,IAAIC,EAAmB,EAAGA,EAAWhS,KAAK6R,KAAK3gB,OAAQ8gB,IAAY,CACvE,MAAMC,EAAgBjS,KAAK6R,KAAKG,EAAW,GACrCE,EAAgBlS,KAAK6R,KAAKG,GAChC,GAAIC,EAAKhE,UAAYiE,EAAKjE,SAAU,CACnC,MAAMkE,EAAmBD,EAAKhB,KAAOe,EAAKf,KACtCY,EAA8BK,IACjCL,EAA8BK,EAC9BJ,EAAeE,EAAKhE,WAIvB,GAAmC,GAA/B6D,EAAkC,CACrC,IAAIM,EAAwB,EAC5B,IAAK,IAAIJ,EAAmB,EAAGA,EAAWhS,KAAK6R,KAAK3gB,OAAQ8gB,IAAY,CACvE,MAAMK,EAAerS,KAAK6R,KAAKG,GAC3BI,EAAgBC,EAAI5b,SACvB2b,EAAgBC,EAAI5b,OACpBsb,EAAeM,EAAIpE,WAItB,OAAO8D,EAGDhS,QACN,MAAMuS,EAAgB,IAAIf,GAAM,EAAGvR,KAAKyR,MAAOzR,KAAK0R,IAAK,GACzDY,EAAQV,QAAU5R,KAAK4R,QAAQW,SAC/BD,EAAQT,KAAO,GACf,IAAK,MAAMQ,KAAOrS,KAAK6R,KACtBS,EAAQT,KAAKvgB,KAAK2f,EAAYoB,EAAIpE,SAAUoE,EAAInB,KAAMmB,EAAI5b,SAE3D,OAAO6b,SAIIE,EAAbzS,cACQC,KAAAyS,MAAgB,GAChBzS,KAAA0S,WAAqB,EAErB3S,aACN,MAAMrL,EAAiB,GACvB,IAAK,MAAMie,KAAQ3S,KAAKyS,MACvB/d,EAAOpD,KAAKqhB,EAAKC,SAElB,OAAOle,EAGDqL,QACNC,KAAKyS,MAAMvhB,OAAS,EACpB8O,KAAK0S,WAAa,SAIPG,EAKZ9S,YAAYjO,GAJLkO,KAAAyO,UAAoB,EACpBzO,KAAAvM,UAAoB,EACpBuM,KAAA0O,SAAmB,EAGzB1O,KAAK8S,MAAMhhB,GAGLiO,MAAMjO,GACZkO,KAAKyO,UAAY,EACjBzO,KAAKvM,UAAa3B,GAAS,EAAKjB,EAAO6I,qBAAuB,EAC9DsG,KAAK0O,SAAqB,GAAT5c,EAAc,EAAI,EAG7BiO,KAAK+Q,GACX9Q,KAAKyO,UAAYqC,EAAMrC,UACvBzO,KAAKvM,UAAYqd,EAAMrd,UACvBuM,KAAK0O,SAAWoC,EAAMpC,gBAIXqE,EAKZhT,YAAYiT,GAJLhT,KAAAgP,SAAqB,GACpBhP,KAAAiT,EAA6B,KAC7BjT,KAAAkT,GAAwB,EAG/BlT,KAAK8S,MAAME,GAGLjT,MAAMiT,GACZ,IAAK,IAAI/hB,EAAY,EAAGA,EAAIJ,EAAOuJ,sBAAuBnJ,IACzD,GAAI+hB,EACHhT,KAAKgP,SAAS/d,GAAKS,KAAKgZ,MAAM7Z,EAAO6C,aAAe,EAAIhC,KAAKe,KAAK,EAAIxB,EAAI,SACpE,CACN,MAAMkiB,EAA2B,GAALliB,GAAe,GAALA,GAAe,IAALA,GAAgB,IAALA,GAAgB,IAALA,GAAgB,IAALA,GAAgB,IAALA,GAAgB,IAALA,GAAWA,GAAK,GACvH+O,KAAKgP,SAAS/d,GAAKkiB,EAAazhB,KAAK0f,IAAI,EAAG1f,KAAKgZ,MAAM7Z,EAAO6C,aAAe,EAAIzC,EAAI,MAAQ,EAG/F+O,KAAKkT,GAAe,EAGdnT,sBACNC,KAAKkT,GAAe,EAGdnT,cAAcqT,GACpB,IAAKpT,KAAKkT,GAA8B,MAAdlT,KAAKiT,EAAe,CAC7C,IAAII,EAAqBxiB,EAAOuB,gBAEd,MAAd4N,KAAKiT,GAAiBjT,KAAKiT,EAAM/hB,QAAUmiB,EAAa,IAC3DrT,KAAKiT,EAAQ,IAAI9gB,aAAakhB,EAAa,IAE5C,MAAMtiB,EAAqBiP,KAAKiT,EAEhC,IAAK,IAAIhiB,EAAY,EAAGA,EAAIoiB,EAAYpiB,IACvCF,EAAKE,GAAK,EAGX,MAAMqiB,EAAwB,GACxBC,EAAuB,IAEvBC,EAAuB,CAAC,EAAG,EAAI,EAAG9hB,KAAK6B,IAAI,EAAI,GAAK7B,KAAK8B,IAAK,EAAI,EAAG9B,KAAK6B,IAAI,KAAS7B,KAAK8B,IAAK,EAAI,EAAG,EAAI,GAClH,SAASigB,EAAqBC,GAC7B,OAAON,EAAe1hB,KAAKwR,MAAMwQ,EAAQ7iB,EAAOwJ,gCAAkCmZ,GAAYE,EAAQ7iB,EAAOwJ,gCAAkCxJ,EAAOwJ,gCAGvJ,IAAIhH,EAA4B,EAChC,IAAK,IAAIpC,EAAY,EAAGA,EAAIJ,EAAOuJ,sBAAwB,EAAGnJ,IAAK,CAClE,MAAM0iB,EAAkB1iB,GAAK,EAAK,EAAI+O,KAAKgP,SAAS/d,EAAI,GAClD2iB,EAAkB3iB,GAAKJ,EAAOuJ,sBAAyB4F,KAAKgP,SAASne,EAAOuJ,sBAAwB,GAAK4F,KAAKgP,SAAS/d,GACvH4iB,EAAkBJ,EAAqBxiB,EAAI,GACjD,IAAI6iB,EAAkBL,EAAqBxiB,GACvCA,GAAKJ,EAAOuJ,wBAAuB0Z,EAAUR,GAAiBQ,EAAUR,GAAiBC,GAC/E,GAAVI,GAAyB,GAAVC,IAEnBvgB,GAAqB,IAAOb,EAAkBzB,EAAM8iB,EAASC,EAASH,EAAS9iB,EAAO6C,YAAakgB,EAAS/iB,EAAO6C,aAAc,KAE9HsM,KAAKgP,SAASne,EAAOuJ,sBAAwB,GAAK,IACrD/G,GAAqB,IAAOb,EAAkBzB,EAAMuiB,GAAiBG,EAAqB5iB,EAAOuJ,uBAAyBkZ,GAAiBC,EAAcD,EAAetT,KAAKgP,SAASne,EAAOuJ,sBAAwB,GAAKvJ,EAAO6C,YAAa,GAAI,KAGnP3B,EAA4BhB,EAAMsiB,GAClCrhB,EAAsBjB,EAAM,GAAOW,KAAKe,KAAK4gB,GAAc3hB,KAAKuB,IAAII,EAAmB,OAGvFtC,EAAKsiB,GAActiB,EAAK,GAExBiP,KAAKkT,GAAe,EAErB,OAAOlT,KAAKiT,SAIDc,EAKZhU,cAJOC,KAAA4O,UAAsB,GACrB5O,KAAAiT,EAA6B,KAC7BjT,KAAAkT,GAAwB,EAG/BlT,KAAK8S,QAGC/S,QACN,IAAK,IAAI9O,EAAY,EAAGA,EAAIJ,EAAO0J,uBAAwBtJ,IAC1D+O,KAAK4O,UAAU3d,GAAK,EAErB+O,KAAK4O,UAAU,GAAK/d,EAAO6J,aAC3BsF,KAAK4O,UAAU,GAAK/d,EAAO6J,aAC3BsF,KAAK4O,UAAU,GAAK/d,EAAO6J,aAC3BsF,KAAKkT,GAAe,EAGdnT,sBACNC,KAAKkT,GAAe,EAGdnT,gBACN,IAAKC,KAAKkT,GAA8B,MAAdlT,KAAKiT,EAAe,CAC7C,IAAII,EAAqBxiB,EAAO8J,oBAChC,MAAMvH,EAA0BvB,EAAY,GAE1B,MAAdmO,KAAKiT,GAAiBjT,KAAKiT,EAAM/hB,QAAUmiB,EAAa,IAC3DrT,KAAKiT,EAAQ,IAAI9gB,aAAakhB,EAAa,IAE5C,MAAMtiB,EAAqBiP,KAAKiT,EAEhC,IAAK,IAAIhiB,EAAY,EAAGA,EAAIoiB,EAAYpiB,IACvCF,EAAKE,GAAK,EAGX,MAAM8B,GAAwB,IAC9B,IAAIihB,EAAwC,EAE5C,IAAK,IAAIC,EAAwB,EAAGA,EAAgBpjB,EAAO2J,kBAAmByZ,IAAiB,CAC9F,MAAMC,EAAuBD,EAAgB,EAC7C,IAAIE,EAAuBF,EAAgBpjB,EAAO0J,uBAAyByF,KAAK4O,UAAUqF,GAAiBjU,KAAK4O,UAAU/d,EAAO0J,uBAAyB,GACtJ0Z,GAAiBpjB,EAAO0J,yBAC3B4Z,GAAgB,GAAKF,EAAgBpjB,EAAO0J,yBAA2B1J,EAAO2J,kBAAoB3J,EAAO0J,yBAE1G,MAAM6Z,EAA0BD,EAAetjB,EAAO6J,aACtD,IAAIjH,EAAoB/B,KAAKuB,IAAI,EAAGkhB,EAAetjB,EAAO6J,aAAe,GAAKhJ,KAAKe,KAAK2hB,GACpFH,EAAgBpjB,EAAO0J,yBAC1ByZ,GAAiCvgB,GAElCA,GAAa/B,KAAKuB,IAAIihB,EAAcnhB,GAIpCU,GAAaL,EAAU6gB,EAAgB,KAEvCljB,EAAKsiB,EAAaa,GAAgBzgB,EAGnC1B,EAA4BhB,EAAMsiB,GAGlC,MAAMzZ,EAAe,EAAIlI,KAAKuB,IAAI+gB,EAA+B,IAGjE,IAAI5iB,EAAqB,EACrBC,EAAmB,EACvB,IAAK,IAAIJ,EAAY,EAAGA,EAAIF,EAAKG,OAAQD,IACxCG,GAAcC,EACdA,EAAWN,EAAKE,GAAK2I,EACrB7I,EAAKE,GAAKG,EAGXL,EAAKsiB,GAActiB,EAAK,GAExBiP,KAAKkT,GAAe,EAErB,OAAOlT,KAAKiT,SAIDoB,EA8CZtU,YAAYiT,EAAyBsB,GAEpC,GA/CMtU,KAAAtI,KAAI,EACJsI,KAAAkK,OAAiB,EACjBlK,KAAAuU,SAAmB,EACnBvU,KAAAwU,UAAoB,EACpBxU,KAAAyU,aAAuB,GACvBzU,KAAA+N,gBAA0B,EAC1B/N,KAAAgO,eAAyB,EACzBhO,KAAA2N,WAAqB,EACrB3N,KAAAkO,QAAkB,EAClBlO,KAAA0U,aAAuB,EACvB1U,KAAA2U,aAAuB,GACvB3U,KAAA4U,aAAuB,EACvB5U,KAAA6U,YAAsB,EACtB7U,KAAAiO,SAAmB,EACnBjO,KAAA4N,QAAkB,EAClB5N,KAAA6N,MAAgB,EAChB7N,KAAAvJ,OAAiB,EACjBuJ,KAAA8U,IAAcjkB,EAAO0H,UACrByH,KAAA+U,SAAmB,GACnB/U,KAAAgV,cAAwB,GACxBhV,KAAAiV,gBAA0B,EAC1BjV,KAAAkV,mBAA6B,EAC7BlV,KAAAmV,qBAA+B,EAC/BnV,KAAAoV,OAAiB,EACjBpV,KAAA8O,WAAqBje,EAAO+J,gBAC5BoF,KAAA+O,cAAwB,EACxB/O,KAAAoO,UAAoB,EACpBpO,KAAAqO,aAAuB,EACvBrO,KAAAsO,kBAA4B,EAC5BtO,KAAAuO,iBAA2B,EAC3BvO,KAAAqV,QAAkB,EAClBrV,KAAAsV,YAAsB,EACtBtV,KAAAuV,QAAkB,EAClBvV,KAAA2O,eAA+B,IAAIpd,aAAa,IAChDyO,KAAAwV,uBAAuC,IAAIjkB,aAAa,IAC/CyO,KAAAwO,UAAwB,GAExBxO,KAAAyV,cAA+B,IAAI1B,EACnC/T,KAAA0V,iBAA6B,GAC7B1V,KAAA2V,qBAAuC,GAChD3V,KAAAsB,YAAwB,GACxBtB,KAAA4V,YAA2B,GAC3B5V,KAAA6V,eAA2B,GAC3B7V,KAAA8V,YAA4B,GAI9BxB,EACH,IAAK,IAAIyB,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAChD/V,KAAKsB,YAAYhQ,KAAK,GACtB0O,KAAK4V,YAAYtkB,KAAK0kB,EAAUC,QAChCjW,KAAK6V,eAAevkB,KAAK,GACzB0O,KAAK8V,YAAYxkB,KAAK4kB,EAAWC,SAInCnW,KAAKoW,aAAe,IAAIrD,EAAaC,GACrC,IAAK,IAAI/hB,EAAY,EAAGA,EAAIJ,EAAOuI,cAAenI,IACjD+O,KAAKwO,UAAUvd,GAAK,IAAI4hB,EAAS5hB,GAElC,IAAK,IAAIA,EAAY,EAAGA,EAAIJ,EAAOyK,UAAWrK,IAC7C+O,KAAK0V,iBAAiBzkB,GAAKJ,EAAOkJ,UAAUxF,WAAW,WAAWzC,MAClEkO,KAAK2V,qBAAqB1kB,GAAK,IAAI8hB,GAAa,GAGjD,IAAK,IAAI9hB,EAAI,EAAGA,EAAI,GAAIA,IACvB+O,KAAK2O,eAAe1d,GAAK,GAAKS,KAAKwR,MAAO,IAADjS,GAG1C,IAAID,EAAc,EAClB,IAAK,IAAIC,EAAY,EAAGA,EAAI+O,KAAK2O,eAAezd,OAAQD,IACvDD,GAAOgP,KAAK2O,eAAe1d,GAE5B,MAAME,EAAkBH,EAAMgP,KAAK2O,eAAezd,OAGlD,IAAIE,EAAqB,EACrBC,EAAmB,EACvB,IAAK,IAAIJ,EAAY,EAAGA,EAAI+O,KAAK2O,eAAezd,OAAQD,IACvDG,GAAcC,EACdA,EAAW2O,KAAK2O,eAAe1d,GAAKE,EACpC6O,KAAKwV,uBAAuBvkB,GAAKG,EAIlC4O,KAAKwV,uBAAuB,IAAM,EAI5BzV,gBAAgBrI,EAAsBsb,EAAyBsB,GAYrE,OAVIA,IAAc5c,EAAI,GACtBsI,KAAKtI,KAAOA,EACZsI,KAAKkK,OAASxS,EACdsI,KAAKvJ,OAAS,EACduJ,KAAK8U,IAAMjkB,EAAO0H,UAClByH,KAAK+U,SAAW,GAChB/U,KAAKgV,cAAgB,GACrBhV,KAAKoV,OAAS,EACdpV,KAAKkV,mBAAoB,EACzBlV,KAAKmV,qBAAsB,EACnBzd,GACP,KAAA,EACCsI,KAAKuU,SAAW,EAChBvU,KAAKyU,aAAe,EACpBzU,KAAK+N,gBAAkB,EACvB/N,KAAKgO,eAAiBnd,EAAOkJ,UAAUxF,WAAmB,OAAEzC,MAC5DkO,KAAK2N,WAAa,EAClB3N,KAAKkO,QAAU,EACflO,KAAKiO,SAAW,EAChBjO,KAAK4N,QAAU,EACf5N,KAAK6N,MAAQ,EACb,MACD,KAAA,EACC7N,KAAKuU,SAAW,EAChBvU,KAAKyU,aAAe,EACpBzU,KAAK+N,gBAAkB,EACvB/N,KAAKgO,eAAiBnd,EAAOkJ,UAAUxF,WAAmB,OAAEzC,MAC5DkO,KAAK2N,WAAa,EAClB3N,KAAKkO,QAAU,EACflO,KAAKiO,SAAW,EAChBjO,KAAK4N,QAAU,EACf5N,KAAK6N,MAAQ,EACb,IAAK,IAAI5c,EAAY,EAAGA,EAAI,GAAIA,IAC/B+O,KAAK2O,eAAe1d,GAAK,GAAMS,KAAKwR,MAAO,IAADjS,GAG3C,IAAID,EAAc,EAClB,IAAK,IAAIC,EAAY,EAAGA,EAAI+O,KAAK2O,eAAezd,OAAQD,IACvDD,GAAOgP,KAAK2O,eAAe1d,GAE5B,MAAME,EAAkBH,EAAMgP,KAAK2O,eAAezd,OAGlD,IAAIE,EAAqB,EACrBC,EAAmB,EACvB,IAAK,IAAIJ,EAAY,EAAGA,EAAI+O,KAAK2O,eAAezd,OAAQD,IACvDG,GAAcC,EACdA,EAAW2O,KAAK2O,eAAe1d,GAAKE,EACpC6O,KAAKwV,uBAAuBvkB,GAAKG,EAGlC4O,KAAKwV,uBAAuB,IAAM,EAClC,MACD,KAAA,EACCxV,KAAK2N,WAAa,EAClB3N,KAAKkO,QAAU,EACflO,KAAK4N,QAAU,EACf5N,KAAK6N,MAAQ,EACb7N,KAAKyU,aAAe,GACpBzU,KAAK+N,gBAAkB,EACvB/N,KAAKgO,eAAiB,EACtBhO,KAAKoO,UAAY,EACjBpO,KAAKqO,aAAe,EACpBrO,KAAKsO,kBAAoB,EACzBtO,KAAKuO,iBAAmB1d,EAAOkJ,UAAUxF,WAAmB,OAAEzC,MAC9D,IAAK,IAAIb,EAAY,EAAGA,EAAI+O,KAAKwO,UAAUtd,OAAQD,IAClD+O,KAAKwO,UAAUvd,GAAG6hB,MAAM7hB,GAEzB,MACD,KAAA,EACC+O,KAAKwU,UAAY,EACjBxU,KAAK2N,WAAa,EAClB3N,KAAK4N,QAAU,EACf5N,KAAK6N,MAAQ,EACb7N,KAAKyU,aAAe,GACpBzU,KAAK+N,gBAAkB,EACvB/N,KAAKgO,eAAiBnd,EAAOkJ,UAAUxF,WAAmB,OAAEzC,MAC5D,MACD,KAAA,EACCkO,KAAK2N,WAAa,EAClB3N,KAAK4N,QAAU,EACf5N,KAAK6N,MAAQ,EACb7N,KAAKyU,aAAe,GACpBzU,KAAK+N,gBAAkB,EACvB/N,KAAKgO,eAAiBnd,EAAOkJ,UAAUxF,WAAmB,OAAEzC,MAC5DkO,KAAKoW,aAAatD,MAAME,GACxB,MACD,KAAA,EACChT,KAAK4N,QAAU,EACf,IAAK,IAAI3c,EAAY,EAAGA,EAAIJ,EAAOyK,UAAWrK,IAC7C+O,KAAK0V,iBAAiBzkB,GAAKJ,EAAOkJ,UAAUxF,WAAW,WAAWzC,MAC9Bud,MAAhCrP,KAAK2V,qBAAqB1kB,KAC7B+O,KAAK2V,qBAAqB1kB,GAAK,IAAI8hB,GAAa,IAEjD/S,KAAK2V,qBAAqB1kB,GAAG6hB,MAAME,GAEpC,MACD,KAAA,EACChT,KAAKyU,aAAe,GACpBzU,KAAK+N,gBAAkB,EACvB/N,KAAKgO,eAAiBnd,EAAOkJ,UAAUxF,WAAmB,OAAEzC,MAC5DkO,KAAK2N,WAAa,EAClB3N,KAAKkO,QAAU,EACflO,KAAKiO,SAAW,EAChBjO,KAAK4N,QAAU,EACf5N,KAAK6N,MAAQ,EACb7N,KAAKyV,cAAc3C,QACnB,MACD,KAAA,EACC9S,KAAKyU,aAAe,GACpBzU,KAAK+N,gBAAkB,EACvB/N,KAAKgO,eAAiBnd,EAAOkJ,UAAUxF,WAAmB,OAAEzC,MAC5DkO,KAAK2N,WAAa,EAClB3N,KAAKkO,QAAU,EACflO,KAAKiO,SAAW,EAChBjO,KAAK4N,QAAU,EACf5N,KAAK6N,MAAQ,EACb7N,KAAK8O,WAAaje,EAAO+J,gBACzBoF,KAAK+O,cAAgBle,EAAOkJ,UAAUxF,WAAW,WAAWzC,MAC5D,MACD,KAAA,EACCkO,KAAK2N,WAAa,EAClB3N,KAAKkO,QAAU,EACflO,KAAKiO,SAAW,EAChBjO,KAAK4N,QAAU,EACf5N,KAAK6N,MAAQ,EACb7N,KAAKsB,YAAc,GACnBtB,KAAK4V,YAAc,GACnB5V,KAAK6V,eAAiB,GACtB7V,KAAK8V,YAAc,GACnB,IAAK,IAAIC,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAChD/V,KAAKsB,YAAYhQ,KAAK,GACtB0O,KAAK4V,YAAYtkB,KAAK0kB,EAAUC,QAChCjW,KAAK6V,eAAevkB,KAAK,GACzB0O,KAAK8V,YAAYxkB,KAAK4kB,EAAWC,SAElC,MACD,QACC,MAAM,IAAIzjB,MAAM,iCAAmCgF,IAI/CqI,eACN,MAAMsW,EAAwB,CAC7B3e,KAAQ7G,EAAOyF,oBAAoB0J,KAAKtI,MACxCjB,OAAUuJ,KAAKvJ,OACfqe,IAAuC,KAA/B9U,KAAK8U,IAAMjkB,EAAO0H,WAAmB1H,EAAO0H,UACpDwc,SAAY/U,KAAK+U,SACjBC,cAAiBhV,KAAKgV,cACtBC,eAAkBjV,KAAKiV,eACvBC,kBAAqBlV,KAAKkV,kBAC1BC,oBAAuBnV,KAAKmV,oBAC5BjH,QAAWlO,KAAKkO,QAChBwG,aAAgB1U,KAAK0U,aACrBE,aAAgB5U,KAAK4U,aACrBD,aAAgB3U,KAAK2U,aACrBE,YAAe7U,KAAK6U,YACpBO,OAAUpV,KAAKoV,OACfxH,QAAW/c,EAAOuH,aAAa4H,KAAK4N,UAerC,GAZI5N,KAAKkK,QAAUlK,KAAKtI,OACvB2e,EAAyB,OAAIrW,KAAKkK,QAGtB,GAATlK,KAAKtI,OACR2e,EAA6B,WAAIxlB,EAAOqG,YAAY8I,KAAK2N,YAAYlZ,KACrE4hB,EAAwB,MAAIrW,KAAKsW,WAAW7hB,KAC5C4hB,EAAiC,eAAI3kB,KAAKgZ,MAAM7Z,EAAO+F,kBAAoBlF,KAAKuB,IAAI,EAAK+M,KAAKuW,2BAC9FF,EAAkC,gBAAI3kB,KAAKgZ,MAAM,IAAM1K,KAAK+N,iBAAmBld,EAAOoG,qBAAuB,IAC7Gof,EAAiC,eAAIrW,KAAKwW,oBAAoB/hB,MAGlD,GAATuL,KAAKtI,KACR2e,EAAuB,KAAIxlB,EAAOoB,WAAW+N,KAAKwU,WAAW/f,UACvD,GAAa,GAATuL,KAAKtI,KAAiC,CAChD2e,EAA2B,SAAI,GAC/B,IAAK,IAAIplB,EAAY,EAAGA,EAAIJ,EAAOuJ,sBAAuBnJ,IACzDolB,EAA2B,SAAEplB,GAAKS,KAAKgZ,MAAM,IAAM1K,KAAKoW,aAAapH,SAAS/d,GAAKJ,EAAO6C,kBAErF,GAAa,GAATsM,KAAKtI,KAAgC,CAC/C2e,EAAwB,MAAI,GAC5B,IAAK,IAAIjJ,EAAY,EAAGA,EAAIvc,EAAOyK,UAAW8R,IAAK,CAClD,MAAM4B,EAAqB,GAC3B,IAAK,IAAI/d,EAAY,EAAGA,EAAIJ,EAAOuJ,sBAAuBnJ,IACzD+d,EAAS/d,GAAKS,KAAKgZ,MAAM,IAAM1K,KAAK2V,qBAAqBvI,GAAG4B,SAAS/d,GAAKJ,EAAO6C,aAElF2iB,EAAwB,MAAEjJ,GAAK,CAC9BY,eAAkBhO,KAAKyW,mBAAmBrJ,GAAG3Y,KAC7Cua,SAAYA,SAGR,GAAa,GAAThP,KAAKtI,KACf2e,EAAuB,KAAIxlB,EAAO2F,UAAUwJ,KAAKuU,UAAU9f,KAC3D4hB,EAA2B,SAAIxlB,EAAOmH,UAAUgI,KAAKiO,UAAUxZ,KAC3C,GAAhBuL,KAAKkO,QACRmI,EAA0B,QAAIxlB,EAAO4G,SAASuI,KAAKkO,SAASzZ,KAE5D4hB,EAA0B,QAAI,cAEzB,GAAa,GAATrW,KAAKtI,KAAuC,CACtD2e,EAAuB,KAAIxlB,EAAO2F,UAAUwJ,KAAKuU,UAAU9f,KAC3D4hB,EAA2B,SAAIxlB,EAAOmH,UAAUgI,KAAKiO,UAAUxZ,KAC3C,GAAhBuL,KAAKkO,QACRmI,EAA0B,QAAIxlB,EAAO4G,SAASuI,KAAKkO,SAASzZ,KAE5D4hB,EAA0B,QAAI,SAE/BA,EAAiC,eAAI,IAAI9kB,aAAa,IACtD8kB,EAAyC,uBAAI,IAAI9kB,aAAa,IAC9D,IAAK,IAAIN,EAAY,EAAGA,EAAI+O,KAAK2O,eAAezd,OAAQD,IACvDolB,EAAiC,eAAEplB,GAAK+O,KAAK2O,eAAe1d,GAK7DolB,EAAyC,uBAAE,IAAM,OAC3C,GAAa,GAATrW,KAAKtI,KACf2e,EAA6B,WAAIrW,KAAK8O,WACtCuH,EAAgC,cAAIxlB,EAAOkJ,UAAUiG,KAAK+O,eAAeta,KACrD,GAAhBuL,KAAKkO,QACRmI,EAA0B,QAAIxlB,EAAO4G,SAASuI,KAAKkO,SAASzZ,KAE5D4hB,EAA0B,QAAI,cAEzB,GAAa,GAATrW,KAAKtI,KAAkC,CACjD2e,EAA2B,SAAIxlB,EAAOmH,UAAUgI,KAAKiO,UAAUxZ,KAC3C,GAAhBuL,KAAKkO,QACRmI,EAA0B,QAAIxlB,EAAO4G,SAASuI,KAAKkO,SAASzZ,KAE5D4hB,EAA0B,QAAI,SAE/BA,EAA4B,UAAI,GAChC,IAAK,IAAIplB,EAAY,EAAGA,EAAIJ,EAAO0J,uBAAwBtJ,IAC1DolB,EAA4B,UAAEplB,GAAKS,KAAKgZ,MAAM,IAAM1K,KAAKyV,cAAc7G,UAAU3d,GAAKJ,EAAO6J,mBAExF,GAAa,GAATsF,KAAKtI,KAA2B,CAC1C,MAAMgf,EAA0B,GAChC,IAAK,MAAMC,KAAY3W,KAAKwO,UAC3BkI,EAAcplB,KAAK,CAClBmd,UAAa5d,EAAO8I,oBAAoBgd,EAASlI,WAAWha,KAC5DhB,UAAakjB,EAASljB,UACtBib,SAAY7d,EAAOkJ,UAAU4c,EAASjI,UAAUja,OAG9B,GAAhBuL,KAAKkO,QACRmI,EAA0B,QAAIxlB,EAAO4G,SAASuI,KAAKkO,SAASzZ,KAE5D4hB,EAA0B,QAAI,SAE/BA,EAA4B,UAAIxlB,EAAOwI,WAAW2G,KAAKoO,WAAW3Z,KAClE4hB,EAA+B,aAAIxlB,EAAOoJ,UAAU+F,KAAKqO,cAAc5Z,KACvE4hB,EAAoC,kBAAIrW,KAAKsO,kBAC7C+H,EAAmC,iBAAIxlB,EAAOkJ,UAAUiG,KAAKuO,kBAAkB9Z,KAC/E4hB,EAA4B,UAAIK,MAC1B,CAAA,GAAa,GAAT1W,KAAKtI,KAYf,MAAM,IAAIhF,MAAM,gCAXhB2jB,EAA8B,YAAI,GAClCA,EAAiC,eAAI,GACrCA,EAA8B,YAAI,GAClCA,EAA8B,YAAI,GAClC,IAAK,IAAIN,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAChDM,EAA8B,YAAEN,GAAO/V,KAAKsB,YAAYyU,GACxDM,EAAiC,eAAEN,GAAO/V,KAAK6V,eAAeE,GAC9DM,EAA8B,YAAEN,GAAO/V,KAAK8V,YAAYC,GACxDM,EAA8B,YAAEN,GAAO/V,KAAK4V,YAAYG,GAK1D,OAAOM,EAGDtW,eAAesW,EAAuBrD,EAAyBsB,EAAuBsC,EAA0B3iB,GAC9Fob,MAApBgH,IAA+BA,EAAmB,IAEtD,IAAI3e,EAAuB7G,EAAOyF,oBAAoBugB,QAAQR,EAAuB,OAC9D,GAAnB3e,EAAKof,YAAiBpf,EAAO4c,EAAY,EAAyBtB,EAAc,EAAA,GACpFhT,KAAK+W,gBAAgBrf,EAAMsb,EAAgBsB,GAETjF,MAA9BgH,EAAyB,SAC5BrW,KAAKkK,OAASmM,EAAyB,SAAM,GAGZhH,MAA9BgH,EAAyB,OAC5BrW,KAAKvJ,OAAS0a,GAAOtgB,EAAOwH,YAAc,EAAGxH,EAAOwH,YAAc,EAAgC,EAA7Bge,EAAyB,QAE9FrW,KAAKvJ,OAAS,EAGgB4Y,MAA3BgH,EAAsB,IACzBrW,KAAK8U,IAAM3D,EAAM,EAAGtgB,EAAO2H,OAAS,EAAG9G,KAAKgZ,MAAM7Z,EAAO0H,WAAuC,EAA1B8d,EAAsB,KAASxlB,EAAO0H,UAAY,MAExHyH,KAAK8U,IAAMjkB,EAAO0H,UAGiB8W,MAAhCgH,EAA2B,SAC9BrW,KAAK+U,SAA2C,EAA/BsB,EAA2B,SAE5CrW,KAAK+U,SAAW,GAGiB1F,MAA9BgH,EAAyB,OAC5BrW,KAAKoV,OAASjE,EAAMtgB,EAAO4H,UAAW5H,EAAO6H,UAAY,EAAiC,EAA7B2d,EAAyB,QAGtFrW,KAAKoV,OAAS,EAGf,MAAM4B,EAAyC,CAAEC,OAAU,EAAGC,OAAU,EAAGC,OAAU,GAC/EC,EAAmBf,EAA6B,YAAKA,EAA2B,SAoBtF,GAnBArW,KAAK2N,WAAqD0B,MAAxC2H,EAAmBI,GAAiCJ,EAAmBI,GAAoBvmB,EAAOqG,YAAYmgB,WAAU1J,GAAcA,EAAWlZ,MAAQ2iB,KACnJ,GAApBpX,KAAK2N,aAAkB3N,KAAK2N,WAAa,GAE7C3N,KAAK4N,QAAU/c,EAAOuH,aAAaye,QAAQR,EAA0B,UAChD,GAAjBrW,KAAK4N,UAAe5N,KAAK4N,QAAoB,GAAT5N,KAAKtI,KAAgC,EAAI,GAEvC2X,MAAtCgH,EAAiC,eACpCrW,KAAKyU,aAAetD,EAAM,EAAGtgB,EAAOmG,kBAAmBtF,KAAKgZ,MAAO7Z,EAAOmG,kBAAoB,EAAK,EAAMtF,KAAK6B,KAA0C,EAArC8iB,EAAiC,gBAASxlB,EAAO+F,mBAAqBlF,KAAK8B,MAE9LwM,KAAKyU,aAAyB,GAATzU,KAAKtI,KAA+B,EAAI,GAEnB2X,MAAvCgH,EAAkC,gBACrCrW,KAAK+N,gBAAkBoD,EAAM,EAAGtgB,EAAOoG,qBAAsBvF,KAAKgZ,OAAO7Z,EAAOoG,qBAAuB,IAA4C,EAAtCof,EAAkC,iBAAS,MAExJrW,KAAK+N,gBAAkB,EAExB/N,KAAKgO,eAAiBnd,EAAOkJ,UAAUsd,WAAU3I,GAAYA,EAASja,MAAQ4hB,EAAiC,kBACnF,GAAxBrW,KAAKgO,iBAAsBhO,KAAKgO,eAAiBnd,EAAOkJ,UAAUxF,WAAmB,OAAEzC,OAEzDud,MAA9BgH,EAAyB,OAAgB,CAC5C,MAAMiB,EAA2B,CAAC,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAClDC,EAA6B,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAClDC,EAAwB,CAAC,OAAQ,SAAU,SAAU,OAAQ,eAAgB,eAAgB,cAC7FC,EAAqC,CAAEC,gBAAiB,EAAGC,iBAAkB,EAAGC,eAAgB,EAAGC,cAAe,GACxH,IAAIC,EAAqEzI,MAA9CoI,EAAepB,EAAyB,QAAkBoB,EAAepB,EAAyB,QAAKmB,EAAYX,QAAQR,EAAyB,SAC1J,GAAjByB,IAAoBA,EAAe,GACvC9X,KAAKyU,aAAe6C,EAAeQ,GACnC9X,KAAKgO,eAAiBuJ,EAAiBO,GACvC9X,KAAK+N,gBAAkB,EAGxB,MAAMgK,EAA2C,CAAC,OAAQ,gBAAiB,kBAAmB,iBAC9F,GAAa,GAAT/X,KAAKtI,KACRsI,KAAKwU,UAAY3jB,EAAOoB,WAAWolB,WAAUtmB,GAAQA,EAAK0D,MAAQ4hB,EAAuB,QAClE,GAAnBrW,KAAKwU,YAAiBxU,KAAKwU,UAAY,GAE3CxU,KAAK6N,MAAQhd,EAAOgI,OAAOwe,WAAUxJ,GAASA,EAAMpZ,MAAQ4hB,EAAwB,SACjE,GAAfrW,KAAK6N,QAAa7N,KAAK6N,MAAQ,QAE7B,GAAa,GAAT7N,KAAKtI,KAAiC,CAChD,GAAoC2X,MAAhCgH,EAA2B,SAC9B,IAAK,IAAIplB,EAAY,EAAGA,EAAIJ,EAAOuJ,sBAAuBnJ,IACzD+O,KAAKoW,aAAapH,SAAS/d,GAAKS,KAAK0f,IAAI,EAAG1f,KAAKyB,IAAItC,EAAO6C,YAAahC,KAAKgZ,MAAM7Z,EAAO6C,aAAgB2iB,EAA2B,SAAEplB,GAAM,OAIhJ+O,KAAK6N,MAAQhd,EAAOgI,OAAOwe,WAAUxJ,GAASA,EAAMpZ,MAAQ4hB,EAAwB,SACjE,GAAfrW,KAAK6N,QAAa7N,KAAK6N,MAAQ,QAE7B,GAAa,GAAT7N,KAAKtI,MACf,GAAiC2X,MAA7BgH,EAAwB,MAC3B,IAAK,IAAIjJ,EAAY,EAAGA,EAAIvc,EAAOyK,UAAW8R,IAAK,CAClD,MAAM4K,EAAY3B,EAAwB,MAAEjJ,GAC5C,GAAYiC,MAAR2I,IAE0B3I,MAA1B2I,EAAqB,iBACxBhY,KAAK0V,iBAAiBtI,GAAKvc,EAAOkJ,UAAUsd,WAAU3I,GAAYA,EAASja,MAAQujB,EAAqB,kBACvE,GAA7BhY,KAAK0V,iBAAiBtI,KAAUpN,KAAK0V,iBAAiBtI,GAAKvc,EAAOkJ,UAAUxF,WAAW,WAAWzC,QAE/Eud,MAApB2I,EAAe,UAClB,IAAK,IAAI/mB,EAAY,EAAGA,EAAIJ,EAAOuJ,sBAAuBnJ,IACzD+O,KAAK2V,qBAAqBvI,GAAG4B,SAAS/d,GAAKS,KAAK0f,IAAI,EAAG1f,KAAKyB,IAAItC,EAAO6C,YAAahC,KAAKgZ,MAAM7Z,EAAO6C,aAAgBskB,EAAe,SAAE/mB,GAAM,aAK3I,GAAa,GAAT+O,KAAKtI,KAAkC,CACjD,GAAqC2X,MAAjCgH,EAA4B,UAC/B,IAAK,IAAIplB,EAAY,EAAGA,EAAIJ,EAAO0J,uBAAwBtJ,IAC1D+O,KAAKyV,cAAc7G,UAAU3d,GAAKS,KAAK0f,IAAI,EAAG1f,KAAKyB,IAAItC,EAAO6J,aAAchJ,KAAKgZ,MAAM7Z,EAAO6J,cAAiB2b,EAA4B,UAAEplB,GAAM,OAIjHoe,MAAhCgH,EAA2B,WAC9BrW,KAAKiO,SAAWpd,EAAOmH,UAAUqf,WAAUpJ,GAAYA,EAASxZ,MAAQ4hB,EAA2B,YAC7E,GAAlBrW,KAAKiO,WAAgBjO,KAAKiO,SAAW,IAGPoB,MAA/BgH,EAA0B,UAC7BrW,KAAKkO,QAAUrd,EAAO4G,SAAS4f,WAAUnJ,GAAWA,EAAQzZ,MAAQ4hB,EAA0B,WACzE,GAAjBrW,KAAKkO,UAAelO,KAAKkO,QAAUrd,EAAO4G,SAASvG,QACnD8O,KAAKkO,SAAWrd,EAAO4G,SAASvG,QACnC8O,KAAK0U,aAAe2B,EAA+B,aACnDrW,KAAK2U,aAAe0B,EAA+B,aACnDrW,KAAK4U,aAAeyB,EAA+B,aACnDrW,KAAK6U,YAAcwB,EAA8B,cAGjDrW,KAAK0U,aAAe7jB,EAAO4G,SAASuI,KAAKkO,SAASza,UAClDuM,KAAK4U,aAAe/jB,EAAO4G,SAASuI,KAAKkO,SAASvW,WAClDqI,KAAK2U,aAAe,GACpB3U,KAAK6U,YAAchkB,EAAO4G,SAASuI,KAAKkO,SAASxW,OAInDsI,KAAK6N,MAAQhd,EAAOgI,OAAOwe,WAAUxJ,GAASA,EAAMpZ,MAAQ4hB,EAAwB,SACjE,GAAfrW,KAAK6N,QAAa7N,KAAK6N,MAAQ,QAC7B,GAAa,GAAT7N,KAAKtI,KACuB2X,MAAlCgH,EAA6B,WAChCrW,KAAK8O,WAAaqC,EAAM,EAAGtgB,EAAO+J,gBAAkB,EAAGlJ,KAAKgZ,MAAM2L,EAA6B,aAE/FrW,KAAK8O,WAAaje,EAAO+J,gBAGeyU,MAArCgH,EAAgC,gBACnCrW,KAAK+O,cAAgBle,EAAOkJ,UAAUsd,WAAU3I,GAAYA,EAASja,MAAQ4hB,EAAgC,iBAClF,GAAvBrW,KAAK+O,gBAAqB/O,KAAK+O,cAAgBle,EAAOkJ,UAAUxF,WAAmB,OAAEzC,QAGvDud,MAA/BgH,EAA0B,UAC7BrW,KAAKkO,QAAUrd,EAAO4G,SAAS4f,WAAUnJ,GAAWA,EAAQzZ,MAAQ4hB,EAA0B,WACzE,GAAjBrW,KAAKkO,UAAelO,KAAKkO,QAAUrd,EAAO4G,SAASvG,QACnD8O,KAAKkO,SAAWrd,EAAO4G,SAASvG,QACnC8O,KAAK0U,aAAe2B,EAA+B,aACnDrW,KAAK2U,aAAe0B,EAA+B,aACnDrW,KAAK4U,aAAeyB,EAA+B,aACnDrW,KAAK6U,YAAcwB,EAA8B,cAGjDrW,KAAK0U,aAAe7jB,EAAO4G,SAASuI,KAAKkO,SAASza,UAClDuM,KAAK4U,aAAe/jB,EAAO4G,SAASuI,KAAKkO,SAASvW,WAClDqI,KAAK2U,aAAe,GACpB3U,KAAK6U,YAAchkB,EAAO4G,SAASuI,KAAKkO,SAASxW,OAInDsI,KAAK6N,MAAQhd,EAAOgI,OAAOwe,WAAUxJ,GAASA,EAAMpZ,MAAQ4hB,EAAwB,SACjE,GAAfrW,KAAK6N,QAAa7N,KAAK6N,MAAQ,QAC7B,GAAa,GAAT7N,KAAKtI,KAA6B,CAC5C,MAAMugB,EAAsC,CAAEC,SAAY,EAAGC,OAAU,EAAGC,aAAc,EAAGC,eAAgB,EAAGC,SAAY,EAAGC,aAAc,EAAGC,eAAgB,EAAGC,MAAS,EAAGC,QAAW,GAIxL,GAHA1Y,KAAKuU,SAAwDlF,MAA7C4I,EAAgB5B,EAAuB,MAAkB4B,EAAgB5B,EAAuB,MAAKxlB,EAAO2F,UAAU6gB,WAAUtmB,GAAQA,EAAK0D,MAAQ4hB,EAAuB,QACtK,GAAlBrW,KAAKuU,WAAgBvU,KAAKuU,SAAW,GAELlF,MAAhCgH,EAA2B,SAC9BrW,KAAKiO,SAAWpd,EAAOmH,UAAUqf,WAAUpJ,GAAYA,EAASxZ,MAAQ4hB,EAA2B,YAC7E,GAAlBrW,KAAKiO,WAAgBjO,KAAKiO,SAAW,QACnC,GAAkCoB,MAA9BgH,EAAyB,OAAgB,CACnD,MAAMsC,EAAwC,CAAEC,OAAU,EAAGC,QAAW,GACxE7Y,KAAKiO,SAA4DoB,MAAjDsJ,EAAkBtC,EAAyB,QAAkBsC,EAAkBtC,EAAyB,QAAKxlB,EAAOmH,UAAUqf,WAAUpJ,GAAYA,EAASxZ,MAAQ4hB,EAAyB,UACxL,GAAlBrW,KAAKiO,WAAgBjO,KAAKiO,SAAW,GAGPoB,MAA/BgH,EAA0B,SAC7BrW,KAAKkO,QAAUrd,EAAO4G,SAAS4f,WAAUnJ,GAAWA,EAAQzZ,MAAQ4hB,EAA0B,WACzE,GAAjBrW,KAAKkO,UAAelO,KAAKkO,QAAUrd,EAAO4G,SAASvG,QACnD8O,KAAKkO,SAAWrd,EAAO4G,SAASvG,QACnC8O,KAAK0U,aAAe2B,EAA+B,aACnDrW,KAAK2U,aAAe0B,EAA+B,aACnDrW,KAAK4U,aAAeyB,EAA+B,aACnDrW,KAAK6U,YAAcwB,EAA8B,cAGjDrW,KAAK0U,aAAe7jB,EAAO4G,SAASuI,KAAKkO,SAASza,UAClDuM,KAAK4U,aAAe/jB,EAAO4G,SAASuI,KAAKkO,SAASvW,WAClDqI,KAAK2U,aAAe,GACpB3U,KAAK6U,YAAchkB,EAAO4G,SAASuI,KAAKkO,SAASxW,OAEV2X,MAA9BgH,EAAyB,SACnCrW,KAAKkO,QAAU6J,EAAkBlB,QAAQR,EAAyB,SAC7C,GAAjBrW,KAAKkO,UAAelO,KAAKkO,QAAU,IAGxClO,KAAK6N,MAAQhd,EAAOgI,OAAOwe,WAAUxJ,GAASA,EAAMpZ,MAAQ4hB,EAAwB,SACjE,GAAfrW,KAAK6N,QAAa7N,KAAK6N,MAAQ,GAGD,kBAA9BwI,EAAyB,SAC5BrW,KAAKiO,SAAW,EAChBjO,KAAK6N,MAAQ,QAER,GAAa,GAAT7N,KAAKtI,KAA2B,CACP2X,MAA/BgH,EAA0B,SAC7BrW,KAAKkO,QAAUrd,EAAO4G,SAAS4f,WAAUnJ,GAAWA,EAAQzZ,MAAQ4hB,EAA0B,WACzE,GAAjBrW,KAAKkO,UAAelO,KAAKkO,QAAUrd,EAAO4G,SAASvG,QACnD8O,KAAKkO,SAAWrd,EAAO4G,SAASvG,QACnC8O,KAAK0U,aAAe2B,EAA+B,aACnDrW,KAAK2U,aAAe0B,EAA+B,aACnDrW,KAAK4U,aAAeyB,EAA+B,aACnDrW,KAAK6U,YAAcwB,EAA8B,cAGjDrW,KAAK0U,aAAe7jB,EAAO4G,SAASuI,KAAKkO,SAASza,UAClDuM,KAAK4U,aAAe/jB,EAAO4G,SAASuI,KAAKkO,SAASvW,WAClDqI,KAAK2U,aAAe,GACpB3U,KAAK6U,YAAchkB,EAAO4G,SAASuI,KAAKkO,SAASxW,OAEV2X,MAA9BgH,EAAyB,SACnCrW,KAAKkO,QAAU6J,EAAkBlB,QAAQR,EAAyB,SAC7C,GAAjBrW,KAAKkO,UAAelO,KAAKkO,QAAU,IAGxClO,KAAK6N,MAAQhd,EAAOgI,OAAOwe,WAAUxJ,GAASA,EAAMpZ,MAAQ4hB,EAAwB,SACjE,GAAfrW,KAAK6N,QAAa7N,KAAK6N,MAAQ,GAEnC7N,KAAKoO,UAAYvd,EAAOwI,WAAWge,WAAUjJ,GAAaA,EAAU3Z,MAAQ4hB,EAA4B,aACjF,GAAnBrW,KAAKoO,YAAiBpO,KAAKoO,UAAY,GAC3CpO,KAAKqO,aAAexd,EAAOoJ,UAAUod,WAAUyB,GAAYA,EAASrkB,MAAQ4hB,EAA+B,gBACjF,GAAtBrW,KAAKqO,eAAoBrO,KAAKqO,aAAe,GACJgB,MAAzCgH,EAAoC,kBACvCrW,KAAKsO,kBAAoB6C,EAAM,EAAGtgB,EAAO6I,qBAAuB,EAA2C,EAAxC2c,EAAoC,mBAEvGrW,KAAKsO,kBAAoB,EAG1B,MAAMyK,EAA0C,CAAEC,UAAW,EAAGC,UAAW,EAAGC,UAAW,GACzFlZ,KAAKuO,iBAAgFc,MAA7D0J,EAAoB1C,EAAmC,kBAAkB0C,EAAoB1C,EAAmC,kBAAKxlB,EAAOkJ,UAAUsd,WAAU3I,GAAYA,EAASja,MAAQ4hB,EAAmC,oBAC1N,GAA1BrW,KAAKuO,mBAAwBvO,KAAKuO,iBAAmB,GAEzD,IAAK,IAAInB,EAAY,EAAGA,EAAIvc,EAAOuI,cAAegU,IAAK,CACtD,MAAMuJ,EAAqB3W,KAAKwO,UAAUpB,GAC1C,IAAI+L,OAAsB9J,EACtBgH,EAA4B,YAAG8C,EAAiB9C,EAA4B,UAAEjJ,IAC5DiC,MAAlB8J,IAA6BA,EAAiB,IAElDxC,EAASlI,UAAY5d,EAAO8I,oBAAoB0d,WAAU+B,GAAQA,EAAK3kB,MAAQ0kB,EAA0B,aAC9E,GAAvBxC,EAASlI,YAAiBkI,EAASlI,UAAY,GAChBY,MAA/B8J,EAA0B,UAC7BxC,EAASljB,UAAY0d,EAAM,EAAGtgB,EAAO6I,qBAAuB,EAAiC,EAA9Byf,EAA0B,WAEzFxC,EAASljB,UAAY,EAEtBkjB,EAASjI,SAA8DW,MAAnD0J,EAAoBI,EAAyB,UAAkBJ,EAAoBI,EAAyB,UAAKtoB,EAAOkJ,UAAUsd,WAAU3I,GAAYA,EAASja,MAAQ0kB,EAAyB,YAC5L,GAAtBxC,EAASjI,WAAgBiI,EAASjI,SAAW,SAE5C,GAAa,GAAT1O,KAAKtI,KAAuC,CACtD,GAAoC2X,MAAhCgH,EAA2B,SAC9BrW,KAAKiO,SAAWpd,EAAOmH,UAAUqf,WAAUpJ,GAAYA,EAASxZ,MAAQ4hB,EAA2B,YAC7E,GAAlBrW,KAAKiO,WAAgBjO,KAAKiO,SAAW,QACnC,GAAkCoB,MAA9BgH,EAAyB,OAAgB,CACnD,MAAMsC,EAAwC,CAAEC,OAAU,EAAGC,QAAW,GACxE7Y,KAAKiO,SAA4DoB,MAAjDsJ,EAAkBtC,EAAyB,QAAkBsC,EAAkBtC,EAAyB,QAAKxlB,EAAOmH,UAAUqf,WAAUpJ,GAAYA,EAASxZ,MAAQ4hB,EAAyB,UACxL,GAAlBrW,KAAKiO,WAAgBjO,KAAKiO,SAAW,GAgC1C,GA7BmCoB,MAA/BgH,EAA0B,SAC7BrW,KAAKkO,QAAUrd,EAAO4G,SAAS4f,WAAUnJ,GAAWA,EAAQzZ,MAAQ4hB,EAA0B,WACzE,GAAjBrW,KAAKkO,UAAelO,KAAKkO,QAAUrd,EAAO4G,SAASvG,QACnD8O,KAAKkO,SAAWrd,EAAO4G,SAASvG,QACnC8O,KAAK0U,aAAe2B,EAA+B,aACnDrW,KAAK2U,aAAe0B,EAA+B,aACnDrW,KAAK4U,aAAeyB,EAA+B,aACnDrW,KAAK6U,YAAcwB,EAA8B,cAGjDrW,KAAK0U,aAAe7jB,EAAO4G,SAASuI,KAAKkO,SAASza,UAClDuM,KAAK4U,aAAe/jB,EAAO4G,SAASuI,KAAKkO,SAASvW,WAClDqI,KAAK2U,aAAe,GACpB3U,KAAK6U,YAAchkB,EAAO4G,SAASuI,KAAKkO,SAASxW,OAEV2X,MAA9BgH,EAAyB,SACnCrW,KAAKkO,QAAU6J,EAAkBlB,QAAQR,EAAyB,SAC7C,GAAjBrW,KAAKkO,UAAelO,KAAKkO,QAAU,IAGxClO,KAAK6N,MAAQhd,EAAOgI,OAAOwe,WAAUxJ,GAASA,EAAMpZ,MAAQ4hB,EAAwB,SACjE,GAAfrW,KAAK6N,QAAa7N,KAAK6N,MAAQ,GAGD,kBAA9BwI,EAAyB,SAC5BrW,KAAKiO,SAAW,EAChBjO,KAAK6N,MAAQ,GAGVwI,EAAiC,eAAG,CAEvC,IAAK,IAAIplB,EAAY,EAAGA,EAAI,GAAIA,IAC/B+O,KAAK2O,eAAe1d,GAAKolB,EAAiC,eAAEplB,GAI7D,IAAID,EAAc,EAClB,IAAK,IAAIC,EAAY,EAAGA,EAAI+O,KAAK2O,eAAezd,OAAQD,IACvDD,GAAOgP,KAAK2O,eAAe1d,GAE5B,MAAME,EAAkBH,EAAMgP,KAAK2O,eAAezd,OAGlD,IAAIE,EAAqB,EACrBC,EAAmB,EACvB,IAAK,IAAIJ,EAAY,EAAGA,EAAI+O,KAAK2O,eAAezd,OAAQD,IACvDG,GAAcC,EACdA,EAAW2O,KAAK2O,eAAe1d,GAAKE,EACpC6O,KAAKwV,uBAAuBvkB,GAAKG,EAIlC4O,KAAKwV,uBAAuB,IAAM,OAG7B,CAAA,GAAa,GAATxV,KAAKtI,KAUf,MAAM,IAAIhF,MAAM,iCAThB,GAAuC2c,MAAnCgH,EAA8B,YACjC,IAAK,IAAIN,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAChD/V,KAAKsB,YAAYyU,GAAOM,EAA8B,YAAEN,GACxD/V,KAAK6V,eAAeE,GAAOM,EAAiC,eAAEN,GAC9D/V,KAAK8V,YAAYC,GAAOM,EAA8B,YAAEN,GACxD/V,KAAK4V,YAAYG,GAAOM,EAA8B,YAAEN,GAO9C,GAAT/V,KAAKtI,OAEU,GAAdsI,KAAK6N,OAAmDwB,MAArCgH,EAAgC,cACtDrW,KAAKgV,cAAgBqB,EAAgC,cAGrDrW,KAAKgV,cAAgB,EAAoB,EAAI,GAGJ3F,MAAtCgH,EAAiC,eACpCrW,KAAKiV,eAAiBoB,EAAiC,eAGvDrW,KAAKiV,eAAiBhhB,EAGsBob,MAAzCgH,EAAoC,kBACvCrW,KAAKkV,kBAAoBmB,EAAoC,kBAG7DrW,KAAKkV,mBAAoB,EAGqB7F,MAA3CgH,EAAsC,oBACzCrW,KAAKmV,oBAAsBkB,EAAsC,oBAGjErW,KAAKmV,qBAAsB,GAKvBpV,0BAA0ByR,GAEhC,OAAO3gB,EAAOuK,gBAAkB1J,KAAKuB,IAAI,EAAKue,EAAQ3gB,EAAOwK,iBAAmB3J,KAAKgZ,MAAM7Z,EAAO2K,aAAa,IAGzGuE,kCAAkCjO,GAExC,OAAOuiB,EAAWgF,mBAAmBxoB,EAAOsJ,kBAAoBrI,GAASjB,EAAO2K,aAAe3K,EAAOwK,iBAAmBxK,EAAOsJ,mBAAqBtJ,EAAOyK,WAAa,MAGlKyE,SAAqCjO,GAE5C,OAAO,GAAKJ,KAAK6B,IAAI8gB,EAAWiF,2BAA2BxnB,IAAUJ,KAAK8B,IAGpEuM,SAIN,GAHAC,KAAKqV,QAAU,EACfrV,KAAKsV,YAAc,EACnBtV,KAAKuV,QAAU,EACF,GAATvV,KAAKtI,KACR7F,EAAYmO,KAAKwU,UAAWziB,EAA6BC,QACnD,GAAa,GAATgO,KAAKtI,KACfsI,KAAKyV,cAAc8D,qBACb,GAAa,GAATvZ,KAAKtI,KACfsI,KAAKoW,aAAamD,cAAc,QAC1B,GAAa,GAATvZ,KAAKtI,KACf,IAAK,IAAIzG,EAAY,EAAGA,EAAIJ,EAAOyK,UAAWrK,IAC7C+O,KAAK2V,qBAAqB1kB,GAAGsoB,cAAclF,EAAWmF,EAA8BvoB,IAKhF8O,cACN,GAAa,GAATC,KAAKtI,KACR,OAAO7F,EAAYmO,KAAKwU,UAAWziB,EAA6BC,GAC1D,GAAa,GAATgO,KAAKtI,KACf,OAAOsI,KAAKoW,aAAamD,cAAc,GAEvC,MAAM,IAAI7mB,MAAM,4CAIXqN,eAAeyR,GACrB,GAAa,GAATxR,KAAKtI,KACR,OAAOsI,KAAK2V,qBAAqBnE,GAAO+H,cAAclF,EAAWmF,EAA8BhI,IAE/F,MAAM,IAAI9e,MAAM,4CAIXqN,gBACN,OAAgB,GAATC,KAAKtI,KAAiC7G,EAAOqG,YAAY3C,WAAW,aACjE,GAATyL,KAAKtI,KAA6B7G,EAAOqG,YAAY3C,WAAqB,SAAI1D,EAAOqG,YAAY8I,KAAK2N,YAEjG5N,WACN,OAAgB,GAATC,KAAKtI,KAAiC7G,EAAOgI,OAAOtE,WAAoB,QAAI1D,EAAOgI,OAAOmH,KAAK6N,OAEhG9N,yBACN,OAAgB,GAATC,KAAKtI,KAAiC,EAA2D,IAAtDsI,KAAKyU,cAAgB5jB,EAAOmG,kBAAoB,IAE5F+I,wBACN,OAAgB,GAATC,KAAKtI,MAAiE,GAAxBsI,KAAK+N,gBAEpDhO,qBACN,OAAgB,GAATC,KAAKtI,KAAiC,EAAIsI,KAAK+N,gBAEhDhO,oBACN,GAAa,GAATC,KAAKtI,KAAgC,MAAM,IAAIhF,MAAM,0CACzD,OAAO7B,EAAOkJ,UAAUiG,KAAKgO,gBAEvBjO,mBAAmByR,GACzB,GAAa,GAATxR,KAAKtI,KAAgC,MAAM,IAAIhF,MAAM,+CACzD,OAAO7B,EAAOkJ,UAAUiG,KAAK0V,iBAAiBlE,KAIhD,IAAYwE,EAOAE,GAPZ,SAAYF,GACXA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,OAAA,GAAA,SAJD,CAAYA,IAAAA,EAAS,KAOrB,SAAYE,GACXA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,cAAA,GAAA,gBACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,cAAA,GAAA,gBACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,aAAA,IAAA,eACAA,EAAAA,EAAA,aAAA,IAAA,eACAA,EAAAA,EAAA,aAAA,IAAA,eACAA,EAAAA,EAAA,cAAA,IAAA,gBACAA,EAAAA,EAAA,cAAA,IAAA,gBACAA,EAAAA,EAAA,UAAA,IAAA,YACAA,EAAAA,EAAA,gBAAA,IAAA,kBACAA,EAAAA,EAAA,cAAA,IAAA,gBACAA,EAAAA,EAAA,gBAAA,IAAA,kBACAA,EAAAA,EAAA,gBAAA,IAAA,kBACAA,EAAAA,EAAA,iBAAA,IAAA,mBACAA,EAAAA,EAAA,YAAA,IAAA,cACAA,EAAAA,EAAA,iBAAA,IAAA,mBACAA,EAAAA,EAAA,YAAA,IAAA,cAxBD,CAAYA,IAAAA,EAAU,WA2BTuD,EAAb1Z,cACQC,KAAA0Z,OAAiB,EACR1Z,KAAA2Z,YAA4B,GAC5B3Z,KAAA4Z,SAAsB,GACtB5Z,KAAA6Z,KAAiB,GAC1B7Z,KAAA8Z,OAAiB,EACjB9Z,KAAAvL,KAAe,UAGVslB,EA4FZha,YAAYia,GApEIha,KAAAia,SAAsB,GAC/Bja,KAAAka,WAAqB,EACrBla,KAAAma,UAAoB,IACpBna,KAAAoa,qBAA+B,EAC/Bpa,KAAAqa,eAAyB,EACzBra,KAAAsa,iBAA2B,EAC3Bta,KAAAua,WAAqB,EACrBva,KAAAwa,WAAqB,EACrBxa,KAAAya,YAAsB,EACtBza,KAAA0a,aAAuB,EAGvB1a,KAAA2a,WAAsC,IAAIlU,IAAwB,CACxE,CAACyP,EAAWC,QAAS,GACrB,CAACD,EAAW0E,cAAe,KAC3B,CAAC1E,EAAW2E,SAAUhqB,EAAO2E,SAAW3E,EAAO0E,UAC/C,CAAC2gB,EAAW4E,UAAWjqB,EAAO4E,YAAc,GAC5C,CAACygB,EAAW6E,WAAY,GACxB,CAAC7E,EAAW8E,aAAcnqB,EAAOwH,aACjC,CAAC6d,EAAW+E,OAAQpqB,EAAO2H,QAC3B,CAAC0d,EAAWgF,aAAcrqB,EAAOmG,kBAAoB,GACrD,CAACkf,EAAWiF,cAAetqB,EAAOoG,qBAAuB,GACzD,CAACif,EAAWkF,aAAc,IAC1B,CAAClF,EAAWmF,aAAc,IAC1B,CAACnF,EAAWoF,aAAc,IAC1B,CAACpF,EAAWqF,aAAc,IAC1B,CAACrF,EAAWsF,cAAe,IAC3B,CAACtF,EAAWuF,cAAe5qB,EAAO+J,iBAClC,CAACsb,EAAWwF,UAAW7qB,EAAO6H,UAAY7H,EAAO4H,WACjD,CAACyd,EAAWyF,gBAAiB,IAC7B,CAACzF,EAAW0F,cAAe/qB,EAAO+H,cAAgB/H,EAAO8H,eACzD,CAACud,EAAW2F,gBAAiB,IAC7B,CAAC3F,EAAW4F,gBAAiB,IAC7B,CAAC5F,EAAW6F,iBAAkB,IAC9B,CAAC7F,EAAW8F,YAAa,IACzB,CAAC9F,EAAW+F,iBAAkB,GAC9B,CAAC/F,EAAWgG,YAAa,KAKnBlc,KAAAmc,eAA0C,IAAI1V,IAAwB,CAC5E,CAACyP,EAAWC,QAAS,GACrB,CAACD,EAAW0E,cAAe,KAC3B,CAAC1E,EAAW2E,SAAUnpB,KAAKsf,MAAMngB,EAAO2E,SAAW3E,EAAO0E,UAAY,IACtE,CAAC2gB,EAAW4E,UAAW,GACvB,CAAC5E,EAAW6E,WAAY,GACxB,CAAC7E,EAAW8E,aAActpB,KAAKsf,KAAKngB,EAAOwH,YAAc,IACzD,CAAC6d,EAAW+E,OAAQvpB,KAAKsf,KAAKngB,EAAO2H,OAAS,IAC9C,CAAC0d,EAAWgF,aAAcrqB,EAAOmG,kBAAoB,GACrD,CAACkf,EAAWiF,cAAe,GAC3B,CAACjF,EAAWkF,aAAc,IAC1B,CAAClF,EAAWmF,aAAc,IAC1B,CAACnF,EAAWoF,aAAc,IAC1B,CAACpF,EAAWqF,aAAc,IAC1B,CAACrF,EAAWsF,cAAe,IAC3B,CAACtF,EAAWuF,cAAe/pB,KAAKsf,KAAKngB,EAAO+J,kBAC5C,CAACsb,EAAWwF,UAAWhqB,KAAKsf,MAAMngB,EAAO6H,UAAY7H,EAAO4H,WAAa,IACzE,CAACyd,EAAWyF,gBAAiB,GAC7B,CAACzF,EAAW0F,cAAelqB,KAAKsf,MAAMngB,EAAO+H,cAAgB/H,EAAO8H,eAAiB,IACrF,CAACud,EAAW2F,gBAAiB,GAC7B,CAAC3F,EAAW4F,gBAAiB,GAC7B,CAAC5F,EAAW6F,iBAAkB,IAC9B,CAAC7F,EAAW8F,YAAa,IACzB,CAAC9F,EAAW+F,iBAAkB,GAC9B,CAAC/F,EAAWgG,YAAa,KAsGnBlc,KAAAoc,iBAAmB,CAACC,EAAgBC,EAAqBC,EAAwBhhB,KACvF,GAAK8gB,GAAuBhN,MAAdiN,GAA4CjN,MAAjBkN,GAA0ClN,MAAZ9T,EAElE,CAEJA,EAAW1K,EAAO0K,SAAWA,EAAW,EAExC,IAAIihB,EAA0Bxc,KAAKmc,eAAe3a,IAAIxB,KAAKia,SAASqC,GAAY3C,YAAY4C,GAAezG,YAAYva,IAOvH,OAJIyE,KAAKia,SAASqC,GAAY3C,YAAY4C,GAAezG,YAAYva,IAAa2a,EAAW2E,WAC5F2B,EAAMxc,KAAKyc,eAAezc,KAAK0c,MAAOxG,EAAW2E,WAGvCxL,MAAPmN,EACIA,EAEA,EAfR,OAAO,GAoBFxc,KAAA2c,aAAe,CAACN,EAAgBC,EAAqBC,EAAwBhhB,KACnF,GAAK8gB,GAAuBhN,MAAdiN,GAA4CjN,MAAjBkN,GAA0ClN,MAAZ9T,EAElE,CAEJA,EAAW1K,EAAO0K,SAAWA,EAAW,EAExC,IAAIihB,EAA0Bxc,KAAK2a,WAAWnZ,IAAIxB,KAAKia,SAASqC,GAAY3C,YAAY4C,GAAezG,YAAYva,IACnH,OAAW8T,MAAPmN,EACIA,EAEA,EATR,OAAO,GAaFxc,KAAA4c,uBAAyB,CAACP,EAAgBQ,KAChD,GAAKR,EAEA,CACJ,IAAIG,EAA0Bxc,KAAK2a,WAAWnZ,IAAIqb,GAClD,OAAWxN,MAAPmN,EACIA,EAEA,EANR,OAAO,GAzIMnN,MAAV2K,EACHha,KAAK8c,iBAAiB9C,GAEtBha,KAAK+c,eAAc,GAIdhd,eAAevL,EAAewoB,GACpC,OAAQA,GACP,KAAK9G,EAAW2E,SACfrmB,GAAS3D,EAAO0E,SAChB,MACD,KAAK2gB,EAAW8E,aACfxmB,GAAS3D,EAAOwH,YAAc,EAC9B,MACD,KAAK6d,EAAWwF,UACflnB,GAAS3D,EAAO4H,UAChB,MACD,KAAKyd,EAAW0F,cACfpnB,GAAS3D,EAAO8H,cAChB,MACD,KAAKud,EAAWgF,aAChB,KAAKhF,EAAWiF,cAChB,KAAKjF,EAAW0E,cAChB,KAAK1E,EAAW+E,OAChB,KAAK/E,EAAW4E,UAChB,KAAK5E,EAAW6E,WAChB,KAAK7E,EAAWkF,aAChB,KAAKlF,EAAWmF,aAChB,KAAKnF,EAAWoF,aAChB,KAAKpF,EAAWqF,aAChB,KAAKrF,EAAWsF,cAChB,KAAKtF,EAAWuF,cAChB,KAAKvF,EAAWyF,gBAChB,KAAKzF,EAAW2F,gBAChB,KAAK3F,EAAW4F,gBAChB,KAAK5F,EAAW6F,iBAChB,KAAK7F,EAAW8F,YAChB,KAAK9F,EAAW+F,iBAChB,KAAK/F,EAAWC,SAIjB,OAAO3hB,EAGDuL,iBAAiBid,GACvB,OAAQA,GACP,KAAK9G,EAAW2E,SAChB,KAAK3E,EAAW4E,UAChB,KAAK5E,EAAW0E,cAChB,KAAK1E,EAAW6E,WACf,OAAO,EACR,QACC,OAAO,GAIHhb,eAAevL,EAAewoB,GACpC,OAAQA,GACP,KAAK9G,EAAW2E,SACfrmB,GAAS3D,EAAO0E,SAChB,MACD,KAAK2gB,EAAW8E,aACfxmB,GAAS3D,EAAOwH,YAAc,EAC9B,MACD,KAAK6d,EAAWwF,UACflnB,GAAS3D,EAAO4H,UAChB,MACD,KAAKyd,EAAW0F,cACfpnB,GAAS3D,EAAO8H,cAChB,MACD,KAAKud,EAAWgF,aAChB,KAAKhF,EAAWiF,cAChB,KAAKjF,EAAW0E,cAChB,KAAK1E,EAAW+E,OAChB,KAAK/E,EAAW4E,UAChB,KAAK5E,EAAW6E,WAChB,KAAK7E,EAAWkF,aAChB,KAAKlF,EAAWmF,aAChB,KAAKnF,EAAWoF,aAChB,KAAKpF,EAAWqF,aAChB,KAAKrF,EAAWsF,cAChB,KAAKtF,EAAWuF,cAChB,KAAKvF,EAAWyF,gBAChB,KAAKzF,EAAW2F,gBAChB,KAAK3F,EAAW4F,gBAChB,KAAK5F,EAAW6F,iBAChB,KAAK7F,EAAW8F,YAChB,KAAK9F,EAAW+F,iBAChB,KAAK/F,EAAWC,SAIjB,OAAO3hB,EAqDDuL,kBACN,OAAOC,KAAKkB,kBAAoBlB,KAAKoB,kBAAoBpB,KAAKid,gBAGxDld,kBAAkBK,GACxB,OAAQA,GAAWJ,KAAKkB,mBAAqBd,EAAUJ,KAAKkB,kBAAoBlB,KAAKoB,kBAG/ErB,gBAAgBK,GACtB,OAAQA,GAAWJ,KAAKkB,kBAAoBlB,KAAKoB,kBAG3CrB,cAAcmd,GAA4B,GAgBhD,GAfAld,KAAKmd,MAAQ,EACbnd,KAAKvC,IAAM,EACXuC,KAAKod,UAAY,EACjBpd,KAAKqd,WAAa,EAClBrd,KAAK0c,MAAQ,IACb1c,KAAKsd,OAAS,EACdtd,KAAKud,YAAc,EACnBvd,KAAKwd,SAAW,GAChBxd,KAAKyd,mBAAqB,EAC1Bzd,KAAK0d,OAAS,EACd1d,KAAK2d,sBAAwB,EAE7B3d,KAAK4d,MAAQ,UACbhhB,SAASghB,MAAQlU,EAAa8D,mBAE1B0P,EAAkB,CACrBld,KAAKkB,kBAAoB,EACzBlB,KAAKoB,kBAAoB,EACzBpB,KAAKid,gBAAkB,EACvB,IAAK,IAAIY,EAAe,EAAGA,EAAe7d,KAAK8d,kBAAmBD,IAAgB,CAC7E7d,KAAKia,SAAS/oB,QAAU2sB,IAC3B7d,KAAKia,SAAS4D,GAAgB,IAAIpE,GAEnC,MAAMrZ,EAAmBJ,KAAKia,SAAS4D,GACvCzd,EAAQsZ,OAAShoB,KAAK0f,IAAI,EAAIyM,EAAc,GAE5C,IAAK,IAAIE,EAAU,EAAGA,EAAU/d,KAAKyd,mBAAoBM,IACpD3d,EAAQwZ,SAAS1oB,QAAU6sB,EAC9B3d,EAAQwZ,SAASmE,GAAW,IAAIvL,EAEhCpS,EAAQwZ,SAASmE,GAASjL,QAG5B1S,EAAQwZ,SAAS1oB,OAAS8O,KAAKyd,mBAE/B,MAAMzK,EAA0B6K,GAAgB7d,KAAKkB,mBAAqB2c,EAAe7d,KAAKkB,kBAAoBlB,KAAKoB,kBACjHkT,EAAwBuJ,GAAgB7d,KAAKkB,kBAAoBlB,KAAKoB,kBAC5E,IAAK,IAAIsR,EAAa,EAAGA,EAAa1S,KAAK2d,sBAAuBjL,IAC7DtS,EAAQuZ,YAAYzoB,QAAUwhB,IACjCtS,EAAQuZ,YAAYjH,GAAc,IAAI2B,EAAWrB,EAAgBsB,IAElElU,EAAQuZ,YAAYjH,GAAYqE,gBAAgBzC,EAAY,EAAyBtB,EAAc,EAAA,EAAgDA,EAAgBsB,GAEpKlU,EAAQuZ,YAAYzoB,OAAS8O,KAAK2d,sBAElC,IAAK,IAAIK,EAAM,EAAGA,EAAMhe,KAAKwd,SAAUQ,IACtC5d,EAAQyZ,KAAKmE,GAAOA,EAAM,EAAI,EAAI,EAEnC5d,EAAQyZ,KAAK3oB,OAAS8O,KAAKwd,SAE5Bxd,KAAKia,SAAS/oB,OAAS8O,KAAK8d,mBAIvB/d,iBACN,IAAIke,EACAlN,EAAmB,GAEvBA,EAAOzf,KAAKyoB,EAAKmE,GACjBnN,EAAOzf,KAAKwe,EAAoBiK,EAAKoE,IAErCpN,EAAOzf,KAAI,IAGX,IAAI8sB,EAA2BC,mBAAmBre,KAAK4d,OACvD7M,EAAOzf,KAAKwe,EAAoBsO,EAAiBltB,QAAU,GAAI4e,EAA8C,GAA1BsO,EAAiBltB,SAGpG,IAAK,IAAID,EAAY,EAAGA,EAAImtB,EAAiBltB,OAAQD,IACpD8f,EAAOzf,KAAK8sB,EAAiBhO,WAAWnf,IAGzC8f,EAAOzf,KAAI,IAA2Bwe,EAAoB9P,KAAKkB,mBAAoB4O,EAAoB9P,KAAKoB,mBAAoB0O,EAAoB9P,KAAKid,kBACzJlM,EAAOzf,KAAI,IAAoBwe,EAAoB9P,KAAKmd,QAExDpM,EAAOzf,KAAI,IAAkBwe,EAAoB,IACjDiB,EAAOzf,KAAI,IAAwBwe,EAAoB9P,KAAKod,WAAa,GAAItN,EAAqC,GAAjB9P,KAAKod,YACtGrM,EAAOzf,KAAI,IAAsBwe,EAAqB9P,KAAKqd,WAAa,GAAM,GAAIvN,EAAqB9P,KAAKqd,WAAa,EAAK,KAC9HtM,EAAOzf,KAAI,IAAoBwe,EAAoB9P,KAAK0c,OAAS,GAAI5M,EAAiC,GAAb9P,KAAK0c,QAC9F3L,EAAOzf,KAAI,IAAqBwe,EAAoB9P,KAAKsd,SACzDvM,EAAOzf,KAAI,GAAwBwe,EAAoB9P,KAAKud,YAAc,IAC1ExM,EAAOzf,KAAI,IAAuBwe,EAAqB9P,KAAKwd,SAAW,GAAM,GAAI1N,EAAqB9P,KAAKwd,SAAW,EAAK,KAC3HzM,EAAOzf,KAAI,IAA2Bwe,EAAqB9P,KAAKyd,mBAAqB,GAAM,GAAI3N,EAAqB9P,KAAKyd,mBAAqB,EAAK,KACnJ1M,EAAOzf,KAAI,IAA8Bwe,EAAoB9P,KAAK2d,sBAAwB,IAC1F5M,EAAOzf,KAAI,IAAqBwe,EAAoB9P,KAAK0d,SAGzD3M,EAAOzf,KAAI,IACkB,GAAzB0O,KAAKsa,kBAA8C,GAAnBta,KAAKua,YAAuC,KAAlBva,KAAKma,WAA0C,GAAnBna,KAAKka,YAA4C,GAAvBla,KAAKqa,gBAAsD,GAA7Bra,KAAKoa,sBAAkD,GAAnBpa,KAAKwa,YAC1LzJ,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAAM1K,KAAKsa,iBAAmB,EAA4B,GAAxBta,KAAKsa,iBAAwB,GAAmC,IAA7Bta,KAAKsa,iBAAmB,MAClIvJ,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAAM1K,KAAKua,WAAa,EAAsB,GAAlBva,KAAKua,WAAkB,EAAIva,KAAKua,cACjGxJ,EAAOzf,KAAKwe,EAAoB9P,KAAKka,aACrCnJ,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,OAAO1K,KAAKma,UAAY,KAAU,OACvEpJ,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAAkC,GAA5B1K,KAAKoa,wBAChDrJ,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAA4B,GAAtB1K,KAAKqa,kBAChDtJ,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAAwB,GAAlB1K,KAAKwa,aAAoB,GAAI1K,EAAuD,GAAnCpe,KAAKgZ,MAAwB,GAAlB1K,KAAKwa,eAG5GzJ,EAAOzf,KAAKwe,EAAoB,KAGjCiB,EAAOzf,KAAI,IACX,IAAK,IAAI8O,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAAW,CAE1E,IAAIke,EAA6BD,mBAAmBre,KAAKia,SAAS7Z,GAAS3L,MAC3Esc,EAAOzf,KAAKwe,EAAoBwO,EAAmBptB,QAAU,GAAI4e,EAAgD,GAA5BwO,EAAmBptB,SAGxG,IAAK,IAAID,EAAY,EAAGA,EAAIqtB,EAAmBptB,OAAQD,IACtD8f,EAAOzf,KAAKgtB,EAAmBlO,WAAWnf,IAI5C8f,EAAOzf,KAAI,KACX,IAAK,IAAI8O,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAC/D2Q,EAAOzf,KAAKwe,EAAoB9P,KAAKia,SAAS7Z,GAASsZ,SAGxD,IAAK,IAAItZ,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAC/D,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAK2d,sBAAuB1sB,IAAK,CAC5D,MAAMyhB,EAAyB1S,KAAKia,SAAS7Z,GAASuZ,YAAY1oB,GAqBlE,GApBA8f,EAAOzf,KAAI,GAA8Bwe,EAAoB4C,EAAWhb,OACxEqZ,EAAOzf,KAAI,IAAqBwe,EAAqB4C,EAAWjc,OAAS5F,EAAOwH,YAAc,GAAM,GAAIyX,EAAqB4C,EAAWjc,OAAS5F,EAAOwH,YAAc,EAAK,KAC3K0Y,EAAOzf,KAAI,GAAsBwe,EAAoB4C,EAAWoC,KAAO,GAAIhF,EAAqC,GAAjB4C,EAAWoC,MAC1G/D,EAAOzf,KAAKwe,EAAoB4C,EAAWqC,WAC3ChE,EAAOzf,KAAI,GAAqBwe,EAAqB4C,EAAW0C,OAASvkB,EAAO4H,WAAc,GAAIqX,EAAqB4C,EAAW0C,OAASvkB,EAAO4H,UAAa,KAC/JsY,EAAOzf,KAAI,IAAqBwe,EAAoB4C,EAAWxI,QAAU,GAAI4F,EAAwC,GAApB4C,EAAWxI,SAC5G6G,EAAOzf,KAAI,IAAsBwe,EAAoB4C,EAAW9E,UAG7C,GAAf8E,EAAWhb,OACdqZ,EAAOzf,KAAI,IAAyBwe,EAAoB4C,EAAW/E,aAEnEoD,EAAOzf,KAAKwe,GAAqB4C,EAAWwC,oBAC5CnE,EAAOzf,KAAKwe,GAAqB4C,EAAWyC,sBAC5CpE,EAAOzf,KAAI,IAA2Bwe,EAAoB4C,EAAW+B,eACrE1D,EAAOzf,KAAI,IAA8Bwe,EAAoB4C,EAAW3E,kBACxEgD,EAAOzf,KAAI,IAA6Bwe,EAAoB4C,EAAW1E,iBACvE+C,EAAOzf,KAAI,GAAoBwe,EAAoB4C,EAAW7E,SAG5C,GAAf6E,EAAWhb,KACdqZ,EAAOzf,KAAI,IAAmBwe,EAAoB4C,EAAW6B,WAC7DxD,EAAOzf,KAAI,GAAsBwe,EAAoB4C,EAAWxE,UAE5DwE,EAAWxE,SAAWrd,EAAO4G,SAASvG,SACzC6f,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAAgC,GAA1BgI,EAAWgC,gBACtD3D,EAAOzf,KAAKwe,EAAoB4C,EAAWiC,eAC3C5D,EAAOzf,KAAKwe,EAAoB4C,EAAWkC,eAC3C7D,EAAOzf,KAAKwe,EAAoB4C,EAAWmC,eAGpB,GAApBnC,EAAW7E,QACdkD,EAAOzf,KAAI,GAA4Bwe,EAAoB4C,EAAWsC,gBACtEjE,EAAOzf,KAAKwe,GAAqB4C,EAAWuC,kBAE7ClE,EAAOzf,KAAI,IAAuBwe,EAAoB4C,EAAWzE,gBAC3D,GAAmB,GAAfyE,EAAWhb,KAA2B,CAChDqZ,EAAOzf,KAAI,GAAsBwe,EAAoB4C,EAAWxE,UAE5DwE,EAAWxE,SAAWrd,EAAO4G,SAASvG,SACzC6f,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAAgC,GAA1BgI,EAAWgC,gBACtD3D,EAAOzf,KAAKwe,EAAoB4C,EAAWiC,eAC3C5D,EAAOzf,KAAKwe,EAAoB4C,EAAWkC,eAC3C7D,EAAOzf,KAAKwe,EAAoB4C,EAAWmC,eAGpB,GAApBnC,EAAW7E,QACdkD,EAAOzf,KAAI,GAA4Bwe,EAAoB4C,EAAWsC,gBACtEjE,EAAOzf,KAAKwe,GAAqB4C,EAAWuC,kBAE7ClE,EAAOzf,KAAI,IAAuBwe,EAAoB4C,EAAWzE,WACjE8C,EAAOzf,KAAI,GAAwBwe,EAAoB4C,EAAWtE,YAClE2C,EAAOzf,KAAI,GAA2Bwe,EAAoB4C,EAAWrE,eACrE0C,EAAOzf,KAAI,GAAgCwe,EAAoB4C,EAAWpE,oBAC1EyC,EAAOzf,KAAI,GAA+Bwe,EAAoB4C,EAAWnE,mBAEzEwC,EAAOzf,KAAI,IACX,IAAK,IAAIitB,EAAY,EAAGA,EAAI1tB,EAAOuI,cAAemlB,IACjDxN,EAAOzf,KAAKwe,EAAoB4C,EAAWlE,UAAU+P,GAAG9P,YAEzDsC,EAAOzf,KAAI,IACX,IAAK,IAAIitB,EAAY,EAAGA,EAAI1tB,EAAOuI,cAAemlB,IACjDxN,EAAOzf,KAAKwe,EAAoB4C,EAAWlE,UAAU+P,GAAG9qB,YAEzDsd,EAAOzf,KAAI,IACX,IAAK,IAAIitB,EAAY,EAAGA,EAAI1tB,EAAOuI,cAAemlB,IACjDxN,EAAOzf,KAAKwe,EAAoB4C,EAAWlE,UAAU+P,GAAG7P,gBAEnD,GAAmB,GAAfgE,EAAWhb,KAAuC,CAC5DqZ,EAAOzf,KAAI,IAAmBwe,EAAoB4C,EAAW6B,WAC7DxD,EAAOzf,KAAI,GAAsBwe,EAAoB4C,EAAWxE,UAE5DwE,EAAWxE,SAAWrd,EAAO4G,SAASvG,SACzC6f,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAAgC,GAA1BgI,EAAWgC,gBACtD3D,EAAOzf,KAAKwe,EAAoB4C,EAAWiC,eAC3C5D,EAAOzf,KAAKwe,EAAoB4C,EAAWkC,eAC3C7D,EAAOzf,KAAKwe,EAAoB4C,EAAWmC,eAGpB,GAApBnC,EAAW7E,QACdkD,EAAOzf,KAAI,GAA4Bwe,EAAoB4C,EAAWsC,gBACtEjE,EAAOzf,KAAKwe,GAAqB4C,EAAWuC,kBAE7ClE,EAAOzf,KAAI,IAAuBwe,EAAoB4C,EAAWzE,WAEjE8C,EAAOzf,KAAI,IAEX,IAAK,IAAI8b,EAAY,EAAGA,EAAI,GAAIA,IAC/B2D,EAAOzf,KAAKwe,EAAqB4C,EAAW/D,eAAevB,GAAK,UAE3D,GAAmB,GAAfsF,EAAWhb,KACrBqZ,EAAOzf,KAAI,IAAmBwe,EAAoB4C,EAAW8B,YAErC,GAApB9B,EAAW7E,QACdkD,EAAOzf,KAAI,GAA4Bwe,EAAoB4C,EAAWsC,gBACtEjE,EAAOzf,KAAKwe,GAAqB4C,EAAWuC,kBAE7ClE,EAAOzf,KAAI,IAAuBwe,EAAoB4C,EAAWzE,gBAC3D,GAAmB,GAAfyE,EAAWhb,KAAiC,CACtDqZ,EAAOzf,KAAI,IACX,MAAMktB,EAA+B,IAAI9N,EACzC,IAAK,IAAIzf,EAAY,EAAGA,EAAIJ,EAAOuJ,sBAAuBnJ,IACzDutB,EAAa3N,MAAMhgB,EAAOyJ,yBAA0BoY,EAAW0D,aAAapH,SAAS/d,IAEtFutB,EAAaC,aAAa1N,GAC1BA,EAAOzf,KAAI,GAAsBwe,EAAoB4C,EAAWxE,UAE5DwE,EAAWxE,SAAWrd,EAAO4G,SAASvG,SACzC6f,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAAgC,GAA1BgI,EAAWgC,gBACtD3D,EAAOzf,KAAKwe,EAAoB4C,EAAWiC,eAC3C5D,EAAOzf,KAAKwe,EAAoB4C,EAAWkC,eAC3C7D,EAAOzf,KAAKwe,EAAoB4C,EAAWmC,eAEpB,GAApBnC,EAAW7E,QACdkD,EAAOzf,KAAI,GAA4Bwe,EAAoB4C,EAAWsC,gBACtEjE,EAAOzf,KAAKwe,GAAqB4C,EAAWuC,kBAE7ClE,EAAOzf,KAAI,IAAuBwe,EAAoB4C,EAAWzE,gBAC3D,GAAmB,GAAfyE,EAAWhb,KAAgC,CACrDqZ,EAAOzf,KAAI,KACX,IAAK,IAAI8b,EAAY,EAAGA,EAAIvc,EAAOyK,UAAW8R,IAC7C2D,EAAOzf,KAAKwe,EAAoB4C,EAAWgD,iBAAiBtI,KAG7D2D,EAAOzf,KAAI,IACX,MAAMktB,EAA+B,IAAI9N,EACzC,IAAK,IAAItD,EAAY,EAAGA,EAAIvc,EAAOyK,UAAW8R,IAC7C,IAAK,IAAInc,EAAY,EAAGA,EAAIJ,EAAOuJ,sBAAuBnJ,IACzDutB,EAAa3N,MAAMhgB,EAAOyJ,yBAA0BoY,EAAWiD,qBAAqBvI,GAAG4B,SAAS/d,IAGlGutB,EAAaC,aAAa1N,QACpB,GAAmB,GAAf2B,EAAWhb,KAAkC,CACvDqZ,EAAOzf,KAAI,GAAsBwe,EAAoB4C,EAAWxE,UAE5DwE,EAAWxE,SAAWrd,EAAO4G,SAASvG,SACzC6f,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAAgC,GAA1BgI,EAAWgC,gBACtD3D,EAAOzf,KAAKwe,EAAoB4C,EAAWiC,eAC3C5D,EAAOzf,KAAKwe,EAAoB4C,EAAWkC,eAC3C7D,EAAOzf,KAAKwe,EAAoB4C,EAAWmC,eAGpB,GAApBnC,EAAW7E,QACdkD,EAAOzf,KAAI,GAA4Bwe,EAAoB4C,EAAWsC,gBACtEjE,EAAOzf,KAAKwe,GAAqB4C,EAAWuC,kBAE7ClE,EAAOzf,KAAI,IAAuBwe,EAAoB4C,EAAWzE,WAEjE8C,EAAOzf,KAAI,IACX,MAAMotB,EAAgC,IAAIhO,EAC1C,IAAK,IAAIzf,EAAY,EAAGA,EAAIJ,EAAO0J,uBAAwBtJ,IAC1DytB,EAAc7N,MAAMhgB,EAAO4J,0BAA2BiY,EAAW+C,cAAc7G,UAAU3d,IAE1FytB,EAAcD,aAAa1N,QACrB,GAAmB,GAAf2B,EAAWhb,KACrBqZ,EAAOzf,KAAI,GAAsBwe,EAAoB4C,EAAWxE,UAE5DwE,EAAWxE,SAAWrd,EAAO4G,SAASvG,SACzC6f,EAAOzf,KAAKwe,EAAoBpe,KAAKgZ,MAAgC,GAA1BgI,EAAWgC,gBACtD3D,EAAOzf,KAAKwe,EAAoB4C,EAAWiC,eAC3C5D,EAAOzf,KAAKwe,EAAoB4C,EAAWkC,eAC3C7D,EAAOzf,KAAKwe,EAAoB4C,EAAWmC,eAGpB,GAApBnC,EAAW7E,QACdkD,EAAOzf,KAAI,GAA4Bwe,EAAoB4C,EAAWsC,gBACtEjE,EAAOzf,KAAKwe,GAAqB4C,EAAWuC,kBAE7ClE,EAAOzf,KAAI,GAAyBwe,EAAoB4C,EAAW5D,YAAagB,EAAoB4C,EAAW3D,gBAC/GgC,EAAOzf,KAAI,IAAuBwe,EAAoB4C,EAAWzE,gBAC3D,GAAmB,GAAfyE,EAAWhb,KAIrB,MAAM,IAAIhF,MAAM,4BAKnBqe,EAAOzf,KAAI,IACX2sB,EAAO,IAAIvN,EACX,IAAIiO,EAAqB,EACzB,KAAQ,GAAKA,EAAc3e,KAAKyd,mBAAqB,GAAGkB,IACxD,IAAK,IAAIve,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAAW,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAKwd,SAAUvsB,IACrHgtB,EAAKpN,MAAM8N,EAAY3e,KAAKia,SAAS7Z,GAASyZ,KAAK5oB,IAEpDgtB,EAAKQ,aAAa1N,GAElBA,EAAOzf,KAAI,KACX2sB,EAAO,IAAIvN,EACX,MAAMkO,EAA4B,IAAIlO,EACtC,IAAImO,EAA+B,EACnC,KAAQ,GAAKA,EAAwB7e,KAAK2d,uBAAuBkB,IACjE,IAAK,IAAIze,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAAW,CAE1E,MAAM4S,EAA0BhT,KAAK8e,kBAAkB1e,GACjDkU,EAAwBtU,KAAK+e,gBAAgB3e,GAGnD,GAAIkU,EACH,IAAK,IAAI0K,EAA0B,EAAGA,EAAkBhf,KAAK2d,sBAAuBqB,IAAmB,CAEtG,IAAItM,EAAyB1S,KAAKia,SAAS7Z,GAASuZ,YAAYqF,GAEhE,IAAK,IAAIjJ,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAAO,CACvD,MAAMkJ,EAAuBvM,EAAWkD,YAAYG,GAC9CuG,EAAqB5J,EAAWpR,YAAYyU,GAC5CwG,EAAwB7J,EAAWmD,eAAeE,GAClD8G,EAAqBnK,EAAWoD,YAAYC,GAElDkI,EAAKpN,MAAM,EAAGoO,GAGVA,GAAajJ,EAAUkJ,YAAcD,GAAajJ,EAAUmJ,aAC/DlB,EAAKpN,MAAM,EAAGyL,GACd2B,EAAKpN,MAAMgO,EAAsBtC,IAI9B0C,GAAajJ,EAAUC,QAC1BgI,EAAKpN,MAAM,EAAGgM,IAMlB,MAAMuC,EAAwBpM,GAAkBsB,EAAgB,EAAItU,KAAKia,SAAS7Z,GAASsZ,OAAS7oB,EAAOwK,iBAC3G,IAAIgkB,GAAsBrM,GAAkBsB,EAAgB,EAAIzjB,EAAOwK,kBAAoB+jB,EAC3F,MAAME,EAA0BhL,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAMtB,EAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GACpIuM,EAAsB,GAE5B,IAAK,IAAItuB,EAAY,EAAGA,EAAIquB,EAAcpuB,OAAQD,IACjDquB,EAAcruB,IAAMmuB,EAErB,IAAK,MAAMrB,KAAW/d,KAAKia,SAAS7Z,GAASwZ,SAG5C,GAFAqE,EAAKpN,MAAMgO,EAAsBd,EAAQrL,YAErCqL,EAAQtL,MAAMvhB,OAAS,EAAG,CAC7B+sB,EAAKpN,MAAM,EAAG,GAEd,IAAI2O,EAAkB,EACtB,IAAK,MAAM7M,KAAQoL,EAAQtL,MAAO,CAG7BE,EAAKlB,MAAQ+N,GAAWlL,IAC3B2J,EAAKpN,MAAM,EAAG,GACdoN,EAAKpN,MAAM,EAAG,GACdoN,EAAKwB,kBAAkBD,EAAU7M,EAAKlB,QAGnCkB,EAAKlB,MAAQ+N,IAChBvB,EAAKpN,MAAM,EAAG,GACVyD,GAAc2J,EAAKpN,MAAM,EAAG,GAChCoN,EAAKwB,kBAAkB9M,EAAKlB,MAAQ+N,IAGrCZ,EAAU1e,QAOiB,GAAvByS,EAAKf,QAAQ1gB,OAChB0tB,EAAU/N,MAAM,EAAG,IAEnB+N,EAAU/N,MAAM,EAAG,GACnB+N,EAAU/N,MAAM,EAAG8B,EAAKf,QAAQ1gB,OAAS,IAG1C0tB,EAAUc,cAAc/M,EAAKd,KAAK3gB,OAAS,GAEtCojB,EAIJsK,EAAU/N,MAAM,EAAG8B,EAAKd,KAAK,GAAGpb,QAHhCmoB,EAAU/N,MAAM,EAAG8B,EAAKd,KAAK,GAAGpb,QAMjC,IAAIkpB,EAAoB,EACpBC,EAAqBjN,EAAKf,QAAQ,GAClCiO,EAAuBD,EAC3B,MAAME,EAAuB,GAC7B,IAAK,IAAI7uB,EAAY,EAAGA,EAAI0hB,EAAKd,KAAK3gB,OAAQD,IAAK,CAClD,MAAMohB,EAAeM,EAAKd,KAAK5gB,GACzB8uB,EAAoBH,EAAavN,EAAIpE,SACvC4R,GAAgBE,GACnBnB,EAAU/N,MAAM,EAAG,GACnBiP,EAAWxuB,KAAKyuB,GAChBF,EAAeE,GAEfnB,EAAU/N,MAAM,EAAG,GAEpB+N,EAAUa,kBAAkBpN,EAAInB,KAAOyO,GACvCA,EAAYtN,EAAInB,KAEXoD,EAIJsK,EAAU/N,MAAM,EAAGwB,EAAI5b,QAHvBmoB,EAAU/N,MAAM,EAAGwB,EAAI5b,QAOzB,MAAMupB,EAAsBC,OAAOC,aAAaC,MAAM,KAAMvB,EAAUH,aAAa,KAC7E2B,EAAqBb,EAAa1I,QAAQmJ,IAC7B,GAAfI,GACHnC,EAAKpN,MAAM,EAAG,GACdoN,EAAK1L,OAAOqM,KAEZX,EAAKpN,MAAM,EAAG,GACdoN,EAAKrN,cAAc,EAAG,EAAGwP,GACzBb,EAAac,OAAOD,EAAY,IAEjCb,EAAae,QAAQN,GACjBT,EAAaruB,OAAS,IAAIquB,EAAagB,MAE3C,MAAMC,EAAuB7N,EAAKf,QAAQW,OAAOuN,GACjD,IAAK,IAAI7uB,EAAY,EAAGA,EAAIuvB,EAAWtvB,OAAQD,IAAK,CACnD,MAAMugB,EAAgBgP,EAAWvvB,GAC3BwvB,EAAqBnB,EAAczI,QAAQrF,GACjD,IAAmB,GAAfiP,EAAkB,CACrB,IAAIxS,EAAmB,EACnByS,EAAoBrB,EACxB,GAAIqB,EAAYlP,EACf,KAAOkP,GAAalP,GACnBkP,KACyC,GAArCpB,EAAczI,QAAQ6J,IAAkBzS,SAG7C,KAAOyS,GAAalP,GACnBkP,KACyC,GAArCpB,EAAczI,QAAQ6J,IAAkBzS,IAG9CgQ,EAAKpN,MAAM,EAAG,GACdoN,EAAK0C,mBAAmB1S,QAExBgQ,EAAKpN,MAAM,EAAG,GACdoN,EAAKpN,MAAM,EAAG4P,GACdnB,EAAce,OAAOI,EAAY,GAElCnB,EAAcgB,QAAQ9O,GAClB8N,EAAcpuB,OAAS,IAAIouB,EAAciB,MAG5ClB,EADGpuB,GAAK0hB,EAAKf,QAAQ1gB,OAAS,EAClByhB,EAAKf,QAAQ,GAEbJ,EAGdgO,EAAU7M,EAAKjB,IAGZ8N,EAAUxf,KAAKud,YAAc1sB,EAAOmF,eAAiBse,IACxD2J,EAAKpN,MAAM,EAAG,GACVyD,GAAc2J,EAAKpN,MAAM,EAAG,GAChCoN,EAAKwB,kBAAkBzf,KAAKud,YAAc1sB,EAAOmF,eAAiBse,EAAgBkL,SAGnFvB,EAAKpN,MAAM,EAAG,GAKjB,IAAI+P,EAAuB3C,EAAK4C,eAC5BC,EAAmB,GACvB,KAAOF,EAAe,GACrBE,EAAOR,QAAQxQ,EAAmC,GAAf8Q,IACnCA,IAA+B,EAEhC7P,EAAOzf,KAAKwe,EAAoBgR,EAAO5vB,SACvC4L,MAAMikB,UAAUzvB,KAAK6uB,MAAMpP,EAAQ+P,GACnC7C,EAAKQ,aAAa1N,GAElB,MAAMiQ,EAAuB,KAC7B,GAAIjQ,EAAO7f,OAAS8vB,EAEnB,OAAOf,OAAOC,aAAaC,MAAM,KAAMpP,GACjC,CACN,IAAIrc,EAAiB,GACrB,IAAK,IAAIzD,EAAY,EAAGA,EAAI8f,EAAO7f,OAAQD,GAAK+vB,EAC/CtsB,GAAUurB,OAAOC,aAAaC,MAAM,KAAMpP,EAAOkQ,MAAMhwB,EAAGA,EAAI+vB,IAE/D,OAAOtsB,GAIFqL,iBAAiBmhB,GACvB,GAAkB,MAAdA,GAAoC,IAAdA,EAEzB,YADAlhB,KAAK+c,eAAc,GAGpB,IAAIoE,EAAoB,EAExB,KAAOD,EAAW9Q,WAAW+Q,IAAU,IAAoBA,IAI3D,GAFoC,IAAhCD,EAAW9Q,WAAW+Q,IAA6BA,IAEnB,KAAhCD,EAAW9Q,WAAW+Q,GAEzB,YADAnhB,KAAKohB,eAAeC,KAAKC,MAAmB,GAAbH,EAAiBD,EAAaA,EAAWK,UAAUJ,KAKnF,IAAIK,EAAkB,UAGH,KAJSN,EAAW9Q,WAAW+Q,KAKjDK,EAAU,UACVL,KAGD,MAAM5T,EAAkBwC,EAAoBmR,EAAW9Q,WAAW+Q,MAElE,GAAe,WAAXK,KAAqC,GAAZjU,GAAiBA,EAAUwM,EAAK0H,GAAyBlU,EAAUwM,EAAK2H,GAAwB,OAC7H,GAAe,WAAXF,KAAqC,GAAZjU,GAAiBA,EAAUwM,EAAKoE,GAAyB5Q,EAAUwM,EAAK4H,GAAwB,OAE7H,MAAMC,EAAqBrU,EAAU,EAC/BsU,EAAuBtU,EAAU,EACjCuU,EAAsBvU,EAAU,EAChCwU,EAAsBxU,EAAU,EAChCyU,EAAqBzU,EAAU,EAC/B0U,EAAuB1U,EAAU,EACjC2U,EAAuB3U,EAAU,EAGvC,GAFAvN,KAAK+c,cAAyB,WAAXyE,GAAwBQ,GAEvCH,GAA0B,WAAXL,EAAsB,CAExC,IAAK,MAAMphB,KAAWJ,KAAKia,SAAU7Z,EAAQuZ,YAAY,GAAGhM,WAAa,EACzE3N,KAAKia,SAAS,GAAGN,YAAY,GAAGnF,UAAY,EAG7C,IAGI2N,EACA/hB,EAJAgiB,EAAoC,EACpCC,GAAmC,EACnCC,EAAyB,GAGzBC,GAA6B,EAC7BtuB,GAA6B,EACjC,KAAOktB,EAAYD,EAAWhwB,eAAgBixB,EAAUjB,EAAW9Q,WAAW+Q,MAC7E,KAAA,GAEC,IAAIqB,GAAkBzS,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,GAAKpR,EAAoBmR,EAAW9Q,WAAW+Q,MAChInhB,KAAK4d,MAAQ6E,mBAAmBvB,EAAWK,UAAUJ,EAAWA,EAAYqB,IAC5E5lB,SAASghB,MAAQ5d,KAAK4d,MAAQ,MAAQlU,EAAa8D,mBAEnD2T,GAAaqB,EACZ,MACF,KAAA,IACCxiB,KAAKkB,kBAAoB6O,EAAoBmR,EAAW9Q,WAAW+Q,MACnEnhB,KAAKoB,kBAAoB2O,EAAoBmR,EAAW9Q,WAAW+Q,MAGlEnhB,KAAKid,gBAFS,WAAXuE,GAAwBI,EAEJ,EAGA7R,EAAoBmR,EAAW9Q,WAAW+Q,MAElEnhB,KAAKkB,kBAAoBoQ,EAAczgB,EAAOgK,qBAAsBhK,EAAOiK,qBAAsBkF,KAAKkB,mBACtGlB,KAAKoB,kBAAoBkQ,EAAczgB,EAAOkK,qBAAsBlK,EAAOmK,qBAAsBgF,KAAKoB,mBACtGpB,KAAKid,gBAAkB3L,EAAczgB,EAAOoK,mBAAoBpK,EAAOqK,mBAAoB8E,KAAKid,iBAEhG,IAAK,IAAIY,EAAe7d,KAAKia,SAAS/oB,OAAQ2sB,EAAe7d,KAAK8d,kBAAmBD,IACpF7d,KAAKia,SAAS4D,GAAgB,IAAIpE,EAEnCzZ,KAAKia,SAAS/oB,OAAS8O,KAAK8d,kBAC3B,MACF,KAAA,IACC9d,KAAKmd,MAAQpN,EAAoBmR,EAAW9Q,WAAW+Q,MAExC,WAAXK,IAAsBxhB,KAAKmd,MAAQ,GACtC,MACF,KAAA,IAMCnd,KAAKvC,IAAM,EACV,MACF,KAAA,IAEEuC,KAAKod,UADF2E,GAAyB,WAAXP,EACAzR,EAAoBmR,EAAW9Q,WAAW+Q,OAEzCpR,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,GAAKpR,EAAoBmR,EAAW9Q,WAAW+Q,MAE5H,MACF,KAAA,IAEEnhB,KAAKqd,WADF0E,GAAyB,WAAXP,EACCzR,EAAoBmR,EAAW9Q,WAAW+Q,OAEzCpR,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,GAAKpR,EAAoBmR,EAAW9Q,WAAW+Q,MAAgB,EAE7I,MACF,KAAA,IAEEnhB,KAAK0c,MADFoF,GAAyB,WAAXN,EACJ,CAAC,GAAI,IAAK,IAAK,KAAKzR,EAAoBmR,EAAW9Q,WAAW+Q,OACjEc,GAA0B,WAAXT,EACZ,CAAC,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKzR,EAAoBmR,EAAW9Q,WAAW+Q,OAEnHpR,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,EAAMpR,EAAoBmR,EAAW9Q,WAAW+Q,MAE1HnhB,KAAK0c,MAAQvL,EAAMtgB,EAAO0E,SAAU1E,EAAO2E,SAAW,EAAGwK,KAAK0c,OAC7D,MACF,KAAA,IACgB,WAAX8E,GACHxhB,KAAKsd,OAAmE,EAA1DvN,EAAoBmR,EAAW9Q,WAAW+Q,MACxDnhB,KAAKsd,OAASnM,EAAM,EAAGtgB,EAAO4E,YAAauK,KAAKsd,UAGhDtd,KAAKsd,OAASvN,EAAoBmR,EAAW9Q,WAAW+Q,MACxDnhB,KAAKsd,OAASnM,EAAM,EAAGtgB,EAAO4E,YAAauK,KAAKsd,SAEhD,MACF,KAAA,GAEEtd,KAAKud,YADFsE,GAA0B,WAAXL,EACC,CAAC,EAAG,EAAG,EAAG,EAAG,IAAIzR,EAAoBmR,EAAW9Q,WAAW+Q,OAE3DpR,EAAoBmR,EAAW9Q,WAAW+Q,MAAgB,EAE9EnhB,KAAKud,YAAc7rB,KAAK0f,IAAIvgB,EAAO6E,eAAgBhE,KAAKyB,IAAItC,EAAO8E,eAAgBqK,KAAKud,cACvF,MACF,KAAA,IAA2B,CAC1B,MAAMC,GAAoBzN,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,GAAKpR,EAAoBmR,EAAW9Q,WAAW+Q,MAAgB,EACpJnhB,KAAKwd,SAAWlM,EAAczgB,EAAO+E,YAAa/E,EAAOgF,YAAa2nB,GACtE,IAAK,IAAIpd,EAAU,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAAW,CAClE,IAAK,IAAI4d,EAAMhe,KAAKia,SAAS7Z,GAASyZ,KAAK3oB,OAAQ8sB,EAAMhe,KAAKwd,SAAUQ,IACvEhe,KAAKia,SAAS7Z,GAASyZ,KAAKmE,GAAQA,EAAM,EAAK,EAAI,EAEpDhe,KAAKia,SAAS7Z,GAASyZ,KAAK3oB,OAAS8O,KAAKwd,UAE1C,MACF,KAAA,IAEExd,KAAKyd,mBADS,WAAX+D,GAAwBU,EACDnS,EAAoBmR,EAAW9Q,WAAW+Q,MAAgB,GAEzDpR,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,GAAKpR,EAAoBmR,EAAW9Q,WAAW+Q,MAAgB,EAEtJnhB,KAAKyd,mBAAqBnM,EAAc,EAAGzgB,EAAOgF,YAAamK,KAAKyd,oBACpE,IAAK,IAAIrd,EAAU,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAAW,CAClE,IAAK,IAAI2d,EAAU/d,KAAKia,SAAS7Z,GAASwZ,SAAS1oB,OAAQ6sB,EAAU/d,KAAKyd,mBAAoBM,IAC7F/d,KAAKia,SAAS7Z,GAASwZ,SAASmE,GAAW,IAAIvL,EAEhDxS,KAAKia,SAAS7Z,GAASwZ,SAAS1oB,OAAS8O,KAAKyd,mBAE9C,MACF,KAAA,IAAkC,CACjC,MAAME,EAAgC5N,EAAoBmR,EAAW9Q,WAAW+Q,MAAgB,EAChGnhB,KAAK2d,sBAAwBrM,EAAczgB,EAAOiF,yBAA0BjF,EAAOkF,yBAA0B4nB,GAC7G,IAAK,IAAIvd,EAAU,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAAW,CAClE,MAAM4S,EAA0B5S,GAAWJ,KAAKkB,mBAAqBd,EAAUJ,KAAKkB,kBAAoBlB,KAAKoB,kBACvGkT,EAAwBlU,GAAWJ,KAAKkB,kBAAoBlB,KAAKoB,kBACvE,IAAK,IAAI4d,EAAkBhf,KAAKia,SAAS7Z,GAASuZ,YAAYzoB,OAAQ8tB,EAAkBhf,KAAK2d,sBAAuBqB,IACnHhf,KAAKia,SAAS7Z,GAASuZ,YAAYqF,GAAmB,IAAI3K,EAAWrB,EAAgBsB,GAGtF,GADAtU,KAAKia,SAAS7Z,GAASuZ,YAAYzoB,OAAS8O,KAAK2d,sBAC7CqE,GAAwB,WAAXR,EAChB,IAAK,IAAIxC,EAAkB,EAAGA,EAAkBhf,KAAK2d,sBAAuBqB,IAC3Ehf,KAAKia,SAAS7Z,GAASuZ,YAAYqF,GAAiBjI,gBAAgB/D,EAAc,EAAA,EAA+CA,EAAgBsB,IAInJ,MACF,KAAA,IACCtU,KAAK0d,OAAS3N,EAAoBmR,EAAW9Q,WAAW+Q,OAEzC,WAAXK,GAAwBK,GAA0B,WAAXL,KAEvB,GAAfxhB,KAAK0d,QAA8B,GAAf1d,KAAK0d,SAC5B6E,GAAoB,GAGjBviB,KAAK0d,QAAU,IAClBzpB,GAAoB,IAGrB,MACF,KAAA,IACC,GAAI4tB,GAA0B,WAAXL,EAClBphB,EAAU2P,EAAoBmR,EAAW9Q,WAAW+Q,MAEpDnhB,KAAKia,SAAS7Z,GAASsZ,OAASvI,EAAM,EAAGtgB,EAAO4K,qBAAuB,EAAGsU,EAAoBmR,EAAW9Q,WAAW+Q,OACpHmB,EAAaliB,GAAW+Q,EAAM,EAAGtgB,EAAO4K,uBAA0BinB,OAAOC,aAAaC,QAAQ,iBAAmB,KAAQ,EAAG5iB,KAAKia,SAAS7Z,GAASsZ,aAEnJ,IAAKtZ,EAAU,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAEnDJ,KAAKia,SAAS7Z,GAASsZ,OAASvI,EAAM,EAAGtgB,EAAO4K,qBAAuB,EAAGsU,EAAoBmR,EAAW9Q,WAAW+Q,OACpHmB,EAAaliB,GAAW+Q,EAAM,EAAGtgB,EAAO4K,uBAA0BinB,OAAOC,aAAaC,QAAQ,iBAAmB,KAAQ,EAAG5iB,KAAKia,SAAS7Z,GAASsZ,QAGpJ,MACF,KAAA,GAAkC,CACjC2I,IACIA,GAA2BriB,KAAK2d,wBACnCyE,IACAC,EAA0B,GAE3B/Q,EAAc,EAAGtR,KAAKia,SAAS/oB,OAAS,EAAGkxB,GAC3C,MAAM1P,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAC9EQ,EAAyB1R,EAAM,EAAC,EAAyBpB,EAAoBmR,EAAW9Q,WAAW+Q,OACzGzO,EAAWqE,gBAAgB8L,EAAgBT,GAA6BpiB,KAAKkB,mBAAqBkhB,EAA4BpiB,KAAKkB,kBAAoBlB,KAAKoB,kBAAmBghB,GAA6BpiB,KAAKkB,kBAAoBlB,KAAKoB,mBACtOmhB,IACH7P,EAAWsC,cAAgB,GAExB/gB,IACHye,EAAWuC,gBAAiB,GAE5B,MACF,KAAA,IAAyB,CACxB,MAAMtL,EAAuBoG,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,EAAMpR,EAAoBmR,EAAW9Q,WAAW+Q,MACxInhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBnY,OAASP,EACtF,MACF,KAAA,IACC,GAAIkY,GAA0B,WAAXL,EAAsB,CACxC,MAAMsB,EAAwB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACjD1iB,EAAkB2P,EAAoBmR,EAAW9Q,WAAW+Q,MAClEnhB,KAAKia,SAAS7Z,GAASuZ,YAAY,GAAGpF,SAAWpD,EAAM,EAAGtgB,EAAO2F,UAAUtF,OAA+E,EAAvE4xB,EAAY/S,EAAoBmR,EAAW9Q,WAAW+Q,aACnI,GAAIa,GAAwB,WAAXR,EAAsB,CAC7C,MAAMsB,EAAwB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,IAAK,IAAI1iB,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAC/D,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAK2d,sBAAuB1sB,IACnDmP,GAAWJ,KAAKkB,kBACnBlB,KAAKia,SAAS7Z,GAASuZ,YAAY1oB,GAAGujB,UAAYrD,EAAM,EAAGtgB,EAAOoB,WAAWf,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAE/HnhB,KAAKia,SAAS7Z,GAASuZ,YAAY1oB,GAAGsjB,SAAWpD,EAAM,EAAGtgB,EAAO2F,UAAUtF,OAA+E,EAAvE4xB,EAAY/S,EAAoBmR,EAAW9Q,WAAW+Q,aAItI,GAAIc,GAA0B,WAAXT,EAAsB,CAC/C,MAAMsB,EAAwB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnDV,GAA6BpiB,KAAKkB,kBACrClB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB7N,UAAYrD,EAAM,EAAGtgB,EAAOoB,WAAWf,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAEvKnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB9N,SAAWpD,EAAM,EAAGtgB,EAAO2F,UAAUtF,OAA+E,EAAvE4xB,EAAY/S,EAAoBmR,EAAW9Q,WAAW+Q,aAG9KiB,GAA6BpiB,KAAKkB,kBACrClB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB7N,UAAYrD,EAAM,EAAGtgB,EAAOoB,WAAWf,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAEvKnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB9N,SAAWpD,EAAM,EAAGtgB,EAAO2F,UAAUtF,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAGtK,MACF,KAAA,IACC,GAAIc,GAA0B,WAAXT,EAAsB,CACxC,MAAMlK,EAA2B,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/CC,EAA6B,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAClDC,EAAwB,CAAC,OAAQ,SAAU,SAAU,OAAQ,eAAgB,eAAgB,cAEnG,GAAIqK,GAA0B,WAAXL,EAAsB,CACxCphB,EAAU2P,EAAoBmR,EAAW9Q,WAAW+Q,MACpD,MAAMzO,EAAyB1S,KAAKia,SAAS7Z,GAASuZ,YAAY,GAC5D7B,EAAuB,CAAC,EAAG,EAAG,EAAG,GAAG3G,EAAM,EAAGqG,EAAYtmB,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,QACjHzO,EAAW+B,aAAe6C,EAAeQ,GACzCpF,EAAW1E,eAAiBuJ,EAAiBO,GAC7CpF,EAAW3E,gBAAkB,OACvB,GAAIiU,GAAwB,WAAXR,EACvB,IAAKphB,EAAU,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IACnD,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAK2d,sBAAuB1sB,IAAK,CAC5D,MAAMyhB,EAAyB1S,KAAKia,SAAS7Z,GAASuZ,YAAY1oB,GAC5D6mB,EAAuB3G,EAAM,EAAGqG,EAAYtmB,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,MAAgB,GAChH/gB,EAAUJ,KAAKkB,mBAClBwR,EAAW+B,aAAe6C,EAAeQ,GACzCpF,EAAW1E,eAAiBuJ,EAAiBO,GAC7CpF,EAAW3E,gBAAkB,IAE7B2E,EAAW+B,aAAe,GAC1B/B,EAAW1E,eAAiB,EAC5B0E,EAAW3E,gBAAkB,OAI1B,CACN,MAAM+J,EAAuB3G,EAAM,EAAGqG,EAAYtmB,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAC9FzO,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GACpF3P,EAAW+B,aAAe6C,EAAeQ,GACzCpF,EAAW1E,eAAiBuJ,EAAiBO,GAC7CpF,EAAW3E,gBAAkB,OAExB,CACyB/N,KAAKia,SAASmI,GAA2BzI,YAAY0I,GACzE5N,aAAetD,EAAM,EAAGtgB,EAAOmG,kBAAmB+Y,EAAoBmR,EAAW9Q,WAAW+Q,OAEvG,MACF,KAAA,IACCnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBtU,gBAAkBoD,EAAM,EAAGtgB,EAAOoG,qBAAsB8Y,EAAoBmR,EAAW9Q,WAAW+Q,OAC/K,MACF,KAAA,IAAiC,CAChC,MAAMzO,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GACpF,GAAmB,GAAf3P,EAAWhb,KACd,IAAK,IAAIzG,EAAY,EAAGA,EAAIJ,EAAOyK,UAAWrK,IAC7CyhB,EAAWgD,iBAAiBzkB,GAAKkgB,EAAM,EAAGtgB,EAAOkJ,UAAU7I,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,YAG9GzO,EAAW1E,eAAiBmD,EAAM,EAAGtgB,EAAOkJ,UAAU7I,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAExG,MACF,KAAA,GACC,GAAe,WAAXK,EAAsB,CAGzB,MAAM9O,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GACpF3P,EAAW5D,WAAapd,KAAKgZ,MAAMyG,EAAM,EAAGtgB,EAAO+J,gBAAkB,EAAwF,GAArFlJ,KAAKuB,IAAI,GAAqE,IAA/D,EAAI8c,EAAoBmR,EAAW9Q,WAAW+Q,UACrIzO,EAAW3D,cAAgBoC,EAAM,EAAGtgB,EAAOkJ,UAAU7I,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,WAEnG,CACJ,MAAMzO,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GACpF3P,EAAW5D,WAAaqC,EAAM,EAAGtgB,EAAO+J,gBAAkB,EAAGmV,EAAoBmR,EAAW9Q,WAAW+Q,OACvGzO,EAAW3D,cAAgBoC,EAAM,EAAGtgB,EAAOkJ,UAAU7I,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAEvG,MACF,KAAA,IACC,GAAIU,GAA0B,WAAXL,EAClBphB,EAAU2P,EAAoBmR,EAAW9Q,WAAW+Q,MACpDnhB,KAAKia,SAAS7Z,GAASuZ,YAAY,GAAGhM,WAAawD,EAAM,EAAGtgB,EAAOqG,YAAYhG,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,YAC3H,GAAIa,GAAwB,WAAXR,EACvB,IAAKphB,EAAU,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IACnD,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAK2d,sBAAuB1sB,IACvD+O,KAAKia,SAAS7Z,GAASuZ,YAAY1oB,GAAG0c,WAAawD,EAAM,EAAGtgB,EAAOqG,YAAYhG,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,YAGzHW,GAAyB,WAAXN,EACxBxhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB1U,WAAawD,EAAM,EAAGtgB,EAAOqG,YAAYhG,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,QAGzKnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB1U,WAAawD,EAAM,EAAGtgB,EAAOqG,YAAYhG,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OACzKnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBnN,oBAAoBnF,EAAoBmR,EAAW9Q,WAAW+Q,MAC5InhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBlN,sBAAsBpF,EAAoBmR,EAAW9Q,WAAW+Q,OAE9I,MACF,KAAA,GACC,GAAIU,GAA0B,WAAXL,EAAsB,CACxC,MAAMuB,EAA0B,CAAC,EAAG,EAAG,EAAG,GACpCC,EAA4B,CAAC,EAAG,EAAG,EAAG,IACtC5iB,EAAkB2P,EAAoBmR,EAAW9Q,WAAW+Q,MAC5D8B,EAAiB9R,EAAM,EAAG4R,EAAc7xB,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAC1FzO,EAAyB1S,KAAKia,SAAS7Z,GAASuZ,YAAY,GAClEjH,EAAWxE,QAAU6U,EAAcE,GACnCvQ,EAAW1E,eAA+C,GAA7B0E,EAAW1E,eACrCgV,EAAgBC,GAChBvQ,EAAW1E,oBACR,GAAIgU,GAAwB,WAAXR,EAAsB,CAC7C,MAAMuB,EAA0B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1CC,EAA4B,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,IACnD,IAAK,IAAI5iB,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAC/D,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAK2d,sBAAuB1sB,IAAK,CAC5D,MAAMgyB,EAAiB9R,EAAM,EAAG4R,EAAc7xB,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAC1FzO,EAAyB1S,KAAKia,SAAS7Z,GAASuZ,YAAY1oB,GAClEyhB,EAAWxE,QAAU6U,EAAcE,GACnCvQ,EAAW1E,eAA+C,GAA7B0E,EAAW1E,eACrCgV,EAAgBC,GAChBvQ,EAAW1E,qBAGV,GAAIiU,GAA0B,WAAXT,EAAsB,CAC/C,MAAMuB,EAA0B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1CC,EAA4B,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,IAC7CC,EAAiB9R,EAAM,EAAG4R,EAAc7xB,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAC1FzO,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GACpF3P,EAAWxE,QAAU6U,EAAcE,GACnCvQ,EAAW1E,eAA+C,GAA7B0E,EAAW1E,eACrCgV,EAAgBC,GAChBvQ,EAAW1E,mBACR,CACN,MAAME,EAAkBiD,EAAM,EAAGtgB,EAAO4G,SAASvG,OAAS,EAAG6e,EAAoBmR,EAAW9Q,WAAW+Q,OACjGzO,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GACpF3P,EAAWxE,QAAUA,EAEjBA,GAAWrd,EAAO4G,SAASvG,QAC9BwhB,EAAWgC,aAAevD,EAAM,EAAGnR,KAAK2a,WAAWnZ,IAAI0U,EAAWyF,iBAAoB,EAAG5L,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,GACpJzO,EAAWiC,aAAexD,EAAM,EAAGnR,KAAK2a,WAAWnZ,IAAI0U,EAAW2F,iBAAoB,EAAG9L,EAAoBmR,EAAW9Q,WAAW+Q,OACnIzO,EAAWkC,aAAezD,EAAM,EAAGnR,KAAK2a,WAAWnZ,IAAI0U,EAAW4F,iBAAoB,EAAG/L,EAAoBmR,EAAW9Q,WAAW+Q,OACnIzO,EAAWmC,YAAc1D,EAAM,EAAGtgB,EAAO+G,aAAa1G,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,SAIxGzO,EAAWgC,aAAe7jB,EAAO4G,SAASib,EAAWxE,SAASza,UAC9Dif,EAAWiC,aAAe,GAC1BjC,EAAWkC,aAAe/jB,EAAO4G,SAASib,EAAWxE,SAASvW,WAC9D+a,EAAWmC,YAAchkB,EAAO4G,SAASib,EAAWxE,SAASxW,MAI9D,MACF,KAAA,GAAgC,CAC/B,MAAMgb,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GACpF3P,EAAWsC,cAAgB7D,EAAM,EAAGnR,KAAK2a,WAAWnZ,IAAI0U,EAAW6F,kBAAqB,EAAGhM,EAAoBmR,EAAW9Q,WAAW+Q,OACrIzO,EAAWuC,iBAAiBlF,EAAoBmR,EAAW9Q,WAAW+Q,MACrE,MACF,KAAA,IACC,GAAIU,GAA0B,WAAXL,EAClBphB,EAAU2P,EAAoBmR,EAAW9Q,WAAW+Q,MACpDnhB,KAAKia,SAAS7Z,GAASuZ,YAAY,GAAG1L,SAAWkD,EAAM,EAAGtgB,EAAOmH,UAAU9G,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,YACvH,GAAIa,GAAwB,WAAXR,EACvB,IAAKphB,EAAU,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IACnD,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAK2d,sBAAuB1sB,IAAK,CAC5D,MAAMiyB,EAAwBnT,EAAoBmR,EAAW9Q,WAAW+Q,MACxE,IAAIlT,EAAmBkD,EAAM,EAAGtgB,EAAOmH,UAAU9G,OAAQgyB,GACpC,GAAjBA,IAEHjV,EAAW,EACXjO,KAAKia,SAAS7Z,GAASuZ,YAAY1oB,GAAG4c,MAAQ,GAE/C7N,KAAKia,SAAS7Z,GAASuZ,YAAY1oB,GAAGgd,SAAWA,OAG7C,GAAIgU,GAA0B,WAAXT,EAAsB,CAC/C,MAAM0B,EAAwBnT,EAAoBmR,EAAW9Q,WAAW+Q,MACxE,IAAIlT,EAAmBkD,EAAM,EAAGtgB,EAAOmH,UAAU9G,OAAQgyB,GACpC,GAAjBA,IAEHjV,EAAW,EACXjO,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBxU,MAAQ,GAEvF7N,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBpU,SAAWA,OAEzFjO,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBpU,SAAWkD,EAAM,EAAGtgB,EAAOmH,UAAU9G,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAErK,MACF,KAAA,GACCnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBxU,MAAQsD,EAAM,EAAGtgB,EAAOgI,OAAO3H,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAC9J,MACF,KAAA,IACCnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBzU,QAAUuD,EAAM,EAAGtgB,EAAOuH,aAAalH,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OACtK,MACF,KAAA,IACC,GAAIU,GAA0B,WAAXL,EAAsB,CACxCphB,EAAU2P,EAAoBmR,EAAW9Q,WAAW+Q,MACrBnhB,KAAKia,SAAS7Z,GAASuZ,YAAY,GACvDljB,OAAS/E,KAAKgZ,MAAMyG,GAAOtgB,EAAOwH,YAAa,EAA8D,GAA1D0X,EAAoBmR,EAAW9Q,WAAW+Q,aAClG,GAAIa,GAAwB,WAAXR,EACvB,IAAKphB,EAAU,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IACnD,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAK2d,sBAAuB1sB,IAAK,CAC7B+O,KAAKia,SAAS7Z,GAASuZ,YAAY1oB,GACvDwF,OAAS/E,KAAKgZ,MAAMyG,GAAOtgB,EAAOwH,YAAa,EAA8D,GAA1D0X,EAAoBmR,EAAW9Q,WAAW+Q,aAGpG,GAAIc,GAA0B,WAAXT,EAAsB,CAChBxhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GACzE5rB,OAAS/E,KAAKgZ,MAAMyG,GAAOtgB,EAAOwH,YAAa,EAA8D,GAA1D0X,EAAoBmR,EAAW9Q,WAAW+Q,aAClG,GAAe,WAAXK,EAAsB,CACDxhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAEzE5rB,OAAS/E,KAAKgZ,MAAMyG,GAAOtgB,EAAOwH,YAAc,EAAG,EAA8D,IAA1D0X,EAAoBmR,EAAW9Q,WAAW+Q,MAAuB,QAE/H,CAC2BnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAEzE5rB,OAAS/E,KAAKgZ,MAAMyG,GAAOtgB,EAAOwH,YAAc,EAAGxH,EAAOwH,YAAc,EAAI,GAAK0X,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,EAAMpR,EAAoBmR,EAAW9Q,WAAW+Q,OAAkBtwB,EAAOwH,YAAc,IAE9O,MACF,KAAA,GAA0B,CACzB,MAAMqa,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAInF3P,EAAWoC,IAAM3D,EAAM,EAAGtgB,EAAO2H,OAAS,EAF5B,WAAXgpB,EAE0C9vB,KAAKgZ,MAAMqF,EAAoBmR,EAAW9Q,WAAW+Q,OAAkBtwB,EAAa,OAAI,KAGvFkf,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,GAAKpR,EAAoBmR,EAAW9Q,WAAW+Q,OAI1I,WAAXK,GAAyBK,IAC5BnP,EAAWqC,SAAWhF,EAAoBmR,EAAW9Q,WAAW+Q,OAChE,MACF,KAAA,GACgCnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAEzEjN,OAASjE,EAAMtgB,EAAO4H,UAAW5H,EAAO6H,UAAY,GAAKqX,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,GAAKpR,EAAoBmR,EAAW9Q,WAAW+Q,MAAiBtwB,EAAO4H,WACrM,MACF,KAAA,GAAiC,CAChC,IAAIia,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAElF,IAAK,IAAIjV,EAAY,EAAGA,EAAI,GAAIA,IAC/BsF,EAAW/D,eAAevB,GACvB+D,GAAO,GAAI,GAAIpB,EAAoBmR,EAAW9Q,WAAW+Q,MAAgB,IAG7E,IAAInwB,EAAc,EAClB,IAAK,IAAIC,EAAY,EAAGA,EAAIyhB,EAAW/D,eAAezd,OAAQD,IAC7DD,GAAO0hB,EAAW/D,eAAe1d,GAElC,MAAME,EAAkBH,EAAM0hB,EAAW/D,eAAezd,OAGxD,IAAIE,EAAqB,EACrBC,EAAmB,EACvB,IAAK,IAAIJ,EAAY,EAAGA,EAAIyhB,EAAW/D,eAAezd,OAAQD,IAC7DG,GAAcC,EACdA,EAAWqhB,EAAW/D,eAAe1d,GAAKE,EAC1CuhB,EAAW8C,uBAAuBvkB,GAAKG,EAIxCshB,EAAW8C,uBAAuB,IAAM,EAEvC,MACF,KAAA,GAAkC,CACjC,IAAI2N,EAAoBpT,EAAoBmR,EAAW9Q,WAAW+Q,MAGjD,IAAbgC,GAEHnjB,KAAKsa,iBAAmB,EACxBta,KAAKua,WAAa,EAClBva,KAAKma,UAAY,IACjBna,KAAKka,WAAa,EAClBla,KAAKqa,eAAiB,EACtBra,KAAKoa,qBAAuB,EAC5Bpa,KAAKwa,WAAa,IAIlBxa,KAAKsa,iBAAoB6I,EAAY,GAAKA,EAAY,GAAM,GAAKA,EAAY,IAAM,GACnFA,EAAYpT,EAAoBmR,EAAW9Q,WAAW+Q,MACtDnhB,KAAKua,WAAc4I,EAAY,GAAKA,EAAY,GAAMA,EAAY,EAClEnjB,KAAKka,WAAanK,EAAoBmR,EAAW9Q,WAAW+Q,MAC5DnhB,KAAKma,UAAuE,IAA1DpK,EAAoBmR,EAAW9Q,WAAW+Q,MAAyB,IACrFnhB,KAAKoa,qBAAuBrK,EAAoBmR,EAAW9Q,WAAW+Q,MAAgB,GACtFnhB,KAAKqa,eAAiBtK,EAAoBmR,EAAW9Q,WAAW+Q,MAAgB,GAChFnhB,KAAKwa,aAAezK,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,GAAKpR,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,IAE/I,MACF,KAAA,GACC,IAAK,IAAI/gB,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAAW,CAE1E,IAAIgjB,EAEHA,EADGtB,EACiB/R,EAAoBmR,EAAW9Q,WAAW+Q,OAExCpR,EAAoBmR,EAAW9Q,WAAW+Q,OAAiB,GAAKpR,EAAoBmR,EAAW9Q,WAAW+Q,MACjInhB,KAAKia,SAAS7Z,GAAS3L,KAAOguB,mBAAmBvB,EAAWK,UAAUJ,EAAWA,EAAYiC,IAE7FjC,GAAaiC,EAEb,MACF,KAAA,GACCpjB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBjU,UAAY+C,EAAM,EAAGtgB,EAAOwI,WAAWnI,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OACtK,MACF,KAAA,GACCnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyBhU,aAAe8C,EAAM,EAAGtgB,EAAOoJ,UAAU/I,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OACxK,MACF,KAAA,GACCnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB/T,kBAAoB6C,EAAM,EAAGtgB,EAAO6I,qBAAuB,EAAGqW,EAAoBmR,EAAW9Q,WAAW+Q,OACrL,MACF,KAAA,GACCnhB,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB9T,iBAAmB4C,EAAM,EAAGtgB,EAAOkJ,UAAU7I,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAC5K,MACF,KAAA,GACC,IAAK,IAAI5C,EAAY,EAAGA,EAAI1tB,EAAOuI,cAAemlB,IACjDve,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB7T,UAAU+P,GAAG9P,UAAY0C,EAAM,EAAGtgB,EAAO8I,oBAAoBzI,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAE7L,MACF,KAAA,GACC,IAAK,IAAI5C,EAAY,EAAGA,EAAI1tB,EAAOuI,cAAemlB,IACjDve,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB7T,UAAU+P,GAAG9qB,UAAY0d,EAAM,EAAGtgB,EAAO6I,qBAAuB,EAAGqW,EAAoBmR,EAAW9Q,WAAW+Q,OAE3L,MACF,KAAA,GACC,IAAK,IAAI5C,EAAY,EAAGA,EAAI1tB,EAAOuI,cAAemlB,IACjDve,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAAyB7T,UAAU+P,GAAG7P,SAAWyC,EAAM,EAAGtgB,EAAOkJ,UAAU7I,OAAQ6e,EAAoBmR,EAAW9Q,WAAW+Q,OAElL,MACF,KAAA,GAA2B,CAC1B,MAAMzO,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GACpF,GAAmB,GAAf3P,EAAWhb,KAAiC,CAC/C,MAAM2rB,EAAoB3xB,KAAKsf,KAAKngB,EAAOuJ,sBAAwBvJ,EAAOyJ,yBAA2B,GAC/F2jB,EAAuB,IAAIjO,EAAekR,EAAYC,EAAWA,EAAYkC,GACnF,IAAK,IAAIpyB,EAAY,EAAGA,EAAIJ,EAAOuJ,sBAAuBnJ,IACzDyhB,EAAW0D,aAAapH,SAAS/d,GAAKgtB,EAAKxN,KAAK5f,EAAOyJ,0BAExDoY,EAAW0D,aAAakN,sBACxBnC,GAAakC,MACP,CAAA,GAAmB,GAAf3Q,EAAWhb,KAWrB,MAAM,IAAIhF,MAAM,yDAXqC,CACrD,MAAM2wB,EAAoB3xB,KAAKsf,KAAKngB,EAAOyK,UAAYzK,EAAOuJ,sBAAwBvJ,EAAOyJ,yBAA2B,GAClH2jB,EAAuB,IAAIjO,EAAekR,EAAYC,EAAWA,EAAYkC,GACnF,IAAK,IAAIjW,EAAY,EAAGA,EAAIvc,EAAOyK,UAAW8R,IAAK,CAClD,IAAK,IAAInc,EAAY,EAAGA,EAAIJ,EAAOuJ,sBAAuBnJ,IACzDyhB,EAAWiD,qBAAqBvI,GAAG4B,SAAS/d,GAAKgtB,EAAKxN,KAAK5f,EAAOyJ,0BAEnEoY,EAAWiD,qBAAqBvI,GAAGkW,sBAEpCnC,GAAakC,IAIb,MACF,KAAA,GAA4B,CAC3B,MAAM3Q,EAAyB1S,KAAKia,SAASmI,GAA2BzI,YAAY0I,GAC9EgB,EAAoB3xB,KAAKsf,KAAKngB,EAAO0J,uBAAyB1J,EAAO4J,0BAA4B,GACjGwjB,EAAuB,IAAIjO,EAAekR,EAAYC,EAAWA,EAAYkC,GACnF,IAAK,IAAIpyB,EAAY,EAAGA,EAAIJ,EAAO0J,uBAAwBtJ,IAC1DyhB,EAAW+C,cAAc7G,UAAU3d,GAAKgtB,EAAKxN,KAAK5f,EAAO4J,2BAE1DiY,EAAW+C,cAAc6N,sBACzBnC,GAAakC,EACZ,MACF,KAAA,GAAuB,CACtB,IAAIE,EACJ,GAAI1B,GAA0B,WAAXL,EAAsB,CACxCphB,EAAU2P,EAAoBmR,EAAW9Q,WAAW+Q,MACpD,MAAM3D,EAAmBzN,EAAoBmR,EAAW9Q,WAAW+Q,MACnEoC,EAAkB7xB,KAAKsf,KAAgB,GAAXwM,GAC5B,MAAMS,EAAuB,IAAIjO,EAAekR,EAAYC,EAAWA,EAAYoC,GACnF,IAAK,IAAItyB,EAAY,EAAGA,EAAIusB,EAAUvsB,IACrC+O,KAAKia,SAAS7Z,GAASyZ,KAAK5oB,GAAKgtB,EAAKxN,KAAK,GAAK,OAE3C,GAAIsR,GAAyB,WAAXP,EAAsB,CAC9C,IAAI7C,EAAqB,EACzB,KAAQ,GAAKA,EAAc3e,KAAKyd,oBAAoBkB,IACpD4E,EAAkB7xB,KAAKsf,KAAKhR,KAAK8d,kBAAoB9d,KAAKwd,SAAWmB,EAAa,GAClF,MAAMV,EAAuB,IAAIjO,EAAekR,EAAYC,EAAWA,EAAYoC,GACnF,IAAK,IAAInjB,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAC/D,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAKwd,SAAUvsB,IAC1C+O,KAAKia,SAAS7Z,GAASyZ,KAAK5oB,GAAKgtB,EAAKxN,KAAKkO,GAAc,MAGrD,CACN,IAAIA,EAAqB,EACzB,KAAQ,GAAKA,EAAc3e,KAAKyd,mBAAqB,GAAGkB,IACxD4E,EAAkB7xB,KAAKsf,KAAKhR,KAAK8d,kBAAoB9d,KAAKwd,SAAWmB,EAAa,GAClF,MAAMV,EAAuB,IAAIjO,EAAekR,EAAYC,EAAWA,EAAYoC,GACnF,IAAK,IAAInjB,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAC/D,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAKwd,SAAUvsB,IAC1C+O,KAAKia,SAAS7Z,GAASyZ,KAAK5oB,GAAKgtB,EAAKxN,KAAKkO,GAI9CwC,GAAaoC,EACZ,MACF,KAAA,IAA2B,CAC1B,IACInjB,EADAojB,EAA0B,EAE1BC,IAA2B3B,GAAyB,WAAXN,GAAoC,WAAXA,GAClEkC,EAAgCD,EAAe,EAAI,EACnDE,EAA6BF,EAAe,GAAK,EACrD,GAAI5B,GAA0B,WAAXL,EAClBphB,EAAU2P,EAAoBmR,EAAW9Q,WAAW+Q,MAGpDA,IAEAqC,EAAkBzT,EAAoBmR,EAAW9Q,WAAW+Q,MAC5DqC,IAAqC,EACrCA,GAAmBzT,EAAoBmR,EAAW9Q,WAAW+Q,UACvD,CACN/gB,EAAU,EACV,IAAIwjB,EAAgCtS,EAAc,EAAG,EAAGvB,EAAoBmR,EAAW9Q,WAAW+Q,OAClG,KAAOyC,EAAwB,GAC9BJ,IAAqC,EACrCA,GAAmBzT,EAAoBmR,EAAW9Q,WAAW+Q,MAC7DyC,IAIF,MAAM3F,EAAuB,IAAIjO,EAAekR,EAAYC,EAAWA,EAAYqC,GACnFrC,GAAaqC,EAEb,IAAI3E,EAA+B,EACnC,KAAQ,GAAKA,EAAwB7e,KAAK2d,uBAAuBkB,IACjE,OAAa,CACZ,MAAM7L,EAA0BhT,KAAK8e,kBAAkB1e,GACjDkU,EAAwBtU,KAAK+e,gBAAgB3e,GAGnD,GAAIkU,EACH,IAAK,IAAI0K,EAA0B,EAAGA,EAAkBhf,KAAK2d,sBAAuBqB,IAAmB,CAEtG,IAAItM,EAAyB1S,KAAKia,SAAS7Z,GAASuZ,YAAYqF,GAEhE,IAAK,IAAIjJ,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAChDrD,EAAWkD,YAAYG,GAAOkI,EAAKxN,KAAK,GAGpCiC,EAAWkD,YAAYG,IAAQC,EAAUkJ,YAAcxM,EAAWkD,YAAYG,IAAQC,EAAUmJ,aAG/FzM,EAAWkD,YAAYG,IAAQC,EAAUkJ,WAC5CxM,EAAWpR,YAAYyU,GAAO5E,EAAM,EAAGnR,KAAKkB,kBAAoB,EAAG+c,EAAKxN,KAAK,IAG7EiC,EAAWpR,YAAYyU,GAAO5E,EAAM,EAAGnR,KAAKoB,kBAAoB,EAAG6c,EAAKxN,KAAK,IAG9EiC,EAAWmD,eAAeE,GAAO5E,EAAM,EAAGnR,KAAK2d,sBAAwB,EAAGM,EAAKxN,KAAKoO,KAIjFnM,EAAWkD,YAAYG,IAAQC,EAAUC,SAC5CvD,EAAWoD,YAAYC,GAAOkI,EAAKxN,KAAK,IAM5C,MAAM2O,EAAwBpM,GAAkBsB,EAAgB,EAAItU,KAAKia,SAAS7Z,GAASsZ,OAAS7oB,EAAOwK,iBAC3G,IAAIsX,EAAoB,KACpBN,EAAsB,KACtBgN,GAAsBrM,GAAkBsB,EAAgB,EAAIzjB,EAAOwK,kBAAoB+jB,EAC3F,MAAME,EAA0BhL,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAMtB,EAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GACpIuM,EAAsB,GAC5B,IAAK,IAAItuB,EAAY,EAAGA,EAAIquB,EAAcpuB,OAAQD,IACjDquB,EAAcruB,IAAMmuB,EAErB,IAAK,IAAInuB,EAAY,EAAGA,EAAI+O,KAAKyd,mBAAoBxsB,IAAK,CACzD,MAAM4yB,EAAsB7jB,KAAKia,SAAS7Z,GAASwZ,SAAS3oB,GAI5D,GAHA4yB,EAAW/Q,QACX+Q,EAAWnR,WAAauL,EAAKxN,KAAKoO,IAEjB,WAAX2C,IAAwBK,IAAgC,GAAhB5D,EAAKxN,KAAK,GAAS,SAEjE,IAAI+O,EAAkB,EACtB,MAAMsE,EAAmBD,EAAWpR,MAEpC,KAAO+M,EAAUxf,KAAKud,YAAc1sB,EAAOmF,eAAiBse,GAAe,CAE1E,MAAMyP,EAAuC,GAAhB9F,EAAKxN,KAAK,GACvC,IAAI6B,GAAmB,EACnB8N,EAAqB,EAOzB,GANI2D,EACH3D,EAAa9O,EAAc,EAAGiO,EAAaruB,OAAS,EAAG+sB,EAAKzN,aAAa,EAAG,IAE5E8B,EAA0B,GAAhB2L,EAAKxN,KAAK,GAGhBsT,GAAgBzR,EAkBd,CACN,IAAI0R,EACAC,EACAzS,EACJ,GAAIuS,EACHC,EAAQzE,EAAaa,GACrBb,EAAac,OAAOD,EAAY,OAC1B,CAGN,GAFA4D,EAAQ,GAEHP,EASgB,GAAhBxF,EAAKxN,KAAK,GACbuT,EAAMhwB,WAAaiqB,EAAKxN,KAAK,GAAK,EAGlCuT,EAAMhwB,WAAa,OAVpB,IADAgwB,EAAMhwB,WAAa,EACZgwB,EAAMhwB,WAAa,GAAqB,GAAhBiqB,EAAKxN,KAAK,IAASuT,EAAMhwB,aAazDgwB,EAAME,SAAWjG,EAAKkG,eAGrBH,EAAMI,cADQ,WAAX5C,EACkC,EAAfvD,EAAKxN,KAAK,GACrB6D,EAGW2J,EAAKxN,KAAK,GAFVwN,EAAKxN,KAAK,GAKjCuT,EAAMnS,KAAO,GACbmS,EAAM9yB,OAAS,EACf8yB,EAAMK,UAAY,EAClB,IAAK,IAAIjX,EAAY,EAAGA,EAAI4W,EAAME,SAAU9W,IAC3C6W,EAAS,GACTA,EAAOK,UAA4B,GAAhBrG,EAAKxN,KAAK,GACzBwT,EAAOK,WAAWN,EAAMK,YAC5BL,EAAM9yB,QAAW+wB,GAA0B,WAAXT,EAC7BvD,EAAKsG,yBAA2B1zB,EAAOmF,aAAenF,EAAOsF,QAAQ6J,KAAK0d,QAAQtnB,aAClF6nB,EAAKuG,mBACRP,EAAO/S,KAAO8S,EAAM9yB,OAGnB+yB,EAAOxtB,OADO,WAAX+qB,EAC4B,EAAfvD,EAAKxN,KAAK,GACf6D,EAIK2J,EAAKxN,KAAK,GAHVwN,EAAKxN,KAAK,GAK3BuT,EAAMnS,KAAKvgB,KAAK2yB,GAGlB1E,EAAae,QAAQ0D,GACjBzE,EAAaruB,OAAS,IAAIquB,EAAagB,MAE3C5N,EAAO,IAAIpB,EAAK,EAAGiO,EAASA,EAAUwE,EAAM9yB,OAAQ8yB,EAAMI,eAC1DzR,EAAKf,QAAU,GACfe,EAAKd,KAAK3gB,OAAS,EACnB,MAAM4uB,EAAuB,GAC7B,IAAK,IAAI1S,EAAY,EAAGA,EAAI4W,EAAMhwB,WAAagwB,EAAMK,UAAWjX,IAAK,CAEpE,GAD6C,GAAhB6Q,EAAKxN,KAAK,GAehC,CACN,MAAMgQ,EAAqBnP,EAAc,EAAGgO,EAAcpuB,OAAS,EAAG+sB,EAAKxN,KAAKiT,IAChFlS,EAAQ8N,EAAcmB,GACtBnB,EAAce,OAAOI,EAAY,OAjBhB,CACjB,MAAMxS,EAAmBgQ,EAAKwG,oBAC9BjT,EAAQ6N,EACR,IAAIqF,EAAuBzW,EAC3B,KAAOyW,EAAe,GAAG,CAExB,IADAlT,KACwC,GAAjC8N,EAAczI,QAAQrF,IAAcA,IAC3CkT,IAED,KAAOA,EAAe,GAAG,CAExB,IADAlT,KACwC,GAAjC8N,EAAczI,QAAQrF,IAAcA,IAC3CkT,KAQFpF,EAAcgB,QAAQ9O,GAClB8N,EAAcpuB,OAASyyB,GAAmBrE,EAAciB,MAExDnT,EAAI4W,EAAMhwB,WACb2e,EAAKf,QAAQtgB,KAAKkgB,GAElBsO,EAAWxuB,KAAKkgB,GAIhB6N,EADGjS,GAAK4W,EAAMhwB,WAAa,EACf2e,EAAKf,QAAQ,GAEbJ,EAIdsO,EAAWQ,QAAQ3N,EAAKf,QAAQ,IAEhC,IAAK,MAAMqS,KAAUD,EAAMnS,KACtBoS,EAAOK,WAAWxE,EAAW6E,QACjCtS,EAAMpB,EAAY6O,EAAW,GAAKnN,EAAKf,QAAQ,GAAIqS,EAAO/S,KAAM+S,EAAOxtB,QACvEkc,EAAKd,KAAKvgB,KAAK+gB,GAEhBmN,EAAUlO,EAAc,EAAGtR,KAAKud,YAAc1sB,EAAOmF,aAAc2c,EAAKjB,KACxEoS,EAASxyB,KAAKqhB,QAhId,GAAI2B,EAAc,CACjB,MAAMsQ,EAAuC,GAAhB3G,EAAKxN,KAAK,GACjCoU,EAAqB5G,EAAKuG,mBAC5BI,EACHpF,GAAWqF,EAGXrF,GAAWqF,MAEN,CAINrF,GAH4ByC,GAA0B,WAAXT,EACxCvD,EAAKsG,yBAA2B1zB,EAAOmF,aAAenF,EAAOsF,QAAQ6J,KAAK0d,QAAQtnB,aAClF6nB,EAAKuG,qBAyHZ,GAAI3C,GAA0B,WAAXL,EAClB,MAGA,GADAphB,IACIA,GAAWJ,KAAK8d,kBAAmB,OAGxC,MACF,QACC,MAAM,IAAIprB,MAAM,8BAAgCutB,OAAOC,aAAaiC,GAAW,cAAgBhB,EAAY,IAI7G,IAAK,IAAI/gB,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAClC,MAAzBkiB,EAAaliB,KAChBJ,KAAKia,SAAS7Z,GAASsZ,OAAS4I,EAAaliB,IAKzCL,aAAa+kB,GAAuB,EAAMC,EAAoB,EAAGC,GAAuB,GAC9F,MAAMC,EAAyB,GAC/B,IAAK,IAAI7kB,EAAkB,EAAGA,EAAUJ,KAAK8d,kBAAmB1d,IAAW,CAC1E,MAAM8kB,EAA4B,GAC5BlS,EAA0BhT,KAAK8e,kBAAkB1e,GACjDkU,EAAwBtU,KAAK+e,gBAAgB3e,GACnD,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAK2d,sBAAuB1sB,IACvDi0B,EAAgB5zB,KAAK0O,KAAKia,SAAS7Z,GAASuZ,YAAY1oB,GAAGk0B,gBAG5D,MAAMC,EAAyB,GAC/B,IAAK,MAAMrH,KAAW/d,KAAKia,SAAS7Z,GAASwZ,SAAU,CACtD,MAAMyL,EAAsB,GAC5B,IAAK,MAAM1S,KAAQoL,EAAQtL,MAAO,CACjC,IAAI6S,EAAoBtlB,KAAK4c,uBAAuBtI,EAActU,KAAKia,SAAS7Z,GAASuZ,YAAYoE,EAAQrL,YAAYoD,YAAYjlB,EAAO0K,SAAWoX,EAAKf,QAAQ,GAAK,IACzK,MAAM2T,EAAuB,GAC7B,IAAK,MAAMlT,KAAOM,EAAKd,KAAM,CAC5B,IAAI2T,EAAiBlR,EAAe5iB,KAAKgZ,MAAM2H,EAAI5b,QAAU/E,KAAKgZ,MAAmB,IAAb2H,EAAI5b,OAAe6uB,GAC3FC,EAAWj0B,KAAK,CACfm0B,MAASpT,EAAInB,KAAOyB,EAAKlB,OAAS5gB,EAAOsF,QAAQ6J,KAAK0d,QAAQtnB,aAAevF,EAAOmF,aACpFsuB,UAAajS,EAAIpE,SACjBxX,OAAU+uB,EACVE,OAAUpR,IAIZ+Q,EAAU/zB,KAAK,CACdsgB,QAAWe,EAAKf,QAChB+T,OAAUJ,IAIZH,EAAa9zB,KAAK,CACjBohB,WAAcqL,EAAQrL,WAAa,EACnCD,MAAS4S,IAIX,MAAMO,EAA0B,GAChC,GAAId,EAAa,IAAK,IAAI7zB,EAAY,EAAGA,EAAI+O,KAAKod,UAAWnsB,IAC5D20B,EAAct0B,KAAK0O,KAAKia,SAAS7Z,GAASyZ,KAAK5oB,IAEhD,IAAK,IAAI40B,EAAY,EAAGA,EAAId,EAAWc,IAAK,IAAK,IAAI50B,EAAY+O,KAAKod,UAAWnsB,EAAI+O,KAAKod,UAAYpd,KAAKqd,WAAYpsB,IACtH20B,EAAct0B,KAAK0O,KAAKia,SAAS7Z,GAASyZ,KAAK5oB,IAEhD,GAAI+zB,EAAa,IAAK,IAAI/zB,EAAY+O,KAAKod,UAAYpd,KAAKqd,WAAYpsB,EAAI+O,KAAKwd,SAAUvsB,IAC1F20B,EAAct0B,KAAK0O,KAAKia,SAAS7Z,GAASyZ,KAAK5oB,IAGhDg0B,EAAa3zB,KAAK,CACjBoG,KAAQ4c,EAAe,MAAStB,EAAiB,OAAS,QAC1D8S,gBAAmB9lB,KAAKia,SAAS7Z,GAASsZ,OAC1CC,YAAeuL,EACftL,SAAYwL,EACZW,SAAYH,IAId,MAAO,CACNnxB,KAAQuL,KAAK4d,MACboI,OAAUjM,EAAKkM,EACf1Y,QAAWwM,EAAKoE,EAChBhB,MAAStsB,EAAOmE,OAAOgL,KAAKmd,OAAO1oB,KAEnCyxB,UAAalmB,KAAKod,UAClB+I,SAAYnmB,KAAKqd,WACjBE,YAAevd,KAAKud,YACpB6I,aAAgBv1B,EAAOsF,QAAQ6J,KAAK0d,QAAQtnB,aAC5CiwB,eAAkBrmB,KAAK0c,MACvBY,OAAUtd,KAAKsd,OAIfrD,SAAYgL,GAIPllB,eAAeumB,GAErB,GADAtmB,KAAK+c,eAAc,IACduJ,EAAY,OAUjB,GAL0BjX,MAAtBiX,EAAiB,OACpBtmB,KAAK4d,MAAQ0I,EAAiB,MAG/BtmB,KAAKmd,MAAQ,EACc9N,MAAvBiX,EAAkB,MAAgB,CACrC,MAAMC,EAAoC,CACzCC,YAAa,kBACbC,YAAa,kBACbC,OAAU,WAELC,EAA2DtX,MAAtCkX,EAAcD,EAAkB,OAAmBC,EAAcD,EAAkB,OAAKA,EAAkB,MAC/HnJ,EAAgBtsB,EAAOmE,OAAOqiB,WAAU8F,GAASA,EAAM1oB,MAAQkyB,KACvD,GAAVxJ,IAAand,KAAKmd,MAAQA,GAsB/Bnd,KAAKvC,IAAM,EAEyB4R,MAAhCiX,EAA2B,iBAC9BtmB,KAAK0c,MAAQvL,EAAMtgB,EAAO0E,SAAU1E,EAAO2E,SAAW,EAAkC,EAA/B8wB,EAA2B,iBAGzDjX,MAAxBiX,EAAmB,SACtBtmB,KAAKsd,OAASnM,EAAM,EAAGtgB,EAAO4E,YAAoC,EAAvB6wB,EAAmB,SAG9BjX,MAA7BiX,EAAwB,cAC3BtmB,KAAKud,YAAc7rB,KAAK0f,IAAIvgB,EAAO6E,eAAgBhE,KAAKyB,IAAItC,EAAO8E,eAA4C,EAA5B2wB,EAAwB,eAG5G,IAAIM,EAA+B,EACDvX,MAA9BiX,EAAyB,eAC5BM,EAAqD,EAA7BN,EAAyB,cAAU,EAC3DtmB,KAAK0d,OAAS7sB,EAAOsF,QAAQkhB,WAAUqG,GAAUA,EAAOtnB,cAAgBwwB,KACpD,GAAhB5mB,KAAK0d,SACR1d,KAAK0d,OAAS,IAIhB,IAAImJ,EAAyB,EACzBC,EAAsB,EACtBC,EAAkB,EACtB,GAAIT,EAAqB,SACxB,IAAK,MAAMU,KAAiBV,EAAqB,SAC5CU,EAA2B,cAAGH,EAAiBn1B,KAAK0f,IAAIyV,EAAsD,EAAtCG,EAA2B,YAAE91B,SACrG81B,EAAwB,WAAGF,EAAcp1B,KAAK0f,IAAI0V,EAAgD,EAAnCE,EAAwB,SAAE91B,SACzF81B,EAAwB,WAAGD,EAAUr1B,KAAK0f,IAAI2V,EAA4C,EAAnCC,EAAwB,SAAE91B,SAIvF8O,KAAK2d,sBAAwBjsB,KAAKyB,IAAI0zB,EAAgBh2B,EAAOkF,0BAC7DiK,KAAKyd,mBAAqB/rB,KAAKyB,IAAI2zB,EAAaj2B,EAAOgF,aACvDmK,KAAKwd,SAAW9rB,KAAKyB,IAAI4zB,EAASl2B,EAAOgF,aAEVwZ,MAA3BiX,EAAsB,YACzBtmB,KAAKod,UAAYjM,EAAM,EAAGnR,KAAKwd,SAAoC,EAA1B8I,EAAsB,YAElCjX,MAA1BiX,EAAqB,WACxBtmB,KAAKqd,WAAalM,EAAM,EAAGnR,KAAKwd,SAAWxd,KAAKod,UAAY,EAA4B,EAAzBkJ,EAAqB,WAGrF,MAAMW,EAA8B,GAC9BC,EAA8B,GAC9BC,EAA4B,GAClC,GAAIb,EAAqB,SACxB,IAAK,IAAIzI,EAAuB,EAAGA,EAAeyI,EAAqB,SAAEp1B,OAAQ2sB,IAAgB,CAChG,IAAImJ,EAAqBV,EAAqB,SAAEzI,GAEhD,MAAMzd,EAAmB,IAAIqZ,EAE7B,IAAIzG,GAA0B,EAC1BsB,GAAwB,EACCjF,MAAzB2X,EAAoB,MACvBhU,EAA2C,QAAzBgU,EAAoB,KACtC1S,EAAyC,OAAzB0S,EAAoB,MAGpChU,EAAkB6K,GAAgB,EAE/B7K,EACHkU,EAAiB51B,KAAK8O,GACZkU,EACV6S,EAAe71B,KAAK8O,GAGpB6mB,EAAiB31B,KAAK8O,GAGiBiP,MAApC2X,EAA+B,kBAClC5mB,EAAQsZ,OAASvI,EAAM,EAAGtgB,EAAO4K,uBAA0BinB,OAAOC,aAAaC,QAAQ,iBAAmB,KAAQ,EAAsC,EAAnCoE,EAA+B,kBAGrJ,IAAK,IAAI/1B,EAAYmP,EAAQuZ,YAAYzoB,OAAQD,EAAI+O,KAAK2d,sBAAuB1sB,IAChFmP,EAAQuZ,YAAY1oB,GAAK,IAAIojB,EAAWrB,EAAgBsB,GAEzDlU,EAAQuZ,YAAYzoB,OAAS8O,KAAK2d,sBAElC,IAAK,IAAI1sB,EAAYmP,EAAQwZ,SAAS1oB,OAAQD,EAAI+O,KAAKyd,mBAAoBxsB,IAC1EmP,EAAQwZ,SAAS3oB,GAAK,IAAIuhB,EAE3BpS,EAAQwZ,SAAS1oB,OAAS8O,KAAKyd,mBAE/B,IAAK,IAAIxsB,EAAY,EAAGA,EAAI+O,KAAKwd,SAAUvsB,IAC1CmP,EAAQyZ,KAAK5oB,GAAK,EAEnBmP,EAAQyZ,KAAK3oB,OAAS8O,KAAKwd,SAE3B,IAAK,IAAIvsB,EAAY,EAAGA,EAAI+O,KAAK2d,sBAAuB1sB,IAAK,CAC7BmP,EAAQuZ,YAAY1oB,GACxCmwB,eAAe4F,EAA2B,YAAE/1B,GAAI+hB,EAAgBsB,EAA6B,GAAftU,KAAK0d,QAA8B,GAAf1d,KAAK0d,OAAa1d,KAAK0d,QAAU,GAG/I,IAAK,IAAIzsB,EAAY,EAAGA,EAAI+O,KAAKyd,mBAAoBxsB,IAAK,CACzD,MAAM8sB,EAAmB3d,EAAQwZ,SAAS3oB,GAE1C,IAAIm2B,OAAqB/X,EAEzB,GADI2X,EAAwB,WAAGI,EAAgBJ,EAAwB,SAAE/1B,IACpDoe,MAAjB+X,IAEJrJ,EAAQrL,WAAavB,EAAM,EAAGnR,KAAK2d,uBAAsD,EAA9ByJ,EAA0B,YAAS,GAE1FA,EAAqB,OAAKA,EAAqB,MAAEl2B,OAAS,GAAG,CAChE,MAAMm2B,EAAuB31B,KAAKyB,IAAI6M,KAAKud,YAAc1sB,EAAOmF,aAAcoxB,EAAqB,MAAEl2B,SAAW,GAGhH,IAAK,IAAIkc,EAAY,EAAGA,EAAIga,EAAqB,MAAEl2B,UAC9Ckc,GAAKia,GADiDja,IAAK,CAG/D,MAAMka,EAAaF,EAAqB,MAAEha,GAC1C,KAAKka,GAAeA,EAAoB,SAAOA,EAAoB,QAAEp2B,QAAU,GAAOo2B,EAAmB,QAAOA,EAAmB,OAAEp2B,QAAU,GAC9I,SAGD,MAAMyhB,EAAa,IAAIpB,EAAK,EAAG,EAAG,EAAG,GACrCoB,EAAKf,QAAU,GACfe,EAAKd,KAAO,GAEZ,IAAK,IAAI0V,EAAY,EAAGA,EAAID,EAAoB,QAAEp2B,OAAQq2B,IAAK,CAC9D,MAAM/V,EAA2C,EAA3B8V,EAAoB,QAAEC,GAC5C,IAAoC,GAAhC5U,EAAKf,QAAQiF,QAAQrF,KACzBmB,EAAKf,QAAQtgB,KAAKkgB,GACdmB,EAAKf,QAAQ1gB,QAAUL,EAAOsI,cAAc,MAEjD,GAAIwZ,EAAKf,QAAQ1gB,OAAS,EAAG,SAG7B,IAAIs2B,EAAwB,EAC5B,IAAK,IAAID,EAAY,EAAGA,EAAID,EAAmB,OAAEp2B,OAAQq2B,IAAK,CAC7D,MAAME,EAAmBH,EAAmB,OAAEC,GAC9C,GAAmBlY,MAAfoY,GAAmDpY,MAAvBoY,EAAkB,KAAgB,SAClE,MAAMxZ,EAAgDoB,MAA5BoY,EAAuB,UAAkB,EAAgC,EAA3BA,EAAuB,UAEzFvW,EAAexf,KAAKgZ,OAAQ+c,EAAkB,KAAK52B,EAAOmF,aAAe4wB,GAE/E,IAIInwB,EAJA6uB,EAAoBtlB,KAAK4c,uBAAuBtI,EAAclU,EAAQuZ,YAAYoE,EAAQrL,YAAYoD,YAAYjlB,EAAO0K,SAAWoX,EAAKf,QAAQ,GAAK,IAMzJnb,EAD4B4Y,MAAzBoY,EAAoB,OACdnC,EAC0BjW,MAAzBoY,EAAoB,OACrB/1B,KAAK0f,IAAI,EAAG1f,KAAKyB,IAAImyB,EAAW5zB,KAAKgZ,OAA+B,EAAxB+c,EAAoB,QAASnC,EAAY,QAG3D,EAAxBmC,EAAoB,QAAS,EAAK/1B,KAAKgZ,MAA8B,EAAxB+c,EAAoB,QAAS/1B,KAAK0f,IAAI,EAAG1f,KAAKyB,IAAImyB,EAAW5zB,KAAKgZ,OAA+B,EAAxB+c,EAAoB,QAASnC,EAAY,OAGvKpU,EAAOlR,KAAKud,YAAc1sB,EAAOmF,eACb,GAApB2c,EAAKd,KAAK3gB,SAEbyhB,EAAKlB,MAAQP,EACbsW,EAAgBvZ,GAMjB0E,EAAKd,KAAKvgB,KAAK2f,EAAYhD,EAAWuZ,EAAetW,EAAOyB,EAAKlB,MAAOhb,KAEzE,GAAIkc,EAAKd,KAAK3gB,OAAS,EAAG,SAE1ByhB,EAAKjB,IAAMiB,EAAKd,KAAKc,EAAKd,KAAK3gB,OAAS,GAAGggB,KAAOyB,EAAKlB,MAEvD,MAAM/V,EAAmBsX,EAAiBniB,EAAOyK,UAAY,EAAIzK,EAAO6K,SACxE,IAAIgsB,EAAsBhsB,EACtBisB,EAAuB,EAC3B,IAAK,IAAIJ,EAAY,EAAGA,EAAI5U,EAAKf,QAAQ1gB,OAAQq2B,IAChD5U,EAAKf,QAAQ2V,IAAMC,GACf7U,EAAKf,QAAQ2V,GAAK,GAAK5U,EAAKf,QAAQ2V,GAAK7rB,KAC5CiX,EAAKf,QAAQyO,OAAOkH,EAAG,GACvBA,KAEG5U,EAAKf,QAAQ2V,GAAKG,IAAaA,EAAc/U,EAAKf,QAAQ2V,IAC1D5U,EAAKf,QAAQ2V,GAAKI,IAAcA,EAAehV,EAAKf,QAAQ2V,IAEjE,KAAI5U,EAAKf,QAAQ1gB,OAAS,GAA1B,CAEA,IAAK,IAAIq2B,EAAY,EAAGA,EAAI5U,EAAKd,KAAK3gB,OAAQq2B,IAAK,CAClD,MAAMlV,EAAeM,EAAKd,KAAK0V,GAC3BlV,EAAIpE,SAAWyZ,EAAc,IAAGrV,EAAIpE,UAAYyZ,GAChDrV,EAAIpE,SAAW0Z,EAAejsB,IAAU2W,EAAIpE,SAAWvS,EAAWisB,GAClEJ,GAAK,GACJlV,EAAIpE,UAAY0E,EAAKd,KAAK0V,EAAI,GAAGtZ,UACpCoE,EAAIpE,UAAY0E,EAAKd,KAAK0V,EAAI,GAAGtZ,UACjCoE,EAAI5b,QAAUkc,EAAKd,KAAK0V,EAAI,GAAG9wB,QAC/B4b,EAAI5b,QAAUkc,EAAKd,KAAK0V,EAAI,GAAG9wB,SAC/Bkc,EAAKd,KAAKwO,OAAOkH,EAAI,EAAG,GACxBA,KAKHxJ,EAAQtL,MAAMnhB,KAAKqhB,MAMtB,IAAK,IAAI1hB,EAAY,EAAGA,EAAI+O,KAAKwd,SAAUvsB,IAC1CmP,EAAQyZ,KAAK5oB,GAAK+1B,EAAwB,SAAIt1B,KAAKyB,IAAI6M,KAAKyd,mBAAoBuJ,EAAwB,SAAE/1B,KAAO,GAAK,EAKrHg2B,EAAiB/1B,OAASL,EAAOiK,uBAAsBmsB,EAAiB/1B,OAASL,EAAOiK,sBACxFosB,EAAiBh2B,OAASL,EAAOmK,uBAAsBksB,EAAiBh2B,OAASL,EAAOmK,sBACxFmsB,EAAej2B,OAASL,EAAOqK,qBAAoBisB,EAAej2B,OAASL,EAAOqK,oBACtF8E,KAAKkB,kBAAoB+lB,EAAiB/1B,OAC1C8O,KAAKoB,kBAAoB8lB,EAAiBh2B,OAC1C8O,KAAKid,gBAAkBkK,EAAej2B,OACtC8O,KAAKia,SAAS/oB,OAAS,EACvB4L,MAAMikB,UAAUzvB,KAAK6uB,MAAMngB,KAAKia,SAAUgN,GAC1CnqB,MAAMikB,UAAUzvB,KAAK6uB,MAAMngB,KAAKia,SAAUiN,GAC1CpqB,MAAMikB,UAAUzvB,KAAK6uB,MAAMngB,KAAKia,SAAUkN,GAGpCpnB,WAAWK,EAAiB4d,GAClC,GAAIA,EAAM,GAAKA,GAAOhe,KAAKwd,SAAU,OAAO,KAC5C,MAAMoK,EAAuB5nB,KAAKia,SAAS7Z,GAASyZ,KAAKmE,GACzD,OAAoB,GAAhB4J,EAA0B,KACvB5nB,KAAKia,SAAS7Z,GAASwZ,SAASgO,EAAe,GAGhD7nB,qBAAqBK,EAAiB4d,GAC5C,MAAMD,EAA0B/d,KAAK6nB,WAAWznB,EAAS4d,GACzD,OAAkB,MAAXD,EAAkB,EAAIA,EAAQrL,WAG/B3S,oBACN,OAAOC,KAAK0c,OAx9DW3C,EAAAkM,EAAkB,UAClBlM,EAAA2H,EAAgC,EAChC3H,EAAA0H,EAAgC,EAChC1H,EAAA4H,EAAgC,EAChC5H,EAAAoE,EAAgC,EAEhCpE,EAAAmE,EAAW,IAu9DpC,MAAM4J,EAwDL/nB,cAtDgBC,KAAA4R,QAAoB,CAAC,EAAG,EAAG,EAAG,GACvC5R,KAAAhM,WAAqB,EACrBgM,KAAA+nB,UAAoB,EACpB/nB,KAAAgoB,aAAuB,EACvBhoB,KAAA2S,KAAoB,KACpB3S,KAAAioB,SAAwB,KACxBjoB,KAAAkoB,SAAwB,KACxBloB,KAAAmoB,mBAA6B,EAC7BnoB,KAAAooB,mBAA6B,EAC7BpoB,KAAAqoB,QAAkB,EAClBroB,KAAAsoB,UAAoB,EACpBtoB,KAAAuoB,QAAkB,EAClBvoB,KAAAwoB,gBAA0B,EAC1BxoB,KAAAyoB,mBAA6B,EAC7BzoB,KAAA0oB,qBAA+B,EAC/B1oB,KAAA2oB,aAAuB,EACvB3oB,KAAA4oB,WAAqB,EACrB5oB,KAAA6oB,cAAwB,EACxB7oB,KAAA8oB,cAAwB,EACxB9oB,KAAA+oB,aAAuB,EACvB/oB,KAAAgpB,YAAsB,EACtBhpB,KAAAipB,OAAiB,EACRjpB,KAAAkpB,OAAmB,GACnBlpB,KAAAmpB,YAAwB,GACxBnpB,KAAAopB,aAAyB,GACzBppB,KAAAqpB,aAAyB,GAClCrpB,KAAAspB,YAAsB,EACtBtpB,KAAAupB,YAAsB,EACtBvpB,KAAAwpB,gBAA0B,EAC1BxpB,KAAA8O,WAAqB,EACrB9O,KAAAypB,gBAA0B,EAC1BzpB,KAAA0pB,OAAiB,EACjB1pB,KAAA2pB,YAAsB,EACtB3pB,KAAA4pB,cAAwB,EACxB5pB,KAAA6pB,cAAwB,EACxB7pB,KAAA8pB,aAAuB,EACvB9pB,KAAA+pB,aAAuB,EACvB/pB,KAAAgqB,mBAA6B,EAC7BhqB,KAAAiqB,gBAA4B,GAC5BjqB,KAAAkqB,aAAuB,EACvBlqB,KAAAmqB,cAAwB,EACxBnqB,KAAAoqB,mBAA6B,EAC7BpqB,KAAAqqB,mBAA6B,EAC7BrqB,KAAAsqB,mBAA6B,EAC7BtqB,KAAAuqB,mBAA6B,EAC7BvqB,KAAAwqB,iBAA2B,EAC3BxqB,KAAAyqB,eAAyB,EACzBzqB,KAAA0qB,iBAA2B,EAC3B1qB,KAAA2qB,kBAA4B,EAC5B3qB,KAAA4qB,gBAA0B,EAC1B5qB,KAAA6qB,qBAA+B,EAC/B7qB,KAAA8qB,qBAA+B,EAC/B9qB,KAAA+qB,cAAwB,EAG9B/qB,KAAK8S,QAGC/S,QACN,IAAK,IAAI9O,EAAY,EAAGA,EAAIJ,EAAOuI,cAAenI,IACjD+O,KAAKkpB,OAAOj4B,GAAK,EACjB+O,KAAKiqB,gBAAgBh5B,GAAK,EAE3B+O,KAAKipB,OAAS,EACdjpB,KAAK4pB,cAAgB,EACrB5pB,KAAK6pB,cAAgB,EACrB7pB,KAAK0oB,qBAAuB,SAKjBsC,EA+ZZjrB,YAAYI,EAA6B,MAlTlCH,KAAAirB,iBAA2B,MAE3BjrB,KAAAG,KAAoB,KACpBH,KAAAkrB,kBAA4B,EAC5BlrB,KAAAmrB,kBAA4B,EAC5BnrB,KAAAorB,iBAA6B,GAC7BprB,KAAAqrB,iBAA2B,EAC3BrrB,KAAAsrB,iBAA2B,EAC3BtrB,KAAAvJ,OAAiB,EAEhBuJ,KAAAurB,YAAsB,EACtBvrB,KAAAwrB,iBAA2B,EAC3BxrB,KAAAge,IAAc,EACdhe,KAAAyrB,KAAe,EACfzrB,KAAA0rB,KAAe,EACf1rB,KAAAylB,KAAe,EACfzlB,KAAA2rB,oBAA8B,EAK9B3rB,KAAA4rB,eAAyB,EACzB5rB,KAAA6rB,iBAA2B,EAClB7rB,KAAA8rB,SAAwB,IAAI5c,EAC5BlP,KAAA+rB,YAAkC,GAC3C/rB,KAAAgsB,UAAsB,GACbhsB,KAAAisB,eAA4C,GAE5CjsB,KAAAksB,cAAoC,GACpClsB,KAAAmsB,eAA8B,IAAIjd,EAI3ClP,KAAAosB,MAAgB,EAEhBpsB,KAAAqsB,kBAA4B,EAC5BrsB,KAAAssB,eAAsC,KACtCtsB,KAAAusB,iBAAwC,KACxCvsB,KAAAwsB,iBAAwC,KACxCxsB,KAAAysB,uBAA8C,KAE9CzsB,KAAA0sB,gBAAgC,IAAIv6B,aAAa,MACjD6N,KAAA2sB,eAAyB,EACzB3sB,KAAA4sB,YAAsB,EAEtB5sB,KAAA6sB,gBAAgC,IAAI16B,aAAa,OACjD6N,KAAA8sB,eAAyB,EACzB9sB,KAAA+sB,gBAA0B,EAC1B/sB,KAAAgtB,gBAA0B,EAC1BhtB,KAAAitB,gBAA0B,EAC1BjtB,KAAAktB,gBAA0B,EAE1BltB,KAAAmtB,SAAuB,KACvBntB,KAAAotB,WAAyB,KAkiBzBptB,KAAAqtB,qBAAwBC,IAC/B,MAAMC,EAAeD,EAAqBC,aACpCC,EAA4BD,EAAaE,eAAe,GACxDC,EAA4BH,EAAaE,eAAe,GAG9D,GAD2BE,YAAYC,MAAQ5tB,KAAK6rB,kBACxB7rB,KAAK4rB,cAOhC5rB,KAAK6tB,WAAWL,EAAaE,EAAaH,EAAar8B,OAAQ8O,KAAK4rB,mBAPrB,CAC/C,IAAK,IAAI36B,EAAY,EAAGA,EAAIs8B,EAAar8B,OAAQD,IAChDu8B,EAAYv8B,GAAK,EACjBy8B,EAAYz8B,GAAK,EAElB+O,KAAK8tB,oBA/SM,MAAR3tB,GAAcH,KAAK+tB,QAAQ5tB,GA9ZzBJ,kBAAkBI,GAGxB,GAAY,MAARA,EACH,IAAK,IAAIC,EAAkB,EAAGA,EAAUD,EAAK2d,kBAAmB1d,IAC/D,IAAK,IAAIsS,EAAqB,EAAGA,EAAavS,EAAKwd,sBAAuBjL,IACzEsY,EAAMgD,2BAA2B7tB,EAAK8Z,SAAS7Z,GAASuZ,YAAYjH,IACpEvS,EAAK8Z,SAAS7Z,GAASuZ,YAAYjH,GAAYub,SAO5CluB,yBAEN,GAAiB,MAAbC,KAAKG,MAAgBH,KAAKG,KAAK8c,gBAAkB,EAAG,CAGvD,IAAIiR,EAAoC,GACpCC,EAA2C,GAC/CnuB,KAAKouB,UAAY,GACjBpuB,KAAKquB,cAAgB,GACrBruB,KAAKsuB,aAAe,GACpBtuB,KAAKuuB,iBAAmB,GACxB,IAAK,IAAInuB,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,IAAW,CAC7G+tB,EAAkB/tB,GAAW,GAC7BJ,KAAKsuB,aAAaluB,GAAW,GAC7BJ,KAAKuuB,iBAAiBnuB,GAAW,GACjC,IAAK,IAAIsS,EAAqB,EAAGA,EAAa1S,KAAKG,KAAKwd,sBAAuBjL,IAC9E1S,KAAKsuB,aAAaluB,GAASsS,GAAc,GACzC1S,KAAKuuB,iBAAiBnuB,GAASsS,GAAc,GAC7Cyb,EAAkB/tB,GAASsS,GAAc,GAK3C,IAAI8b,EAAsBxuB,KAAKyrB,KAAO56B,EAAOmF,aAAegK,KAAK0rB,KAGjE,IAAK,IAAItrB,EAAkBJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,EAAUJ,KAAKG,KAAK2d,kBAAmB1d,IAC5H,IAAMJ,KAAKG,KAAK8Z,SAAS7Z,GAAc,MAAG,CAEzC,IAAI2d,EAEJ,IAAK,IAAI0Q,EAAqBzuB,KAAKge,IAAKyQ,GAAc,EAAGA,IAGxD,GAFA1Q,EAAU/d,KAAKG,KAAK0nB,WAAWznB,EAASquB,GAEzB,MAAX1Q,EAAiB,CACpB,IAAI2Q,EAAwB1uB,KAAKG,KAAKwuB,qBAAqBvuB,EAASquB,GAChE/b,EAAyB1S,KAAKG,KAAK8Z,SAAS7Z,GAASuZ,YAAY+U,GACjEE,EAA2B,GAC3BC,EAA4B,GAE5BC,EAAsBL,GAAczuB,KAAKge,IAC1CwQ,EACAxuB,KAAK+uB,eAAeN,GAEvB,IAAK,MAAM9b,KAAQoL,EAAQtL,MAC1B,GAAIE,EAAKlB,MAAQqd,IAAwE,MAAzDF,EAAe/9B,EAAO0K,SAAW,EAAIoX,EAAKf,QAAQ,KAAee,EAAKjB,IAAMkd,EAAe/9B,EAAO0K,SAAW,EAAIoX,EAAKf,QAAQ,KAC7J,GAAIe,EAAKjB,KAAOod,EACfF,EAAe/9B,EAAO0K,SAAW,EAAIoX,EAAKf,QAAQ,IAAMe,EAAKjB,IAC7Dmd,EAAgBh+B,EAAO0K,SAAW,EAAIoX,EAAKf,QAAQ,IAAMe,EAAKd,KAAKc,EAAKd,KAAK3gB,OAAS,GAAGuF,WAErF,CACJm4B,EAAe/9B,EAAO0K,SAAW,EAAIoX,EAAKf,QAAQ,IAAMkd,EAExD,IAAK,IAAIE,EAAS,EAAGA,EAASrc,EAAKd,KAAK3gB,OAAQ89B,IAC/C,GAAIrc,EAAKd,KAAKmd,GAAQ9d,KAAOyB,EAAKlB,MAAQqd,EAAY,CACrD,MAAMG,EAA2Btc,EAAKd,KAAKmd,GAAQ9d,KAAOyB,EAAKd,KAAKmd,EAAS,GAAG9d,KAC1Ege,EAA0BJ,EAAanc,EAAKlB,MAAQkB,EAAKd,KAAKmd,EAAS,GAAG9d,KAC1Eie,EAAsBxc,EAAKd,KAAKmd,GAAQv4B,OAASkc,EAAKd,KAAKmd,EAAS,GAAGv4B,OAE7Eo4B,EAAgBh+B,EAAO0K,SAAW,EAAIoX,EAAKf,QAAQ,IAAMlgB,KAAKgZ,MAAMiI,EAAKd,KAAKmd,EAAS,GAAGv4B,OAAS04B,EAAcD,EAAkBD,GACnID,EAASrc,EAAKd,KAAK3gB,QAQxB,IAAK,IAAI6kB,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IACrB,MAAvB6Y,EAAe7Y,KACdrD,EAAWkD,YAAYG,IAAQC,EAAUoZ,WACO,MAA/ClB,EAAexb,EAAWoD,YAAYC,KAAiB0Y,EAAa59B,EAAOmF,aAAegK,KAAKG,KAAKod,YAAcqR,EAAe7Y,GAAQmY,EAAexb,EAAWoD,YAAYC,OAClL/V,KAAKqvB,YAAYR,EAAgB9Y,GAAM8Y,EAAgB9Y,GAAMA,EAAKrD,EAAYA,EAAWoD,YAAYC,IACrGmY,EAAexb,EAAWoD,YAAYC,IAAQ0Y,EAAa59B,EAAOmF,aAAegK,KAAKG,KAAKod,YAAcqR,EAAe7Y,KAGF,MAA/GoY,EAAkBzb,EAAWpR,YAAYyU,IAAMrD,EAAWmD,eAAeE,IAAMrD,EAAWoD,YAAYC,KAAiB0Y,EAAa59B,EAAOmF,aAAegK,KAAKG,KAAKod,YAAcqR,EAAe7Y,GAAQoY,EAAkBzb,EAAWpR,YAAYyU,IAAMrD,EAAWmD,eAAeE,IAAMrD,EAAWoD,YAAYC,OACvT/V,KAAKqvB,YAAYR,EAAgB9Y,GAAM8Y,EAAgB9Y,GAAMA,EAAKrD,EAAYA,EAAWoD,YAAYC,IACrGoY,EAAkBzb,EAAWpR,YAAYyU,IAAMrD,EAAWmD,eAAeE,IAAMrD,EAAWoD,YAAYC,IAAQ0Y,EAAa59B,EAAOmF,aAAegK,KAAKG,KAAKod,YAAcqR,EAAe7Y,QAWzLhW,8BAA8BtM,GACrC,OAAQ/B,KAAKuB,IAAI,GAAMQ,EAAY,IAAQ,GAAO,GA0DnD67B,cACC,OAAOtvB,KAAK4rB,cAGbtkB,eACC,OAAOtH,KAAKwrB,iBAGblkB,aAAoB9S,GACnB,GAAiB,MAAbwL,KAAKG,KAAc,CACtBH,KAAKwrB,iBAAmB95B,KAAK0f,IAAI,EAAG1f,KAAKyB,IAAI6M,KAAKG,KAAKqd,SAAUhpB,IACjE,IAAI+6B,EAAoBvvB,KAAKwrB,iBAC7BxrB,KAAKge,IAAMtsB,KAAKwR,MAAMqsB,GACtBA,EAAYvvB,KAAKG,KAAKod,aAAegS,EAAYvvB,KAAKge,KACtDhe,KAAKyrB,KAAO/5B,KAAKwR,MAAMqsB,GACvBA,EAAY1+B,EAAOmF,cAAgBu5B,EAAYvvB,KAAKyrB,MACpDzrB,KAAK0rB,KAAOh6B,KAAKwR,MAAMqsB,GACvBA,EAAY1+B,EAAOoF,cAAgBs5B,EAAYvvB,KAAK0rB,MACpD1rB,KAAKylB,KAAO/zB,KAAKwR,MAAMqsB,GACvB,MAAMC,EAAyBxvB,KAAKyvB,oBACpCF,EAAYC,GAAkBD,EAAYvvB,KAAKylB,MAC/CzlB,KAAK2rB,oBAAsB6D,EAAiBD,GAIvCxvB,mBACN,GAAiB,MAAbC,KAAKG,KAAc,MAAM,IAAIzN,MACjC,OAAOsN,KAAKyvB,oBAAsB5+B,EAAOoF,aAAepF,EAAOmF,aAAegK,KAAKG,KAAKod,YAIjFxd,eAAeie,GACtB,GAAiB,MAAbhe,KAAKG,KAAc,OAAO,EAC9B,IAAI2uB,EAAqBj+B,EAAOmF,aAAegK,KAAKG,KAAKod,YACzD,IAAK,IAAInd,EAAkBJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,EAAUJ,KAAKG,KAAK2d,kBAAmB1d,IAAW,CACvI,IAAI2d,EAA0B/d,KAAKG,KAAK0nB,WAAWznB,EAAS4d,GAC5D,GAAe,MAAXD,EAAiB,CACpB,IAAIrL,EAAyB1S,KAAKG,KAAK8Z,SAAS7Z,GAASuZ,YAAYoE,EAAQrL,YAC7E,IAAK,IAAIqD,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAChD,GAAIrD,EAAWoD,YAAYC,IAAQG,EAAW6E,YAAcrI,EAAWkD,YAAYG,IAAQC,EAAUoZ,UACpG,IAAK,MAAMzc,KAAQoL,EAAQtL,MACtBE,EAAKf,QAAQ,IAAO/gB,EAAO0K,SAAW,EAAIwa,GAEzC+Y,EAAanc,EAAKlB,QACrBqd,EAAanc,EAAKlB,QAOzB,OAAOqd,EAID/uB,gBAAgB+kB,EAAsBE,EAAsB0K,GAClE,GAAiB,MAAb1vB,KAAKG,KACR,OAAQ,EAGT,IAAIwvB,EAAmB7K,EAAc,EAAI9kB,KAAKG,KAAKid,UAC/CwS,EAAiB5K,EAAchlB,KAAKG,KAAKqd,SAAYxd,KAAKG,KAAKid,UAAYpd,KAAKG,KAAKkd,WACrFwS,GAAwB,EACxBC,GAA0B,EAC1BC,EAAoB/vB,KAAKG,KAAKuc,MAGlC,IAAK,IAAItc,EAAkBJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,EAAUJ,KAAKG,KAAK2d,kBAAmB1d,IAC5H,IAAK,IAAI4d,EAAc2R,EAAU3R,EAAM4R,EAAQ5R,IAAO,CACrD,IAAID,EAA0B/d,KAAKG,KAAK0nB,WAAWznB,EAAS4d,GAC5D,GAAe,MAAXD,EAAiB,CACpB,IAAIrL,EAAyB1S,KAAKG,KAAK8Z,SAAS7Z,GAASuZ,YAAYoE,EAAQrL,YAC7E,IAAK,IAAIqD,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAC5CrD,EAAWoD,YAAYC,IAAQG,EAAW2E,UAAYnI,EAAWkD,YAAYG,IAAQC,EAAUoZ,YAClGS,GAAe,GAEZnd,EAAWoD,YAAYC,IAAQG,EAAW6E,YAAcrI,EAAWkD,YAAYG,IAAQC,EAAUoZ,YACpGU,GAAiB,IAQtB,GAAIH,EAAW,EAAG,CACjB,IAAIK,EAAgC,KAChCC,EAA2B,EAE/B,IAAK,IAAIjS,EAAc2R,EAAW,EAAG3R,GAAO,EAAGA,IAAO,CACrD,IAAK,IAAI5d,EAAkBJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,EAAUJ,KAAKG,KAAK2d,kBAAmB1d,IAAW,CACvI,IAAI2d,EAAU/d,KAAKG,KAAK0nB,WAAWznB,EAAS4d,GAE5C,GAAe,MAAXD,EAAiB,CACpB,IAAI2Q,EAAwB1uB,KAAKG,KAAKwuB,qBAAqBvuB,EAAS4d,GAChEtL,EAAyB1S,KAAKG,KAAK8Z,SAAS7Z,GAASuZ,YAAY+U,GAEjEI,EAAqB9uB,KAAK+uB,eAAe/Q,GAE7C,IAAK,MAAMrL,KAAQoL,EAAQtL,MAC1B,GAAIC,EAAWoD,YAAYjlB,EAAO0K,SAAW,EAAIoX,EAAKf,QAAQ,KAAOsE,EAAW2E,UAAYnI,EAAWkD,YAAY/kB,EAAO0K,SAAW,EAAIoX,EAAKf,QAAQ,KAAOoE,EAAUoZ,WAClKzc,EAAKlB,MAAQqd,IAAiC,MAAlBkB,GAA0Brd,EAAKjB,IAAMse,GACpE,GAAIrd,EAAKjB,KAAOod,EACfkB,EAAiBrd,EAAKjB,IACtBue,EAAmBtd,EAAKd,KAAKc,EAAKd,KAAK3gB,OAAS,GAAGuF,WAE/C,CACJu5B,EAAiBlB,EAEjB,IAAK,IAAIE,EAAS,EAAGA,EAASrc,EAAKd,KAAK3gB,OAAQ89B,IAC/C,GAAIrc,EAAKd,KAAKmd,GAAQ9d,KAAOyB,EAAKlB,MAAQqd,EAAY,CACrD,MAAMG,EAA2Btc,EAAKd,KAAKmd,GAAQ9d,KAAOyB,EAAKd,KAAKmd,EAAS,GAAG9d,KAC1Ege,EAA0BJ,EAAanc,EAAKlB,MAAQkB,EAAKd,KAAKmd,EAAS,GAAG9d,KAC1Eie,EAAsBxc,EAAKd,KAAKmd,GAAQv4B,OAASkc,EAAKd,KAAKmd,EAAS,GAAGv4B,OAE7Ew5B,EAAmBv+B,KAAKgZ,MAAMiI,EAAKd,KAAKmd,EAAS,GAAGv4B,OAAS04B,EAAcD,EAAkBD,GAC7FD,EAASrc,EAAKd,KAAK3gB,UAaL,MAAlB8+B,IACHD,EAAY/vB,KAAKG,KAAK+vB,eAAeD,EAAkB/Z,EAAW2E,UAClEmD,GAAO,IAKV,GAAI6R,GAAgBC,EAAgB,CAEnC,IAAI9R,EAAc2R,EACdQ,GAAiB,EACjBC,EAAuB,EAE3B,MAAQD,GAAO,CAEd,IAAIrB,EAAqBj+B,EAAOmF,aAAegK,KAAKG,KAAKod,YACrDiR,EAAsB,EAO1B,GALIsB,IACHhB,EAAa9uB,KAAK+uB,eAAe/Q,IAI9B6R,EAAc,CACjB,IAAIQ,GAAoB,EACxB,IAAK,IAAIjwB,EAAkBJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,EAAUJ,KAAKG,KAAK2d,kBAAmB1d,IAC5H,GAAgB,GAAZiwB,EAAmB,CACtB,IAAItS,EAA0B/d,KAAKG,KAAK0nB,WAAWznB,EAAS4d,GAC5D,GAAe,MAAXD,EAAiB,CACpB,IAAIrL,EAAyB1S,KAAKG,KAAK8Z,SAAS7Z,GAASuZ,YAAYoE,EAAQrL,YAC7E,IAAK,IAAIqD,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAChD,GAAgB,GAAZsa,GAAqB3d,EAAWoD,YAAYC,IAAQG,EAAW2E,UAAYnI,EAAWkD,YAAYG,IAAQC,EAAUoZ,WACpHrR,EAAQtL,MAAM6d,MAAK9lB,GAAKA,EAAEoH,QAAQ,IAAO/gB,EAAO0K,SAAW,EAAIwa,IAAO,CAEzEsa,GAAW,EAEXtS,EAAQtL,MAAM8d,MAAK,SAAUC,EAAGC,GAAK,OAAQD,EAAE/e,OAASgf,EAAEhf,MAAS+e,EAAE5e,QAAQ,GAAK6e,EAAE7e,QAAQ,GAAK4e,EAAE/e,MAAQgf,EAAEhf,SAC7G,IAAK,MAAMkB,KAAQoL,EAAQtL,MAC1B,GAAIE,EAAKf,QAAQ,IAAO/gB,EAAO0K,SAAW,EAAIwa,IAE7Cqa,GAAiB1+B,KAAKyB,IAAI27B,EAAaN,EAAa7b,EAAKlB,MAAQ+c,GAAgB39B,EAAOoF,aAAe+J,KAAK0wB,6BAA6BX,GAErIpd,EAAKlB,MAAQqd,GAChB,IAAK,IAAIE,EAAiB,EAAGA,EAASrc,EAAKd,KAAK3gB,OAAQ89B,IAAU,CAEjE,GAAIrc,EAAKd,KAAKmd,EAAS,GAAG9d,KAAOyB,EAAKlB,OAASqd,EAAY,CAC1D,MAAM6B,EAAqB9/B,EAAOoF,aAAevE,KAAKyB,IAAI27B,GAAcnc,EAAKlB,MAAQkB,EAAKd,KAAKmd,EAAS,GAAG9d,MAAOyB,EAAKd,KAAKmd,GAAQ9d,KAAOyB,EAAKd,KAAKmd,EAAS,GAAG9d,MAC3J0f,EAAuB5wB,KAAKG,KAAK+vB,eAAevd,EAAKd,KAAKmd,EAAS,GAAGv4B,OAAQyf,EAAW2E,UAC/F,IAAIgW,EAAuB7wB,KAAKG,KAAK+vB,eAAevd,EAAKd,KAAKmd,GAAQv4B,OAAQyf,EAAW2E,UACrFlI,EAAKd,KAAKmd,GAAQ9d,KAAOyB,EAAKlB,MAAQqd,IAEzC+B,EAAe7wB,KAAKG,KAAK+vB,eAAevd,EAAKd,KAAKmd,EAAS,GAAGv4B,QAAUkc,EAAKd,KAAKmd,GAAQv4B,OAASkc,EAAKd,KAAKmd,EAAS,GAAGv4B,SAAWq4B,GAAcnc,EAAKlB,MAAQkB,EAAKd,KAAKmd,EAAS,GAAG9d,QAAUyB,EAAKd,KAAKmd,GAAQ9d,KAAOyB,EAAKd,KAAKmd,EAAS,GAAG9d,MAAOgF,EAAW2E,WAEjQ,IAAIiW,EAAoBjgC,EAAOmF,aAAenF,EAAOoF,aAAe,GAiBnEm6B,GAfGS,GAAgBD,GAeD5wB,KAAKirB,iBAAmB0F,GAAcj/B,KAAK6B,IAAIu9B,EAAYD,EAAeF,GAAcj/B,KAAK6B,IAAIu9B,EAAYF,EAAeD,KAAgBG,GAAaF,EAAeC,IAM1KF,EAAa3wB,KAAK0wB,6BAA6BG,GAGhEd,EAAYc,EAEbrC,EAAc98B,KAAKyB,IAAIwf,EAAKlB,MAAQkB,EAAKd,KAAKmd,GAAQ9d,KAAM4d,OAatEsB,IAAiBtB,EAAaN,GAAe39B,EAAOoF,aAAe+J,KAAK0wB,6BAA6BX,GAErG/R,IACY,GAAR0R,GAAa1R,GAAOhe,KAAKG,KAAKid,UAAYpd,KAAKG,KAAKkd,aACvDW,EAAMhe,KAAKG,KAAKid,UACZsS,EAAO,GAAGA,KAEX1R,GAAO4R,IACVO,GAAQ,GAIV,OAAOz+B,KAAKsf,KAAKof,GAIjB,OAAOpwB,KAAK+wB,mBAAqB/wB,KAAKgxB,aAAalM,EAAaE,EAAa0K,GAIxE3vB,aAAa+kB,EAAsBE,EAAsBiM,EAAuBjxB,KAAKsrB,iBAC3F,GAAiB,MAAbtrB,KAAKG,KAAc,MAAM,IAAIzN,MACjC,IAAImnB,EAAe7Z,KAAKG,KAAKkd,YAAc4T,EAAe,GAG1D,OAFInM,IAAajL,GAAQ7Z,KAAKG,KAAKid,WAC/B4H,IAAanL,GAAQ7Z,KAAKG,KAAKqd,UAAYxd,KAAKG,KAAKid,UAAYpd,KAAKG,KAAKkd,aACxExD,EAOD9Z,QAAQI,GACO,iBAAjB,EACHH,KAAKG,KAAO,IAAI4Z,EAAK5Z,GACXA,aAAgB4Z,IAC1B/Z,KAAKG,KAAOA,GAIPJ,YAAYupB,EAAqB4H,EAAmBnb,EAAarD,EAAwBsK,GAC/F,IAAI3L,EACA8f,EACJ,OAAQnU,GACP,KAAK9G,EAAW0E,cAChB,KAAK1E,EAAW4E,UAChB,KAAK5E,EAAW2E,SAChB,KAAK3E,EAAW0F,cACfvK,EAAOrR,KAAKG,KAAc+vB,eAAe5G,EAAatM,GACtDmU,EAAWnxB,KAAKG,KAAc+vB,eAAegB,EAAWlU,GACzB,MAA3Bhd,KAAKouB,UAAUpR,IAAoBhd,KAAKouB,UAAUpR,IAAY3L,GAAOrR,KAAKquB,cAAcrR,IAAYmU,IACvGnxB,KAAKouB,UAAUpR,GAAW3L,EAC1BrR,KAAKquB,cAAcrR,GAAWmU,GAE/B,MACD,KAAKjb,EAAW8E,aAChB,KAAK9E,EAAW+E,OAChB,KAAK/E,EAAWuF,cAChB,KAAKvF,EAAWgF,aAChB,KAAKhF,EAAWiF,cAChB,KAAKjF,EAAWkF,aAChB,KAAKlF,EAAWmF,aAChB,KAAKnF,EAAWoF,aAChB,KAAKpF,EAAWqF,aAChB,KAAKrF,EAAWsF,cAChB,KAAKtF,EAAWyF,gBAChB,KAAKzF,EAAW2F,gBAChB,KAAK3F,EAAW4F,gBAChB,KAAK5F,EAAW6F,iBAChB,KAAK7F,EAAW8F,YAChB,KAAK9F,EAAW+F,iBAChB,KAAK/F,EAAWwF,UACfrK,EAAMrR,KAAKG,KAAM+vB,eAAe5G,EAAatM,GAC7CmU,EAAUnxB,KAAKG,KAAM+vB,eAAegB,EAAWlU,GAC/C,IAAIoU,EAAwB1e,EAAWpR,YAAYyU,IAASrD,EAAWkD,YAAYG,IAAQC,EAAUmJ,WAAcnf,KAAKG,KAAMe,kBAAoB,GAEjE,MAA7ElB,KAAKsuB,aAAa8C,GAAe1e,EAAWmD,eAAeE,IAAMiH,IACjEhd,KAAKsuB,aAAa8C,GAAe1e,EAAWmD,eAAeE,IAAMiH,IAAY3L,GAC7ErR,KAAKuuB,iBAAiB6C,GAAe1e,EAAWmD,eAAeE,IAAMiH,IAAYmU,IACpFnxB,KAAKsuB,aAAa8C,GAAe1e,EAAWmD,eAAeE,IAAMiH,GAAW3L,EAC5ErR,KAAKuuB,iBAAiB6C,GAAe1e,EAAWmD,eAAeE,IAAMiH,GAAWmU,GAEjF,MACD,KAAKjb,EAAW6E,WACf1J,EAAOrR,KAAKG,KAAc+vB,eAAe5G,EAAatM,GACtD,MACD,KAAK9G,EAAWC,QAChB,QACC9E,GAAO,EAIT,OAAOA,EAGDtR,YAAYid,EAAqBqU,EAAkBjxB,EAAyBsS,EAA4Bye,GAC9G,GAAIE,GACH,GAA+B,MAA3BrxB,KAAKouB,UAAUpR,IAAmD,MAA/Bhd,KAAKquB,cAAcrR,GACzD,OAAOmU,EAAUnxB,KAAKquB,cAAcrR,GAAYhd,KAAKouB,UAAUpR,QAE1D,GAAe3N,MAAXjP,GAAsCiP,MAAdqD,GACqB,MAAnD1S,KAAKsuB,aAAaluB,GAASsS,GAAYsK,IAA2E,MAAvDhd,KAAKuuB,iBAAiBnuB,GAASsS,GAAYsK,GACzG,OAAOmU,EAAUnxB,KAAKuuB,iBAAiBnuB,GAASsS,GAAYsK,GAAYhd,KAAKsuB,aAAaluB,GAASsS,GAAYsK,GAGjH,OAAQ,EAIFjd,eAAeK,EAAiBsS,GACtC,IAAK,IAAIsK,EAAkB,EAAGA,EAAU9G,EAAWgG,YAAac,IAC/D,GAAuB3N,MAAlBrP,KAAKouB,WAAqD,MAA3BpuB,KAAKouB,UAAUpR,IACzB3N,MAArBrP,KAAKsuB,cAA2Djf,MAA9BrP,KAAKsuB,aAAaluB,IAAmEiP,MAA1CrP,KAAKsuB,aAAaluB,GAASsS,IAA+E,MAAnD1S,KAAKsuB,aAAaluB,GAASsS,GAAYsK,GAC/K,OAAO,EAGT,OAAO,EAGDjd,SAASid,EAAqB5c,EAAkBsS,IAClD1S,KAAKsxB,YAAYtU,GAAS,IAAqB3N,MAAXjP,GAAsCiP,MAAdqD,GAA2B1S,KAAKsxB,YAAYtU,GAAS,EAAO5c,EAASsS,MACpI1S,KAAKouB,UAAUpR,GAAW,KAC1Bhd,KAAKquB,cAAcrR,GAAW,KACf3N,MAAXjP,GAAsCiP,MAAdqD,IAC3B1S,KAAKsuB,aAAaluB,GAASsS,GAAYsK,GAAW,KAClDhd,KAAKuuB,iBAAiBnuB,GAASsS,GAAYsK,GAAW,OAKlDjd,YAAYid,EAAqBqU,EAAkBjxB,EAAkBsS,GAC3E,OAAI2e,EACuBhiB,MAAlBrP,KAAKouB,WAAqD,MAA3BpuB,KAAKouB,UAAUpR,GACjC3N,MAAXjP,GAAsCiP,MAAdqD,GAAgDrD,MAArBrP,KAAKsuB,cAA2D,MAA9BtuB,KAAKsuB,aAAaluB,IAA8D,MAA1CJ,KAAKsuB,aAAaluB,GAASsS,IAA0E,MAAnD1S,KAAKsuB,aAAaluB,GAASsS,GAAYsK,IACnK,MAAnDhd,KAAKsuB,aAAaluB,GAASsS,GAAYsK,GAKzCjd,gBACc,MAAjBC,KAAKmtB,UAAuC,MAAnBntB,KAAKotB,aACjCptB,KAAKmtB,SAAWntB,KAAKmtB,UAAY,IAAKzK,OAAO6O,cAAgB7O,OAAO8O,oBACpExxB,KAAKirB,iBAAmBjrB,KAAKmtB,SAASsE,WACtCzxB,KAAKotB,WAAaptB,KAAKmtB,SAASuE,sBAAwB1xB,KAAKmtB,SAASuE,sBAAsB,KAAM,EAAG,GAAK1xB,KAAKmtB,SAASwE,qBAAqB,KAAM,EAAG,GACtJ3xB,KAAKotB,WAAWwE,eAAiB5xB,KAAKqtB,qBACtCrtB,KAAKotB,WAAWyE,iBAAmB,WACnC7xB,KAAKotB,WAAW0E,sBAAwB,WACxC9xB,KAAKotB,WAAW2E,QAAQ/xB,KAAKmtB,SAAS6E,cAEvChyB,KAAKmtB,SAAS8E,SAGPlyB,kBACc,MAAjBC,KAAKmtB,UAAuC,MAAnBntB,KAAKotB,aACjCptB,KAAKotB,WAAW8E,WAAWlyB,KAAKmtB,SAAS6E,aACzChyB,KAAKotB,WAAa,KACdptB,KAAKmtB,SAASgF,OAAOnyB,KAAKmtB,SAASgF,QACvCnyB,KAAKmtB,SAAW,MAIXptB,oBACNC,KAAKoyB,gBACLpyB,KAAK6rB,iBAAmB8B,YAAYC,MAAQ,IAGtC7tB,OACFC,KAAK4rB,gBACT5rB,KAAK4rB,eAAgB,EACrB5rB,KAAKqyB,kBAAkBryB,KAAKG,MAC5BH,KAAKsyB,yBACLtyB,KAAKoyB,iBAGCryB,QACDC,KAAK4rB,gBACV5rB,KAAK4rB,eAAgB,EACJ,MAAb5rB,KAAKG,OACRH,KAAKG,KAAKsa,YAAc,EACxBza,KAAKG,KAAKua,aAAe,GAE1B1a,KAAKouB,UAAY,GACjBpuB,KAAKsuB,aAAe,GACpBtuB,KAAKquB,cAAgB,GACrBruB,KAAKuuB,iBAAmB,GACxBvuB,KAAKgsB,UAAY,IAGXjsB,cACNC,KAAKge,IAAM,EACXhe,KAAKuyB,YAGCxyB,QAAQie,GACdhe,KAAKge,IAAMA,EACXhe,KAAKwrB,iBAAmBxrB,KAAKge,IAGvBje,YACNC,KAAKwrB,iBAAmBxrB,KAAKge,IAC7Bhe,KAAKyrB,KAAO,EACZzrB,KAAK0rB,KAAO,EACZ1rB,KAAKylB,KAAO,EACZzlB,KAAK2rB,oBAAsB,EAGrB5rB,eACNC,KAAK8sB,eAAiB,EACtB9sB,KAAK+sB,gBAAkB,EACvB/sB,KAAKgtB,gBAAkB,EACvBhtB,KAAKitB,gBAAkB,EACvBjtB,KAAKktB,gBAAkB,EAGvBltB,KAAKwyB,eACL,IAAK,IAAIvhC,EAAY,EAAGA,EAAI+O,KAAK6sB,gBAAgB37B,OAAQD,IAAK+O,KAAK6sB,gBAAgB57B,GAAK,EACxF,IAAK,IAAIA,EAAY,EAAGA,EAAI+O,KAAK0sB,gBAAgBx7B,OAAQD,IAAK+O,KAAK0sB,gBAAgBz7B,GAAK,EACxF,GAA2B,MAAvB+O,KAAKssB,eAAwB,IAAK,IAAIr7B,EAAY,EAAGA,EAAI+O,KAAKssB,eAAep7B,OAAQD,IAAK+O,KAAKssB,eAAer7B,GAAK,EACvH,GAA6B,MAAzB+O,KAAKusB,iBAA0B,IAAK,IAAIt7B,EAAY,EAAGA,EAAI+O,KAAKusB,iBAAiBr7B,OAAQD,IAAK+O,KAAKusB,iBAAiBt7B,GAAK,EAC7H,GAA6B,MAAzB+O,KAAKwsB,iBAA0B,IAAK,IAAIv7B,EAAY,EAAGA,EAAI+O,KAAKwsB,iBAAiBt7B,OAAQD,IAAK+O,KAAKwsB,iBAAiBv7B,GAAK,EAC7H,GAAmC,MAA/B+O,KAAKysB,uBAAgC,IAAK,IAAIx7B,EAAY,EAAGA,EAAI+O,KAAKysB,uBAAuBv7B,OAAQD,IAAK+O,KAAKysB,uBAAuBx7B,GAAK,EAGzI8O,eACN,GAAKC,KAAKG,OACNH,KAAKge,IAAMhe,KAAKG,KAAKid,WAAapd,KAAKge,KAAOhe,KAAKG,KAAKid,UAAYpd,KAAKG,KAAKkd,YAAY,CAC7F,MAAMoV,EAAiBzyB,KAAKge,IAC5Bhe,KAAKge,IAAMhe,KAAKG,KAAKid,UACrBpd,KAAKwrB,kBAAoBxrB,KAAKge,IAAMyU,EAEhCzyB,KAAKsvB,SACRtvB,KAAKsyB,0BAIDvyB,UACN,IAAKC,KAAKG,KAAM,OAChB,MAAMsyB,EAAiBzyB,KAAKge,IAC5Bhe,KAAKge,MACDhe,KAAKge,KAAOhe,KAAKG,KAAKqd,WACzBxd,KAAKge,IAAM,GAEZhe,KAAKwrB,kBAAoBxrB,KAAKge,IAAMyU,EAGpC,IAAK,IAAIryB,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,IAClGJ,KAAKgsB,UAAU5rB,IAAY,EAGxBJ,KAAKsvB,SACRtvB,KAAKsyB,yBAGAvyB,UACN,IAAKC,KAAKG,KAAM,OAChB,MAAMqvB,EAAyBxvB,KAAKyvB,oBACpCzvB,KAAKge,MACLhe,KAAKyrB,KAAO,EACZzrB,KAAK0rB,KAAO,EACZ1rB,KAAKylB,KAAO,EACZzlB,KAAK2rB,oBAAsB6D,EAEC,GAAxBxvB,KAAKsrB,iBAAwBtrB,KAAKge,KAAOhe,KAAKG,KAAKid,UAAYpd,KAAKG,KAAKkd,aAC5Erd,KAAKge,IAAMhe,KAAKG,KAAKid,UACjBpd,KAAKsrB,gBAAkB,GAAGtrB,KAAKsrB,mBAK9BvrB,WACN,GAAKC,KAAKG,KAAV,CACAH,KAAKge,IAAM,EACXhe,KAAKwrB,iBAAmB,EACxBxrB,KAAKyrB,KAAO,EACZzrB,KAAK0rB,KAAO,EAGZ,IAAK,IAAItrB,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,IAClGJ,KAAKgsB,UAAU5rB,IAAY,EAGxBJ,KAAKsvB,SACRtvB,KAAKsyB,0BAGAvyB,iBAAiBie,GACvB,GAAKhe,KAAKG,KAAV,CAEAH,KAAKge,IAAMA,EAEXhe,KAAKwrB,iBAAmBxN,EACxBhe,KAAKyrB,KAAO,EACZzrB,KAAK0rB,KAAO,EAGZ,IAAK,IAAItrB,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,IAClGJ,KAAKgsB,UAAU5rB,IAAY,EAGxBJ,KAAKsvB,SACRtvB,KAAKsyB,0BAGAvyB,UACN,IAAKC,KAAKG,KAAM,OAChB,MAAMsyB,EAAiBzyB,KAAKge,IAC5Bhe,KAAKge,OACDhe,KAAKge,IAAM,GAAKhe,KAAKge,KAAOhe,KAAKG,KAAKqd,YACzCxd,KAAKge,IAAMhe,KAAKG,KAAKqd,SAAW,GAEjCxd,KAAKwrB,kBAAoBxrB,KAAKge,IAAMyU,EAGpC,IAAK,IAAIryB,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,IAClGJ,KAAKgsB,UAAU5rB,IAAY,EAGxBJ,KAAKsvB,SACRtvB,KAAKsyB,yBAoBAvyB,WAAWytB,EAA2BE,EAA2BgF,EAA4BC,GAAoB,GACvH,GAAiB,MAAb3yB,KAAKG,KAAc,CACtB,IAAK,IAAIlP,EAAY,EAAGA,EAAIyhC,EAAoBzhC,IAC/Cu8B,EAAYv8B,GAAK,EACjBy8B,EAAYz8B,GAAK,EAGlB,YADA+O,KAAK8tB,kBAIN9tB,KAAKG,KAAKsa,YAAc,EACxBza,KAAKG,KAAKua,aAAe,EAEzB,MAAMkY,EAAuB5yB,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAErE,IAAK,IAAInQ,EAAY+O,KAAK+rB,YAAY76B,OAAQD,EAAI2hC,EAAc3hC,IAC/D+O,KAAK+rB,YAAY96B,GAAK,IAAIie,EAC1BlP,KAAKksB,cAAcj7B,GAAK,IAAIie,EAI7B,GAFAlP,KAAK+rB,YAAY76B,OAAS0hC,EAC1B5yB,KAAKksB,cAAch7B,OAAS0hC,EACxBA,GAAgB5yB,KAAKgsB,UAAU96B,OAAQ,CAC1C,IAAI2hC,EAAc7yB,KAAKgsB,UAAU96B,OAEjC,IADA8O,KAAKgsB,UAAU96B,OAAS0hC,EACjBC,EAAM7yB,KAAKgsB,UAAU96B,QAC3B8O,KAAKgsB,UAAU6G,MAAU,EAI3B,IAAK,IAAI5hC,EAAY+O,KAAKisB,eAAe/6B,OAAQD,EAAI+O,KAAKG,KAAK8c,gBAAiBhsB,IAAK,CACpF+O,KAAKisB,eAAeh7B,GAAK,GACzB,IAAK,IAAI8kB,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAChD/V,KAAKisB,eAAeh7B,GAAG8kB,GAAO,IAAI7G,EAEnClP,KAAKisB,eAAeh7B,GAAGC,OAASL,EAAO0K,SAExCyE,KAAKisB,eAAe/6B,OAAS8O,KAAKG,KAAK8c,gBAEvC,IAAIuS,EAAyBxvB,KAAKyvB,oBAC9BqD,EAAsB,EACtB3C,GAAiB,EAGrB,KAAOnwB,KAAK2rB,qBAAuB,GAAG3rB,KAAK2rB,qBAAuB6D,EAC9DxvB,KAAK2rB,oBAAsB6D,IAAgBxvB,KAAK2rB,oBAAsB6D,GACtEmD,IACC3yB,KAAKyrB,MAAQzrB,KAAKG,KAAKod,cAC1Bvd,KAAKge,MACLhe,KAAKyrB,KAAO,EACZzrB,KAAK0rB,KAAO,EACZ1rB,KAAKylB,KAAO,EACZzlB,KAAK2rB,oBAAsB6D,EAEC,GAAxBxvB,KAAKsrB,iBAAwBtrB,KAAKge,KAAOhe,KAAKG,KAAKid,UAAYpd,KAAKG,KAAKkd,aAC5Erd,KAAKge,IAAMhe,KAAKG,KAAKid,UACjBpd,KAAKsrB,gBAAkB,GAAGtrB,KAAKsrB,oBAGjCtrB,KAAKge,KAAOhe,KAAKG,KAAKqd,WACzBxd,KAAKge,IAAM,GACkB,GAAzBhe,KAAKsrB,kBACR6E,GAAQ,EACRnwB,KAAK+yB,WAOR,MAAMC,EAAkD,EAArBN,EACR,MAAvB1yB,KAAKssB,gBAA0BtsB,KAAKssB,eAAep7B,QAAU8hC,GACvC,MAAzBhzB,KAAKusB,kBAA4BvsB,KAAKusB,iBAAiBr7B,QAAU8hC,GACxC,MAAzBhzB,KAAKwsB,kBAA4BxsB,KAAKwsB,iBAAiBt7B,QAAU8hC,GAClC,MAA/BhzB,KAAKysB,wBAAkCzsB,KAAKysB,uBAAuBv7B,QAAU8hC,IAC7EhzB,KAAKssB,eAAiB,IAAIn6B,aAAa6gC,GACvChzB,KAAKusB,iBAAmB,IAAIp6B,aAAa6gC,GACzChzB,KAAKwsB,iBAAmB,IAAIr6B,aAAa6gC,GACzChzB,KAAKysB,uBAAyB,IAAIt6B,aAAa6gC,GAC/ChzB,KAAKqsB,kBAAoB,GAE1B,IAAIA,EAA4BrsB,KAAKqsB,kBACrC,MAAMC,EAA+BtsB,KAAKssB,eACpCC,EAAiCvsB,KAAKusB,iBACtCC,EAAiCxsB,KAAKwsB,iBACtCC,EAAuCzsB,KAAKysB,uBAG5Ch2B,GAAkBuJ,KAAKvJ,OACvBi2B,EAAgC1sB,KAAK0sB,gBACrCG,EAAgC7sB,KAAK6sB,gBAErCoG,EAAgC,EAAVvhC,KAAKkC,IADF,EAC+BoM,KAAKirB,kBAC7DiI,EAAsB,IAAMlzB,KAAKirB,iBAAmB,MACpDkI,EAAwB,KAAQ,KAAOD,EACvCE,EAAwB,KAAQ,IAAOF,EACvCG,EAAwB,KAAQ,KAAOH,EACvCI,EAAwB,KAAQ,KAAOJ,EACvCK,EAAwB,KAAQ,KAAOL,EACvCM,EAAwB,KAAQ,KAAON,EAC7C,IAAItG,EAAsB5sB,KAAK4sB,aAAyB,EAAVl7B,KAAKkC,IAC/C+4B,EAA+C,KAAtB3sB,KAAK2sB,eAC9BG,EAA+C,MAAtB9sB,KAAK8sB,eAC9BC,GAA2B/sB,KAAK+sB,gBAChCC,GAA2BhtB,KAAKgtB,gBAChCC,GAA2BjtB,KAAKitB,gBAChCC,GAA2BltB,KAAKktB,gBAChCuG,EAAoBzzB,KAAKG,KAAKmd,OAC9Btd,KAAKsxB,YAAYpb,EAAW4E,WAAW,KAC1C2Y,EAAYzzB,KAAK0zB,YAAYxd,EAAW4E,WAAW,IAEpD,IAAIwC,EAAmE,KAAlD5rB,KAAKuB,IAAIwgC,EAAY5iC,EAAO4E,YAAa,MAE9D,MAAMykB,EAAqB,EAAMxoB,KAAKuB,IAAI,GAAK+M,KAAKG,KAAK+Z,WAAala,KAAKirB,kBACrE9Q,EAAoB,EAAMzoB,KAAKuB,IAAI,GAAK+M,KAAKG,KAAKga,UAAYna,KAAKirB,kBACnE7Q,EAA+Bpa,KAAKG,KAAKia,qBACzCC,EAAyBra,KAAKG,KAAKka,eACnCC,EAA2Bta,KAAKG,KAAKma,iBACrCC,EAAqBva,KAAKG,KAAKoa,WAC/BC,EAAqBxa,KAAKG,KAAKqa,WAGrC,IAAI4R,GAAiBpsB,KAAKosB,MAE1B,KAAO0G,EAAcJ,IAAuBvC,GAAO,CAElD,MAAMwD,EAA8BjB,EAAqBI,EACnDc,EAAoBliC,KAAKyB,IAAIzB,KAAKsf,KAAKhR,KAAK2rB,qBAAsBgI,GAExE,IAAK,IAAIrX,EAAqB,EAAGlc,EAAkBJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBkb,EAAatc,KAAKG,KAAK8c,gBAAiBX,IAAclc,IAAW,CAE9KJ,KAAK6zB,4BAA4B7zB,KAAKG,KAAMC,EAASuyB,GAErD,IAAK,IAAI5c,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAChD,IAAK,IAAI9kB,EAAY,EAAGA,EAAI+O,KAAKisB,eAAe3P,GAAYvG,GAAK+d,QAAS7iC,IAAK,CAC9E,MAAM8iC,EAAa/zB,KAAKisB,eAAe3P,GAAYvG,GAAKvU,IAAIvQ,GAEnB,GAArC+O,KAAKG,KAAK8Z,SAAS7Z,GAAS0Z,OAC/B9Z,KAAKg0B,SAASh0B,KAAKG,KAAMksB,EAAmB2G,EAAoB5yB,EAASovB,EAAgBoE,EAAWG,GAAM,GAAO,IAMjH/zB,KAAKurB,aACRvrB,KAAKurB,YAAa,EAClBvrB,KAAKi0B,WAGFj0B,KAAKsxB,YAAYpb,EAAW4E,WAAW,KAC1CwC,EAA8F,KAArF5rB,KAAKuB,IAAI+M,KAAK0zB,YAAYxd,EAAW4E,WAAW,GAAQjqB,EAAO4E,YAAa,OAKtF,MAAMk2B,GAA8B3rB,KAAK2rB,oBACnCuI,GAAqB,EAAM,GAAwB1E,EACnD2E,GAAmB,GAAOxI,GAAsBiI,GAAapE,EAC7D4E,IAAwBp0B,KAAKyrB,KAAO56B,EAAOmF,aAAegK,KAAK0rB,MAAQ76B,EAAOoF,aAAe+J,KAAKylB,KAClG4O,GAA4B,GAAiBxjC,EAAOoF,aACpDq+B,IAA2BF,GAAe,GAAKvjC,EAAOoF,aACtDs+B,GAAwBF,IAAqBC,GAAkBD,IAAqBH,GACpFM,GAAsBH,IAAqBC,GAAkBD,IAAqBF,GAExF,IAAK,IAAI/zB,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,IAClG,IAAK,IAAIsuB,EAAwB,EAAGA,EAAgB1uB,KAAKG,KAAKwd,sBAAuB+Q,IAAiB,CACrG,IAAIhc,EAAyB1S,KAAKG,KAAK8Z,SAAS7Z,GAASuZ,YAAY+U,GACjE+F,EAA0B/hB,EAAWiC,aAEzCjC,EAAW2C,QAAU3C,EAAW4C,YAE5BtV,KAAKsxB,YAAYpb,EAAW2F,iBAAiB,EAAOzb,EAASsuB,KAChE+F,EAAkBz0B,KAAK0zB,YAAYxd,EAAW2F,iBAAiB,EAAOzb,EAASsuB,GAAe,IAGxE,GAAnB+F,GACH/hB,EAAW2C,QAAU,EACrB3C,EAAW4C,YAAc,GAGzB5C,EAAW4C,aAAiC,GAAlBmf,GAAyBD,GAAcD,IAKpE,IAAK,IAAIn0B,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,IAAW,CAE7G,GAAIA,GAAWJ,KAAKqrB,iBAAkB,CACrCrrB,KAAK00B,wBAAwB10B,KAAKG,MAElC,IAAK,IAAIlP,EAAY,EAAGA,EAAI+O,KAAKmsB,eAAe2H,QAAS7iC,IAAK,CAC7D,MAAM8iC,EAAa/zB,KAAKmsB,eAAe3qB,IAAIvQ,GAG3C+O,KAAKg0B,SAASh0B,KAAKG,KAAMksB,EAAmB2G,EAAoB5yB,EAASovB,EAAgBoE,EAAWG,GAAM,GAAO,IAInH/zB,KAAK6zB,4BAA4B7zB,KAAKG,KAAMC,EAASuyB,GACrD,IAAK,IAAI1hC,EAAY,EAAGA,EAAI+O,KAAK+rB,YAAY3rB,GAAS0zB,QAAS7iC,IAAK,CACnE,MAAM8iC,EAAa/zB,KAAK+rB,YAAY3rB,GAASoB,IAAIvQ,GACjD+O,KAAKg0B,SAASh0B,KAAKG,KAAMksB,EAAmB2G,EAAoB5yB,EAASovB,EAAgBoE,EAAWG,GAAM,GAAO,GAGlH,IAAK,IAAI9iC,EAAY,EAAGA,EAAI+O,KAAKksB,cAAc9rB,GAAS0zB,QAAS7iC,IAAK,CACrE,MAAM8iC,EAAa/zB,KAAKksB,cAAc9rB,GAASoB,IAAIvQ,GACnD,GAAI8iC,EAAKtL,oBAAsBsL,EAAKrhB,WAAWiiB,gBAAgBr9B,aAAc,CAC5E0I,KAAK40B,iBAAiBx0B,EAASnP,GAC/BA,IACA,SAGD,MAAM4jC,EAA8B5jC,EAAI+O,KAAK+rB,YAAY3rB,GAAS0zB,SAAWjjC,EAAO8K,uBAEpFqE,KAAKg0B,SAASh0B,KAAKG,KAAMksB,EAAmB2G,EAAoB5yB,EAASovB,EAAgBoE,EAAWG,GAAM,EAAMc,IAMlH,IAAIC,GAA0BnI,EAAiBwG,EAAgBD,EAAcxhC,KAAKoC,IAAI84B,EAAc,GAChGmI,GAA0BpI,EAAiByG,EAAgBF,EAAcxhC,KAAKoC,IAAI84B,EAAc,KAChGoI,GAA0BrI,EAAiB0G,EAAgBH,EAAcxhC,KAAKoC,IAAI84B,EAAc,KAChGqI,GAA0BtI,EAAiB,KAAQ2G,EAAgBJ,EAAcxhC,KAAKoC,IAAI84B,EAAc,KACxGsI,GAA0BvI,EAAiB,KAAQ4G,EAAgBL,EAAcxhC,KAAKoC,IAAI84B,EAAc,KACxGuI,GAA0BxI,EAAiB,KAAQ6G,EAAgBN,EAAcxhC,KAAKoC,IAAI84B,EAAc,GAC5GA,GAAeqG,EAAcW,EAC7B,MAMMwB,IANwBzI,EAAiBiH,EAAYT,EAAgBD,EAAcxhC,KAAKoC,IAAI84B,EAAc,GAM/DkI,IAAmBlB,EAC9DyB,IANwB1I,EAAiBiH,EAAYR,EAAgBF,EAAcxhC,KAAKoC,IAAI84B,EAAc,KAM/DmI,IAAmBnB,EAC9D0B,IANwB3I,EAAiBiH,EAAYP,EAAgBH,EAAcxhC,KAAKoC,IAAI84B,EAAc,KAM/DoI,IAAmBpB,EAC9D2B,IANwB5I,EAAiBiH,EAAY,KAAQN,EAAgBJ,EAAcxhC,KAAKoC,IAAI84B,EAAc,KAMvEqI,IAAmBrB,EAC9D4B,IANwB7I,EAAiBiH,EAAY,KAAQL,EAAgBL,EAAcxhC,KAAKoC,IAAI84B,EAAc,KAMvEsI,IAAmBtB,EAC9D6B,IANwB9I,EAAiBiH,EAAY,KAAQJ,EAAgBN,EAAcxhC,KAAKoC,IAAI84B,EAAc,GAMvEuI,IAAmBvB,EAC9D8B,GAAiB5C,EAAcc,EACrC,IAAK,IAAI3iC,EAAY6hC,EAAa7hC,EAAIykC,GAAQzkC,IAAK,CAClD,MAAM0kC,EAAuBtJ,EACvBuJ,EAAuBvJ,EAAoB,EAC3CwJ,EAAyBvJ,EAAeqJ,GAAerJ,EAAeqJ,GAAgB,EAC5F,MAAMG,EAAyBxJ,EAAesJ,GAAetJ,EAAesJ,GAAgB,EAC5F,MAAMG,EAA2BxJ,EAAiBoJ,GAAepJ,EAAiBoJ,GAAgB,EAClG,MAAMK,EAA2BzJ,EAAiBqJ,GAAerJ,EAAiBqJ,GAAgB,EAClG,MAAMK,EAA2BzJ,EAAiBmJ,GAAenJ,EAAiBmJ,GAAgB,EAClG,MAAMO,EAA2B1J,EAAiBoJ,GAAepJ,EAAiBoJ,GAAgB,EAClG,MAAMO,EAAiC1J,EAAuBkJ,GAAelJ,EAAuBkJ,GAAgB,EACpH,MAAMS,EAAiC3J,EAAuBmJ,GAAenJ,EAAuBmJ,GAAgB,EACpHvJ,GAAqB,EAErB,MAAMgK,EAA0BJ,EAAmBE,EAC7CG,EAA0BJ,EAAmBE,EAE7CG,EAA0BzB,GAAkB,EAC5C0B,EAA0BzB,GAAkB,EAC5C0B,EAA0BzB,GAAkB,EAC5C0B,EAA0BzB,GAAkB,EAC5C0B,EAA0BzB,GAAkB,EAC5C0B,EAA0BzB,GAAkB,EAC5C0B,EAAsBnK,EAAoC,KAApB,IACtCoK,EAAsBpK,EAAiBoI,GAAkB,EAAK,MAC9DiC,EAAsBrK,EAAoC,KAApB,IACtCsK,EAAsBtK,EAAiBqI,GAAkB,EAAK,MAC9DkC,EAAsBvK,EAAoC,KAApB,IACtCwK,EAAsBxK,EAAiBsI,GAAkB,EAAK,MAC9DmC,EAAsBzK,EAAoC,KAApB,IACtC0K,EAAsB1K,EAAiBuI,GAAkB,EAAK,MAC9DoC,EAAsB3K,EAAoC,KAApB,IACtC4K,EAAsB5K,EAAiBwI,GAAkB,EAAK,MAC9DqC,GAAsB7K,EAAoC,KAApB,IAQtC8K,GAAgB,IAAOnB,GANFQ,GAAeC,EAAcD,GAAeN,IAC5CQ,GAAeC,EAAcD,GAAeP,IAC5CS,GAAeC,EAAcD,GAAeR,IAKjEgB,GAAgB,IAAOnB,GAJFa,GAAeC,EAAcD,GAAeT,IAC5CW,GAAeC,EAAcD,GAAeV,IAC5CY,IANC7K,EAAiByI,GAAkB,EAAK,MAMZoC,IAAeX,IAGvElK,EAAgBC,GAAkB0J,EAClC3J,EAAiBC,EAAiB,KAAS,MAAS2J,EACpD3J,EAAkBA,EAAiB,EAAK,KACxCmI,IAAmBM,GACnBL,IAAmBM,GACnBL,IAAmBM,GACnBL,IAAmBM,GACnBL,IAAmBM,GACnBL,IAAmBM,GAMnB,MAAMiC,GAA2B5K,EAAiB,KAAQ,MACpD6K,GAA2B7K,EAAiB,KAAQ,MACpD8K,GAA2B9K,EAAiB,MAAS,MACrD+K,GAAyBhL,EAAgBC,GACzCgL,GAAwBjL,EAAgB6K,IACxCK,GAAwBlL,EAAgB8K,IACxCK,GAAwBnL,EAAgB+K,IACxCK,KAAwBJ,GAAgB1B,EAAyBJ,GAAoB+B,GACrFI,KAAwBL,GAAgBzB,EAAyBJ,GAAoB8B,GACrFK,IAAuBJ,GAAgBC,GACvCI,IAAuBL,GAAgBC,GAC7CjL,GAA8E,KAAzDkL,GAAcE,IAAe7a,EAASyP,GAC3DC,GAA8E,KAAzDkL,GAAcE,IAAe9a,EAAS0P,GAC3DC,GAA8E,KAAzDgL,GAAcE,IAAe7a,EAAS2P,GAC3DC,GAA8E,KAAzDgL,GAAcE,IAAe9a,EAAS4P,GAC3DL,EAAgB6K,IAAmB3K,EACnCF,EAAgB8K,IAAmB3K,EACnCH,EAAgB+K,IAAmB3K,EACnCJ,EAAgBC,GAAkBI,EAClCJ,EAAkBA,EAAiB,EAAK,MAGxC,MAAMuL,GAAU7d,EAAaA,GAAcqb,EAAiB2B,GAAgBzB,EAAmB+B,GAAgBC,GAAgBC,IACzHM,GAAU9d,EAAaA,GAAcsb,EAAiB2B,GAAgBzB,EAAmB6B,GAAgBE,GAAgBC,IASzHO,GAAeF,GAAU,GAAOA,GAAUA,GAC1CG,GAAeF,GAAU,GAAOA,GAAUA,GAC1C3mC,GAAc4mC,GAAOC,GAAOD,GAAOC,GACzCx4B,KAAKG,KAAKsa,YAAeza,KAAKG,KAAKsa,YAAc9oB,GAAMqO,KAAKG,KAAKsa,YAAc9oB,GAE/E,MAAM8mC,KAAwB9mC,GAAMyoB,MAA4BzoB,GAAM0oB,GAEhEqe,KACY,GAAdD,MAAyD,IAAlC9mC,GAAM,EAAIyoB,GAA8B,KAAQE,EAAmB,MAAQ,EAAIA,IACpF,OAAF,GAAdme,IACqB,OAAS9mC,GAAM,EAAI0oB,GAAkBE,GAAc,EAAIF,MAA9D,GAAdoe,IAENrM,IAAWsM,GAActM,IAAUA,EAAQsM,GAAcve,EAAYD,GACrE,MAAMye,GAAgBliC,GAAU21B,GAAS,EAAY,KAARA,EAAuB,GAARA,EAAc,KAC1EoB,EAAYv8B,GAAKonC,GAAUM,GAC3BjL,EAAYz8B,GAAKqnC,GAAUK,GAE3B34B,KAAKG,KAAKua,aAAgB1a,KAAKG,KAAKua,aAAe/oB,GAAMgnC,GAAgB34B,KAAKG,KAAKua,aAAe/oB,GAAMgnC,GAMzG,GAHA7F,GAAec,EAEf5zB,KAAK2rB,qBAAuBiI,EACxB5zB,KAAK2rB,qBAAuB,EAAG,CAGlC,IAAK,IAAIvrB,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,IAClG,IAAK,IAAInP,EAAY,EAAGA,EAAI+O,KAAKksB,cAAc9rB,GAAS0zB,QAAS7iC,IAAK,CAClD+O,KAAKksB,cAAc9rB,GAASoB,IAAIvQ,GAC9Cw3B,qBAE+Bx3B,EAAI+O,KAAK+rB,YAAY3rB,GAAS0zB,SAAWjjC,EAAO8K,yBAEnFqE,KAAK40B,iBAAiBx0B,EAASnP,GAC/BA,KAMH,IAAK,IAAImP,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,IAClG,IAAK,IAAIsuB,EAAwB,EAAGA,EAAgB1uB,KAAKG,KAAK8Z,SAAS7Z,GAASuZ,YAAYzoB,OAAQw9B,IAAiB,CACpH,IAAIhc,EAAyB1S,KAAKG,KAAK8Z,SAAS7Z,GAASuZ,YAAY+U,GACjEkK,EAA2BlmB,EAAWsC,cACtChV,KAAKsxB,YAAYpb,EAAW6F,kBAAkB,EAAO3b,EAASsuB,IACjEkK,EAAmB54B,KAAK0zB,YAAYxd,EAAW6F,kBAAkB,EAAO3b,EAASsuB,GAAe,GAC5FmK,OAAOC,UAAUF,GACpBlmB,EAAW6C,SAAW1kB,EAAOkH,cAAc6gC,GAG3ClmB,EAAW6C,UAAY,EAAKqjB,EAAmB,GAAM/nC,EAAOkH,cAAcrG,KAAKwR,MAAM01B,IAAsBA,EAAmB,EAAK/nC,EAAOkH,cAAcrG,KAAKsf,KAAK4nB,KAInKlmB,EAAW6C,SAAW1kB,EAAOkH,cAAc6gC,GAO9C,GAFA54B,KAAKylB,OACLzlB,KAAK2rB,qBAAuB6D,EACxBxvB,KAAKylB,MAAQ50B,EAAOoF,aAAc,CACrC+J,KAAKylB,KAAO,EACZzlB,KAAK0rB,OACL1rB,KAAKkrB,oBACL,IAAI6N,EAAQ/4B,KAAK0rB,KAAO1rB,KAAKyrB,KAAO56B,EAAOmF,cAAgBgK,KAAK+uB,eAAe/uB,KAAKge,KAAO,EAE3F,IAAK,IAAI5d,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAoBlB,KAAKG,KAAKiB,kBAAmBhB,IAAW,CAE7G,IAAI44B,GAAY,EACZC,EAAYj5B,KAAK+rB,YAAY3rB,GAAS0zB,QACtC/V,EAAU/d,KAAKG,KAAK0nB,WAAWznB,EAASJ,KAAKge,KACjD,GAAe,MAAXD,GAAmBgb,EAAO,CAC7B,IAAIrmB,EAAaqL,EAAQrL,WACzB,GAAI1S,KAAKG,KAAK8Z,SAAS7Z,GAASuZ,YAAYjH,GAAYwC,mBAAqB+jB,EAAY,EAAG,CAM3F,IAAIC,EAAYl5B,KAAKge,IAAM,GACvBkb,GAAal5B,KAAKG,KAAKqd,UAAa0b,GAAal5B,KAAKG,KAAKid,UAAYpd,KAAKG,KAAKkd,YAAsC,GAAxBrd,KAAKsrB,mBACvG4N,EAAYl5B,KAAKG,KAAKid,WAEvB,IAAI+b,EAAcn5B,KAAKG,KAAK0nB,WAAWznB,EAAS84B,GAC5CE,EAAWp5B,KAAK+rB,YAAY3rB,GAASoB,IAAI,GAAGmR,KAChD,GAAgB,MAAZymB,EAAkB,CAErB,IADA,IAAI/mB,EAAM,EACH+mB,EAASvnB,KAAKQ,GAAKnB,KAAOkoB,EAAS3nB,MAAQzR,KAAK0rB,KAAO1rB,KAAKyrB,KAAO56B,EAAOmF,cAAgBqc,EAAM+mB,EAASvnB,KAAK3gB,OAAS,GAC7HmhB,IACD,IAAIgnB,GAAaD,EAASvnB,KAAKQ,GAAK5b,OAChCkyB,GAAeyQ,EAASvnB,KAAKQ,GAAKpE,SAEtC,GAAmB,MAAfkrB,GAAuBA,EAAYzmB,YAAcA,EACpD,IAAK,IAAIzhB,EAAY,EAAGA,EAAIkoC,EAAY1mB,MAAMvhB,OAAQD,IACrD,GAAkC,GAA9BkoC,EAAY1mB,MAAMxhB,GAAGwgB,OACrB0nB,EAAY1mB,MAAMxhB,GAAG4gB,KAAK,GAAGpb,QAAU4iC,IACvCF,EAAY1mB,MAAMxhB,GAAG2gB,QAAQ1gB,QAAUkoC,EAASxnB,QAAQ1gB,OAAQ,CAEnE8nC,GAAY,EACZ,IAAK,IAAI5rB,EAAY,EAAGA,EAAIgsB,EAASxnB,QAAQ1gB,OAAQkc,KAE4C,GAA5F+rB,EAAY1mB,MAAMxhB,GAAG2gB,QAAQyF,WAAWiiB,GAAMA,GAAKF,EAAUxnB,QAAQxE,GAAKub,OAC7EqQ,GAAY,EACZ5rB,EAAIgsB,EAASxnB,QAAQ1gB,QAGvBD,EAAIkoC,EAAY1mB,MAAMvhB,OAElB8nC,IAKCh5B,KAAK0rB,KAAO1rB,KAAKyrB,KAAO56B,EAAOmF,aAAegK,KAAK+uB,eAAe/uB,KAAKge,KAEtEhe,KAAKgsB,UAAU5rB,GAAW,IAC7BJ,KAAKgsB,UAAU5rB,GAAW,GAID,GAAlBg5B,EAAS3nB,OAAczR,KAAKgsB,UAAU5rB,IAAY,EAC1DJ,KAAKgsB,UAAU5rB,IAAYJ,KAAK0rB,KAAO1rB,KAAKyrB,KAAO56B,EAAOmF,aAI1DgK,KAAKgsB,UAAU5rB,GAAWJ,KAAK0rB,KAAO1rB,KAAKyrB,KAAO56B,EAAOmF,aAAeojC,EAAS3nB,UAUzF,IAAK,IAAIxgB,EAAY,EAAGA,EAAI+O,KAAK+rB,YAAY3rB,GAAS0zB,QAAS7iC,IAAK,CACnE,MAAM8iC,EAAa/zB,KAAK+rB,YAAY3rB,GAASoB,IAAIvQ,GAC3C0c,EAAyBomB,EAAKrhB,WAAWiiB,gBAE9B,MAAbZ,EAAKphB,MAAgBohB,EAAKphB,KAAKjB,KAAO1R,KAAK0rB,KAAO1rB,KAAKyrB,KAAO56B,EAAOmF,eAElE2X,EAAWxW,YAAc48B,EAAKrhB,WAAWyC,qBAAuBnV,KAAKgsB,UAAU5rB,IAAY,IAC5FuN,EAAWtW,SACd2I,KAAKu5B,YAAYn5B,EAAS2zB,GAE1B/zB,KAAKw5B,SAASzF,GAEf/zB,KAAK+rB,YAAY3rB,GAASq5B,OAAOxoC,GACjCA,KAII+nC,IACJh5B,KAAKgsB,UAAU5rB,IAAY,KAM/B,IAAK,IAAIA,EAAkB,EAAGA,EAAUJ,KAAKG,KAAK8c,gBAAiB7c,IAClE,IAAK,IAAI2V,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAChD,IAAK,IAAI9kB,EAAY,EAAGA,EAAI+O,KAAKisB,eAAe7rB,GAAS2V,GAAK+d,QAAS7iC,IAAK,CAC3E,MAAM8iC,EAAa/zB,KAAKisB,eAAe7rB,GAAS2V,GAAKvU,IAAIvQ,GAC1B8iC,EAAKrhB,WAAWiiB,gBAC/Bx9B,YAA2B,MAAb48B,EAAKphB,MAAgBohB,EAAKphB,KAAKjB,KAAO1R,KAAK0rB,KAAO1rB,KAAKyrB,KAAO56B,EAAOmF,eAClGgK,KAAKw5B,SAASzF,GACd/zB,KAAKisB,eAAe7rB,GAAS2V,GAAK0jB,OAAOxoC,GACzCA,KAMA+O,KAAK0rB,MAAQ76B,EAAOmF,eACvBgK,KAAK0rB,KAAO,EAERiH,IACH3yB,KAAKyrB,OACDzrB,KAAKyrB,MAAQzrB,KAAKG,KAAKod,cAE1Bvd,KAAKyrB,KAAO,EACZzrB,KAAKge,MACuB,GAAxBhe,KAAKsrB,iBAAwBtrB,KAAKge,KAAOhe,KAAKG,KAAKid,UAAYpd,KAAKG,KAAKkd,aAC5Erd,KAAKge,IAAMhe,KAAKG,KAAKid,UACjBpd,KAAKsrB,gBAAkB,GAAGtrB,KAAKsrB,mBAEhCtrB,KAAKge,KAAOhe,KAAKG,KAAKqd,WACzBxd,KAAKge,IAAM,GACkB,GAAzBhe,KAAKsrB,kBACR6E,GAAQ,EACRnwB,KAAK05B,eACL15B,KAAK+yB,cAUZ,IAAK,IAAI/V,EAAkB,EAAGA,EAAU9G,EAAWgG,YAAac,IACrC,MAAtBhd,KAAKquB,eAAwD,MAA/BruB,KAAKquB,cAAcrR,KACpDhd,KAAKouB,UAAUpR,GAAWhd,KAAKquB,cAAcrR,IAI3Chd,KAAKsxB,YAAYpb,EAAW2E,UAAU,KACzC2U,EAAiBxvB,KAAKyvB,oBACtBzvB,KAAK2rB,oBAAsBj6B,KAAKyB,IAAI6M,KAAK2rB,oBAAqB6D,IAK/D,IAAK,IAAIpvB,EAAkB,EAAGA,EAAUJ,KAAKG,KAAKe,kBAAmBd,IACpE,IAAK,IAAIsS,KAAc1S,KAAKG,KAAK8Z,SAAS7Z,GAASuZ,YAClDjH,EAAW4C,YAAe5C,EAAW4C,aAAezkB,EAAO+G,aAAa8a,EAAWmC,aAAa/c,QAAUjH,EAAOoF,aAAeu5B,EAAiBxvB,KAAKirB,mBACtJvY,EAAW6C,QAAW7C,EAAW6C,SAAW,KAAO1kB,EAAOqF,kBAI5D,IAAK,IAAI8mB,EAAkB,EAAGA,EAAU9G,EAAWgG,YAAac,IAC/D,IAAK,IAAI5c,EAAkB,EAAGA,EAAUwyB,EAAcxyB,IACrD,IAAK,IAAIsS,EAAqB,EAAGA,EAAa1S,KAAKG,KAAKwd,sBAAuBjL,IACjD,MAAzB1S,KAAKuuB,kBAA8D,MAAlCvuB,KAAKuuB,iBAAiBnuB,IAAkE,MAA9CJ,KAAKuuB,iBAAiBnuB,GAASsS,IAA8E,MAAvD1S,KAAKuuB,iBAAiBnuB,GAASsS,GAAYsK,KAC/Khd,KAAKsuB,aAAaluB,GAASsS,GAAYsK,GAAWhd,KAAKuuB,iBAAiBnuB,GAASsS,GAAYsK,IASlG,MAAM2c,GAAO,OACT,MAAW5M,GAAmBA,EAAkB4M,KAAS5M,EAAkB,IAC3E,MAAWC,GAAmBA,EAAkB2M,KAAS3M,EAAkB,IAC3E,MAAWC,GAAmBA,EAAkB0M,KAAS1M,EAAkB,IAC3E,MAAWC,GAAmBA,EAAkByM,KAASzM,EAAkB,IAG3E,MAAWd,GAASA,EAAQuN,KAASvN,EAAQ,GAEjDpsB,KAAKqsB,mBAAqBrsB,KAAKqsB,kBAAyC,EAArBqG,GAA0BM,EAC7EhzB,KAAK4sB,YAAcA,EACnB5sB,KAAK2sB,eAAiBA,EACtB3sB,KAAK8sB,eAAiBA,EACtB9sB,KAAK+sB,gBAAkBA,EACvB/sB,KAAKgtB,gBAAkBA,EACvBhtB,KAAKitB,gBAAkBA,EACvBjtB,KAAKktB,gBAAkBA,EAGvBltB,KAAKosB,MAAQA,EAETuG,IACH3yB,KAAKwrB,oBAAsBxrB,KAAKylB,KAAO,EAAMzlB,KAAK2rB,oBAAsB6D,GAAkB,EAAMxvB,KAAK0rB,MAAQ76B,EAAOmF,aAAegK,KAAKyrB,MAAQzrB,KAAKG,KAAKod,YAAcvd,KAAKge,KAoBvKje,SAASg0B,GAChB/zB,KAAK8rB,SAAS8N,SAAS7F,GAGhBh0B,UACP,GAAIC,KAAK8rB,SAASgI,QAAU,EAAG,CAC9B,MAAMC,EAAa/zB,KAAK8rB,SAASnc,UAGjC,OAFAokB,EAAKjhB,QACLihB,EAAK1L,QAAS,EACP0L,EAER,OAAO,IAAIjM,EAGJ/nB,YAAYK,EAAiB2zB,GACnB,MAAb/zB,KAAKG,MAAiBH,KAAKG,KAAK4e,gBAAgB3e,IACnDJ,KAAKksB,cAAc9rB,GAASy5B,UAAU9F,GAWhCh0B,iBAAiBK,EAAiB05B,GACxB,MAAb95B,KAAKG,MAAiBH,KAAKG,KAAK4e,gBAAgB3e,KACnDJ,KAAKw5B,SAASx5B,KAAKksB,cAAc9rB,GAASoB,IAAIs4B,IAC9C95B,KAAKksB,cAAc9rB,GAASq5B,OAAOK,IAW9B/5B,eACN,KAAOC,KAAKmsB,eAAe2H,QAAU,GACpC9zB,KAAKw5B,SAASx5B,KAAKmsB,eAAexc,WAEnC,IAAK,IAAI1e,EAAY,EAAGA,EAAI+O,KAAK+rB,YAAY76B,OAAQD,IACpD,KAAO+O,KAAK+rB,YAAY96B,GAAG6iC,QAAU,GACpC9zB,KAAKw5B,SAASx5B,KAAK+rB,YAAY96B,GAAG0e,WAGpC,IAAK,IAAI1e,EAAY,EAAGA,EAAI+O,KAAKksB,cAAch7B,OAAQD,IACtD,KAAO+O,KAAKksB,cAAcj7B,GAAG6iC,QAAU,GACtC9zB,KAAKw5B,SAASx5B,KAAKksB,cAAcj7B,GAAG0e,WAGtC,IAAK,IAAI1e,EAAI,EAAGA,EAAI+O,KAAKisB,eAAe/6B,OAAQD,IAC/C,IAAK,IAAI8kB,EAAM,EAAGA,EAAM/V,KAAKisB,eAAeh7B,GAAGC,OAAQ6kB,IACtD,KAAO/V,KAAKisB,eAAeh7B,GAAG8kB,GAAK+d,QAAU,GAC5C9zB,KAAKw5B,SAASx5B,KAAKisB,eAAeh7B,GAAG8kB,GAAKpG,WAetC5P,wBAAwBI,GAC/B,MAAM45B,EAAwB/5B,KAAKmsB,eAC7Bva,EAAoB5R,KAAKorB,iBAC/B,IAAI6N,EAAoB,EACxB,GAAIj5B,KAAKkrB,kBAAoB,EAAG,CAC/B,MAAMxY,EAAyBvS,EAAK8Z,SAASja,KAAKqrB,kBAAkB1R,YAAYxZ,EAAKwuB,qBAAqB3uB,KAAKqrB,iBAAkBrrB,KAAKge,MAEtI,GAAItL,EAAW4D,WAAWtd,YAAa,CACtC,IAAI+6B,EACoB,GAApBgG,EAASjG,SACZC,EAAO/zB,KAAKg6B,UACZD,EAASH,SAAS7F,KACPrhB,EAAWiiB,gBAAgBx9B,YAAc6I,KAAKmrB,kBACzDnrB,KAAKu5B,YAAYv5B,KAAKqrB,iBAAkB0O,EAASrqB,YACjDqkB,EAAO/zB,KAAKg6B,UACZD,EAASH,SAAS7F,IAElBA,EAAOgG,EAASv4B,IAAI,GAErBy3B,EAAY,EAEZ,IAAK,IAAIhoC,EAAY,EAAGA,EAAI2gB,EAAQ1gB,OAAQD,IAC3C8iC,EAAKniB,QAAQ3gB,GAAK2gB,EAAQ3gB,GAE3B8iC,EAAK//B,WAAa4d,EAAQ1gB,OAC1B6iC,EAAKhM,UAAY,EACjBgM,EAAKrhB,WAAaA,EAClBqhB,EAAKphB,KAAOohB,EAAK9L,SAAW8L,EAAK7L,SAAW,UAG5C,IAAK,IAAIj3B,EAAY,EAAGA,EAAI2gB,EAAQ1gB,OAAQD,IAAK,CAGhD,IAAI8iC,EACAgG,EAASjG,SAAW7iC,GACvB8iC,EAAO/zB,KAAKg6B,UACZD,EAASH,SAAS7F,KACPrhB,EAAWiiB,gBAAgBx9B,YAAc6I,KAAKmrB,kBACzDnrB,KAAKu5B,YAAYv5B,KAAKqrB,iBAAkB0O,EAASv4B,IAAIvQ,IACrD8iC,EAAO/zB,KAAKg6B,UACZD,EAAS52B,IAAIlS,EAAG8iC,IAEhBA,EAAOgG,EAASv4B,IAAIvQ,GAErBgoC,IAEAlF,EAAKniB,QAAQ,GAAKA,EAAQ3gB,GAC1B8iC,EAAK//B,WAAa,EAClB+/B,EAAKhM,UAAYnW,EAAQ1gB,OACzB6iC,EAAKrhB,WAAaA,EAClBqhB,EAAKphB,KAAOohB,EAAK9L,SAAW8L,EAAK7L,SAAW,MAK/C,KAAO6R,EAASjG,QAAUmF,GACzBj5B,KAAKu5B,YAAYv5B,KAAKqrB,iBAAkB0O,EAASpqB,WAGlD3P,KAAKmrB,kBAAmB,EAGjBprB,4BAA4BI,EAAYC,EAAiBuyB,GAChE,MAAMjgB,EAAyBvS,EAAK8Z,SAAS7Z,GAASuZ,YAAYxZ,EAAKwuB,qBAAqBvuB,EAASJ,KAAKge,MACpGD,EAA0B5d,EAAK0nB,WAAWznB,EAASJ,KAAKge,KACxD9M,EAAelR,KAAK0rB,KAAO1rB,KAAKyrB,KAAO56B,EAAOmF,aAEpD,GAAI28B,GAAYxyB,EAAK4e,gBAAgB3e,KAAaD,EAAK8Z,SAAS7Z,GAAS0Z,MAAO,CAE/E,IAAImgB,EAAgB75B,GAAWD,EAAKe,kBAAoBf,EAAKiB,mBAIzDqR,EAAyB,GACzBynB,EAA6B,GAC7BC,EAA6B,GAC7BC,EAAoBvpC,EAAO0K,SAC/B,KAAO6+B,KACN3nB,EAAMnhB,KAAK,MACX4oC,EAAU5oC,KAAK,MACf6oC,EAAU7oC,KAAK,MAGhB,GAAe,MAAXysB,EACH,IAAK,IAAI9sB,EAAY,EAAGA,EAAI8sB,EAAQtL,MAAMvhB,OAAQD,IAC7C8sB,EAAQtL,MAAMxhB,GAAGygB,KAAOR,GAEmB,MAA1CgpB,EAAUnc,EAAQtL,MAAMxhB,GAAG2gB,QAAQ,KAAemM,EAAQtL,MAAMxhB,GAAGygB,IAAOwoB,EAAUnc,EAAQtL,MAAMxhB,GAAG2gB,QAAQ,IAAaH,SAC7HyoB,EAAUnc,EAAQtL,MAAMxhB,GAAG2gB,QAAQ,IAAMmM,EAAQtL,MAAMxhB,IAGhD8sB,EAAQtL,MAAMxhB,GAAGwgB,OAASP,GAAQ6M,EAAQtL,MAAMxhB,GAAGygB,IAAMR,EACjEuB,EAAMsL,EAAQtL,MAAMxhB,GAAG2gB,QAAQ,IAAMmM,EAAQtL,MAAMxhB,GAE3C8sB,EAAQtL,MAAMxhB,GAAGwgB,MAAQP,IAEa,MAA1CipB,EAAUpc,EAAQtL,MAAMxhB,GAAG2gB,QAAQ,KAAemM,EAAQtL,MAAMxhB,GAAGwgB,MAAS0oB,EAAUpc,EAAQtL,MAAMxhB,GAAG2gB,QAAQ,IAAaH,SAC/H0oB,EAAUpc,EAAQtL,MAAMxhB,GAAG2gB,QAAQ,IAAMmM,EAAQtL,MAAMxhB,IAM3D,IAAK,IAAI8kB,EAAc,EAAGA,EAAMllB,EAAO0K,SAAUwa,IAAO,CACvD,MAAMgkB,EAAwB/5B,KAAKisB,eAAegO,GAAelkB,GACjE,GAAkB,MAAdtD,EAAMsD,GACa,MAAlBmkB,EAAUnkB,IAAiBmkB,EAAUnkB,GAAcrE,KAAQe,EAAMsD,GAActE,QAAOyoB,EAAUnkB,GAAO,MACrF,MAAlBokB,EAAUpkB,IAAiBokB,EAAUpkB,GAActE,OAAUgB,EAAMsD,GAAcrE,MAAKyoB,EAAUpkB,GAAO,MAC3G/V,KAAKq6B,UAAUj6B,EAAS25B,EAAUrnB,EAAaD,EAAMsD,GAAcnE,QAAUa,EAAMsD,GAAgBmkB,EAAUnkB,GAAgBokB,EAAUpkB,GAAe7E,QAEtJ,KAAO6oB,EAASjG,QAAU,GACzB9zB,KAAKw5B,SAASO,EAASpqB,iBAKtB,IAAKxP,EAAK4e,gBAAgB3e,GAAU,CAExC,IAAIuS,EAAoB,KACpBsV,EAAwB,KACxBC,EAAwB,KAE5B,GAAIyK,GAAuB,MAAX5U,IAAoB5d,EAAK8Z,SAAS7Z,GAAS0Z,MAC1D,IAAK,IAAI7oB,EAAY,EAAGA,EAAI8sB,EAAQtL,MAAMvhB,OAAQD,IACjD,GAAI8sB,EAAQtL,MAAMxhB,GAAGygB,KAAOR,EAC3B+W,EAAWlK,EAAQtL,MAAMxhB,QACnB,GAAI8sB,EAAQtL,MAAMxhB,GAAGwgB,OAASP,GAAQ6M,EAAQtL,MAAMxhB,GAAGygB,IAAMR,EACnEyB,EAAOoL,EAAQtL,MAAMxhB,QACf,GAAI8sB,EAAQtL,MAAMxhB,GAAGwgB,MAAQP,EAAM,CACzCgX,EAAWnK,EAAQtL,MAAMxhB,GACzB,MAKH,MAAM8oC,EAAwB/5B,KAAK+rB,YAAY3rB,GAC/C,GAAY,MAARuS,EACa,MAAZsV,GAAoBA,EAASvW,KAAOiB,EAAKlB,QAAOwW,EAAW,MAC/C,MAAZC,GAAoBA,EAASzW,OAASkB,EAAKjB,MAAKwW,EAAW,MAC/DloB,KAAKq6B,UAAUj6B,EAAS25B,EAAUrnB,EAAYC,EAAKf,QAASe,EAAMsV,EAAUC,EAAUhX,QAEtF,KAAO6oB,EAASjG,QAAU,GAErBiG,EAASO,WAAW5nB,WAAWiiB,gBAAgBt9B,UAAY2I,KAAKgsB,UAAU5rB,GAAW,EACxFJ,KAAKu5B,YAAYn5B,EAAS25B,EAASpqB,WAEnC3P,KAAKw5B,SAASO,EAASpqB,YAOpB5P,UAAUK,EAAiB25B,EAAuBrnB,EAAwBd,EAAmBe,EAAYsV,EAAuBC,EAAuBsG,GAC9J,IAAIyK,EAAoB,EAEpBsB,EAAmBn6B,EAAUJ,KAAKG,KAAMe,kBAAoBlB,KAAKG,KAAMiB,kBACxE1P,KAAK0f,IAAI,EAAGpR,KAAKgsB,UAAU5rB,IAC3B,EACH,GAAIsS,EAAW4D,WAAWtd,YAAa,CACtC,IAAI+6B,EACoB,GAApBgG,EAASjG,SACZC,EAAO/zB,KAAKg6B,UACZD,EAASH,SAAS7F,IAElBA,EAAOgG,EAASv4B,IAAI,GAErBy3B,EAAY,EAEZ,IAAK,IAAIhoC,EAAY,EAAGA,EAAI2gB,EAAQ1gB,OAAQD,IAC3C8iC,EAAKniB,QAAQ3gB,GAAK2gB,EAAQ3gB,GAE3B8iC,EAAK//B,WAAa4d,EAAQ1gB,OAC1B6iC,EAAKhM,UAAY,EACjBgM,EAAKrhB,WAAaA,EAClBqhB,EAAKphB,KAAOA,EACZohB,EAAKzL,UAAY3V,EAAKlB,MAAQ8oB,EAC9BxG,EAAKxL,QAAU5V,EAAKjB,IACpBqiB,EAAK9L,SAAWA,EAChB8L,EAAK7L,SAAWA,EAChB6L,EAAK5L,mBAAqB,EAC1B4L,EAAK3L,mBAAqB,MACpB,CACN,MAAMza,EAAyB+E,EAAWiiB,gBAC1C,IAAK,IAAI1jC,EAAY,EAAGA,EAAI2gB,EAAQ1gB,OAAQD,IAAK,CAEhD,MAAMupC,EAA2BvpC,EAAIyhB,EAAW4D,WAAWpd,WAC3D,IAAIuhC,EAAoCxS,GAAYA,EAASrW,QAAQ1gB,OAASD,EAAKg3B,EAAW,KAC1FyS,EAAwB/nB,EACxBgoB,EAAoCzS,GAAYA,EAAStW,QAAQ1gB,OAASD,EAAKi3B,EAAW,KAC1FI,EAAoBoS,EAAgBjpB,MAAQ+oB,EAAmBD,EAEnE,GAAIjS,EAAYkG,EAAa,CAC5B,KAAIuL,EAASjG,QAAU7iC,IAAM0c,EAAWxW,YAAc6I,KAAKgsB,UAAU5rB,IAAY,IAA6B,MAAvBq6B,GAMtF,MALAE,EAAsBD,EACtBA,EAAkBD,EAClBA,EAAsB,KACtBnS,EAAYoS,EAAgBjpB,MAAQ+oB,EAAmBD,EAMzD,IAMIxG,EANAxL,EAAkBmS,EAAgBhpB,KACjC/D,EAAWxW,YAAc6I,KAAKgsB,UAAU5rB,IAAY,IAA6B,MAAvBu6B,IAC9DpS,EAAU72B,KAAKyB,IAAItC,EAAOmF,aAAegK,KAAKG,KAAMod,YAAagL,EAAUiS,IAKxET,EAASjG,SAAW7iC,GACvB8iC,EAAO/zB,KAAKg6B,UACZD,EAASH,SAAS7F,IAElBA,EAAOgG,EAASv4B,IAAIvQ,GAErBgoC,IAEAlF,EAAKniB,QAAQ,GAAK8oB,EAAgB9oB,QAAQ3gB,GAC1C8iC,EAAK//B,WAAa,EAClB+/B,EAAKhM,UAAY2S,EAAgB9oB,QAAQ1gB,OACzC6iC,EAAKrhB,WAAaA,EAClBqhB,EAAKphB,KAAO+nB,EACZ3G,EAAKzL,UAAYA,EACjByL,EAAKxL,QAAUA,EACfwL,EAAK9L,SAAWwS,EAChB1G,EAAK7L,SAAWyS,EAChB5G,EAAK5L,mBAAqBl3B,EAC1B8iC,EAAK3L,mBAAqBn3B,GAK5B,KAAO8oC,EAASjG,QAAUmF,GAErBc,EAASO,WAAW5nB,WAAWiiB,gBAAgBt9B,UAAY2I,KAAKgsB,UAAU5rB,GAAW,EACxFJ,KAAKu5B,YAAYn5B,EAAS25B,EAASpqB,WAEnC3P,KAAKw5B,SAASO,EAASpqB,WAKlB5P,SAASI,EAAYksB,EAA2B2G,EAA4B5yB,EAAiBovB,EAAwBoE,EAAmBG,EAAY6G,EAAmB/F,GAE9K,IAAIgG,EACJ,OAFA7P,EAAM8P,YAAY96B,KAAMG,EAAMC,EAASovB,EAAgBoE,EAAWG,EAAM6G,EAAU/F,GAE1Ed,EAAKrhB,WAAW9E,SACvB,KAAK,EAAGitB,EAAc76B,KAAKssB,eAAiB,MAC5C,KAAK,EAAGuO,EAAc76B,KAAKusB,iBAAmB,MAC9C,KAAK,EAAGsO,EAAc76B,KAAKwsB,iBAAmB,MAC9C,KAAK,EAAGqO,EAAc76B,KAAKysB,uBAAyB,MACpD,QAAS,MAAM,IAAI/5B,MAEUs4B,EAAMgD,2BAA2B+F,EAAKrhB,WACpEqoB,CAAY/6B,KAAM66B,EAAaxO,EAAmB2G,EAAgC,EAAZY,EAAeG,EAAMA,EAAKrhB,YAGzF3S,uBAAuB2O,EAAoBwC,EAAc8pB,EAAeC,GAC/E,OAAQvsB,EAAShX,MAChB,KAAA,EAA0B,OAAOujC,EACjC,KAAA,EAA0B,OAAO,EACjC,KAAA,EACC,OAAO,GAAO,EAAM/pB,EAAOxC,EAAS1U,OACrC,KAAA,EACC,OAAO,EAAM,GAAO,EAAMkX,EAAOxC,EAAS1U,OAC3C,KAAA,EACC,MAAO,GAAyD,GAAnDtI,KAAKmC,IAAY,EAARmnC,EAActpC,KAAKkC,GAAK8a,EAAS1U,OACxD,KAAA,EACC,MAAO,IAA0D,IAAnDtI,KAAKmC,IAAY,EAARmnC,EAActpC,KAAKkC,GAAK8a,EAAS1U,OACzD,KAAA,EACC,OAAOtI,KAAK0f,IAAI,EAAK,EAAa,GAAPF,GAC5B,KAAA,EACC,MAAMlX,EAAgB0U,EAAS1U,MACzBkhC,EAAiB,IAAOxpC,KAAKe,KAAKuH,GACxC,OAAOkX,EAAOgqB,EAAShqB,EAAOgqB,EAAS,GAAO,GAAOhqB,EAAOgqB,GAAUlhC,GACvE,KAAA,EACC,OAAOtI,KAAKuB,IAAI,GAAIyb,EAAS1U,MAAQkX,GACtC,QAAS,MAAM,IAAIxe,MAAM,yCAInBqN,0BAA0BgoB,GACjC,OAAO,GAAyB,KAAjBA,EAAY,GAAY,GAGhChoB,mBAAmBo7B,EAAch7B,EAAYC,EAAiBovB,EAAwBoE,EAAmBG,EAAY6G,EAAmB/F,GAC/I,MAAMniB,EAAyBqhB,EAAKrhB,WAC9B/E,EAAyB+E,EAAWiiB,gBACpC9mB,EAAe6E,EAAW4D,WAC1B8kB,EAAsBvtB,EAAM7U,YAAc,EAAIgyB,EAAMqQ,mBAAmBtH,EAAKhM,WAC5E/U,EAA0B7S,EAAK2e,kBAAkB1e,GACjDk7B,EAAwBtoB,EAAiBniB,EAAOsK,cAAgB,EAChEogC,EAAyB1qC,EAAOoF,aAAeu5B,EAAiB2L,EAAMlQ,iBACtEuQ,EAAuB,EAAM3qC,EAAOmF,aACpCylC,EAAyB1H,EAAK1L,OAC9BsD,EAA8BwP,EAAMxP,oBACpCuI,EAAqB,EAAM,EAAwB1E,EACnD2E,EAAmB,GAAOxI,EAAsBiI,GAAapE,EAC7D4E,GAAwB+G,EAAM1P,KAAO56B,EAAOmF,aAAemlC,EAAMzP,MAAQ76B,EAAOoF,aAAeklC,EAAM1V,KACrG4O,EAA4B,EAAiBxjC,EAAOoF,aACpDq+B,GAA2BF,EAAe,GAAKvjC,EAAOoF,aACtDs+B,EAAwBF,GAAqBC,EAAkBD,GAAqBH,EACpFM,EAAsBH,GAAqBC,EAAkBD,GAAqBF,EAClFzF,EAAyByM,EAAMh7B,KAAc8Z,SAAS7Z,GAASuZ,YAAYtC,WAAUpmB,GAAKA,GAAKyhB,IAC/FgpB,EAA2B/tB,EAAWxW,YAAcgkC,EAAMnP,UAAU5rB,IAAY,EAEtF2zB,EAAKvK,gBAAkB,EACvBuK,EAAKrK,OAAS,EACdqK,EAAKpK,YAAc,EACnBoK,EAAKjK,aAAe,EACpBiK,EAAKhK,aAAe,EACpBgK,EAAK/J,mBAAqB,EAC1B+J,EAAK1L,QAAS,EAEd,IAAIsT,EAAmBjpB,EAAWoC,IAC9B8mB,EAAiBlpB,EAAWoC,IAC5BqmB,EAAM7J,YAAYpb,EAAW+E,QAAQ,EAAO7a,EAASsuB,KACxDiN,EAAWR,EAAMzH,YAAYxd,EAAW+E,QAAQ,EAAO7a,EAASsuB,GAAe,GAC/EkN,EAAST,EAAMzH,YAAYxd,EAAW+E,QAAQ,EAAO7a,EAASsuB,GAAe,IAG9E,IAAImN,EAAwBnpB,EAAWqC,SACnC+mB,EAAsBppB,EAAWqC,SACjComB,EAAM7J,YAAYpb,EAAW8F,aAAa,EAAO5b,EAASsuB,KAC7DmN,EAAgBV,EAAMzH,YAAYxd,EAAW8F,aAAa,EAAO5b,EAASsuB,GAAe,GACzFoN,EAAcX,EAAMzH,YAAYxd,EAAW8F,aAAa,EAAO5b,EAASsuB,GAAe,IAGxF,MAAMqN,GAAuBJ,EAAW9qC,EAAO0H,WAAa1H,EAAO0H,UAC7DyjC,GAAqBJ,EAAS/qC,EAAO0H,WAAa1H,EAAO0H,UAEzD0jC,EAAwC,MAAhBJ,EAA0BV,EAAMlQ,iBACxDiR,EAAoC,MAAdJ,EAAwBX,EAAMlQ,iBAC1D8I,EAAKvJ,kBAAoBuR,EAAcE,EACvC,MAAME,GAAoBH,EAAYE,EACtCnI,EAAKrJ,kBAAoByR,EAAWpI,EAAKvJ,kBAAoBoJ,EAC7DG,EAAK3J,mBAAoE,MAA/C14B,KAAKmC,KAAK,EAAIkoC,GAAerqC,KAAKkC,GAAK,KACjEmgC,EAAK1J,mBAAoE,MAA/C34B,KAAKmC,KAAK,EAAIkoC,GAAerqC,KAAKkC,GAAK,KACjE,MAAMwoC,EAAwE,MAA7C1qC,KAAKmC,KAAK,EAAImoC,GAAatqC,KAAKkC,GAAK,KAChEyoC,EAAwE,MAA7C3qC,KAAKmC,KAAK,EAAImoC,GAAatqC,KAAKkC,GAAK,KACtEmgC,EAAKzJ,oBAAsB8R,EAAmBrI,EAAK3J,oBAAsBwJ,EACzEG,EAAKxJ,oBAAsB8R,EAAmBtI,EAAK1J,oBAAsBuJ,EAEzE,IAaI0I,EACAjnC,EACAknC,EACAC,EAhBAC,GAAuB,EACvBC,EAA0B,EAC1BC,EAAwB,EACxBC,EAAsB,EACtBC,EAAgC,EAChCC,EAA8B,EAC9BC,EAA2B3B,EAC3B4B,GAAyB5B,EACzBzQ,GAA4B,EAC5BC,GAA0B,EAC1BqS,GAAyB,EACzBC,GAAuB,EAM3B,GAAmB,GAAfxqB,EAAWhb,KACVsb,GACH3d,EAAYxE,EAAOsJ,kBACnBoiC,EAAa,KAGblnC,EAAY,EACZknC,EAAa,IAEdD,EAAuBzrC,EAAOsJ,kBAC9BqiC,EAAe,QACT,GAAmB,GAAf9pB,EAAWhb,KACrBrC,EAAYxE,EAAOsJ,kBACnBoiC,EAAa,IACbD,EAAuBjnC,EACvBmnC,EAAe,QACT,GAAmB,GAAf9pB,EAAWhb,KACrBrC,EAAYxE,EAAOoB,WAAWygB,EAAW8B,WAAWnf,UACpDknC,EAAa,IACbD,EAAuBjnC,EACvBmnC,EAAe3rC,EAAOoB,WAAWygB,EAAW8B,WAAW7d,OAAS,GAAO,QACjE,GAAmB,GAAf+b,EAAWhb,KAErBrC,EAAY,EACZknC,EAAa,IACbD,EAAuB,GACvBE,EAAe,QACT,GAAmB,GAAf9pB,EAAWhb,MAA8C,GAAfgb,EAAWhb,KAE/DrC,EAAY,EACZknC,EAAa,OACbD,EAAuB,GACvBE,EAAe,QACT,GAAmB,GAAf9pB,EAAWhb,KAErBrC,EAAY,EACZknC,EAAa,KACbD,EAAuB,GACvBE,EAAe,QACT,GAAmB,GAAf9pB,EAAWhb,KAErBrC,EAAY,EACZknC,EAAa,OACbD,EAAuB,GACvBE,EAAe,OACT,CAAA,GAAmB,GAAf9pB,EAAWhb,KAMrB,MAAM,IAAIhF,MAAM,2CALhB6pC,EAAa,EACbD,EAAuB,EACvBE,EAAe,EACfnnC,EAAY,EAKb,IAAK,IAAIpE,EAAY,EAAGA,EAAIJ,EAAOuI,cAAenI,IACjD8iC,EAAK5K,YAAYl4B,GAAK,EACtB8iC,EAAK3K,aAAan4B,GAAK,EACvB8iC,EAAK1K,aAAap4B,GAAK,EAGxB,GAAI2pC,EAAU,CACb,MAAMuC,EAAqBpJ,EAAKvL,gBAAkBuL,EAAKtL,mBACjD2U,EAAkCrJ,EAAKtL,mBAAqByL,EAC5DmJ,EAAgCtJ,EAAKtL,mBAAqB0L,EAC1DmJ,EAAoBvJ,EAAKvL,gBAAkB4U,EAC3CG,EAAkBxJ,EAAKvL,gBAAkB6U,EACzCG,EAA6BzJ,EAAKrhB,WAAWiiB,gBACnD8H,GAAc,EACdC,EAAkBhrC,KAAKwR,MAAMi6B,EAAatsC,EAAOoF,cACjD0mC,EAAgBC,EAAc7I,EAAKpL,aACnCgC,GAAoBC,GAAkBI,EAAMyS,uBAAuB1J,EAAKnL,YACxEiU,EAAwB7R,EAAMyS,uBAAuF,GAA/D,EAAML,EAA0BI,EAAelmC,eACrGwlC,EAAsB9R,EAAMyS,uBAAqF,GAA7D,EAAMJ,EAAwBG,EAAelmC,eACjG2lC,GAAiBK,EAAYzsC,EAAOoF,aACpCinC,GAAeK,EAAU1sC,EAAOoF,aAE5B4+B,IACHgI,GAAyB,EAAM3I,EAC/B4I,GAAuB,EAAM3I,QAExB,GAAiB,MAAbJ,EAAKphB,KAAc,CAC7BkqB,EAAwBC,EAAsB,EAC9CnS,GAAoBC,GAAkB,EACtCmJ,EAAKpL,aAAe,EACpBoL,EAAKnL,WAAa,EAClBmL,EAAKtL,mBAAqB,EAC1BgU,GAAc,EAEd,MAAMiB,EAAyB3J,EAAKrL,qBAAuB8G,EAC3DuE,EAAKrL,sBAAwBkL,EAC7B,MAAM+J,EAAuB5J,EAAKrL,qBAAuB8G,EACzDuE,EAAKvL,gBAAkBmV,EACvB,MAAMC,EAAyBF,EAAiB7sC,EAAOoF,aACjD4nC,EAAuBF,EAAe9sC,EAAOoF,aACnDymC,EAAkBhrC,KAAKwR,MAAM06B,GAC7BX,GAAiBW,EACjBV,GAAeW,MACT,CACN,MAAMlrB,EAAaohB,EAAKphB,KAClBsV,EAAwB8L,EAAK9L,SAC7BC,EAAwB6L,EAAK7L,SAE7BhX,EAAeiqB,EAAMzP,KAAOyP,EAAM1P,KAAO56B,EAAOmF,aAChD8nC,EAAsBjtC,EAAOmF,aAAemK,EAAKod,YACjD+K,EAAoByL,EAAKzL,UACzBC,EAAkBwL,EAAKxL,QAI7B,IAAIwV,EACJ,IAHArB,EAAkBxrB,EAAOoX,EAGpByV,EAAc,EAAGA,EAAcprB,EAAKd,KAAK3gB,OAAS,KAClDyhB,EAAKd,KAAKksB,GAAa7sB,KAAOyB,EAAKlB,MAAQP,GADU6sB,KAG1D,MAAMC,EAAoBrrB,EAAKd,KAAKksB,EAAc,GAC5CE,EAAkBtrB,EAAKd,KAAKksB,GAC5BG,EAAwB5V,EAAYz3B,EAAOoF,aAE3CuyB,EADsBD,EAAU13B,EAAOoF,aACCioC,EACxCC,GAAoBxrB,EAAKlB,MAAQusB,EAAS9sB,MAAQrgB,EAAOoF,aACzDmoC,GAAkBzrB,EAAKlB,MAAQwsB,EAAO/sB,MAAQrgB,EAAOoF,aAE3D89B,EAAKpL,aAAehW,EAAKd,KAAKc,EAAKd,KAAK3gB,OAAS,GAAG+c,SACpD8lB,EAAKnL,WAAajW,EAAKd,KAAKc,EAAKd,KAAK3gB,OAAS,GAAGuF,OAClDs9B,EAAKtL,mBAAqB,EAC1BsL,EAAKvL,gBAAkBA,EAEvB,MAAM6V,EAAwBntB,EAAOrgB,EAAOoF,aAAeklC,EAAM1V,KAC3D6Y,EAAsBptB,EAAOrgB,EAAOoF,aAAeklC,EAAM1V,KAAO,EAChE8Y,EAAmCF,EAAgBH,EACnDM,EAAiCF,EAAcJ,EAC/CO,EAAwB/sC,KAAKyB,IAAI,GAAMkrC,EAAgBF,IAAaC,EAASD,IAC7EO,EAAsBhtC,KAAKyB,IAAI,GAAMmrC,EAAcH,IAAaC,EAASD,IAC/E,IAAIQ,EAAgCX,EAASvnC,QAAUwnC,EAAOxnC,OAASunC,EAASvnC,QAAUgoC,EACtFG,EAA8BZ,EAASvnC,QAAUwnC,EAAOxnC,OAASunC,EAASvnC,QAAUioC,EACpFG,EAAoC,EACpCC,EAAkC,EAClCC,EAA+B3D,EAC/B4D,EAA6B5D,EAC7B6D,EAA4BjB,EAAS/vB,UAAYgwB,EAAOhwB,SAAW+vB,EAAS/vB,UAAYwwB,EACxFS,EAA0BlB,EAAS/vB,UAAYgwB,EAAOhwB,SAAW+vB,EAAS/vB,UAAYywB,EACtFS,EAA6B9K,EAAoB/L,EACjD8W,EAA2B9K,EAAkBhM,EACjDmU,EAAe4B,EAAgBnK,EAAagK,GAAiB,IAASzC,EAKtE,MAAM4D,EAA8C,GAAlB7W,EAClC,GAAIkT,IAAoB/tB,EAAWpW,QAAwB,GAAdob,EAAKlB,MAEjDgrB,GAAehB,OACT,GAAIC,GAA+B,MAAZzT,IAC7BwU,GAAehB,EACX9tB,EAAWpW,QAAQ,CACtB,MAAMC,EAAqB9F,KAAKyB,IAAIksC,EAAmB1xB,EAAWnW,YAC5D8nC,EAA8B5tC,KAAK0f,IAAI,EAAK,EAAMmtB,EAA2B/mC,GAC7E+nC,EAA4B7tC,KAAK0f,IAAI,EAAK,EAAMotB,EAAyBhnC,GACzEgoC,EAA4I,IAAnHvX,EAASrW,QAAQmiB,EAAK5L,oBAAsBF,EAASpW,KAAKoW,EAASpW,KAAK3gB,OAAS,GAAG+c,SAAY8lB,EAAKniB,QAAQ,IACtI6tB,EAA8F,IAAxExX,EAASpW,KAAKoW,EAASpW,KAAK3gB,OAAS,GAAGuF,OAASkc,EAAKd,KAAK,GAAGpb,QACpFipC,EAA0D,IAAjCzX,EAASvW,IAAMuW,EAASxW,OAQvD,GAPAwtB,GAAqBK,EAAsBE,EAC3CN,GAAmBK,EAAoBC,EACvCb,GAAyBW,EAAsBG,EAC/Cb,GAAuBW,EAAoBE,EAC3CN,GAAsBG,EAAsBI,EAC5CN,GAAoBG,EAAoBG,GAEnC7xB,EAAM7U,YAAa,CACvB,MAAM2mC,EAAqE,IAA5C1X,EAASrW,QAAQ1gB,OAAS6iC,EAAKhM,WAC9DgX,EAAuB/T,EAAMqQ,mBAAmBtH,EAAKhM,UAAYuX,EAAsBK,GACvFX,EAAqBhU,EAAMqQ,mBAAmBtH,EAAKhM,UAAYwX,EAAoBI,IAItF,GAAIjE,IAAoB/tB,EAAWpW,QAAUob,EAAKjB,KAAOosB,QAElD,GAAIpC,GAA+B,MAAZxT,GAC7B,GAAIva,EAAWpW,OAAQ,CACtB,MAAMC,EAAqB9F,KAAKyB,IAAIksC,EAAmB1xB,EAAWnW,YAC5D8nC,EAA8B5tC,KAAK0f,IAAI,EAAK,GAAOoX,EAAkB+V,GAA4B/mC,GACjG+nC,EAA4B7tC,KAAK0f,IAAI,EAAK,GAAOoX,EAAkBgW,GAA0BhnC,GAC7FgoC,EAAoI,IAA5GtX,EAAStW,QAAQmiB,EAAK3L,qBAAuB2L,EAAKniB,QAAQ,GAAKe,EAAKd,KAAKc,EAAKd,KAAK3gB,OAAS,GAAG+c,WACvHwxB,EAA0F,IAApEvX,EAASrW,KAAK,GAAGpb,OAASkc,EAAKd,KAAKc,EAAKd,KAAK3gB,OAAS,GAAGuF,QAChFipC,EAAiD,KAAvBnX,EAAUD,GAQ1C,GAPA2W,GAAqBK,EAAsBE,EAC3CN,GAAmBK,EAAoBC,EACvCb,GAAyBW,EAAsBG,EAC/Cb,GAAuBW,EAAoBE,EAC3CN,GAAsBG,EAAsBI,EAC5CN,GAAoBG,EAAoBG,GAEnC7xB,EAAM7U,YAAa,CACvB,MAAM2mC,EAAqE,IAA5CzX,EAAStW,QAAQ1gB,OAAS6iC,EAAKhM,WAC9DgX,EAAuB/T,EAAMqQ,mBAAmBtH,EAAKhM,UAAYuX,EAAsBK,GACvFX,EAAqBhU,EAAMqQ,mBAAmBtH,EAAKhM,UAAYwX,EAAoBI,UAG/E,KAAMhyB,EAAWtW,UAAY8jC,EAAMnP,UAAU5rB,GAAW,GAAI,CAClE,MAAM9I,EAAuBqW,EAAWrW,aACpCA,EAAe,IAClBunC,GAA6BntC,KAAKyB,IAAI,GAAMq1B,EAAkB+V,GAA4BjnC,GAC1FwnC,GAA2BptC,KAAKyB,IAAI,GAAMq1B,EAAkBgW,GAA0BlnC,IAIxFqlC,EAAgBsC,GAAqBC,EAAkBD,GAAqB/K,EAC5E0I,EAAcqC,GAAqBC,EAAkBD,GAAqB9K,EACvD,GAAfzhB,EAAWhb,MACdizB,GAAoBK,EAAMyS,uBAAuBkB,GAAyBC,EAAsBD,GAAyBzK,GACzHtJ,GAAkBI,EAAMyS,uBAAuBkB,GAAyBC,EAAsBD,GAAyBxK,KAEvHxJ,GAAoBgU,GAAyBC,EAAsBD,GAAyBjtC,KAAK0f,IAAI,EAAK8iB,GAC1GtJ,GAAkB+T,GAAyBC,EAAsBD,GAAyBjtC,KAAKyB,IAAI,EAAKghC,GACxGJ,EAAKpJ,kBAAoBA,GACzBoJ,EAAKnJ,gBAAkBA,IAExBiS,EAAwBgC,GAA6BC,EAA0BD,GAA6B3K,EAC5G4I,EAAsB+B,GAA6BC,EAA0BD,GAA6B1K,EAC1G4I,EAAmBgC,GAAwBC,EAAqBD,GAAwB7K,EACxF8I,GAAiB+B,GAAwBC,EAAqBD,GAAwB5K,EACtF8I,GAAiBkC,GAAsBC,EAAmBD,GAAsBjL,EAChFgJ,GAAeiC,GAAsBC,EAAmBD,GAAsBhL,EAG/E,MAAMyL,GAAqB,EAAMzE,EAAMlQ,iBAGvC,GAFA8I,EAAK1L,QAAS,EAEK,GAAf3V,EAAWhb,MAA8C,GAAfgb,EAAWhb,MAA4C,GAAfgb,EAAWhb,MAAmD,GAAfgb,EAAWhb,MAA6C,GAAfgb,EAAWhb,MAAwD,GAAfgb,EAAWhb,KAAiC,CAE7Q,MAAMmoC,EAAyB7U,EAAM8U,gBAAgBptB,EAAY6oB,EAAiB7oB,EAAW2C,SACvF0qB,EAAuB/U,EAAM8U,gBAAgBptB,EAAY6oB,EAAiB7oB,EAAW4C,aAE3F,IASI0qB,EACAC,EAVAC,EAA0BxtB,EAAWgC,aACrCyrB,EAAwBztB,EAAWgC,aAEnCymB,EAAM7J,YAAYpb,EAAWyF,iBAAiB,EAAOvb,EAASsuB,KACjEwR,EAAkB/E,EAAMzH,YAAYxd,EAAWyF,iBAAiB,EAAOvb,EAASsuB,GAAe,GAAS,GACxGyR,EAAgBhF,EAAMzH,YAAYxd,EAAWyF,iBAAiB,EAAOvb,EAASsuB,GAAe,GAAQ,IAMtG,MAAM0R,EAAkCjF,EAAM7J,YAAYpb,EAAW4F,iBAAiB,EAAO1b,EAASsuB,GACtG,GAAIhc,EAAWxE,SAAWrd,EAAO4G,SAASvG,QAAWkvC,EAIhD,CACJ,IAAIC,EAA4B3tB,EAAWkC,aACvC0rB,EAA0B5tB,EAAWkC,aAErCwrB,IACHC,EAAoBlF,EAAMzH,YAAYxd,EAAW4F,iBAAiB,EAAO1b,EAASsuB,GAAe,GACjG4R,EAAkBnF,EAAMzH,YAAYxd,EAAW4F,iBAAiB,EAAO1b,EAASsuB,GAAe,GAG3F2R,GAAqBlF,EAAMh7B,KAAMwa,WAAWnZ,IAAI0U,EAAW4F,mBAC9DukB,EAAoBxH,OAAO0H,WAExBD,GAAmBnF,EAAMh7B,KAAMwa,WAAWnZ,IAAI0U,EAAW4F,mBAC5DwkB,EAAkBzH,OAAO0H,YAI3BP,EAAaK,EACbJ,EAAWK,OArBXN,EAAanvC,EAAO4G,SAASib,EAAWxE,SAASvW,WACjDsoC,EAAWpvC,EAAO4G,SAASib,EAAWxE,SAASvW,WA6BhDglC,IALmCD,EAAkBsD,EAAc,EAAME,GAGxBL,EAGjDjD,IALiCF,EAAkBuD,EAAY,EAAME,GAGxBJ,EAK9C,IAAKrE,IAAuB/tB,EAAWpW,QAAuB,MAAbw8B,EAAKphB,MAAmC,GAAnBohB,EAAKphB,KAAKlB,QAAkC,MAAjBsiB,EAAK9L,SAAoB,CACzH,MAAM7wB,EAAwBuW,EAAWvW,cACrCA,EAAgB,IACnBylC,GAAyBnrC,KAAKyB,IAAI,EAAKooC,EAAiB0B,GAAiB7lC,GACzE0lC,GAAuBprC,KAAKyB,IAAI,EAAKooC,EAAiB2B,GAAe9lC,IAIvE,MAAMopC,GAA+BxV,EAAMyV,6BAA6B/tB,EAAWjc,QAEhE,GAAfic,EAAWhb,OAIdq8B,EAAK/L,aAAe+L,EAAKniB,QAAQ,GAChB,MAAbmiB,EAAKphB,OAAcohB,EAAK/L,cAAgB+L,EAAKphB,KAAK+tB,oBACtD3M,EAAK/L,aAAet2B,KAAK0f,IAAI,EAAG1f,KAAKyB,IAAItC,EAAOyK,UAAY,EAAGy4B,EAAK/L,gBAGrE,IAOI2Y,GACAC,GARAC,GAA4BnuB,EAAW+B,aACvCqsB,GAA0BpuB,EAAW+B,aACrC0mB,EAAM7J,YAAYpb,EAAWgF,cAAc,EAAO9a,EAASsuB,KAC9DmS,GAAoB1gC,EAAK+vB,eAAeiL,EAAMzH,YAAYxd,EAAWgF,cAAc,EAAO9a,EAASsuB,GAAe,GAAQxY,EAAWgF,cACrI4lB,GAAkB3gC,EAAK+vB,eAAeiL,EAAMzH,YAAYxd,EAAWgF,cAAc,EAAO9a,EAASsuB,GAAe,GAAOxY,EAAWgF,eAKhH,GAAfxI,EAAWhb,MACdipC,GAAwB,EACxBC,GAAsB,IAGtBD,GAA+E,IAAtDE,IAAqBhwC,EAAOmG,kBAAoB,IACzE4pC,GAA2E,IAApDE,IAAmBjwC,EAAOmG,kBAAoB,KAGtE,MAAMgX,GAA2C,GAAf0E,EAAWhb,KAAkCgb,EAAW+D,mBAAmBsd,EAAK/L,cAAgBtV,EAAW8D,oBACvIuqB,GAA8BlwC,EAAO+F,kBAAoBlF,KAAKuB,IAAI,EAAK0tC,IACvEK,GAA4BnwC,EAAO+F,kBAAoBlF,KAAKuB,IAAI,EAAK2tC,IACrEK,GAA0B,EAAMvvC,KAAKoC,IAAIpC,KAAKkC,GAAKmtC,GAAsB5F,EAAMlQ,kBAC/EiW,GAAwB,EAAMxvC,KAAKoC,IAAIpC,KAAKkC,GAAKotC,GAAoB7F,EAAMlQ,kBAC3EkW,GAAoB,EAAMzvC,KAAKoC,IAAIpC,KAAKkC,GAAK/C,EAAOgG,kBAAoBskC,EAAMlQ,kBACpF8I,EAAKrK,OAASuX,GAAkBjW,EAAMoW,gBAAgBpzB,GAAgButB,EAAiB0B,GAAgBzB,EAAejH,EAAe5J,IACrI,IAAI0W,GAAoBH,GAAgBlW,EAAMoW,gBAAgBpzB,GAAgButB,EAAiB2B,GAAc1B,EAAehH,EAAa5J,IACzImJ,EAAKrK,OAASh4B,KAAKyB,IAAItC,EAAOiG,UAAWpF,KAAK0f,IAAI+vB,GAAWpN,EAAKrK,SAClE2X,GAAY3vC,KAAKyB,IAAItC,EAAOiG,UAAWpF,KAAK0f,IAAI+vB,GAAWE,KAC3DtN,EAAKpK,YAAcj4B,KAAKuB,IAAIouC,GAAYtN,EAAKrK,OAAQ,EAAMkK,GAE3D,IAAI0N,GAA4B5vC,KAAKuB,IAAI,GAA6B,IAAxB0tC,IAC1CY,GAA0B7vC,KAAKuB,IAAI,GAA2B,IAAtB2tC,IAE5C7M,EAAKlJ,qBAAuBnY,EAAW8uB,qBACvCzN,EAAKjJ,qBAAuB,EAE5B,IAAI2W,GAAkC/uB,EAAW3E,gBAC7C2zB,GAAgChvB,EAAW3E,gBAI/C,GAFAgmB,EAAKhJ,aAA+B,GAAfrY,EAAWhb,MAAsE,GAA3B+pC,GAEvEtG,EAAM7J,YAAYpb,EAAWiF,eAAe,EAAO/a,EAASsuB,GAAgB,CAG/EqF,EAAKhJ,cAAe,EAEpB0W,GAA0BthC,EAAK+vB,eAAeiL,EAAMzH,YAAYxd,EAAWiF,eAAe,EAAO/a,EAASsuB,GAAe,GAAQxY,EAAWiF,eAC5IumB,GAAwBvhC,EAAK+vB,eAAeiL,EAAMzH,YAAYxd,EAAWiF,eAAe,EAAO/a,EAASsuB,GAAe,GAAOxY,EAAWiF,eAGzI4Y,EAAKlJ,qBAAuBh6B,EAAOkG,mBAAqBrF,KAAKuB,IAAIvB,KAAK0f,IAAI,EAAGqwB,GAA0B,IAAM5wC,EAAOoG,qBAAuB,GAAI,IAC/I,MAAM0qC,EAA6B9wC,EAAOkG,mBAAqBrF,KAAKuB,IAAIvB,KAAK0f,IAAI,EAAGswB,GAAwB,IAAM7wC,EAAOoG,qBAAuB,GAAI,IAGpJ88B,EAAKjJ,sBAAwB6W,EAAqB5N,EAAKlJ,sBAAwB+I,OAK/EG,EAAKlJ,qBAAuBh6B,EAAOkG,mBAAqBrF,KAAKuB,IAAIvB,KAAK0f,IAAI,EAAGqwB,GAA0B,IAAM5wC,EAAOoG,qBAAuB,GAAI,IAmBhJ,GAhByB,GAArB88B,EAAKhJ,eACRuW,GAAoB5vC,KAAKuB,IAAIquC,GAAmB,KAAO5vC,KAAKuB,IAAI,GAAK,MAASwuC,GAA0B,IACxGF,GAAkB7vC,KAAKuB,IAAIsuC,GAAiB,KAAO7vC,KAAKuB,IAAI,GAAK,MAASyuC,GAAwB,KAE5E,GAAnB1zB,GAAetW,MAClB4pC,IAAsB,KAAO,KAAOtzB,GAAehU,MACnDunC,IAAoB,KAAO,KAAOvzB,GAAehU,OACpB,GAAnBgU,GAAetW,OACzB4pC,IAAsB,EAAI,IAAMtzB,GAAehU,MAC/CunC,IAAoB,EAAI,IAAMvzB,GAAehU,OAG1CyiC,GACH1I,EAAKjhB,QAGa,GAAfJ,EAAWhb,KAA2B,CAGzC,IAAIkqC,EAA+B,EAC/BC,EAA6B,EAC7BC,EAAkC,EAClCC,EAAgC,EAEhCC,EAA2B,EAC/B,GAAIjO,EAAK//B,WAAa,IAAM6Z,EAAM/U,WAAY,CAC7C,MAAM5E,EAAmBxC,KAAKwR,MAAOwP,EAAkB,QAAI7hB,EAAOqF,kBAClE8rC,EAAmBjO,EAAKniB,QAAQ7d,EAAsBggC,EAAK//B,WAAY0e,EAAWuC,eAAgB/gB,IAAa6/B,EAAKniB,QAAQ,GAG7H,IAAIqwB,EAAsBvvB,EAAW0C,OAAS,GAC1C8sB,EAAoBxvB,EAAW0C,OAAS,GACxC+lB,EAAM7J,YAAYpb,EAAWwF,WAAW,EAAOtb,EAASsuB,KAC3DuT,EAAc9G,EAAMzH,YAAYxd,EAAWwF,WAAW,EAAOtb,EAASsuB,GAAe,GAAS,GAC9FwT,EAAY/G,EAAMzH,YAAYxd,EAAWwF,WAAW,EAAOtb,EAASsuB,GAAe,GAAQ,IAGxFyM,EAAM7J,YAAYpb,EAAW0F,eAAe,KAC/CqmB,GAAe9G,EAAMzH,YAAYxd,EAAW0F,eAAe,EAAM,KAAM,MAAM,GAAS,GACtFsmB,GAAa/G,EAAMzH,YAAYxd,EAAW0F,eAAe,EAAM,KAAM,MAAM,GAAQ,IAGpF,MAAMtiB,EAAuBzI,EAAOwI,WAAWqZ,EAAWtE,WAAW9U,aACrE,IAAK,IAAIrI,EAAY,EAAGA,EAAIJ,EAAOuI,cAAenI,IAAK,CAEtD,MAAMkxC,EAAiCtxC,EAAOwI,WAAWqZ,EAAWtE,WAAW7U,kBAAkBtI,GAAK,EAChGugB,EAAgBuiB,EAAKniB,QAAS/D,EAAM/U,WAAmB7H,EAAI8iC,EAAK//B,WAAc/C,EAAMkxC,EAAyBpO,EAAK//B,WAAcmuC,EAAyB,EAAxG,GACjDC,EAAWvxC,EAAO8I,oBAAoB+Y,EAAWlE,UAAUvd,GAAGwd,WAAW7U,KACzEqU,EAAWpd,EAAO4I,wBAAwB0oC,GAA0BH,EACpEpiB,EAAqBvqB,GAAamc,EAAQmrB,EAAgBsF,GAAe3G,EAAgBrtB,EACzFo0B,EAAoBD,EAAY/tB,EAAWgF,mBAAmBuG,GAAe/uB,EAAO8I,oBAAoB+Y,EAAWlE,UAAUvd,GAAGwd,WAAW5U,SAEjJk6B,EAAK5K,YAAYl4B,GAAKoxC,EAAYzC,GAAa/uC,EAAO+K,eAEtD,IAAI0mC,EAAyB5vB,EAAWlE,UAAUvd,GAAGwC,UACjD8uC,EAAuB7vB,EAAWlE,UAAUvd,GAAGwC,UAC/C0nC,EAAM7J,YAAYpb,EAAWkF,aAAenqB,GAAG,EAAOmP,EAASsuB,KAClE4T,GAAkBnH,EAAMzH,YAAYxd,EAAWkF,aAAenqB,GAAG,EAAOmP,EAASsuB,GAAe,GAAS,GACzG6T,GAAgBpH,EAAMzH,YAAYxd,EAAWkF,aAAenqB,GAAG,EAAOmP,EAASsuB,GAAe,GAAQ,IAGvG,MAAM8T,EAA8BxX,EAAMyX,uBAAuBH,GAC3DI,EAA4B1X,EAAMyX,uBAAuBF,GAG/D,IAAIjZ,EAF+BkZ,EAAsB3xC,EAAO8I,oBAAoB+Y,EAAWlE,UAAUvd,GAAGwd,WAAW3U,cAGnHo3B,EAF6BwR,EAAoB7xC,EAAO8I,oBAAoB+Y,EAAWlE,UAAUvd,GAAGwd,WAAW3U,cAKnH,GAAIqhC,EAAM7J,YAAYpb,EAAW8E,cAAc,EAAO5a,EAASsuB,GAAgB,CAE9E,MAAMiU,EAAmBxH,EAAMzH,YAAYxd,EAAW8E,cAAc,EAAO5a,EAASsuB,GAAe,GAC7FkU,EAAiBzH,EAAMzH,YAAYxd,EAAW8E,cAAc,EAAO5a,EAASsuB,GAAe,GACjGpF,GAAiBqZ,GAAY,GAAOA,EAAW9xC,EAAOwH,YAAc,IAAMxH,EAAOwH,YAAc,GAAM2H,KAAKygC,6BAA6BkC,GACvIzR,GAAe0R,GAAU,GAAOA,EAAS/xC,EAAOwH,YAAc,IAAMxH,EAAOwH,YAAc,GAAM2H,KAAKygC,6BAA6BmC,GASlI,GALIzH,EAAM7J,YAAYpb,EAAW0E,eAAe,KAC/C0O,GAAgB6R,EAAMzH,YAAYxd,EAAW0E,eAAe,OAAMvL,OAAWA,GAAW,GAAU,IAClG6hB,GAAciK,EAAMzH,YAAYxd,EAAW0E,eAAe,OAAMvL,OAAWA,GAAW,GAAS,KAG5Fpe,EAAIqI,EAAc,CAErB,MAAMupC,EAAmBxtC,GAAamc,EAAQorB,EAAcsF,GAAa5G,EAAgBrtB,EACnF60B,EAA2BpxC,KAAKuB,IAAI,IAAO2sB,EAAa0c,GAAwBE,GAChFuG,EAAyBrxC,KAAKuB,IAAI,IAAO4vC,EAAWvG,GAAwBE,GAClFlT,GAAewZ,EACf5R,GAAa6R,EAEbjB,GAA2BU,EAC3BT,GAAyBW,OAGzBpZ,GAAuC,IAAxBz4B,EAAO+K,eACtBs1B,GAAqC,IAAxBrgC,EAAO+K,eAEpBgmC,GAAwB,EAAMlwC,KAAKyB,IAAI,EAAKmvC,EAAiB,IAC7DT,GAAsB,EAAMnwC,KAAKyB,IAAI,EAAKovC,EAAe,IAE1D,MAAMS,EAA6BnyC,EAAOkJ,UAAU2Y,EAAWlE,UAAUvd,GAAGyd,UAE5E4a,GAAe0B,EAAMoW,gBAAgB4B,EAAkBzH,EAAiB0B,GAAgBzB,EAAejH,EAAe5J,IACtHuG,GAAalG,EAAMoW,gBAAgB4B,EAAkBzH,EAAiB2B,GAAc1B,EAAehH,EAAa5J,IAEhHmJ,EAAK3K,aAAan4B,GAAKq4B,EACvByK,EAAK1K,aAAap4B,IAAMigC,EAAY5H,GAAesK,EAGpD,IAAIqP,EAAoCvwB,EAAWpE,kBAC/C40B,EAAkCxwB,EAAWpE,kBAC7C6sB,EAAM7J,YAAYpb,EAAWsF,eAAe,EAAOpb,EAASsuB,KAC/DuU,GAA6B9H,EAAMzH,YAAYxd,EAAWsF,eAAe,EAAOpb,EAASsuB,GAAe,GAAS,GACjHwU,GAA2B/H,EAAMzH,YAAYxd,EAAWsF,eAAe,EAAOpb,EAASsuB,GAAe,GAAQ,IAG/G,MAAMyU,EAAyD,GAAxBtyC,EAAO+K,eAAuBqnC,EAA4B,GAC3FG,EAAuD,GAAxBvyC,EAAO+K,eAAuBsnC,EAA0B,GACvF30B,EAA6B1d,EAAOkJ,UAAU2Y,EAAWnE,kBAC/D,IAAI80B,EAAwBF,EAAyBnY,EAAMoW,gBAAgB7yB,EAAkBgtB,EAAiB0B,GAAgBzB,EAAejH,EAAe5J,IACxJ2Y,EAAsBF,EAAuBpY,EAAMoW,gBAAgB7yB,EAAkBgtB,EAAiB2B,GAAc1B,EAAehH,EAAa5J,IACpJmJ,EAAK7J,aAAemZ,EACpBtP,EAAK5J,eAAiBmZ,EAAcvP,EAAK7J,cAAgB0J,EAEzD,MAAM2P,EAAqBhH,EAAaiE,GACxCzM,EAAKzK,YAAcgY,GAAoBiC,EAAa1G,EAAwBE,EAC5E,MAAM7L,EAAoBqQ,GAAkBgC,EAAazG,EAAsBE,GAC/EjJ,EAAKxK,aAAe2H,EAAY6C,EAAKzK,aAAesK,EAEpDgO,IAAyBlwC,KAAKuB,IAAI,EAAM,EAAM,IAAMgwC,EAA4B,IAAS,GAAO,EAChGpB,IAAuBnwC,KAAKuB,IAAI,EAAM,EAAM,IAAMiwC,EAA0B,IAAS,GAAO,EAC5FtB,GAAwB,EAAMlwC,KAAKyB,IAAI,EAAKzB,KAAK0f,IAAI,EAAK0wB,EAA0B,GAAK,GACzFD,GAAsB,EAAMnwC,KAAKyB,IAAI,EAAKzB,KAAK0f,IAAI,EAAK2wB,EAAwB,GAAK,GACrFhO,EAAKzK,aAAe,EAA6B,EAAvBsY,EAC1B7N,EAAKxK,aAAe,EAAoD,KAA7CqY,EAAuBC,QAC5C,GAAmB,GAAfnvB,EAAWhb,KAA4B,CAEjDq8B,EAAKzK,YAAcuT,EACnB,IAAI3L,EAAoB4L,EAExB/I,EAAKzK,aAAeqB,GACpBuG,GAAatG,GAEbmJ,EAAKxK,aAAe2H,EAAY6C,EAAKzK,aAAesK,MAE9C,CACN,IAAIqO,EAAsBvvB,EAAW0C,OAAS,GAC1C8sB,EAAoBxvB,EAAW0C,OAAS,GACxC+lB,EAAM7J,YAAYpb,EAAWwF,WAAW,EAAOtb,EAASsuB,KAC3DuT,EAAc9G,EAAMzH,YAAYxd,EAAWwF,WAAW,EAAOtb,EAASsuB,GAAe,GAAS,GAC9FwT,EAAY/G,EAAMzH,YAAYxd,EAAWwF,WAAW,EAAOtb,EAASsuB,GAAe,GAAQ,IAGxFyM,EAAM7J,YAAYpb,EAAW0F,eAAe,KAC/CqmB,GAAe9G,EAAMzH,YAAYxd,EAAW0F,eAAe,EAAM,KAAM,MAAM,GAAS,GACtFsmB,GAAa/G,EAAMzH,YAAYxd,EAAW0F,eAAe,EAAM,KAAM,MAAM,GAAQ,IAGpF,IAAIpK,EAAgBuiB,EAAKniB,QAAQ,GAEjC,GAAImiB,EAAK//B,WAAa,EAAG,CACxB,MAAME,EAAmBxC,KAAKwR,MAAMwP,EAAW6C,QAAU1kB,EAAOqF,kBAChE,GAAI2X,EAAM/U,WAAY,CACrB,MAAM0qC,EAAyBzP,EAAKniB,QAAQ,EAAI7d,EAAsBggC,EAAK//B,WAAa,EAAG0e,EAAWuC,eAAgB/gB,IAAa6/B,EAAKniB,QAAQ,GAChJmiB,EAAKhK,aAAer4B,KAAKuB,IAAI,EAAKuwC,EAAiB3yC,EAAOwK,kBAC1D04B,EAAK/J,mBAAqBt4B,KAAKuB,IAAI,GAAMuwC,EAAiBhH,QAE1DhrB,EAAQuiB,EAAKniB,QAAQ7d,EAAsBggC,EAAK//B,WAAY0e,EAAWuC,eAAgB/gB,IAIzF,MAAM0rB,EAAqBvqB,GAAamc,EAAQmrB,EAAgBsF,GAAe3G,EACzEuH,EAAmBxtC,GAAamc,EAAQorB,EAAcsF,GAAa5G,EACnE+G,EAAoBhuB,EAAWgF,mBAAmBuG,GAClDkjB,EAA2BpxC,KAAKuB,IAAI,IAAO2sB,EAAa0c,GAAwBE,GAChFuG,EAAyBrxC,KAAKuB,IAAI,IAAO4vC,EAAWvG,GAAwBE,GAClF,IAAIiH,EAAkClH,EAAa+E,GAC/CoC,EAAgCnH,EAAagF,GAajD,GAZmB,GAAf7uB,EAAWhb,OACd+rC,GAA2B5yC,EAAOoB,WAAWygB,EAAW8B,WAAW/d,OACnEitC,GAAyB7yC,EAAOoB,WAAWygB,EAAW8B,WAAW/d,QAE/C,GAAfic,EAAWhb,MAA8C,GAAfgb,EAAWhb,OACxD+rC,GAA2B5yC,EAAO2F,UAAUkc,EAAW6B,UAAU9d,OACjEitC,GAAyB7yC,EAAO2F,UAAUkc,EAAW6B,UAAU9d,QAE7C,GAAfic,EAAWhb,MAA8C,GAAfgb,EAAWhb,MAAmD,GAAfgb,EAAWhb,OACvG+rC,GAA2B5yC,EAAOmH,UAAU0a,EAAWzE,UAAUxX,OACjEitC,GAAyB7yC,EAAOmH,UAAU0a,EAAWzE,UAAUxX,QAE7C,GAAfic,EAAWhb,KAA4B,CAG1C,IAAIisC,EAA6BjxB,EAAW5D,YAAuC,EAAzBje,EAAO+J,iBAC7DgpC,EAA2BlxB,EAAW5D,YAAuC,EAAzBje,EAAO+J,iBAC3DugC,EAAM7J,YAAYpb,EAAWuF,eAAe,EAAOrb,EAASsuB,KAC/DiV,EAAsBxI,EAAMzH,YAAYxd,EAAWuF,eAAe,EAAOrb,EAASsuB,GAAe,IAAoC,EAAzB79B,EAAO+J,iBACnHgpC,EAAoBzI,EAAMzH,YAAYxd,EAAWuF,eAAe,EAAOrb,EAASsuB,GAAe,IAAmC,EAAzB79B,EAAO+J,kBAGjH,MAAMmU,EAA0Ble,EAAOkJ,UAAU2Y,EAAW3D,eACtD80B,EAA0BF,EAAqB3Y,EAAMoW,gBAAgBryB,EAAewsB,EAAiB0B,GAAgBzB,EAAejH,EAAe5J,IACnJmZ,EAAwBF,EAAmB5Y,EAAMoW,gBAAgBryB,EAAewsB,EAAiB2B,GAAc1B,EAAehH,EAAa5J,IAEjJmJ,EAAKjlB,WAAa+0B,EAClB9P,EAAKtK,iBAAmBqa,EAAgBD,GAAmBjQ,EAG5DG,EAAK5K,YAAY,GAAKkZ,EAAYzC,GAElC7L,EAAKzK,YAAcuT,EAAwBE,EAAmB+F,EAAmBW,EAA0BjD,GAC3G,IAAItP,EAAoB4L,EAAsBE,GAAiB+F,EAAiBW,EAAwBlD,GAQxG,GANuB,GAAnBxyB,GAAetW,MAA+C,GAAfgb,EAAWhb,MAA6E,GAA/C7G,EAAOkJ,UAAU2Y,EAAW3D,eAAerX,OACtIq8B,EAAKzK,aAAeqB,GACpBuG,GAAatG,IAIVuQ,EAAM7J,YAAYpb,EAAW8E,cAAc,EAAO5a,EAASsuB,GAAgB,CAE9E,MAAMiU,EAAmBxH,EAAMzH,YAAYxd,EAAW8E,cAAc,EAAO5a,EAASsuB,GAAe,GAC7FkU,EAAiBzH,EAAMzH,YAAYxd,EAAW8E,cAAc,EAAO5a,EAASsuB,GAAe,GACjGqF,EAAKzK,aAAiBqZ,GAAY,GAAOA,EAAW9xC,EAAOwH,YAAc,IAAMxH,EAAOwH,YAAc,GAAM2H,KAAKygC,6BAA6BkC,GAC5IzR,GAAe0R,GAAU,GAAOA,EAAS/xC,EAAOwH,YAAc,IAAMxH,EAAOwH,YAAc,GAAM2H,KAAKygC,6BAA6BmC,GAG9HzH,EAAM7J,YAAYpb,EAAW0E,eAAe,KAC/CmZ,EAAKzK,aAAgB6R,EAAMzH,YAAYxd,EAAW0E,eAAe,OAAMvL,OAAWA,GAAW,GAAU,IACvG6hB,GAAciK,EAAMzH,YAAYxd,EAAW0E,eAAe,OAAMvL,OAAWA,GAAW,GAAS,KAGhG0kB,EAAKxK,aAAe2H,EAAY6C,EAAKzK,aAAesK,EAGrDG,EAAKvK,gBAAkB93B,KAAKuB,IAAI,GAAO2pC,EAAcD,GAAiBrB,EAAgBzqC,EAAOwK,iBAAoBu4B,GAG3G7zB,uBAAuB2S,EAAwBqxB,GACrD,IAAI9gB,EAAiB,EACrB,IAAK,MAAM+gB,KAAwBnzC,EAAO+G,aAAa8a,EAAWmC,aAAahd,eAC9EorB,GAAUvxB,KAAKoC,IAAc,EAAVpC,KAAKkC,GAASmwC,EAAiBC,GAEnD,OAAO/gB,EAKAljB,kCAAkC2S,GACzC,GAAmB,GAAfA,EAAWhb,KAA2B,CACzC,MAAMusC,EAAsBvxB,EAAWtE,UAAY,IAAMsE,EAAWrE,aACpE,GAA+CgB,MAA3C2b,EAAMkZ,qBAAqBD,GAA2B,CACzD,MAAME,EAAwB,GAE9B,IAAK,MAAMC,KAAQpZ,EAAMqZ,iBACxB,IAA2C,GAAvCD,EAAKvtB,QAAQ,sBAA6B,CAC7C,MAAMytB,EAAoB,GAC1B,IAAK,IAAIl3B,EAAY,EAAGA,EAAIvc,EAAOwI,WAAWqZ,EAAWtE,WAAW9U,aAAc8T,IACjFk3B,EAAQhzC,KAAK,WAAa8b,EAAI,UAE/B+2B,EAAY7yC,KAAK8yC,EAAKvkC,QAAQ,sBAAuBykC,EAAQ3mC,KAAK,cAC5D,IAA4D,GAAxDymC,EAAKvtB,QAAQ,uCACvB,IAAK,IAAIzJ,EAAYvc,EAAOuI,cAAgB,EAAGgU,GAAK,EAAGA,IACtD,IAAK,MAAMm3B,KAAgBvZ,EAAMwZ,uBAChC,IAAuD,GAAnDD,EAAa1tB,QAAQ,0BAAiC,CACzD,IAAI4tB,EAAa,GACjB,IAAK,MAAMC,KAAmB7zC,EAAOwI,WAAWqZ,EAAWtE,WAAW5U,YAAY4T,GACjFq3B,GAAc,eAAiBC,EAAkB,GAAK,SAGvD,MAAMC,EAAyC9zC,EAAOoJ,UAAUyY,EAAWrE,cAAcnU,QAAQkT,GACjG,GAAIu3B,EAAgBzzC,OAAS,EAAG,CAC/BuzC,GAAc,sBACd,MAAMxqC,EAAsB,GAC5B,IAAK,MAAMyqC,KAAmBC,EAC7B1qC,EAAU3I,KAAK,YAAcozC,EAAkB,GAAK,UAErDD,GAAcxqC,EAAU0D,KAAK,OAAS,IAEvCwmC,EAAY7yC,KAAKizC,EAAa1kC,QAAQ,MAAOuN,EAAI,IAAIvN,QAAQ,yBAA0B4kC,SAEvFN,EAAY7yC,KAAKizC,EAAa1kC,QAAQ,MAAOuN,EAAI,UAI9C,IAA0B,GAAtBg3B,EAAKvtB,QAAQ,KACvB,IAAK,IAAIzJ,EAAI,EAAGA,EAAIvc,EAAOuI,cAAegU,IACzC+2B,EAAY7yC,KAAK8yC,EAAKvkC,QAAQ,MAAOuN,EAAI,UAG1C+2B,EAAY7yC,KAAK8yC,GAMnBpZ,EAAMkZ,qBAAqBD,GAAe,IAAIW,SAAS,QAAS,OAAQ,oBAAqB,qBAAsB,YAAa,OAAQ,aAAcT,EAAYxmC,KAAK,OAExK,OAAOqtB,EAAMkZ,qBAAqBD,GAC5B,GAAmB,GAAfvxB,EAAWhb,KACrB,OAAOszB,EAAM6Z,UACP,GAAmB,GAAfnyB,EAAWhb,KACrB,OAAOszB,EAAM6Z,UACP,GAAmB,GAAfnyB,EAAWhb,KACrB,OAAOszB,EAAM8Z,eACP,GAAmB,GAAfpyB,EAAWhb,KACrB,OAAOszB,EAAM+Z,gBACP,GAAmB,GAAfryB,EAAWhb,KACrB,OAAOszB,EAAMga,WACP,GAAmB,GAAftyB,EAAWhb,KACrB,OAAOszB,EAAMia,cACP,GAAmB,GAAfvyB,EAAWhb,KACrB,OAAOszB,EAAMka,aACP,GAAmB,GAAfxyB,EAAWhb,KACrB,OAAOszB,EAAMma,SAEb,MAAM,IAAIzyC,MAAM,iCAAmCggB,EAAWhb,MAIxDqI,iBAAiBo7B,EAAciK,EAAoB/Y,EAA2B2G,EAA4BY,EAAmBG,EAAYrhB,GAChJ,IAAI3hB,EACAs0C,EAE0C,GAAf3yB,EAAWhb,MAOzC3G,EAAO2hB,EAAW8C,uBAElB6vB,EAAc,KANdt0C,EAAOF,EAAO2F,UAAUkc,EAAW6B,UAAUriB,QAC7CmzC,EAAc,GAQf,MAAMhyB,GAAsBtiB,EAAKG,OAAS,EAEpCo0C,GAAqB5zC,KAAKuB,IAAI,GAAMpC,EAAOmH,UAAU0a,EAAWzE,UAAU/V,OAASrH,EAAOmH,UAAU0a,EAAWzE,UAAUhW,QAAUpH,EAAOwK,kBAC1IkqC,EAAoB7zC,KAAKuB,IAAI,GAAMpC,EAAOmH,UAAU0a,EAAWzE,UAAU/V,OAASrH,EAAOmH,UAAU0a,EAAWzE,UAAUhW,QAAUpH,EAAOwK,kBAAoB04B,EAAKhK,aAClKyb,EAAuBzR,EAAK/J,mBAAqBn5B,EAAOmH,UAAU0a,EAAWzE,UAAU9V,KAClE,GAAvBua,EAAWzE,UAAkByE,EAAW4D,WAAWvd,iBAAgBg7B,EAAK7K,OAAO,GAAK6K,EAAK7K,OAAO,IACpG,MAAMuc,EAAqBF,EAAYD,EACvC,IAAII,EAAsB3R,EAAK5K,YAAY,GAAKmc,EAAYjyB,EACxDsyB,EAAsBD,EAAcD,EACxC,MAAMjc,GAA2BuK,EAAKvK,gBACtC,IAAI/yB,GAAkBs9B,EAAKzK,YAC3B,MAAMC,GAAuBwK,EAAKxK,YAClC,IAAIqc,EAAkB7R,EAAK7K,OAAO,GAAK,EAAK7V,EACxCwyB,EAAkB9R,EAAK7K,OAAO,GAAK,EAAK7V,EAE5C,MAAM0X,EAAwBgJ,EAAKhJ,aACnC,IAAI+a,GAAmB/R,EAAKrK,OACxBqc,EAAkBhb,EAAe,EAAM+a,EAC3C,MAAME,GAAwBjS,EAAKpK,YAC7Bsc,EAAuBlb,EAAe,EAAMib,EAClD,IAAIj4B,EAA0BgmB,EAAKlJ,qBAC/BC,EAA+BiJ,EAAKjJ,qBACpClB,GAAyBmK,EAAKnK,cAC9BC,GAAyBkK,EAAKlK,cAElC,MAAMqc,EAA6B,EAATN,EACpBO,EAA6B,EAATN,EACpBO,EAAiBF,EAAY7yB,EAC7BgzB,EAAiBF,EAAY9yB,EAC7BizB,EAAsBV,EAASM,EAC/BK,EAAsBV,EAASM,EACrC,IAAIK,EAA4Bz1C,EAAKq1C,GACjCK,EAA4B11C,EAAKs1C,GACrCG,IAAsBz1C,EAAKq1C,EAAS,GAAKI,GAAqBF,EAC9DG,IAAsB11C,EAAKs1C,EAAS,GAAKI,GAAqBF,EAE9D,MAAM76B,EAAoB2gB,EAAoBuH,EAC9CvH,GAAqB0H,EAAKhL,aAE1B,IAMI2d,EANAC,EAAwB5S,EAAK3J,mBAC7BE,EAA6ByJ,EAAKzJ,mBAClCsc,EAAwB7S,EAAK1J,mBAC7BE,EAA6BwJ,EAAKxJ,mBAClCvB,EAAsB+K,EAAKvJ,iBAC3BE,EAA2BqJ,EAAKrJ,iBAKpC,KAAO2B,EAAoB3gB,GAAW,CAErCk6B,GAAUF,EACVG,GAAUF,EAEV,MAAMO,EAA6B,EAATN,EACpBO,EAA6B,EAATN,EACpBO,EAAiBF,EAAY7yB,EAC7BgzB,EAAiBF,EAAY9yB,EACnC,IAAIwzB,EAA4B91C,EAAKq1C,GACjCU,EAA4B/1C,EAAKs1C,GACrC,MAAMC,EAAsBV,EAASM,EAC/BK,EAAsBV,EAASM,EACrCU,IAAsB91C,EAAKq1C,EAAS,GAAKS,GAAqBP,EAC9DQ,IAAsB/1C,EAAKs1C,EAAS,GAAKS,GAAqBP,EAC9D,IAAIQ,GAAiBF,EAAoBL,GAAqBd,EAC1DsB,GAAiBF,EAAoBL,GAAqBd,EAC9Da,EAAoBK,EACpBJ,EAAoBK,EAKpBld,GAAiBkc,GAHaiB,EAAQC,EAAQxB,EAGH5b,GADlB7b,EAAkBA,GAAmB,EAAM+3B,KACGlc,EAAgBC,IACvFA,GAAiBkc,GAAWnc,EAAgBC,GAE5Cic,GAAWE,EACXD,GAAWE,EACXP,GAAelc,EACfmc,GAAenc,EACfzb,GAAmB+c,EAEnB,MAAMmc,EAAiBpd,EAAgBpzB,EAAS4uC,EAChD5uC,GAAU8yB,EASVmd,EAAS1d,EAAc,EAAI,CAAC,EAAG,EAA0B,GAAL,GAAfA,IAAyBA,EAAe,GAAK,CAAqB,GAAL,EAAdA,GAAsBA,EAAc,EAAG,EAAG,GAE9Hoc,GAAM/Y,EAAoBqa,EAAO,IAAM1T,IAAuBiU,EAASN,GAAiB,EAAID,EAAO,IACnGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASN,EAAgBD,EAAO,GAClGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,GAAiB,EAAIF,EAAO,IACvGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,EAAgBF,EAAO,GAElGC,GAAiBrc,EACjBsc,GAAiBrc,EACjBvB,GAAe0B,EAEf2B,GAAqB,EAMtB0H,EAAK7K,OAAO,GAAK0c,EAASvyB,EAC1B0gB,EAAK7K,OAAO,GAAK2c,EAASxyB,EAE1B,MAAMsmB,EAAO,OACT,MAAW/P,GAAiBA,EAAgB+P,IAAS/P,EAAgB,IACrE,MAAWC,GAAiBA,EAAgB8P,IAAS9P,EAAgB,GACzEkK,EAAKnK,cAAgBA,EACrBmK,EAAKlK,cAAgBA,EAKd9pB,sBAAsBo7B,EAAciK,EAAoB/Y,EAA2B2G,EAA4BY,EAAmBG,EAAYrhB,GACrJ,MAAM3hB,EAAqB2hB,EAAW+C,cAAc8D,gBAC9ClG,GAAsBtiB,EAAKG,OAAS,EAEpCo0C,GAAqB5zC,KAAKuB,IAAI,GAAMpC,EAAOmH,UAAU0a,EAAWzE,UAAU/V,OAASrH,EAAOmH,UAAU0a,EAAWzE,UAAUhW,QAAUpH,EAAOwK,kBAC1IkqC,EAAoB7zC,KAAKuB,IAAI,GAAMpC,EAAOmH,UAAU0a,EAAWzE,UAAU/V,OAASrH,EAAOmH,UAAU0a,EAAWzE,UAAUhW,QAAUpH,EAAOwK,kBAAoB04B,EAAKhK,aAClKyb,EAAuBzR,EAAK/J,mBAAqBn5B,EAAOmH,UAAU0a,EAAWzE,UAAU9V,KAClE,GAAvBua,EAAWzE,UAAkByE,EAAW4D,WAAWvd,iBAAgBg7B,EAAK7K,OAAO,GAAK6K,EAAK7K,OAAO,IACpG,MAAMuc,EAAqBF,EAAYD,EACvC,IAAII,EAAsB3R,EAAK5K,YAAY,GAAKmc,EAAYjyB,EACxDsyB,EAAsBD,EAAcD,EACxC,MAAMjc,GAA2BuK,EAAKvK,gBACtC,IAAI/yB,GAAkBs9B,EAAKzK,YAC3B,MAAMC,GAAuBwK,EAAKxK,YAClC,IAAIqc,EAAkB7R,EAAK7K,OAAO,GAAK,EAAK7V,EACxCwyB,EAAkB9R,EAAK7K,OAAO,GAAK,EAAK7V,EAE5C,MAAM0X,EAAwBgJ,EAAKhJ,aACnC,IAAI+a,GAAmB/R,EAAKrK,OACxBqc,EAAkBhb,EAAe,EAAM+a,EAC3C,MAAME,GAAwBjS,EAAKpK,YAC7Bsc,EAAuBlb,EAAe,EAAMib,EAClD,IAAIj4B,EAA0BgmB,EAAKlJ,qBAC/BC,EAA+BiJ,EAAKjJ,qBACpClB,GAAyBmK,EAAKnK,cAC9BC,GAAyBkK,EAAKlK,cAElC,MAAMqc,EAA6B,EAATN,EACpBO,EAA6B,EAATN,EACpBO,EAAiBF,EAAY7yB,EAC7BgzB,EAAiBF,EAAY9yB,EAC7BizB,EAAsBV,EAASM,EAC/BK,EAAsBV,EAASM,EACrC,IAAIK,EAA4Bz1C,EAAKq1C,GACjCK,EAA4B11C,EAAKs1C,GACrCG,IAAsBz1C,EAAKq1C,EAAS,GAAKI,GAAqBF,EAC9DG,IAAsB11C,EAAKs1C,EAAS,GAAKI,GAAqBF,EAE9D,MAAM76B,EAAoB2gB,EAAoBuH,EAC9CvH,GAAqB0H,EAAKhL,aAE1B,IAMI2d,EANAC,EAAwB5S,EAAK3J,mBAC7BE,EAA6ByJ,EAAKzJ,mBAClCsc,EAAwB7S,EAAK1J,mBAC7BE,EAA6BwJ,EAAKxJ,mBAClCvB,EAAsB+K,EAAKvJ,iBAC3BE,EAA2BqJ,EAAKrJ,iBAEpC,KAAO2B,EAAoB3gB,GAAW,CAErCk6B,GAAUF,EACVG,GAAUF,EAEV,MAAMO,EAA6B,EAATN,EACpBO,EAA6B,EAATN,EACpBO,EAAiBF,EAAY7yB,EAC7BgzB,EAAiBF,EAAY9yB,EACnC,IAAIwzB,EAA4B91C,EAAKq1C,GACjCU,EAA4B/1C,EAAKs1C,GACrC,MAAMC,EAAsBV,EAASM,EAC/BK,EAAsBV,EAASM,EACrCU,IAAsB91C,EAAKq1C,EAAS,GAAKS,GAAqBP,EAC9DQ,IAAsB/1C,EAAKs1C,EAAS,GAAKS,GAAqBP,EAC9D,IAAIQ,GAAiBF,EAAoBL,GAAqBd,EAC1DsB,GAAiBF,EAAoBL,GAAqBd,EAE9Da,EAAoBK,EACpBJ,EAAoBK,EAKpBld,GAAiBkc,GAHaiB,EAAQC,EAAQxB,EAGH5b,GADlB7b,EAAkBA,GAAmB,EAAM+3B,KACGlc,EAAgBC,IACvFA,GAAiBkc,GAAWnc,EAAgBC,GAE5Cic,GAAWE,EACXD,GAAWE,EACXP,GAAelc,EACfmc,GAAenc,EACfzb,GAAmB+c,EAEnB,MAAMmc,EAAiBpd,EAAgBpzB,EACvCA,GAAU8yB,EASVmd,EAAS1d,EAAc,EAAI,CAAC,EAAG,EAA0B,GAAL,GAAfA,IAAyBA,EAAe,GAAK,CAAqB,GAAL,EAAdA,GAAsBA,EAAc,EAAG,EAAG,GAE9Hoc,GAAM/Y,EAAoBqa,EAAO,IAAM1T,IAAuBiU,EAASN,GAAiB,EAAID,EAAO,IACnGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASN,EAAgBD,EAAO,GAClGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,GAAiB,EAAIF,EAAO,IACvGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,EAAgBF,EAAO,GAElGC,GAAiBrc,EACjBsc,GAAiBrc,EACjBvB,GAAe0B,EAEf2B,GAAqB,EAGtB0H,EAAK7K,OAAO,GAAK0c,EAASvyB,EAC1B0gB,EAAK7K,OAAO,GAAK2c,EAASxyB,EAE1B,MAAMsmB,EAAO,OACT,MAAW/P,GAAiBA,EAAgB+P,IAAS/P,EAAgB,IACrE,MAAWC,GAAiBA,EAAgB8P,IAAS9P,EAAgB,GACzEkK,EAAKnK,cAAgBA,EACrBmK,EAAKlK,cAAgBA,EAGd9pB,uBAAuBo7B,EAAciK,EAAoB/Y,EAA2B2G,EAA4BY,EAAmBG,EAAYrhB,GACtJ,IAAIw0B,EAAqBnT,EAAK5K,YAAY,GAC1C,MAAMK,GAA2BuK,EAAKvK,gBACtC,IAAI/yB,GAAkBs9B,EAAKzK,YAC3B,MAAMC,GAAuBwK,EAAKxK,YAClC,IAAI4d,EAAiBpT,EAAK7K,OAAO,GAAK,EAElCpa,EAAqBilB,EAAKjlB,WAC9B,MAAM2a,EAA0BsK,EAAKtK,gBAE/BsB,EAAwBgJ,EAAKhJ,aACnC,IAAI+a,GAAmB/R,EAAKrK,OACxBqc,EAAkBhb,EAAe,EAAM+a,EAC3C,MAAME,GAAwBjS,EAAKpK,YAC7Bsc,EAAuBlb,EAAe,EAAMib,EAClD,IAAIj4B,EAA0BgmB,EAAKlJ,qBAC/BC,EAA+BiJ,EAAKjJ,qBACpClB,GAAyBmK,EAAKnK,cAC9BC,GAAyBkK,EAAKlK,cAElC,MAAMne,EAAoB2gB,EAAoBuH,EAC9CvH,GAAqB0H,EAAKhL,aAE1B,IAMI2d,EANAC,EAAwB5S,EAAK3J,mBAC7BE,EAA6ByJ,EAAKzJ,mBAClCsc,EAAwB7S,EAAK1J,mBAC7BE,EAA6BwJ,EAAKxJ,mBAClCvB,EAAsB+K,EAAKvJ,iBAC3BE,EAA2BqJ,EAAKrJ,iBAGpC,KAAO2B,EAAoB3gB,GAAW,CAErC,MAAM07B,EAAoBD,EAAQ,EAC5BE,GAAqBF,EAAQr4B,GAAc,EAEjD,IAAIw4B,EAAoBD,EAAYD,EAGpC,GAAIA,EAAYF,EAEfI,GAAmC,KAD/BC,EAAIH,EAAYF,GACFK,EAAIA,EAAIA,EAAI,QACxB,GAAIH,EAAY,EAAMF,EAAY,CAExCI,GAAmC,KAD/BC,GAAKH,EAAY,GAAOF,GACVK,EAAIA,EAAIA,EAAI,GAE/B,GAAIF,EAAYH,EAEfI,GAAmC,KAD/BC,EAAIF,EAAYH,GACFK,EAAIA,EAAIA,EAAI,QACxB,GAAIF,EAAY,EAAMH,EAAY,CACxC,IAAIK,EACJD,GAAmC,KAD/BC,GAAKF,EAAY,GAAOH,GACVK,EAAIA,EAAIA,EAAI,GAI/B3d,GAAiBkc,GAAWwB,EAAY1d,GADf7b,EAAkBA,GAAmB,EAAM+3B,KACAlc,EAAgBC,IACpFA,GAAiBkc,GAAWnc,EAAgBC,GAE5Cic,GAAWE,EACXD,GAAWE,EAEXkB,GAASD,EACTA,GAAc1d,EACd1a,GAAc2a,EACd1b,GAAmB+c,EAEnB,MAAMmc,EAAiBpd,EAAgBpzB,EACvCA,GAAU8yB,EASVmd,EAAS1d,EAAc,EAAI,CAAC,EAAG,EAA0B,GAAL,GAAfA,IAAyBA,EAAe,GAAK,CAAqB,GAAL,EAAdA,GAAsBA,EAAc,EAAG,EAAG,GAE9Hoc,GAAM/Y,EAAoBqa,EAAO,IAAM1T,IAAuBiU,EAASN,GAAiB,EAAID,EAAO,IACnGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASN,EAAgBD,EAAO,GAClGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,GAAiB,EAAIF,EAAO,IACvGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,EAAgBF,EAAO,GAElGC,GAAiBrc,EACjBsc,GAAiBrc,EACjBvB,GAAe0B,EAEf2B,GAAqB,EAGtB0H,EAAK7K,OAAO,GAAKie,EAEjB,MAAMxN,EAAO,OACT,MAAY/P,GAAiBA,EAAgB+P,IAAS/P,EAAgB,IACtE,MAAWC,GAAiBA,EAAgB8P,IAAS9P,EAAgB,GACzEkK,EAAKnK,cAAgBA,EACrBmK,EAAKlK,cAAgBA,EAgGd9pB,kBAAkBo7B,EAAciK,EAAoB/Y,EAA2B2G,EAA4BY,EAAmBG,EAAYrhB,GACjJ,IAAI3hB,EAAqB2hB,EAAW7gB,cAChCq1C,GAAsBnT,EAAK5K,YAAY,GAC3C,MAAMK,GAA2BuK,EAAKvK,gBACtC,IAAI/yB,GAAkBs9B,EAAKzK,YAC3B,MAAMC,GAAuBwK,EAAKxK,YAClC,IAAI4d,EAAiBpT,EAAK7K,OAAO,GAAK,EAAKr4B,EAAOuB,gBAC5B,GAAlB2hC,EAAK7K,OAAO,KAEfie,EAAQz1C,KAAKa,SAAW1B,EAAOuB,iBAEhC,IAAI62B,GAAkB8K,EAAK9K,OAE3B,MAAM8B,EAAwBgJ,EAAKhJ,aACnC,IAAI+a,GAAmB/R,EAAKrK,OACxBqc,EAAkBhb,EAAe,EAAM+a,EAC3C,MAAME,GAAwBjS,EAAKpK,YAC7Bsc,EAAuBlb,EAAe,EAAMib,EAClD,IAAIj4B,EAA0BgmB,EAAKlJ,qBAC/BC,EAA+BiJ,EAAKjJ,qBACpClB,GAAyBmK,EAAKnK,cAC9BC,GAAyBkK,EAAKlK,cAElC,MAAM2d,EAA8B91C,KAAKyB,IAAI,EAAK4gC,EAAK5K,YAAY,GAAKt4B,EAAOoB,WAAWygB,EAAW8B,WAAW9d,iBAE1GgV,EAAoB2gB,EAAoBuH,EAC9CvH,GAAqB0H,EAAKhL,aAC1B,IAMI2d,EANAC,EAAwB5S,EAAK3J,mBAC7BE,EAA6ByJ,EAAKzJ,mBAClCsc,EAAwB7S,EAAK1J,mBAC7BE,EAA6BwJ,EAAKxJ,mBAClCvB,EAAsB+K,EAAKvJ,iBAC3BE,EAA2BqJ,EAAKrJ,iBAEpC,KAAO2B,EAAoB3gB,GAAW,CAGrCud,IAF2Bl4B,EAAa,MAARo2C,GAERle,GAAUue,EAGlC5d,GAAiBkc,GAAW7c,EAASW,GADZ7b,EAAkBA,GAAmB,EAAM+3B,KACHlc,EAAgBC,IACjFA,GAAiBkc,GAAWnc,EAAgBC,GAE5Csd,GAASD,EACTpB,GAAWE,EACXD,GAAWE,EACXiB,GAAc1d,EACdzb,GAAmB+c,EAEnB,MAAMmc,EAAiBpd,EAAgBpzB,EACvCA,GAAU8yB,EASVmd,EAAS1d,EAAc,EAAI,CAAC,EAAG,EAA0B,GAAL,GAAfA,IAAyBA,EAAe,GAAK,CAAqB,GAAL,EAAdA,GAAsBA,EAAc,EAAG,EAAG,GAE9Hoc,GAAM/Y,EAAoBqa,EAAO,IAAM1T,IAAuBiU,EAASN,GAAiB,EAAID,EAAO,IACnGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASN,EAAgBD,EAAO,GAClGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,GAAiB,EAAIF,EAAO,IACvGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,EAAgBF,EAAO,GAElGC,GAAiBrc,EACjBsc,GAAiBrc,EACjBvB,GAAe0B,EAEf2B,GAAqB,EAGtB0H,EAAK7K,OAAO,GAAKie,EAAQt2C,EAAOuB,gBAChC2hC,EAAK9K,OAASA,EAEd,MAAM0Q,EAAO,OACT,MAAW/P,GAAiBA,EAAgB+P,IAAS/P,EAAgB,IACrE,MAAWC,GAAiBA,EAAgB8P,IAAS9P,EAAgB,GACzEkK,EAAKnK,cAAgBA,EACrBmK,EAAKlK,cAAgBA,EAGd9pB,qBAAqBo7B,EAAciK,EAAoB/Y,EAA2B2G,EAA4BY,EAAmBG,EAAYrhB,GACpJ,IAAI3hB,EAAqB2hB,EAAW7gB,cAChCq1C,EAAwC,IAAnBnT,EAAK5K,YAAY,GAC1C,MAAMK,GAA2BuK,EAAKvK,gBACtC,IAAI/yB,GAAkBs9B,EAAKzK,YAC3B,MAAMC,GAAuBwK,EAAKxK,YAClC,IAAIN,GAAkB8K,EAAK9K,OAE3B,MAAM8B,EAAwBgJ,EAAKhJ,aACnC,IAAI+a,GAAmB/R,EAAKrK,OACxBqc,EAAkBhb,EAAe,EAAM+a,EAC3C,MAAME,GAAwBjS,EAAKpK,YAC7Bsc,EAAuBlb,EAAe,EAAMib,EAClD,IAAIj4B,EAA0BgmB,EAAKlJ,qBAC/BC,EAA+BiJ,EAAKjJ,qBACpClB,GAAyBmK,EAAKnK,cAC9BC,GAAyBkK,EAAKlK,cAE9Bsd,EAAiBpT,EAAK7K,OAAO,GAAK,EAAKr4B,EAAOuB,gBAE5B,GAAlB2hC,EAAK7K,OAAO,KAASie,EAAQnc,EAAMyc,uBAAuB12C,GAAQm2C,GAEtE,MAAMM,EAA8B91C,KAAKyB,IAAI,EAAK+zC,GAE5Cx7B,EAAoB2gB,EAAoBuH,EAC9CvH,GAAqB0H,EAAKhL,aAE1B,IAMI2d,EANAC,EAAwB5S,EAAK3J,mBAC7BE,EAA6ByJ,EAAKzJ,mBAClCsc,EAAwB7S,EAAK1J,mBAC7BE,EAA6BwJ,EAAKxJ,mBAClCvB,EAAsB+K,EAAKvJ,iBAC3BE,EAA2BqJ,EAAKrJ,iBAGpC,KAAO2B,EAAoB3gB,GAAW,CACrC,MAAMg8B,EAA2B,EAARP,EACnBr1C,EAA2B,MAAX41C,EACtB,IAAIC,EAAqB52C,EAAKe,GAC9B,MAAM81C,EAAqBT,EAAQO,EACnCC,IAAe52C,EAAKe,EAAQ,GAAK61C,GAAcC,EAE/C3e,IAAW0e,EAAa1e,GAAUue,EAGlC5d,GAAiBkc,GAAW7c,EAASW,GADZ7b,EAAkBA,GAAmB,EAAM+3B,KACHlc,EAAgBC,IACjFA,GAAiBkc,GAAWnc,EAAgBC,GAE5Csd,GAASD,EACTpB,GAAWE,EACXD,GAAWE,EACXiB,GAAc1d,EACdzb,GAAmB+c,EAEnB,MAAMmc,EAAiBpd,EAAgBpzB,EACvCA,GAAU8yB,EASVmd,EAAS1d,EAAc,EAAI,CAAC,EAAG,EAA0B,GAAL,GAAfA,IAAyBA,EAAe,GAAK,CAAqB,GAAL,EAAdA,GAAsBA,EAAc,EAAG,EAAG,GAE9Hoc,GAAM/Y,EAAoBqa,EAAO,IAAM1T,IAAuBiU,EAASN,GAAiB,EAAID,EAAO,IACnGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASN,EAAgBD,EAAO,GAClGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,GAAiB,EAAIF,EAAO,IACvGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,EAAgBF,EAAO,GAElGC,GAAiBrc,EACjBsc,GAAiBrc,EACjBvB,GAAe0B,EAEf2B,GAAqB,EAGtB0H,EAAK7K,OAAO,GAAKie,EAAQt2C,EAAOuB,gBAChC2hC,EAAK9K,OAASA,EAEd,MAAM0Q,EAAO,OACT,MAAY/P,GAAiBA,EAAgB+P,IAAS/P,EAAgB,IACtE,MAAWC,GAAiBA,EAAgB8P,IAAS9P,EAAgB,GACzEkK,EAAKnK,cAAgBA,EACrBmK,EAAKlK,cAAgBA,EAGd9pB,oBAAoBo7B,EAAciK,EAAoB/Y,EAA2B2G,EAA4BY,EAAmBG,EAAYrhB,GACnJ,IAAI3hB,EAAqB2hB,EAAWm1B,eAAe9T,EAAK/L,cACpDkf,EAAqBnT,EAAK5K,YAAY,GAAK9U,EAAWiF,2BAA2Bya,EAAK/L,cAC1F,MAAMwB,GAA2BuK,EAAKvK,gBACtC,IAAI/yB,GAAkBs9B,EAAKzK,YAC3B,MAAMC,GAAuBwK,EAAKxK,YAClC,IAAIN,GAAkB8K,EAAK9K,OAE3B,MAAM8B,EAAwBgJ,EAAKhJ,aACnC,IAAI+a,GAAmB/R,EAAKrK,OACxBqc,EAAkBhb,EAAe,EAAM+a,EAC3C,MAAME,GAAwBjS,EAAKpK,YAC7Bsc,EAAuBlb,EAAe,EAAMib,EAClD,IAAIj4B,EAA0BgmB,EAAKlJ,qBAC/BC,EAA+BiJ,EAAKjJ,qBACpClB,GAAyBmK,EAAKnK,cAC9BC,GAAyBkK,EAAKlK,cAE9Bsd,EAAiBpT,EAAK7K,OAAO,GAAK,EAAKr4B,EAAOuB,gBAE5B,GAAlB2hC,EAAK7K,OAAO,KAASie,EAAQnc,EAAMyc,uBAAuB12C,GAAQm2C,GAEtE,MAAMx7B,EAAoB2gB,EAAoBuH,EAC9CvH,GAAqB0H,EAAKhL,aAC1B,IAMI2d,EANAC,EAAwB5S,EAAK3J,mBAC7BE,EAA6ByJ,EAAKzJ,mBAClCsc,EAAwB7S,EAAK1J,mBAC7BE,EAA6BwJ,EAAKxJ,mBAClCvB,EAAsB+K,EAAKvJ,iBAC3BE,EAA2BqJ,EAAKrJ,iBAEpC,KAAO2B,EAAoB3gB,GAAW,CACrC,MAAMg8B,EAA2B,EAARP,EACnBr1C,EAA2B,MAAX41C,EACtBze,EAASl4B,EAAKe,GACd,MAAM81C,EAAqBT,EAAQO,EACnCze,IAAWl4B,EAAKe,EAAQ,GAAKm3B,GAAU2e,EAGvChe,GAAiBkc,GAAW7c,EAASW,GADZ7b,EAAkBA,GAAmB,EAAM+3B,KACHlc,EAAgBC,IACjFA,GAAiBkc,GAAWnc,EAAgBC,GAE5Csd,GAASD,EACTpB,GAAWE,EACXD,GAAWE,EACXiB,GAAc1d,EACdzb,GAAmB+c,EAEnB,MAAMmc,EAAiBpd,EAAgBpzB,EACvCA,GAAU8yB,EASVmd,EAAS1d,EAAc,EAAI,CAAC,EAAG,EAA0B,GAAL,GAAfA,IAAyBA,EAAe,GAAK,CAAqB,GAAL,EAAdA,GAAsBA,EAAc,EAAG,EAAG,GAE9Hoc,GAAM/Y,EAAoBqa,EAAO,IAAM1T,IAAuBiU,EAASN,GAAiB,EAAID,EAAO,IACnGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASN,EAAgBD,EAAO,GAClGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,GAAiB,EAAIF,EAAO,IACvGtB,GAAM/Y,EAAoBqa,EAAO,GAAK,GAAK1T,IAAuBiU,EAASL,EAAgBF,EAAO,GAElGC,GAAiBrc,EACjBsc,GAAiBrc,EACjBvB,GAAe0B,EAEf2B,GAAqB,EAEtB0H,EAAK7K,OAAO,GAAKie,EAAQt2C,EAAOuB,gBAChC2hC,EAAK9K,OAASA,EAEd,MAAM0Q,EAAO,OACT,MAAY/P,GAAiBA,EAAgB+P,IAAS/P,EAAgB,IACtE,MAAWC,GAAiBA,EAAgB8P,IAAS9P,EAAgB,GACzEkK,EAAKnK,cAAgBA,EACrBmK,EAAKlK,cAAgBA,EAGd9pB,gBAAgBo7B,EAAciK,EAAoB/Y,EAA2B2G,EAA4BY,EAAmBG,EAAYrhB,GAG/I,IAAKyoB,EAAMh7B,KAAM,OAEjB,IAAI4V,EAAcllB,EAAO0K,SAAW,EAAIw4B,EAAKniB,QAAQ,GACjDoL,EAAsBtK,EAAWoD,YAAYC,GAEjDolB,EAAM9L,YAAY0E,EAAKpJ,kBAAmBoJ,EAAKnJ,gBAAiB7U,EAAKrD,EAAYsK,GAG7EA,GAAW9G,EAAW+F,kBAAkC,GAAdkf,EAAM1V,MAAasO,EAAKzL,WAAa6S,EAAM1P,KAAO56B,EAAOmF,aAAemlC,EAAMzP,KAC3HyP,EAAMh7B,KAAK8Z,SAASvH,EAAWpR,YAAYyU,IAAM4D,YAAYjH,EAAWmD,eAAeE,IAAMR,QAAU,EAE/FyH,GAAW9G,EAAW6E,aAC9BogB,EAAM5P,YAAa,GAIbxrB,8BAA8BhP,GACrC,IAAIo2C,EAAgBz1C,KAAKa,SAAW1B,EAAOuB,gBAIvC01C,EAA4B,MAARX,EACpB91C,EAAmBN,EAAK+2C,GAE5B,IAAK,IAAIC,EAA4B,IAAKA,EAAoB,EAAGA,IAAqB,CACrF,MAAMC,EAAqBF,EAFL,GAE2B,MAC3CG,EAAmBl3C,EAAKi3C,GAC9B,GAAI32C,EAAW42C,GAAY,EAAK,CAE/B,IAAK,IAAIh3C,EAAY,EAAGA,EAAI,GAAIA,IAAK,CACpC,MAAMi3C,EAA0BJ,EAAY,EAAK,MAC3CK,EAAwBp3C,EAAKm3C,GACnC,GAAI72C,EAAW82C,GAAiB,EAAK,CAEpC,MAAMC,EAAgBD,EAAgB92C,EACtC81C,EAAQW,EACJp2C,KAAKC,IAAIy2C,GAAS,OACrBjB,IAAU91C,EAAW+2C,GAEtBjB,EAAQz1C,KAAK0f,IAAI,EAAG+1B,GAASt2C,EAAOuB,gBACpC,MAEA01C,EAAYI,EACZ72C,EAAW82C,EAGb,MAEAL,EAAYE,EACZ32C,EAAW42C,EAIb,OAAOd,EAGDpnC,oCAAoCsoC,GAC1C,OAAQA,IAAqBx3C,EAAOwH,YAAc,EAAO,EAAM3G,KAAKuB,IAAI,EAAGpC,EAAOyH,eAAiB+vC,GAE7FtoC,oCAAoCwjC,GAC1C,OAAQA,GAAc,GAAQ1yC,EAAOwH,YAAc,EAAI3G,KAAKyB,IAAItC,EAAOwH,YAAc3G,KAAK6B,IAAIgwC,GAAc7xC,KAAK8B,IAAO3C,EAAOyH,gBAEzHyH,8BAA8BuoC,GACpC,OAAO52C,KAAKuB,IAAIvB,KAAK0f,IAAI,EAAKk3B,GAAc,EAAK,KAE3CvoC,8BAA8BwjC,GACpC,OAAsD,EAA/C7xC,KAAKuB,IAAIvB,KAAK0f,IAAI,EAAKmyB,GAAa,EAAI,KAGxCxjC,oBACP,GAAiB,MAAbC,KAAKG,KAAc,OAAO,EAC9B,IAAIkmB,EAAyBrmB,KAAKG,KAAKooC,oBAIvC,OAHIvoC,KAAKsxB,YAAYpb,EAAW2E,UAAU,KACzCwL,EAAiBrmB,KAAK0zB,YAAYxd,EAAW2E,UAAU,IAEjD7a,KAAK0wB,6BAA6BrK,GAGlCtmB,6BAA6BsmB,GACpC,MAAMmiB,EAAyBniB,EAAiB,GAC1CoiB,EAAyB53C,EAAOmF,aAAewyC,EAC/CE,EAAwB73C,EAAOoF,aAAewyC,EACpD,OAAOzoC,KAAKirB,iBAAmByd,GAt1BR1d,EAAAkZ,qBAA6C,GAwatDlZ,EAAAqZ,kBAA8B,+yGA0ERxzC,EAAO+K,eAAiB,yTAQ3D4D,MAAM,MAEOwrB,EAAAwZ,wBAAoC,kKAGL3zC,EAAOgL,aAAe,mQAIlE2D,MAAM,MCnuMT,MAAMgxB,EAAEA,EAACmY,OAAEA,EAAMC,IAAEA,EAAGC,GAAEA,GAAEC,MAAEA,IAAUvqC,GAChCwqC,IAAEA,GAAGC,OAAEA,GAAMC,KAAEA,GAAIC,KAAEA,IAAStqC,EAEpChC,SAAS2M,KAAK5M,YAAY4B,EAAKJ,MAAM,CAAEzG,KAAM,YAAc,8BAE/CoI,EAAYyH,mCACPzH,EAAYsH,sSAcjBtH,EAAY+H,uKAQP/H,EAAYgI,qCACjBhI,EAAYyH,yJAMPzH,EAAYiI,sVAeZjI,EAAYyH,yvBAiBZzH,EAAYyH,00BAeNzH,EAAYsH,+PAUlBtH,EAAYgI,mKAMZhI,EAAYyH,kPAMZzH,EAAYiI,uJAMZjI,EAAYgI,8IAGZhI,EAAYiI,+KAOZjI,EAAYyH,sKAOZzH,EAAYgI,iKAIZhI,EAAYiI,mJAMZjI,EAAYyH,oDAK7BzH,EAAYqpC,SAAS,mBAErB,IAGIC,GAHAC,GAA0B,KAC1BC,IAA+B,WAAhB53C,KAAKa,WAA2B,GAAGg3C,SAAS,IAC3DC,IAAgC,EAEhCC,IAAuB,EACvBC,GAAwB,EACxBC,GAAiC,EACjCC,GAA+B,EAEnC,MAAMzO,GAAe,IAAInQ,EACzB,IAAI6e,GAAgChB,GAAG,CAAE1qC,MAAO,qEAAuE,IACnH2rC,GAA8BtZ,EAAE,CAAEuZ,OAAQ,OAAQ5rC,MAAO,kBAAoB,UAC7E6rC,GAA8BxZ,EAAE,CAAEyZ,KAAM,qBAAsB9rC,MAAO,kBAAoB,cACzF+rC,GAA+B1Z,EAAE,CAAEyZ,KAAM,qBAAsB9rC,MAAO,kBAAoB,WAC1FgsC,GAAoC3Z,EAAE,CAAEuZ,OAAQ,OAAQ5rC,MAAO,kBAAoB,gBAEnFisC,IAA4B,EAChC,MAAMC,GAAgC1B,EAAO,CAAExqC,MAAO,iDAChDmsC,GAAsC1B,EAAI,CAAEzqC,MAAO,wHACxDksC,IAEKE,GAA2BrB,GAAK,CAAEsB,EAAG,0KACrCC,GAAgC9B,EAAO,CAAE/qB,MAAO,OAAQzf,MAAO,8FAAgG4qC,GAAI,CAAE2B,MAAO,GAAIC,OAAQ,GAAIC,QAAS,aAC1ML,KAGKM,GAA4B9B,GAAI,CAAE5qC,MAAO,4DAA6DysC,QAAS,aACpH1B,GAAK,CAAE4B,KAAMhrC,EAAYgI,mBAAoB0iC,EAAG,4FAE3CO,GAAiCjC,GAAM,CAAElrB,MAAO,SAAUlmB,KAAM,QAASlD,MAAO,GAAIrB,IAAK,EAAGie,IAAK,GAAI45B,KAAM,EAAG7sC,MAAO,kDAErH8sC,GAA0BlC,GAAI,CAAE2B,MAAO,GAAIC,OAAQ,GAAIC,QAAS,aACrE5B,GAAO,CAAEkC,GAAI,IAAKC,GAAI,IAAKC,EAAG,MAAOC,eAAgB,IAAKC,OAAQ,eAAgBR,KAAM,SACxF5B,GAAK,CAAEoC,OAAQ,eAAgBD,eAAgB,IAAKb,EAAG,wCAAyCM,KAAM,UAEjGS,GAAgC5C,EAAO,CAAE/qB,MAAO,OAAQzf,MAAO,8FACpE8sC,IAGKO,GAA0BzC,GAAI,CAAE5qC,MAAO,iEACvCmJ,GAA2BshC,EAAI,CAAEzqC,MAAO,8EAA8E2B,EAAYwH,oCAClImkC,GAAoC7C,EAAI,CAAEzqC,MAAO,oEAAsEqtC,GAAUlkC,IACjIokC,GAAyC9C,EAAI,CAAEzqC,MAAO,sHAAwHstC,IAE9KE,GAAiC/sC,EAAIqqC,KAAK,CAAE2C,iBAAkB,OAAQlB,MAAO,MAAOC,OAAQ,MAAOkB,EAAG,KAAMC,EAAG,MAAOhB,KAAMhrC,EAAYgI,qBACxIikC,GAA+BntC,EAAIqqC,KAAK,CAAE2C,iBAAkB,OAAQjB,OAAQ,MAAOD,MAAO,KAAMmB,EAAG,KAAMC,EAAG,MAAOhB,KAAM,wBACzHpwB,GAA+B9b,EAAIqqC,KAAK,CAAE2C,iBAAkB,OAAQlB,MAAO,MAAOC,OAAQ,MAAOkB,EAAG,KAAMC,EAAG,MAAOhB,KAAMhrC,EAAYiI,gBACtIikC,GAAwBptC,EAAIqtC,KAAK,CAAEC,aAAc,OAAQh0C,OAAQ,QACjEi0C,GAAwBvtC,EAAIqtC,KAAK,CAAEC,aAAc,SAAUh0C,OAAQ,QACnEk0C,GAAwBxtC,EAAIqtC,KAAK,CAAEC,aAAc,MAAOh0C,OAAQ,SAChEm0C,GAA+BztC,EAAI0tC,eAAe,CAAEhD,GAAI,cAAeiD,cAAe,kBAAoBP,GAAOG,GAAOC,IACxHI,GAAuB5tC,EAAI4tC,KAAK,GAAIH,IACpCI,GAAoC7tC,EAAImqC,IAAI,CAAE5qC,MAAO,sDAAuDusC,MAAO,QAASC,OAAQ,OAAQ+B,oBAAqB,QACtKF,GACAb,GACAI,GACArxB,IAoBD,SAASiyB,KACR,IAAIC,EAAiBC,SAASC,KAC9B,GAAIzD,IAAYuD,GAAoB,IAAVA,EAA1B,CAEAvD,GAAWuD,EAEa,KAApBA,EAAOG,OAAO,KACjBH,EAASA,EAAOrrB,UAAU,IAG3B4oB,GAAezsC,aAAa,OAAQmvC,SAAS5C,MAE7C,IAAK,MAAM+C,KAAaJ,EAAOptC,MAAM,KAAM,CAC1C,IAAIytC,EAAsBD,EAAUn2B,QAAQ,KAC5C,IAAoB,GAAhBo2B,EAAmB,CACtB,IAAIC,EAAoBF,EAAUzrB,UAAU,EAAG0rB,GAC3Cz4C,EAAgBw4C,EAAUzrB,UAAU0rB,EAAc,GACtD,OAAQC,GACP,IAAK,OACJ/R,GAAMpN,QAAQv5B,GACd2mC,GAAMgS,cACFhS,GAAMh7B,OACT0pC,GAAUzjC,YAAc+0B,GAAMh7B,KAAKyd,OAEpCksB,GAASpsC,aAAa,OAAQ,OAASlJ,GACvC,MAID,IAAK,OACJ2mC,GAAM7P,gBAA4B,KAAT92B,EAAgB,GAAK,EAC9C44C,WAIFjS,GAAMpN,QAAQ6e,GACdzR,GAAMgS,cACNrD,GAASpsC,aAAa,OAAQ,OAASkvC,GAIzCS,MAOD,SAASC,KACJnS,GAAM7L,UACT8Z,GAAmBmE,sBAAsBD,IACrC3qB,aAAaC,QAAQ,aAAe0mB,IACvCkE,KAEDC,KAEAC,MAGGlE,IAAwBrO,GAAM7L,SACjCqe,KAKF,SAASD,KACR,GAAkB,MAAdvS,GAAMh7B,KAGT,OAFAua,GAAahd,aAAa,IAAK,WAC/BquC,GAAaruC,aAAa,QAAS,MAoBrC,IAAuBkwC,EAAyBC,EAjB/ClE,KACIA,IAA0B,IAC7BC,IAAwB,KAErBzO,GAAMh7B,KAAKua,aAAekvB,KAC7BA,GAAuBzO,GAAMh7B,KAAKua,aAClCivB,GAAyB,IAWJiE,EARRzS,GAAMh7B,KAAKua,aAQsBmzB,EARRjE,GASvCmC,GAAaruC,aAAa,QAAS,GAAKhM,KAAKyB,IAAI,IAAuB,IAAlBy6C,IACtDlzB,GAAahd,aAAa,IAAK,IAAM,EAAIhM,KAAKyB,IAAI,IAAsB,IAAjB06C,KARlD1S,GAAM7L,UACV5U,GAAahd,aAAa,IAAK,MAC/BquC,GAAaruC,aAAa,QAAS,OASrC,SAAS8vC,KACU,MAAdrS,GAAMh7B,OACe,MAApBipC,IAA0B0E,qBAAqB1E,IACnDA,GAAmB,KACfjO,GAAM7L,SACT6L,GAAMpI,QACN2a,OAEAvS,GAAM4S,OACNprB,aAAaqrB,QAAQ,WAAY1E,IACjCgE,OAGFK,KA4BD,SAASM,GAAoBC,GAC5BA,EAAMC,iBACNC,GAAqBF,EAAMG,SAAWH,EAAMI,OAQ7C,SAASC,GAAoBL,GAC5BE,GAAqBF,EAAMM,QAAQ,GAAGH,SAGvC,SAASD,GAAqBK,GAC7B,GAAIrE,IAAkC,MAAdjP,GAAMh7B,KAAc,CAC3C,MAAMuuC,EAA2BhD,GAAuBiD,wBACxDxT,GAAM7zB,SAAW6zB,GAAMh7B,KAAKqd,UAAYixB,EAASC,EAAaE,OAASF,EAAaG,MAAQH,EAAaE,MACzGzT,GAAM7I,yBACNmb,MAIF,SAASqB,KACR1E,IAAmB,EAGpB,SAAS2E,KACR,MAAMt4C,GAAkBs0C,GAAav2C,MACrC2mC,GAAM1kC,OAAS/E,KAAKyB,IAAI,EAAKzB,KAAKuB,IAAIwD,EAAS,GAAM,KAAQ/E,KAAKuB,IAAI,GAAMwD,EAAS,IAAQ,IAG9F,SAASg3C,KACR,GAAkB,MAAdtS,GAAMh7B,KAAc,CACvB,IAAI6uC,EAAc7T,GAAM7zB,SAAW6zB,GAAMh7B,KAAKqd,SAC9ClW,GAASnJ,MAAMywC,KAAQlF,GAAgBsF,EAAO,KAE9C,MAAMN,EAA2BhD,GAAuBiD,wBACxDjD,GAAuBuD,WAAaD,GAAOtF,GAAgBgF,EAAahE,QAI1E,SAAS2C,KAER,GADA7B,GAAS0D,UAAY,GACH,MAAd/T,GAAMh7B,KAAc,OAExB,MAAMuuC,EAA2BhD,GAAuBiD,wBAExD,IAAIQ,EACAC,EACAC,EAEJ,GAAI5F,GAAa,CAChB0F,EAAiBT,EAAa/D,OAC9ByE,EAAgB19C,KAAK0f,IAAI,EAAG1f,KAAKyB,IAAItC,EAAO2K,aAAc9J,KAAKgZ,MAAMykC,EAAc,MACnFE,EAAmC,GAAhBD,EAAqB,EACxC,MAAME,GAA0BH,EAAiB,GAAKE,EAChDE,EAA0B79C,KAAK0f,IAAI,EAAoB,EAAjBk+B,GAC5C5F,GAAgBh4C,KAAK0f,IAAIs9B,EAAahE,MAAO6E,EAAkBpU,GAAMh7B,KAAKqd,SAAW2d,GAAMh7B,KAAKod,iBAC1F,CACNmsB,GAAgBgF,EAAahE,MAC7B,MAAM8E,EAA+B99C,KAAK0f,IAAI,EAAGs4B,IAAiBvO,GAAMh7B,KAAKqd,SAAW2d,GAAMh7B,KAAKod,aAAe,GAClH4xB,EAAiBz9C,KAAKyB,IAAIu7C,EAAa/D,OAAQ6E,GAAwB3+C,EAAO6K,SAAW,GAAK,GAC9F0zC,EAAgB19C,KAAK0f,IAAI,EAAG1f,KAAKyB,IAAItC,EAAO2K,aAAc9J,KAAKgZ,MAAMykC,GAAkB,GAAKK,MAC5FH,EAAmC,GAAhBD,EAAqB,EAGzC3D,GAAkBttC,MAAMusC,MAAQhB,GAAgB,KAChD+B,GAAkBttC,MAAMwsC,OAASwE,EAAiB,KAClD3D,GAASrtC,MAAMusC,MAAQhB,GAAgB,KACvC8B,GAASrtC,MAAMwsC,OAASwE,EAAiB,KAEzC,MAAMM,EAAmB/F,GAAgBvO,GAAMh7B,KAAKqd,SAC9CkyB,EAAoBD,GAAYtU,GAAMh7B,KAAKod,YAAc1sB,EAAOmF,cAEhE25C,GAA2BR,EAAiB,GAAKE,EACjDO,GAA2BT,EAAiB,GAAKt+C,EAAOyK,UAE9D,IAAK,IAAI0iB,EAAc,EAAGA,EAAMmd,GAAMh7B,KAAKqd,SAAW,EAAGQ,IAAO,CAC/D,MAAM6xB,EAAiB7xB,GAAOmd,GAAMh7B,KAAKid,WAAaY,GAAOmd,GAAMh7B,KAAKid,UAAY+d,GAAMh7B,KAAKkd,WAAcvd,EAAY8H,WAAa9H,EAAYgI,mBAClJ0jC,GAAS7uC,YAAYssC,GAAK,CAAE4C,EAAG7tB,EAAMyxB,EAAW,EAAG3D,EAAG,EAAGpB,MAAO,EAAGC,OAAQwE,EAAgBrE,KAAM+E,KAGlG,IAAK,IAAIn2B,EAAiB,EAAGA,GAAU01B,EAAe11B,IACrD8xB,GAAS7uC,YAAYssC,GAAK,CAAE4C,EAAG,EAAGC,EAAY,GAATpyB,EAAci2B,EAAiBjF,MAAOhB,GAAeiB,OAAQgF,EAAkB,EAAG7E,KAAMhrC,EAAYmI,MAAO6nC,QAAS,OAG1J,IAAK,IAAI1vC,EAAkB+6B,GAAMh7B,KAAK8Z,SAAS/oB,OAAS,EAAIiqC,GAAMh7B,KAAK8c,gBAAiB7c,GAAW,EAAGA,IAAW,CAEhH,MAAM+N,EAAmBgtB,GAAMh7B,KAAK2e,kBAAkB1e,GAChD2vC,EAAsB5hC,EAAUyhC,EAAkBD,EAElDK,EAAiC7U,GAAMh7B,KAAK8Z,SAAS7Z,GAASsZ,OAC9Du2B,GAAyBb,EAAgB,GAAK,EAC9Cc,EAA+Br/C,EAAO2K,aAAe4zC,EAErDe,EAAoBD,EAAuB,EACjD,IAAIE,EAA6BJ,EAFP,IAGtBt+C,KAAKC,IAAIy+C,IAAuBH,EACnCG,EAAqB,EACXA,EAAqB,EAC/BA,GAAsBH,EAEtBG,GAAsBH,EAEvB,MAEMI,EAFkB3+C,KAAK0f,IAAI,EAAG1f,KAAKyB,IAAI+8C,EAAsBx+C,KAAKgZ,MAAMylC,EAAYC,KAEhDL,EAAc,GAAKZ,EAA+B,GAAdY,EAAoB,GAElG,IAAK,IAAI/xB,EAAc,EAAGA,EAAMmd,GAAMh7B,KAAKqd,SAAUQ,IAAO,CAC3D,MAAMD,EAA0Bod,GAAMh7B,KAAK0nB,WAAWznB,EAAS4d,GAC/D,GAAe,MAAXD,EAAiB,SACrB,MAAMuyB,EAAkBtyB,EAAMyxB,EAE9B,IAAK,IAAIx+C,EAAY,EAAGA,EAAI8sB,EAAQtL,MAAMvhB,OAAQD,IAAK,CACtD,MAAM0hB,EAAaoL,EAAQtL,MAAMxhB,GAEjC,IAAK,MAAMugB,KAASmB,EAAKf,QAAS,CACjC,MAAM44B,EAAY+F,GAAS/+B,EAAOmB,EAAKlB,MAAOkB,EAAKd,MAAOk+B,EAAc,GAAK,EAAGO,EAASD,EAASX,EAAWK,GACvGS,EAA8BtH,GAAK,CAAEsB,EAAGA,EAAGM,KAAMhrC,EAAYY,gBAAgBy6B,GAAMh7B,KAAMC,GAASW,iBACpGoN,IAASqiC,EAAYryC,MAAM2xC,QAAU7vB,OAAO,KAChDurB,GAAS7uC,YAAY6zC,MAMzB/C,KAGD,SAAS8C,GAAS/+B,EAAeC,EAAeI,EAAiB4+B,EAAgBH,EAAiBD,EAAiBX,EAAmBK,GACrI,IAAIvF,EAAY,KAAK8F,EAAUZ,GAAaj+B,EAAQI,EAAK,GAAGX,SAASm/B,EAAU7+B,EAAQu+B,EAAcU,GAAU5+B,EAAK,GAAGpb,OAAS,MAChI,IAAK,IAAIxF,EAAY,EAAGA,EAAI4gB,EAAK3gB,OAAQD,IAAK,CAC7C,MAAMohB,EAAeR,EAAK5gB,GAI1Bu5C,GAAK,KAHa8F,EAAUZ,GAAaj+B,EAAQY,EAAInB,SACnCm/B,EAAUN,GAAev+B,EAAQa,EAAIpE,UAEpCwiC,GADQp+B,EAAI5b,OAAS,MAGzC,IAAK,IAAIxF,EAAY4gB,EAAK3gB,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAClD,MAAMohB,EAAeR,EAAK5gB,GAI1Bu5C,GAAK,KAHa8F,EAAUZ,GAAaj+B,EAAQY,EAAInB,SACnCm/B,EAAUN,GAAev+B,EAAQa,EAAIpE,UAEpCwiC,GADQp+B,EAAI5b,OAAS,MAGzC,OAAO+zC,EAGR,SAASmD,KACJxS,GAAM7L,SACT+a,GAAWqG,UAAUjX,OAAO,cAC5B4Q,GAAWqG,UAAUC,IAAI,eACzBtG,GAAWzsB,MAAQ,gBACnBysB,GAAWuG,UAAY,UAEvBvG,GAAWqG,UAAUjX,OAAO,eAC5B4Q,GAAWqG,UAAUC,IAAI,cACzBtG,GAAWzsB,MAAQ,eACnBysB,GAAWuG,UAAY,QAExBpH,GAAuBrO,GAAM7L,QAG9B,SAAS8d,KACR7C,GAAS7sC,aAAa,QAAmC,GAA1By9B,GAAM7P,gBAAyBxrB,EAAY+H,WAAa/H,EAAYgI,oBAGpG,SAAS+oC,KACR5F,GAAS9sC,MAAM0xC,MAAQpG,GAAc3pC,EAAY+H,WAAa/H,EAAYgI,0BAhU3ElL,SAASk0C,KAAKn0C,YAAY+uC,IAC1B9uC,SAASk0C,KAAKn0C,YACbisC,EAAI,CAAEzqC,MAAO,yGACZmsC,GACAG,GACAI,GACAE,GACAQ,GACAkB,GACA5C,GACAC,GACAE,GACAE,GACAC,KAiWE4G,MAAQC,MAEXhH,GAAS7rC,MAAM8yC,QAAU,OACzB/G,GAAU/rC,MAAM8yC,QAAU,SAG1B9G,GAAehsC,MAAM8yC,QAAU,OACzB,UAAWznC,YAAY0gC,GAAU/rC,MAAM8yC,QAAU,SAGlB,MAAlCtuB,aAAaC,QAAQ,YACxBmoB,GAAav2C,MAAQmuB,aAAaC,QAAQ,WAE3CmsB,KAEArsB,OAAOwuB,iBAAiB,UAhUxB,WACC7D,QAgUD3qB,OAAOwuB,iBAAiB,WA3DxB,SAAsBhD,GACrB,OAAQA,EAAMiD,SACb,KAAK,GACJ3D,KACAU,EAAMC,iBACN,MACD,KAAK,IACJhT,GAAMiW,UACN3D,KACAS,EAAMC,iBACN,MACD,KAAK,IACJhT,GAAMkW,UACN5D,KACAS,EAAMC,qBA+CT3C,GAAS0F,iBAAiB,aA9O1B,SAA6BhD,GAC5B9D,IAAmB,EACnB6D,GAAoBC,MA6OrBxrB,OAAOwuB,iBAAiB,YAAajD,IACrCvrB,OAAOwuB,iBAAiB,UAAWpC,IACnCtD,GAAS0F,iBAAiB,cAvO1B,SAA6BhD,GAC5B9D,IAAmB,EACnBmE,GAAoBL,MAsOrB1C,GAAS0F,iBAAiB,YAAa3C,IACvC/C,GAAS0F,iBAAiB,WAAYpC,IACtCtD,GAAS0F,iBAAiB,cAAepC,IAEzCzE,GAAW6G,iBAAiB,QAAS1D,IACrC/C,GAAWyG,iBAAiB,SA3Q5B,YAC+B,GAA1B/V,GAAM7P,gBACT6P,GAAM7P,gBAAkB,EAExB6P,GAAM7P,iBAAmB,EAE1B8hB,QAsQDrC,GAAamG,iBAAiB,SAnQ9B,WACCvuB,aAAaqrB,QAAQ,SAAUjD,GAAav2C,OAC5Cu6C,QAkQDxD,GAAW2F,iBAAiB,SA/P5B,WACCzH,IAAeA,GACfoH,KACAxD,QA6PDrD,GAASkH,iBAAiB,SAtD1B,WAEC,IAAII,EAGJ,GAFAA,EAAM9nC,UAEF8nC,EAAIC,WAAaD,EAAIC,UAAUC,UAIlC,YAHAF,EAAIC,UAAUC,UAAU3E,SAAS5C,MAAMwH,OAAM,KAC5C/uB,OAAOgvB,OAAO,qBAAsB7E,SAAS5C,SAI/C,MAAM0H,EAAiC/0C,SAAS0C,cAAc,YAC9DqyC,EAAUf,UAAY/D,SAAS5C,KAC/BrtC,SAASk0C,KAAKn0C,YAAYg1C,GAC1BA,EAAUC,SACV,MAAMC,EAAqBj1C,SAASk1C,YAAY,QAChDH,EAAUlY,SACLoY,GAAWnvB,OAAOgvB,OAAO,aAAc7E,SAAS5C,SAsCtDC,GAAUgH,iBAAiB,SAnC3B,WACO1nC,UAAWuoC,MAAM,CAAEC,IAAKnF,SAAS5C,UAmCxCvnB,OAAOwuB,iBAAiB,aAAcvE,IAEtCA,KACAS,KACAyD,KACAlD","sourcesContent":["/*!\r\nCopyright (C) 2020 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\n//namespace beepbox {\r\nexport interface Dictionary<T> {\r\n\t[K: string]: T;\r\n}\r\n\r\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\r\n\tdictionary: Dictionary<T>;\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tcustom,\r\n\tsteady,\r\n\tpunch,\r\n\tflare,\r\n\ttwang,\r\n\tswell,\r\n\ttremolo,\r\n\ttremolo2,\r\n\tdecay,\r\n}\r\n\r\nexport const enum InstrumentType {\r\n\tchip = 0,\r\n\tfm = 1,\r\n\tnoise = 2,\r\n\tspectrum = 3,\r\n\tdrumset = 4,\r\n\tharmonics = 5,\r\n\tpwm = 6,\r\n\tcustomChipWave = 7,\r\n\tmod = 8,\r\n\tlength,\r\n}\r\n\r\nexport interface BeepBoxOption {\r\n\treadonly index: number;\r\n\treadonly name: string;\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n\treadonly flags: ReadonlyArray<boolean>;\r\n\treadonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n\treadonly isWhiteKey: boolean;\r\n\treadonly basePitch: number;\r\n}\r\n\r\nexport interface Rhythm extends BeepBoxOption {\r\n\treadonly stepsPerBeat: number;\r\n\t//readonly ticksPerArpeggio: number;\r\n\t//readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>>;\r\n\treadonly roundUpThresholds: number[] | null;\r\n}\r\n\r\nexport interface ChipWave extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly samples: Float64Array;\r\n}\r\n\r\nexport interface ChipNoise extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly basePitch: number;\r\n\treadonly pitchFilterMult: number;\r\n\treadonly isSoft: boolean;\r\n\tsamples: Float32Array | null;\r\n}\r\n\r\nexport interface Transition extends BeepBoxOption {\r\n\treadonly isSeamless: boolean;\r\n\treadonly attackSeconds: number;\r\n\treadonly releases: boolean;\r\n\treadonly releaseTicks: number;\r\n\treadonly slides: boolean;\r\n\treadonly slideTicks: number;\r\n}\r\n\r\nexport interface Vibrato extends BeepBoxOption {\r\n\treadonly amplitude: number;\r\n\treadonly type: number;\r\n\treadonly delayParts: number;\r\n}\r\n\r\nexport interface VibratoType extends BeepBoxOption {\r\n\treadonly periodsSeconds: number[];\r\n\treadonly period: number;\r\n}\r\n\r\nexport interface Interval extends BeepBoxOption {\r\n\treadonly spread: number;\r\n\treadonly offset: number;\r\n\treadonly volume: number;\r\n\treadonly sign: number;\r\n}\r\n\r\nexport interface Chord extends BeepBoxOption {\r\n\treadonly harmonizes: boolean;\r\n\treadonly customInterval: boolean;\r\n\treadonly arpeggiates: boolean;\r\n\treadonly isCustomInterval: boolean;\r\n\treadonly strumParts: number;\r\n}\r\n\r\nexport interface Algorithm extends BeepBoxOption {\r\n\treadonly carrierCount: number;\r\n\treadonly associatedCarrier: ReadonlyArray<number>;\r\n\treadonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface OperatorFrequency extends BeepBoxOption {\r\n\treadonly mult: number;\r\n\treadonly hzOffset: number;\r\n\treadonly amplitudeSign: number;\r\n}\r\n\r\nexport interface Envelope extends BeepBoxOption {\r\n\treadonly type: EnvelopeType;\r\n\treadonly speed: number;\r\n}\r\n\r\nexport interface Feedback extends BeepBoxOption {\r\n\treadonly indices: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport class Config {\r\n\t// Params for post-processing compressor\r\n\tpublic static thresholdVal: number = -10;\r\n\tpublic static kneeVal: number = 40;\r\n\tpublic static ratioVal: number = 12;\r\n\tpublic static attackVal: number = 0;\r\n\tpublic static releaseVal: number = 0.25;\r\n\r\n\tpublic static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\r\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\r\n\t\t{ name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\r\n\t\t{ name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\r\n\t\t{ name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\r\n\t\t{ name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\r\n\t\t{ name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\r\n\t\t{ name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\r\n\t\t{ name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\r\n\t\t{ name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\r\n\t\t{ name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\r\n\t\t{ name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\r\n\t\t{ name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\r\n\t\t{ name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\r\n\t\t{ name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\r\n\t\t{ name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\r\n\t\t{ name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\r\n\t\t{ name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\r\n\t\t{ name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\r\n\t\t{ name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\r\n\t\t{ name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\r\n\t\t{ name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\r\n\r\n\r\n\t]);\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{ name: \"0\", isWhiteKey: true, basePitch: 0 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{ name: \"1\", isWhiteKey: false, basePitch: 1 }, // TODO: I lowered these by 12, idk if I still want to have midi import so I might have to adjust if I don't.\r\n\t\t{ name: \"2\", isWhiteKey: true, basePitch: 2 },\r\n\t\t{ name: \"3\", isWhiteKey: false, basePitch: 3 },\r\n\t\t{ name: \"4\", isWhiteKey: true, basePitch: 4 },\r\n\t\t{ name: \"5\", isWhiteKey: true, basePitch: 5 },\r\n\t\t{ name: \"6\", isWhiteKey: false, basePitch: 6 },\r\n\t\t{ name: \"7\", isWhiteKey: true, basePitch: 7 },\r\n\t\t{ name: \"8\", isWhiteKey: false, basePitch: 8 },\r\n\t\t{ name: \"9\", isWhiteKey: true, basePitch: 9 },\r\n\t\t{ name: \"A\", isWhiteKey: false, basePitch: 10 },\r\n\t\t{ name: \"B\", isWhiteKey: true, basePitch: 11 },\r\n\t]);\r\n\t// public static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1]; // key relic (TODO)\r\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\r\n\tpublic static readonly tempoMin: number = 16;\r\n\tpublic static readonly tempoMax: number = 512;\r\n\tpublic static readonly reverbRange: number = 32;\r\n\tpublic static readonly beatsPerBarMin: number = 1;\r\n\tpublic static readonly beatsPerBarMax: number = 32;\r\n\tpublic static readonly barCountMin: number = 1;\r\n\tpublic static readonly barCountMax: number = 512;\r\n\tpublic static readonly instrumentsPerChannelMin: number = 1;\r\n\tpublic static readonly instrumentsPerChannelMax: number = 16;\r\n\tpublic static readonly partsPerBeat: number = 24;\r\n\tpublic static readonly ticksPerPart: number = 2;\r\n\tpublic static readonly ticksPerArpeggio: number = 3;\r\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];\r\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\r\n\t\t// { name: \"÷1 (simplets '_')\", stepsPerBeat: 1, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t// { name: \"÷2 (duplets)\", stepsPerBeat: 2, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\r\n\t\t{ name: \"÷5\", stepsPerBeat: 5, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷6\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷8\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷9\", stepsPerBeat: 9, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷12\", stepsPerBeat: 12, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷16\", stepsPerBeat: 16, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷24 (freehand)\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t]);\r\n\r\n\tpublic static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"custom chip\", \"mod\"];\r\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, true];\r\n\tpublic static readonly chipWaves: DictionaryArray<ChipWave> = toNameMap([\r\n\t\t{ name: \"rounded\", volume: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\r\n\t\t{ name: \"triangle\", volume: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\r\n\t\t{ name: \"square\", volume: 0.5, samples: centerWave([1.0, -1.0]) },\r\n\t\t{ name: \"1/4 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"1/8 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"sawtooth\", volume: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n\t\t{ name: \"double saw\", volume: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n\t\t{ name: \"double pulse\", volume: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"spiky\", volume: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\r\n\t\t{ name: \"sine\", volume: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\r\n\t\t{ name: \"flute\", volume: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\r\n\t\t{ name: \"harp\", volume: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\r\n\t\t{ name: \"sharp clarinet\", volume: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\r\n\t\t{ name: \"soft clarinet\", volume: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n\t\t{ name: \"alto sax\", volume: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\r\n\t\t{ name: \"bassoon\", volume: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\r\n\t\t{ name: \"trumpet\", volume: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\r\n\t\t{ name: \"electric guitar\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\r\n\t\t{ name: \"organ\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\r\n\t\t{ name: \"pan flute\", volume: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\r\n\t\t{ name: \"glitch\", volume: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n\t]);\r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\r\n\t\t{ name: \"retro\", volume: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"white\", volume: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\r\n\t\t{ name: \"clang\", volume: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"buzz\", volume: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"hollow\", volume: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\r\n\t\t{ name: \"shine\", volume: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"deep\", volume: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\r\n\t\t{ name: \"cutter\", volume: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"metallic\", volume: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t]);\r\n\tpublic static readonly filterCutoffMaxHz: number = 8000; // This is carefully calculated to correspond to no change when filtering at 48000 samples per second.\r\n\tpublic static readonly filterCutoffMinHz: number = 1;\r\n\tpublic static readonly filterMax: number = 0.95;\r\n\tpublic static readonly filterMaxResonance: number = 0.95;\r\n\tpublic static readonly filterCutoffRange: number = 11;\r\n\tpublic static readonly filterResonanceRange: number = 8;\r\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\r\n\t\t{ name: \"seamless\", isSeamless: true, attackSeconds: 0.0, releases: false, releaseTicks: 1, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard\", isSeamless: false, attackSeconds: 0.0, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft\", isSeamless: false, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"slide\", isSeamless: true, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: true, slideTicks: 3 },\r\n\t\t{ name: \"cross fade\", isSeamless: false, attackSeconds: 0.04, releases: true, releaseTicks: 6, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard fade\", isSeamless: false, attackSeconds: 0.0, releases: true, releaseTicks: 48, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"medium fade\", isSeamless: false, attackSeconds: 0.0125, releases: true, releaseTicks: 72, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft fade\", isSeamless: false, attackSeconds: 0.06, releases: true, releaseTicks: 96, slides: false, slideTicks: 6 },\r\n\t]);\r\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\r\n\t\t{ name: \"none\", amplitude: 0.0, type: 0, delayParts: 0 },\r\n\t\t{ name: \"light\", amplitude: 0.15, type: 0, delayParts: 0 },\r\n\t\t{ name: \"delayed\", amplitude: 0.3, type: 0, delayParts: 18 },\r\n\t\t{ name: \"heavy\", amplitude: 0.45, type: 0, delayParts: 0 },\r\n\t\t{ name: \"shaky\", amplitude: 0.1, type: 1, delayParts: 0 },\r\n\t]);\r\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\r\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\r\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\r\n\t]);\r\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\r\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\r\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\r\n\tpublic static readonly intervals: DictionaryArray<Interval> = toNameMap([\r\n\t\t{ name: \"union\", spread: 0.0, offset: 0.0, volume: 0.7, sign: 1.0 },\r\n\t\t{ name: \"shimmer\", spread: 0.018, offset: 0.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"hum\", spread: 0.045, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"honky tonk\", spread: 0.09, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"dissonant\", spread: 0.25, offset: 0.0, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"fifth\", spread: 3.5, offset: 3.5, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"octave\", spread: 6.0, offset: 6.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"bowed\", spread: 0.02, offset: 0.0, volume: 1.0, sign: -1.0 },\r\n\t\t{ name: \"piano\", spread: 0.01, offset: 0.0, volume: 1.0, sign: 0.7 },\r\n\t]);\r\n\tpublic static readonly effectsNames: ReadonlyArray<string> = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\r\n\tpublic static readonly volumeRange: number = 50;\r\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\r\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\r\n\tpublic static readonly volumeLogScale: number = 0.1428;\r\n\tpublic static readonly panCenter: number = 50;\r\n\tpublic static readonly panMax: number = Config.panCenter * 2;\r\n\tpublic static readonly detuneMin: number = -50;\r\n\tpublic static readonly detuneMax: number = 50;\r\n\tpublic static readonly songDetuneMin: number = -250;\r\n\tpublic static readonly songDetuneMax: number = 250;\r\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\r\n\t\t{ name: \"harmony\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"strum\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 1 },\r\n\t\t{ name: \"arpeggio\", harmonizes: false, customInterval: false, arpeggiates: true, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"custom interval\", harmonizes: true, customInterval: true, arpeggiates: true, isCustomInterval: true, strumParts: 0 },\r\n\t]);\r\n\tpublic static readonly maxChordSize: number = 9; // Pandora's box... ?0_0\r\n\tpublic static readonly operatorCount: number = 4;\r\n\tpublic static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\r\n\t\t{ name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\r\n\t\t{ name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\r\n\t\t{ name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\r\n\t\t{ name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\r\n\t\t{ name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\r\n\t\t{ name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\r\n\t\t{ name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\r\n\t\t{ name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\r\n\t\t{ name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\r\n\t\t{ name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\r\n\t\t{ name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\r\n\t]);\r\n\tpublic static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091];\r\n\tpublic static readonly operatorAmplitudeMax: number = 15;\r\n\tpublic static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\r\n\t\t{ name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\r\n\t\t{ name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\r\n\t\t{ name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t]);\r\n\tpublic static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\r\n\t\t{ name: \"custom\", type: EnvelopeType.custom, speed: 0.0 },\r\n\t\t{ name: \"steady\", type: EnvelopeType.steady, speed: 0.0 },\r\n\t\t{ name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\r\n\t\t{ name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\r\n\t\t{ name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\r\n\t\t{ name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\r\n\t\t{ name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\r\n\t\t{ name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\r\n\t\t{ name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\r\n\t\t{ name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\r\n\t\t{ name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\r\n\t\t{ name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\r\n\t\t{ name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\r\n\t\t{ name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\r\n\t\t{ name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\r\n\t\t{ name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\r\n\t\t{ name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\r\n\t\t{ name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\r\n\t\t{ name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\r\n\t\t{ name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\r\n\t\t{ name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\r\n\t]);\r\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\r\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\r\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\r\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\r\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\r\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\r\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\r\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\r\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\r\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\r\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\r\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\r\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\r\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\r\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\r\n\t\t{ name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\r\n\t]);\r\n\tpublic static readonly chipNoiseLength: number = 1 << 15; // 32768\r\n\tpublic static readonly spectrumBasePitch: number = 24;\r\n\tpublic static readonly spectrumControlPoints: number = 30;\r\n\tpublic static readonly spectrumControlPointsPerOctave: number = 7;\r\n\tpublic static readonly spectrumControlPointBits: number = 3;\r\n\tpublic static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\r\n\tpublic static readonly harmonicsControlPoints: number = 28;\r\n\tpublic static readonly harmonicsRendered: number = 64;\r\n\tpublic static readonly harmonicsControlPointBits: number = 3;\r\n\tpublic static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\r\n\tpublic static readonly harmonicsWavelength: number = 1 << 11; // 2048\r\n\tpublic static readonly pulseWidthRange: number = 50;\r\n\tpublic static readonly pitchChannelCountMin: number = 1;\r\n\tpublic static readonly pitchChannelCountMax: number = 32;\r\n\tpublic static readonly noiseChannelCountMin: number = 0;\r\n\tpublic static readonly noiseChannelCountMax: number = 8;\r\n\tpublic static readonly modChannelCountMin: number = 0;\r\n\tpublic static readonly modChannelCountMax: number = 8;\r\n\tpublic static readonly noiseInterval: number = 6;\r\n\tpublic static readonly centerFrequency = 425.854656\r\n\tpublic static readonly pitchesPerOctave: number = 19;\r\n\tpublic static readonly drumCount: number = 12;\r\n\tpublic static readonly modCount: number = 6;\r\n\tpublic static readonly pitchOctaves: number = 9; // prev 8\r\n\tpublic static readonly maxScrollableOctaves: number = 5; // Largest number possible with any config setting\r\n\tpublic static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\r\n\tpublic static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\r\n\tpublic static readonly sineWaveLength: number = 1 << 8; // 256\r\n\tpublic static readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n\tpublic static readonly sineWave: Float64Array = generateSineWave();\r\n\r\n\t// Height of the small editor column for inserting/deleting rows, in pixels.\r\n\tpublic static readonly barEditorHeight: number = 10;\r\n\r\n}\r\n\r\nfunction centerWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = wave[i] - average;\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\nfunction centerAndNormalizeWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tlet magn: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t\tmagn += Math.abs(wave[i]);\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\tconst magnAvg: number = magn / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = (wave[i] - average) / (magnAvg);\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\n\r\n// The function arguments will be defined in FFT.ts, but I want\r\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\r\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\r\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\r\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\r\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null = null, scaleElementsByFactor: Function | null = null): Float32Array {\r\n\tlet wave: Float32Array | null = Config.chipNoises[index].samples;\r\n\tif (wave == null) {\r\n\t\twave = new Float32Array(Config.chipNoiseLength + 1);\r\n\t\tConfig.chipNoises[index].samples = wave;\r\n\r\n\t\tif (index == 0) {\r\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 1) {\r\n\t\t\t// White noise is just random values for each sample.\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t}\r\n\t\t} else if (index == 2) {\r\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 3) {\r\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 4) {\r\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\tdrawNoiseSpectrum(wave, 10, 11, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 11, 14, .6578, .6578, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 5) {\r\n\t\t\t// \"Shine\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 6) {\r\n\t\t\t// \"Deep\" drums from modbox!\r\n\t\t\tdrawNoiseSpectrum(wave, 1, 10, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 20, 14, -2, -2, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 7) {\r\n\t\t\t// \"Cutter\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1);\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 8) {\r\n\t\t\t// \"Metallic\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < 32768; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 + 0.5;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t}\r\n\r\n\t\twave[Config.chipNoiseLength] = wave[0];\r\n\t}\r\n\r\n\treturn wave;\r\n}\r\n\r\nexport function drawNoiseSpectrum(wave: Float32Array, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\r\n\tconst referenceOctave: number = 11;\r\n\tconst referenceIndex: number = 1 << referenceOctave;\r\n\tconst lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n\tconst highIndex: number = Math.min(Config.chipNoiseLength >> 1, Math.pow(2, highOctave) | 0);\r\n\tconst retroWave: Float32Array = getDrumWave(0);\r\n\tlet combinedAmplitude: number = 0.0;\r\n\tfor (let i: number = lowIndex; i < highIndex; i++) {\r\n\r\n\t\tlet lerped: number = lowPower + (highPower - lowPower) * (Math.log(i) / Math.LN2 - lowOctave) / (highOctave - lowOctave);\r\n\t\t//let amplitude: number = Math.pow(2, lerped);\r\n\t\t//let amplitude: number = Math.pow((lerped + 5) / 7, 4);\r\n\t\tlet amplitude: number = Math.pow(2, (lerped - 1) * Config.spectrumMax + 1) * lerped;\r\n\r\n\t\tamplitude *= Math.pow(i / referenceIndex, overallSlope);\r\n\r\n\t\tcombinedAmplitude += amplitude;\r\n\r\n\t\t// Add two different sources of psuedo-randomness to the noise\r\n\t\t// (individually they aren't random enough) but in a deterministic\r\n\t\t// way so that live spectrum editing doesn't result in audible pops.\r\n\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the \r\n\t\t// LFSR retro wave (effectively random), and also rotate the phase\r\n\t\t// of each sine wave based on the golden angle to disrupt the symmetry.\r\n\t\tamplitude *= retroWave[i];\r\n\t\tconst radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\r\n\r\n\t\twave[i] = Math.cos(radians) * amplitude;\r\n\t\twave[Config.chipNoiseLength - i] = Math.sin(radians) * amplitude;\r\n\t}\r\n\r\n\treturn combinedAmplitude;\r\n}\r\n\r\nfunction generateSineWave(): Float64Array {\r\n\tconst wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n\tfor (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n\t\twave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n\t}\r\n\treturn wave;\r\n}\r\n\r\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\r\n\tlet arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\r\n\tif (arpeggioPattern != null) {\r\n\t\tif (pitchCount == 2 && useFastTwoNoteArp == false) {\r\n\t\t\tarpeggioPattern = [0, 0, 1, 1];\r\n\t\t}\r\n\t\treturn arpeggioPattern[arpeggio % arpeggioPattern.length];\r\n\t} else {\r\n\t\treturn arpeggio % pitchCount;\r\n\t}\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n\tconst dictionary: Dictionary<T> = {};\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tconst value: any = array[i];\r\n\t\tvalue.index = i;\r\n\t\tdictionary[value.name] = <T>value;\r\n\t}\r\n\tconst result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\r\n\tresult.dictionary = dictionary;\r\n\treturn result;\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nexport function applyElementArgs<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, args: Array<any>): T {\n\tfor (const arg of args) {\n\t\tif (arg instanceof Node) {\n\t\t\telement.appendChild(arg);\n\t\t} else if (typeof arg === \"string\") {\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t} else if (typeof arg === \"function\") {\n\t\t\tapplyElementArgs(element, [arg()]);\n\t\t} else if (Array.isArray(arg)) {\n\t\t\tapplyElementArgs(element, arg);\n\t\t} else if (arg && typeof Symbol !== \"undefined\" && typeof arg[Symbol.iterator] === \"function\") {\n\t\t\tapplyElementArgs(element, [...arg]);\n\t\t} else if (arg && arg.constructor === Object && element instanceof Element) {\n\t\t\t// If the argument is a literal {} Object\n\t\t\tfor (const key of Object.keys(arg)) {\n\t\t\t\tconst value = arg[key];\n\t\t\t\t/*if (key === \"classList\") {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.classList.add(...value.split(\" \"));\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.classList.add(...value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid classList value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else*/ if (key === \"class\" /* || key === \"className\" */) {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.setAttribute(\"class\", value);\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.setAttribute(\"class\", [...value].join(\" \"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid \" + key + \" value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else if (key === \"style\") {\n\t\t\t\t\tif (value && value.constructor === Object) {\n\t\t\t\t\t\tfor (const styleKey of Object.keys(value)) {\n\t\t\t\t\t\t\tif (styleKey in (<HTMLElement | SVGElement>element).style) {\n\t\t\t\t\t\t\t\t// In practice, camelCase and kebab-case properties both work as properties on CSSStyleDeclaration objects.\n\t\t\t\t\t\t\t\t(<any> element).style[styleKey] = value[styleKey];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// CSS variables start with -- and must be set with setProperty.\n\t\t\t\t\t\t\t\t(<HTMLElement | SVGElement>element).style.setProperty(styleKey, value[styleKey]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\t// If value is a callback, set as a property instead trying to coerce to string.\n\t\t\t\t\t(<any>element)[key] = value;\n\t\t\t\t} else if (typeof(value) === \"boolean\") {\n\t\t\t\t\t// If value is boolean, set attribute if true, remove if false.\n\t\t\t\t\tif (value) element.setAttribute(key, \"\");\n\t\t\t\t\telse element.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\t// Default to setting attribute, as if writing html directly.\n\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Just convert unrecognized objects to text and append them.\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t}\n\t}\n\treturn element;\n}\n\nexport const svgNS: string = \"http://www.w3.org/2000/svg\";\n\nexport function parseHTML(...args: Array<any>): DocumentFragment {\n\treturn document.createRange().createContextualFragment(args.join());\n}\n\n//let svgParser: SVGSVGElement | null = null;\nexport function parseSVG(...args: Array<any>): DocumentFragment {\n\tconst fragment: DocumentFragment = document.createDocumentFragment();\n\t\n\t// Internet Explorer doesn't support the first method here, so I commented it out and used a slightly more complex one involving DOMParser below.\n\t/*\n\tif (svgParser === null) svgParser = <SVGSVGElement>document.createElementNS(svgNS, \"svg\");\n\tsvgParser.innerHTML = args.join();\n\twhile (svgParser.firstChild !== null) fragment.appendChild(svgParser.firstChild);\n\t*/\n\tconst svgParser: Element = new DOMParser().parseFromString(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + args.join() + \"</svg>\", \"image/svg+xml\").documentElement;\n\twhile (svgParser.firstChild !== null) {\n\t\tdocument.importNode(svgParser.firstChild, true);\n\t\tfragment.appendChild(svgParser.firstChild);\n\t}\n\t\n\treturn fragment;\n}\n\nexport function replaceScriptWith(...args: Array<any>): void {\n\tlet currentScript: HTMLScriptElement | SVGScriptElement | null = document.currentScript;\n\tif (currentScript == null) { // double-equals to intentionally include undefined in Internet Explorer.\n\t\t\n\t\t// Internet Explorer doens't support currentScript, try this method instead:\n\t\tif (document.readyState === \"loading\") {\n\t\t\tconst scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\"script\");\n\t\t\tcurrentScript = scripts[scripts.length - 1];\n\t\t}\n\t\t\n\t\tif (currentScript == null) {\n\t\t\tconsole.warn(\"Couldn't replace script because no script is currently being parsed and executed, maybe this is happening in a callback function or event handler instead?\");\n\t\t\treturn;\n\t\t}\n\t}\n\tif (currentScript.parentNode === null) {\n\t\tconsole.warn(\"Couldn't replace script element because it is not attached to a parent anymore, did you try to replace the same script more than once?\");\n\t\treturn;\n\t}\n\tcurrentScript.parentNode.replaceChild(applyElementArgs(document.createDocumentFragment(), args), currentScript);\n}\n\nexport function applyToElement<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, ...args: Array<any>): T {\n\tif (!(element instanceof Element || element instanceof DocumentFragment)) {\n\t\tconsole.warn(\"Couldn't apply to provided argument because it's not an element or DocumentFragment.\");\n\t\treturn element;\n\t}\n\treturn applyElementArgs(element, args);\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport {applyElementArgs, svgNS, parseHTML, parseSVG, replaceScriptWith, applyToElement} from \"./elements-base\";\nexport {replaceScriptWith, applyToElement};\n\ninterface HTMLElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => HTMLElement;\n\ta(...args: Array<any>): HTMLAnchorElement;\n\tabbr(...args: Array<any>): HTMLElement;\n\taddress(...args: Array<any>): HTMLElement;\n\tarea(...args: Array<any>): HTMLAreaElement;\n\tarticle(...args: Array<any>): HTMLElement;\n\taside(...args: Array<any>): HTMLElement;\n\taudio(...args: Array<any>): HTMLAudioElement;\n\tb(...args: Array<any>): HTMLElement;\n\tbase(...args: Array<any>): HTMLBaseElement;\n\tbdi(...args: Array<any>): HTMLElement;\n\tbdo(...args: Array<any>): HTMLElement;\n\tblockquote(...args: Array<any>): HTMLQuoteElement;\n\tbr(...args: Array<any>): HTMLBRElement;\n\tbutton(...args: Array<any>): HTMLButtonElement;\n\tcanvas(...args: Array<any>): HTMLCanvasElement;\n\tcaption(...args: Array<any>): HTMLTableCaptionElement;\n\tcite(...args: Array<any>): HTMLElement;\n\tcode(...args: Array<any>): HTMLElement;\n\tcol(...args: Array<any>): HTMLTableColElement;\n\tcolgroup(...args: Array<any>): HTMLTableColElement;\n\tdatalist(...args: Array<any>): HTMLDataListElement;\n\tdd(...args: Array<any>): HTMLElement;\n\tdel(...args: Array<any>): HTMLModElement;\n\tdetails(...args: Array<any>): HTMLDetailsElement;\n\tdfn(...args: Array<any>): HTMLElement;\n\tdialog(...args: Array<any>): HTMLDialogElement;\n\tdiv(...args: Array<any>): HTMLDivElement;\n\tdl(...args: Array<any>): HTMLDListElement;\n\tdt(...args: Array<any>): HTMLElement;\n\tem(...args: Array<any>): HTMLElement;\n\tembed(...args: Array<any>): HTMLEmbedElement;\n\tfieldset(...args: Array<any>): HTMLFieldSetElement;\n\tfigcaption(...args: Array<any>): HTMLElement;\n\tfigure(...args: Array<any>): HTMLElement;\n\tfooter(...args: Array<any>): HTMLElement;\n\tform(...args: Array<any>): HTMLFormElement;\n\th1(...args: Array<any>): HTMLHeadingElement;\n\th2(...args: Array<any>): HTMLHeadingElement;\n\th3(...args: Array<any>): HTMLHeadingElement;\n\th4(...args: Array<any>): HTMLHeadingElement;\n\th5(...args: Array<any>): HTMLHeadingElement;\n\th6(...args: Array<any>): HTMLHeadingElement;\n\theader(...args: Array<any>): HTMLElement;\n\thr(...args: Array<any>): HTMLHRElement;\n\ti(...args: Array<any>): HTMLElement;\n\tiframe(...args: Array<any>): HTMLIFrameElement;\n\timg(...args: Array<any>): HTMLImageElement;\n\tinput(...args: Array<any>): HTMLInputElement;\n\tins(...args: Array<any>): HTMLModElement;\n\tkbd(...args: Array<any>): HTMLElement;\n\tlabel(...args: Array<any>): HTMLLabelElement;\n\tlegend(...args: Array<any>): HTMLLegendElement;\n\tli(...args: Array<any>): HTMLLIElement;\n\tlink(...args: Array<any>): HTMLLinkElement;\n\tmain(...args: Array<any>): HTMLElement;\n\tmap(...args: Array<any>): HTMLMapElement;\n\tmark(...args: Array<any>): HTMLElement;\n\tmenu(...args: Array<any>): HTMLMenuElement;\n\tmenuitem(...args: Array<any>): HTMLUnknownElement;\n\tmeta(...args: Array<any>): HTMLMetaElement;\n\tmeter(...args: Array<any>): HTMLMeterElement;\n\tnav(...args: Array<any>): HTMLElement;\n\tnoscript(...args: Array<any>): HTMLElement;\n\tobject(...args: Array<any>): HTMLObjectElement;\n\tol(...args: Array<any>): HTMLOListElement;\n\toptgroup(...args: Array<any>): HTMLOptGroupElement;\n\toption(...args: Array<any>): HTMLOptionElement;\n\toutput(...args: Array<any>): HTMLOutputElement;\n\tp(...args: Array<any>): HTMLParagraphElement;\n\tparam(...args: Array<any>): HTMLParamElement;\n\tpicture(...args: Array<any>): HTMLPictureElement;\n\tpre(...args: Array<any>): HTMLPreElement;\n\tprogress(...args: Array<any>): HTMLProgressElement;\n\tq(...args: Array<any>): HTMLQuoteElement;\n\trp(...args: Array<any>): HTMLElement;\n\trt(...args: Array<any>): HTMLElement;\n\truby(...args: Array<any>): HTMLElement;\n\ts(...args: Array<any>): HTMLElement;\n\tsamp(...args: Array<any>): HTMLElement;\n\tscript(...args: Array<any>): HTMLScriptElement;\n\tsection(...args: Array<any>): HTMLElement;\n\tselect(...args: Array<any>): HTMLSelectElement;\n\tsmall(...args: Array<any>): HTMLElement;\n\tsource(...args: Array<any>): HTMLSourceElement;\n\tspan(...args: Array<any>): HTMLSpanElement;\n\tstrong(...args: Array<any>): HTMLElement;\n\tstyle(...args: Array<any>): HTMLStyleElement;\n\tsub(...args: Array<any>): HTMLElement;\n\tsummary(...args: Array<any>): HTMLElement;\n\tsup(...args: Array<any>): HTMLElement;\n\ttable(...args: Array<any>): HTMLTableElement;\n\ttbody(...args: Array<any>): HTMLTableSectionElement;\n\ttd(...args: Array<any>): HTMLTableCellElement;\n\ttemplate(...args: Array<any>): HTMLTemplateElement;\n\ttextarea(...args: Array<any>): HTMLTextAreaElement;\n\ttfoot(...args: Array<any>): HTMLTableSectionElement;\n\tth(...args: Array<any>): HTMLTableCellElement;\n\tthead(...args: Array<any>): HTMLTableSectionElement;\n\ttime(...args: Array<any>): HTMLTimeElement;\n\ttitle(...args: Array<any>): HTMLTitleElement;\n\ttr(...args: Array<any>): HTMLTableRowElement;\n\ttrack(...args: Array<any>): HTMLTrackElement;\n\tu(...args: Array<any>): HTMLElement;\n\tul(...args: Array<any>): HTMLUListElement;\n\tvar(...args: Array<any>): HTMLElement;\n\tvideo(...args: Array<any>): HTMLVideoElement;\n\twbr(...args: Array<any>): HTMLElement;\n}\n\ninterface SVGElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => SVGElement;\n\ta(...args: Array<any>): SVGAElement;\n\taltGlyph(...args: Array<any>): SVGElement;\n\taltGlyphDef(...args: Array<any>): SVGElement;\n\taltGlyphItem(...args: Array<any>): SVGElement;\n\tanimate(...args: Array<any>): SVGAnimateElement;\n\tanimateMotion(...args: Array<any>): SVGAnimateMotionElement;\n\tanimateTransform(...args: Array<any>): SVGAnimateTransformElement;\n\tcircle(...args: Array<any>): SVGCircleElement;\n\tclipPath(...args: Array<any>): SVGClipPathElement;\n\t\"color-profile\"(...args: Array<any>): SVGElement;\n\tcolor_profile(...args: Array<any>): SVGElement;\n\tcursor(...args: Array<any>): SVGElement;\n\tdefs(...args: Array<any>): SVGDefsElement;\n\tdesc(...args: Array<any>): SVGDescElement;\n\tdiscard(...args: Array<any>): SVGElement;\n\tellipse(...args: Array<any>): SVGEllipseElement;\n\tfeBlend(...args: Array<any>): SVGFEBlendElement;\n\tfeColorMatrix(...args: Array<any>): SVGFEColorMatrixElement;\n\tfeComponentTransfer(...args: Array<any>): SVGFEComponentTransferElement;\n\tfeComposite(...args: Array<any>): SVGFECompositeElement;\n\tfeConvolveMatrix(...args: Array<any>): SVGFEConvolveMatrixElement;\n\tfeDiffuseLighting(...args: Array<any>): SVGFEDiffuseLightingElement;\n\tfeDisplacementMap(...args: Array<any>): SVGFEDisplacementMapElement;\n\tfeDistantLight(...args: Array<any>): SVGFEDistantLightElement;\n\tfeDropShadow(...args: Array<any>): SVGElement;\n\tfeFlood(...args: Array<any>): SVGFEFloodElement;\n\tfeFuncA(...args: Array<any>): SVGFEFuncAElement;\n\tfeFuncB(...args: Array<any>): SVGFEFuncBElement;\n\tfeFuncG(...args: Array<any>): SVGFEFuncGElement;\n\tfeFuncR(...args: Array<any>): SVGFEFuncRElement;\n\tfeGaussianBlur(...args: Array<any>): SVGFEGaussianBlurElement;\n\tfeImage(...args: Array<any>): SVGFEImageElement;\n\tfeMerge(...args: Array<any>): SVGFEMergeElement;\n\tfeMergeNode(...args: Array<any>): SVGFEMergeNodeElement;\n\tfeMorphology(...args: Array<any>): SVGFEMorphologyElement;\n\tfeOffset(...args: Array<any>): SVGFEOffsetElement;\n\tfePointLight(...args: Array<any>): SVGFEPointLightElement;\n\tfeSpecularLighting(...args: Array<any>): SVGFESpecularLightingElement;\n\tfeSpotLight(...args: Array<any>): SVGFESpotLightElement;\n\tfeTile(...args: Array<any>): SVGFETileElement;\n\tfeTurbulence(...args: Array<any>): SVGFETurbulenceElement;\n\tfilter(...args: Array<any>): SVGFilterElement;\n\tfont(...args: Array<any>): SVGElement;\n\t\"font-face\"(...args: Array<any>): SVGElement;\n\tfont_face(...args: Array<any>): SVGElement;\n\t\"font-face-format\"(...args: Array<any>): SVGElement;\n\tfont_face_format(...args: Array<any>): SVGElement;\n\t\"font-face-name\"(...args: Array<any>): SVGElement;\n\tfont_face_name(...args: Array<any>): SVGElement;\n\t\"font-face-src\"(...args: Array<any>): SVGElement;\n\tfont_face_src(...args: Array<any>): SVGElement;\n\t\"font-face-uri\"(...args: Array<any>): SVGElement;\n\tfont_face_uri(...args: Array<any>): SVGElement;\n\tforeignObject(...args: Array<any>): SVGForeignObjectElement;\n\tg(...args: Array<any>): SVGGElement;\n\tglyph(...args: Array<any>): SVGElement;\n\tglyphRef(...args: Array<any>): SVGElement;\n\thkern(...args: Array<any>): SVGElement;\n\timage(...args: Array<any>): SVGImageElement;\n\tline(...args: Array<any>): SVGLineElement;\n\tlinearGradient(...args: Array<any>): SVGLinearGradientElement;\n\tmarker(...args: Array<any>): SVGMarkerElement;\n\tmask(...args: Array<any>): SVGMaskElement;\n\tmetadata(...args: Array<any>): SVGMetadataElement;\n\t\"missing-glyph\"(...args: Array<any>): SVGElement;\n\tmissing_glyph(...args: Array<any>): SVGElement;\n\tmpath(...args: Array<any>): SVGElement;\n\tpath(...args: Array<any>): SVGPathElement;\n\tpattern(...args: Array<any>): SVGPatternElement;\n\tpolygon(...args: Array<any>): SVGPolygonElement;\n\tpolyline(...args: Array<any>): SVGPolylineElement;\n\tradialGradient(...args: Array<any>): SVGRadialGradientElement;\n\trect(...args: Array<any>): SVGRectElement;\n\tscript(...args: Array<any>): SVGScriptElement;\n\tset(...args: Array<any>): SVGElement;\n\tstop(...args: Array<any>): SVGStopElement;\n\tstyle(...args: Array<any>): SVGStyleElement;\n\tsvg(...args: Array<any>): SVGSVGElement;\n\tswitch(...args: Array<any>): SVGSwitchElement;\n\tsymbol(...args: Array<any>): SVGSymbolElement;\n\ttext(...args: Array<any>): SVGTextElement;\n\ttextPath(...args: Array<any>): SVGTextPathElement;\n\ttitle(...args: Array<any>): SVGTitleElement;\n\ttref(...args: Array<any>): SVGElement;\n\ttspan(...args: Array<any>): SVGTSpanElement;\n\tuse(...args: Array<any>): SVGUseElement;\n\tview(...args: Array<any>): SVGViewElement;\n\tvkern(...args: Array<any>): SVGElement;\n}\n\nexport const HTML: HTMLElementFactory = <HTMLElementFactory> <unknown> parseHTML;\nexport const SVG: SVGElementFactory = <SVGElementFactory> <unknown> parseSVG;\n\nfor (const name of \"a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr\".split(\" \")) {\n\t(<any>HTML)[name] = (...args: Array<any>) => applyElementArgs(document.createElement(name), args);\n}\nfor (const name of \"a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern\".split(\" \")) {\n\t(<any>SVG)[name] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\tif (/-/.test(name)) {\n\t\tconst snakeCaseName = name.replace(/-/g, \"_\");\n\t\t(<any>SVG)[snakeCaseName] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\t}\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { BeepBoxOption, DictionaryArray, toNameMap, Config } from \"../synth/SynthConfig\";\r\nimport { Song } from \"../synth/synth\";\r\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\r\n\r\n//namespace beepbox {\r\nexport interface ChannelColors extends BeepBoxOption {\r\n\treadonly secondaryChannel: string;\r\n\treadonly primaryChannel: string;\r\n\treadonly secondaryNote: string;\r\n\treadonly primaryNote: string;\r\n}\r\n\r\nexport class ColorConfig {\r\n\tpublic static colorLookup: Map<number, ChannelColors> = new Map<number, ChannelColors>();\r\n\r\n\tpublic static readonly themes: { [name: string]: string } = {\r\n\t\t\"dark classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: black;\r\n\t\t\t\t\t--editor-background: black;\r\n\t\t\t\t\t--hover-preview: white;\r\n\t\t\t\t\t--playhead: white;\r\n\t\t\t\t\t--primary-text: white;\r\n\t\t\t\t\t--secondary-text: #999;\r\n\t\t\t\t\t--inverted-text: black;\r\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\r\n\t\t\t\t\t--loop-accent: #74f;\r\n\t\t\t\t\t--link-accent: #98f;\r\n\t\t\t\t\t--ui-widget-background: #444;\r\n\t\t\t\t\t--ui-widget-focus: #777;\r\n\t\t\t\t\t--pitch-background: #444;\r\n\t\t\t\t\t--tonic: #864;\r\n\t\t\t\t\t--fifth-note: #468;\r\n\t\t\t\t\t--white-piano-key: #bbb;\r\n\t\t\t\t\t--black-piano-key: #444;\r\n\t\t\t\t\t--use-color-formula: false;\r\n\t\t\t\t\t--track-editor-bg-pitch: #444;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-noise: #444;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-mod: #234;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\r\n\t\t\t\t\t--multiplicative-mod-slider: #456;\r\n\t\t\t\t\t--overwriting-mod-slider: #654;\r\n\t\t\t\t\t--indicator-primary: #74f;\r\n\t\t\t\t\t--indicator-secondary: #444;\r\n\t\t\t\t\t--select2-opt-group: #585858;\r\n\t\t\t\t\t--input-box-outline: #333;\r\n\t\t\t\t\t--mute-button-normal: #ffa033;\r\n\t\t\t\t\t--mute-button-mod: #9a6bff;\r\n\t\t\t\t\t--pitch1-secondary-channel: #0099a1;\r\n\t\t\t\t\t--pitch1-primary-channel:   #25f3ff;\r\n\t\t\t\t\t--pitch1-secondary-note:    #00bdc7;\r\n\t\t\t\t\t--pitch1-primary-note:      #92f9ff;\r\n\t\t\t\t\t--pitch2-secondary-channel: #a1a100;\r\n\t\t\t\t\t--pitch2-primary-channel:   #ffff25;\r\n\t\t\t\t\t--pitch2-secondary-note:    #c7c700;\r\n\t\t\t\t\t--pitch2-primary-note:      #ffff92;\r\n\t\t\t\t\t--pitch3-secondary-channel: #c75000;\r\n\t\t\t\t\t--pitch3-primary-channel:   #ff9752;\r\n\t\t\t\t\t--pitch3-secondary-note:    #ff771c;\r\n\t\t\t\t\t--pitch3-primary-note:      #ffcdab;\r\n\t\t\t\t\t--pitch4-secondary-channel: #00a100;\r\n\t\t\t\t\t--pitch4-primary-channel:   #50ff50;\r\n\t\t\t\t\t--pitch4-secondary-note:    #00c700;\r\n\t\t\t\t\t--pitch4-primary-note:      #a0ffa0;\r\n\t\t\t\t\t--pitch5-secondary-channel: #d020d0;\r\n\t\t\t\t\t--pitch5-primary-channel:   #ff90ff;\r\n\t\t\t\t\t--pitch5-secondary-note:    #e040e0;\r\n\t\t\t\t\t--pitch5-primary-note:      #ffc0ff;\r\n\t\t\t\t\t--pitch6-secondary-channel: #7777b0;\r\n\t\t\t\t\t--pitch6-primary-channel:   #a0a0ff;\r\n\t\t\t\t\t--pitch6-secondary-note:    #8888d0;\r\n\t\t\t\t\t--pitch6-primary-note:      #d0d0ff;\r\n\t\t\t\t\t--pitch7-secondary-channel: #8AA100;\r\n\t\t\t\t\t--pitch7-primary-channel:   #DEFF25;\r\n\t\t\t\t\t--pitch7-secondary-note:\t  #AAC700;\r\n\t\t\t\t\t--pitch7-primary-note:\t\t\t#E6FF92;\r\n\t\t\t\t\t--pitch8-secondary-channel: #DF0019;\r\n\t\t\t\t\t--pitch8-primary-channel:   #FF98A4;\r\n\t\t\t\t\t--pitch8-secondary-note:    #FF4E63;\r\n\t\t\t\t\t--pitch8-primary-note:      #FFB2BB;\r\n\t\t\t\t\t--pitch9-secondary-channel: #00A170;\r\n\t\t\t\t\t--pitch9-primary-channel:   #50FFC9;\r\n\t\t\t\t\t--pitch9-secondary-note:    #00C78A;\r\n\t\t\t\t\t--pitch9-primary-note:\t\t\t#83FFD9;\r\n\t\t\t\t\t--pitch10-secondary-channel:#A11FFF;\r\n\t\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\r\n\t\t\t\t\t--pitch10-secondary-note:   #B757FF;\r\n\t\t\t\t\t--pitch10-primary-note:     #DFACFF;\r\n\t\t\t\t\t--noise1-secondary-channel: #6f6f6f;\r\n\t\t\t\t\t--noise1-primary-channel:   #aaaaaa;\r\n\t\t\t\t\t--noise1-secondary-note:    #a7a7a7;\r\n\t\t\t\t\t--noise1-primary-note:      #e0e0e0;\r\n\t\t\t\t\t--noise2-secondary-channel: #996633;\r\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\r\n\t\t\t\t\t--noise2-secondary-note:    #cc9966;\r\n\t\t\t\t\t--noise2-primary-note:      #f0d0bb;\r\n\t\t\t\t\t--noise3-secondary-channel: #4a6d8f;\r\n\t\t\t\t\t--noise3-primary-channel:   #77aadd;\r\n\t\t\t\t\t--noise3-secondary-note:    #6f9fcf;\r\n\t\t\t\t\t--noise3-primary-note:      #bbd7ff;\r\n\t\t\t\t\t--noise4-secondary-channel: #6B3E8E;\r\n\t\t\t\t\t--noise4-primary-channel:   #AF82D2;\r\n\t\t\t\t\t--noise4-secondary-note:    #9E71C1;\r\n\t\t\t\t\t--noise4-primary-note:      #D4C1EA;\r\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\r\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\r\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\r\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\r\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\r\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\r\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\r\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\r\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\r\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\r\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\r\n\t\t\t\t\t--mod3-primary-note:\t\t\t  #f8ddff;\r\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\r\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\r\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\r\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\r\n\t\t\t\t\t--mod-label-primary:        #999;\r\n\t\t\t\t\t--mod-label-secondary-text: #333;\r\n\t\t\t\t\t--mod-label-primary-text:   black;\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"dark competition\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: black;\r\n\t\t\t\t\t--editor-background: black;\r\n\t\t\t\t\t--hover-preview: #ddd;\r\n\t\t\t\t\t--playhead: #ddd;\r\n\t\t\t\t\t--primary-text: #ddd;\r\n\t\t\t\t\t--secondary-text: #8e695b;\r\n\t\t\t\t\t--inverted-text: black;\r\n\t\t\t\t\t--text-selection: rgba(169,0,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(221,221,221,0.2);\r\n\t\t\t\t\t--loop-accent: #bf15ba;\r\n\t\t\t\t\t--link-accent: #f888ff;\r\n\t\t\t\t\t--ui-widget-background: #443a3a;\r\n\t\t\t\t\t--ui-widget-focus: #777;\r\n\t\t\t\t\t--pitch-background: #353333;\r\n\t\t\t\t\t--tonic: #884a44;\r\n\t\t\t\t\t--fifth-note: #415498;\r\n\t\t\t\t\t--white-piano-key: #bbb;\r\n\t\t\t\t\t--black-piano-key: #444;\r\n\t\t\t\t\t--use-color-formula: false;\r\n\t\t\t\t\t--track-editor-bg-pitch: #444;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-noise: #444;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-mod: #234;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\r\n\t\t\t\t\t--multiplicative-mod-slider: #456;\r\n\t\t\t\t\t--overwriting-mod-slider: #654;\r\n\t\t\t\t\t--indicator-primary: #74f;\r\n\t\t\t\t\t--indicator-secondary: #444;\r\n\t\t\t\t\t--select2-opt-group: #585858;\r\n\t\t\t\t\t--input-box-outline: #333;\r\n\t\t\t\t\t--mute-button-normal: #ffa033;\r\n\t\t\t\t\t--mute-button-mod: #9a6bff;\r\n\t\t\t\t\t--pitch1-secondary-channel: #0099a1;\r\n\t\t\t\t\t--pitch1-primary-channel:   #25f3ff;\r\n\t\t\t\t\t--pitch1-secondary-note:    #00bdc7;\r\n\t\t\t\t\t--pitch1-primary-note:      #92f9ff;\r\n\t\t\t\t\t--pitch2-secondary-channel: #a1a100;\r\n\t\t\t\t\t--pitch2-primary-channel:   #ffff25;\r\n\t\t\t\t\t--pitch2-secondary-note:    #c7c700;\r\n\t\t\t\t\t--pitch2-primary-note:      #ffff92;\r\n\t\t\t\t\t--pitch3-secondary-channel: #c75000;\r\n\t\t\t\t\t--pitch3-primary-channel:   #ff9752;\r\n\t\t\t\t\t--pitch3-secondary-note:    #ff771c;\r\n\t\t\t\t\t--pitch3-primary-note:      #ffcdab;\r\n\t\t\t\t\t--pitch4-secondary-channel: #00a100;\r\n\t\t\t\t\t--pitch4-primary-channel:   #50ff50;\r\n\t\t\t\t\t--pitch4-secondary-note:    #00c700;\r\n\t\t\t\t\t--pitch4-primary-note:      #a0ffa0;\r\n\t\t\t\t\t--pitch5-secondary-channel: #d020d0;\r\n\t\t\t\t\t--pitch5-primary-channel:   #ff90ff;\r\n\t\t\t\t\t--pitch5-secondary-note:    #e040e0;\r\n\t\t\t\t\t--pitch5-primary-note:      #ffc0ff;\r\n\t\t\t\t\t--pitch6-secondary-channel: #7777b0;\r\n\t\t\t\t\t--pitch6-primary-channel:   #a0a0ff;\r\n\t\t\t\t\t--pitch6-secondary-note:    #8888d0;\r\n\t\t\t\t\t--pitch6-primary-note:      #d0d0ff;\r\n\t\t\t\t\t--pitch7-secondary-channel: #8AA100;\r\n\t\t\t\t\t--pitch7-primary-channel:   #DEFF25;\r\n\t\t\t\t\t--pitch7-secondary-note:\t  #AAC700;\r\n\t\t\t\t\t--pitch7-primary-note:\t\t\t#E6FF92;\r\n\t\t\t\t\t--pitch8-secondary-channel: #DF0019;\r\n\t\t\t\t\t--pitch8-primary-channel:   #FF98A4;\r\n\t\t\t\t\t--pitch8-secondary-note:    #FF4E63;\r\n\t\t\t\t\t--pitch8-primary-note:      #FFB2BB;\r\n\t\t\t\t\t--pitch9-secondary-channel: #00A170;\r\n\t\t\t\t\t--pitch9-primary-channel:   #50FFC9;\r\n\t\t\t\t\t--pitch9-secondary-note:    #00C78A;\r\n\t\t\t\t\t--pitch9-primary-note:\t\t\t#83FFD9;\r\n\t\t\t\t\t--pitch10-secondary-channel:#A11FFF;\r\n\t\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\r\n\t\t\t\t\t--pitch10-secondary-note:   #B757FF;\r\n\t\t\t\t\t--pitch10-primary-note:     #DFACFF;\r\n\t\t\t\t\t--noise1-secondary-channel: #6f6f6f;\r\n\t\t\t\t\t--noise1-primary-channel:   #aaaaaa;\r\n\t\t\t\t\t--noise1-secondary-note:    #a7a7a7;\r\n\t\t\t\t\t--noise1-primary-note:      #e0e0e0;\r\n\t\t\t\t\t--noise2-secondary-channel: #996633;\r\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\r\n\t\t\t\t\t--noise2-secondary-note:    #cc9966;\r\n\t\t\t\t\t--noise2-primary-note:      #f0d0bb;\r\n\t\t\t\t\t--noise3-secondary-channel: #4a6d8f;\r\n\t\t\t\t\t--noise3-primary-channel:   #77aadd;\r\n\t\t\t\t\t--noise3-secondary-note:    #6f9fcf;\r\n\t\t\t\t\t--noise3-primary-note:      #bbd7ff;\r\n\t\t\t\t\t--noise4-secondary-channel: #6B3E8E;\r\n\t\t\t\t\t--noise4-primary-channel:   #AF82D2;\r\n\t\t\t\t\t--noise4-secondary-note:    #9E71C1;\r\n\t\t\t\t\t--noise4-primary-note:      #D4C1EA;\r\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\r\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\r\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\r\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\r\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\r\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\r\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\r\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\r\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\r\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\r\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\r\n\t\t\t\t\t--mod3-primary-note:        #f8ddff;\r\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\r\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\r\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\r\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\r\n\t\t\t\t\t--mod-label-primary:        #999;\r\n\t\t\t\t\t--mod-label-secondary-text: #333;\r\n\t\t\t\t\t--mod-label-primary-text:   black;\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"light classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t-webkit-text-stroke-width: 0.5px;\r\n\t\t\t\t\t--page-margin: #685d88;\r\n\t\t\t\t\t--editor-background: white;\r\n\t\t\t\t\t--hover-preview: black;\r\n\t\t\t\t\t--playhead: rgba(0,0,0,0.5);\r\n\t\t\t\t\t--primary-text: black;\r\n\t\t\t\t\t--secondary-text: #777;\r\n\t\t\t\t\t--inverted-text: white;\r\n\t\t\t\t\t--text-selection: rgba(200,170,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(0,0,0,0.1);\r\n\t\t\t\t\t--loop-accent: #98f;\r\n\t\t\t\t\t--link-accent: #74f;\r\n\t\t\t\t\t--ui-widget-background: #ececec;\r\n\t\t\t\t\t--ui-widget-focus: #eee;\r\n\t\t\t\t\t--pitch-background: #ececec;\r\n\t\t\t\t\t--tonic: #f0d6b6;\r\n\t\t\t\t\t--fifth-note: #bbddf0;\r\n\t\t\t\t\t--white-piano-key: #eee;\r\n\t\t\t\t\t--black-piano-key: #666;\r\n\t\t\t\t\t--use-color-formula: false;\r\n\t\t\t\t\t--track-editor-bg-pitch: #ececec;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #fdfdfd;\r\n\t\t\t\t\t--track-editor-bg-noise: #ececec;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #fdfdfd;\r\n\t\t\t\t\t--track-editor-bg-mod: #dbecfd;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #ecfdff;\r\n\t\t\t\t\t--multiplicative-mod-slider: #789;\r\n\t\t\t\t\t--overwriting-mod-slider: #987;\r\n\t\t\t\t\t--indicator-primary: #98f;\r\n\t\t\t\t\t--indicator-secondary: #cde;\r\n\t\t\t\t\t--select2-opt-group: #cecece;\r\n\t\t\t\t\t--input-box-outline: #ddd;\r\n\t\t\t\t\t--mute-button-normal: #c0b47f;\r\n\t\t\t\t\t--mute-button-mod: #bd7fc0;\r\n\t\t\t\t\t--pitch1-secondary-channel: #6CD9ED;\r\n\t\t\t\t\t--pitch1-primary-channel:   #00A0BD;\r\n\t\t\t\t\t--pitch1-secondary-note:    #34C2DC;\r\n\t\t\t\t\t--pitch1-primary-note:      #00758A;\r\n\t\t\t\t\t--pitch2-secondary-channel: #E3C941;\r\n\t\t\t\t\t--pitch2-primary-channel:   #B49700;\r\n\t\t\t\t\t--pitch2-secondary-note:    #D1B628;\r\n\t\t\t\t\t--pitch2-primary-note:      #836E00;\r\n\t\t\t\t\t--pitch3-secondary-channel: #FF9D61;\r\n\t\t\t\t\t--pitch3-primary-channel:   #E14E00;\r\n\t\t\t\t\t--pitch3-secondary-note:    #F67D3C;\r\n\t\t\t\t\t--pitch3-primary-note:      #B64000;\r\n\t\t\t\t\t--pitch4-secondary-channel: #4BE24B;\r\n\t\t\t\t\t--pitch4-primary-channel:   #00A800;\r\n\t\t\t\t\t--pitch4-secondary-note:    #2DC82D;\r\n\t\t\t\t\t--pitch4-primary-note:      #008000;\r\n\t\t\t\t\t--pitch5-secondary-channel: #FF90FF;\r\n\t\t\t\t\t--pitch5-primary-channel:   #E12EDF;\r\n\t\t\t\t\t--pitch5-secondary-note:    #EC6EEC;\r\n\t\t\t\t\t--pitch5-primary-note:      #A600A5;\r\n\t\t\t\t\t--pitch6-secondary-channel: #B5B5FE;\r\n\t\t\t\t\t--pitch6-primary-channel:   #6969FD;\r\n\t\t\t\t\t--pitch6-secondary-note:    #9393FE;\r\n\t\t\t\t\t--pitch6-primary-note:      #4A4AD7;\r\n\t\t\t\t\t--pitch7-secondary-channel: #CBE24B;\r\n\t\t\t\t\t--pitch7-primary-channel:   #8EA800;\r\n\t\t\t\t\t--pitch7-secondary-note:    #B0C82D;\r\n\t\t\t\t\t--pitch7-primary-note:      #6C8000;\r\n\t\t\t\t\t--pitch8-secondary-channel: #FF90A4;\r\n\t\t\t\t\t--pitch8-primary-channel:   #E12E4D;\r\n\t\t\t\t\t--pitch8-secondary-note:    #EC6E85;\r\n\t\t\t\t\t--pitch8-primary-note:      #A6001D;\r\n\t\t\t\t\t--pitch9-secondary-channel: #41E3B5;\r\n\t\t\t\t\t--pitch9-primary-channel:   #00B481;\r\n\t\t\t\t\t--pitch9-secondary-note:    #28D1A1;\r\n\t\t\t\t\t--pitch9-primary-note:      #00835E;\r\n\t\t\t\t\t--pitch10-secondary-channel:#CA77FF;\r\n\t\t\t\t\t--pitch10-primary-channel:  #9609FF;\r\n\t\t\t\t\t--pitch10-secondary-note:   #B54FFF;\r\n\t\t\t\t\t--pitch10-primary-note:     #8400E3;\r\n\t\t\t\t\t--noise1-secondary-channel: #C1C1C1;\r\n\t\t\t\t\t--noise1-primary-channel:   #898989;\r\n\t\t\t\t\t--noise1-secondary-note:    #ADADAD;\r\n\t\t\t\t\t--noise1-primary-note:      #6C6C6C;\r\n\t\t\t\t\t--noise2-secondary-channel: #E8BB8C;\r\n\t\t\t\t\t--noise2-primary-channel:   #BD7D3A;\r\n\t\t\t\t\t--noise2-secondary-note:    #D1A374;\r\n\t\t\t\t\t--noise2-primary-note:      #836342;\r\n\t\t\t\t\t--noise3-secondary-channel: #9BC4EB;\r\n\t\t\t\t\t--noise3-primary-channel:   #4481BE;\r\n\t\t\t\t\t--noise3-secondary-note:    #7CA7D3;\r\n\t\t\t\t\t--noise3-primary-note:      #476685;\r\n\t\t\t\t\t--noise4-secondary-channel: #C5A5E0;\r\n\t\t\t\t\t--noise4-primary-channel:   #8553AE;\r\n\t\t\t\t\t--noise4-secondary-note:    #AB87C8;\r\n\t\t\t\t\t--noise4-primary-note:      #684F7D;\r\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\r\n\t\t\t\t\t--mod1-primary-channel:     #77dd55;\r\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\r\n\t\t\t\t\t--mod1-primary-note:        #2ad84a;\r\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\r\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\r\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\r\n\t\t\t\t\t--mod2-primary-note:        #ba124a;\r\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\r\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\r\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\r\n\t\t\t\t\t--mod3-primary-note:        #7a1caa;\r\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\r\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\r\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\r\n\t\t\t\t\t--mod4-primary-note:        #a86810;\r\n\t\t\t\t\t--mod-label-primary:        #dddddd;\r\n\t\t\t\t\t--mod-label-secondary-text: #777;\r\n\t\t\t\t\t--mod-label-primary-text:   black;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.select2-selection__rendered {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"jummbox classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #040410;\r\n\t\t\t\t\t--editor-background: #040410;\r\n\t\t\t\t\t--hover-preview: white;\r\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t\t\t--primary-text: white;\r\n\t\t\t\t\t--secondary-text: #84859a;\r\n\t\t\t\t\t--inverted-text: black;\r\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: #044b94;\r\n\t\t\t\t\t--loop-accent: #74f;\r\n\t\t\t\t\t--link-accent: #98f;\r\n\t\t\t\t\t--ui-widget-background: #393e4f;\r\n\t\t\t\t\t--ui-widget-focus: #6d6886;\r\n\t\t\t\t\t--pitch-background: #393e4f;\r\n\t\t\t\t\t--tonic: #725491;\r\n\t\t\t\t\t--fifth-note: #54547a;\r\n\t\t\t\t\t--white-piano-key: #eee;\r\n\t\t\t\t\t--black-piano-key: #666;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\r\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\r\n\t\t\t\t\t--track-editor-bg-mod: #283560;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\r\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\r\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\r\n\t\t\t\t\t--indicator-primary: #9c64f7;\r\n\t\t\t\t\t--indicator-secondary: #393e4f;\r\n\t\t\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t\t\t--input-box-outline: #222;\r\n\t\t\t\t\t--mute-button-normal: #dda85d;\r\n\t\t\t\t\t--mute-button-mod: #886eae;\r\n\t\t\t\t\t--mod-label-primary: #282840;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\r\n\t\t\t\t\t--mod-label-primary-text: white;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 0;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 192;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 192;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 192;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"forest\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #010c03;\r\n\t\t\t\t\t--editor-background: #010c03;\r\n\t\t\t\t\t--hover-preview: #efe;\r\n\t\t\t\t\t--playhead: rgba(232, 255, 232, 0.9);\r\n\t\t\t\t\t--primary-text: #efe;\r\n\t\t\t\t\t--secondary-text: #70A070;\r\n\t\t\t\t\t--inverted-text: #280228;\r\n\t\t\t\t\t--text-selection: rgba(255,68,199,0.99);\r\n\t\t\t\t\t--box-selection-fill: #267aa3;\r\n\t\t\t\t\t--loop-accent: #ffe845;\r\n\t\t\t\t\t--link-accent: #9f8;\r\n\t\t\t\t\t--ui-widget-background: #203829;\r\n\t\t\t\t\t--ui-widget-focus: #487860;\r\n\t\t\t\t\t--pitch-background: #203829;\r\n\t\t\t\t\t--tonic: #2b8d20;\r\n\t\t\t\t\t--fifth-note: #385840;\r\n\t\t\t\t\t--white-piano-key: #bda;\r\n\t\t\t\t\t--black-piano-key: #573;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #254820;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #102819;\r\n\t\t\t\t\t--track-editor-bg-noise: #304050;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #102030;\r\n\t\t\t\t\t--track-editor-bg-mod: #506030;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #2a300a;\r\n\t\t\t\t\t--multiplicative-mod-slider: #205c8f;\r\n\t\t\t\t\t--overwriting-mod-slider: #20ac6f;\r\n\t\t\t\t\t--indicator-primary: #dcd866;\r\n\t\t\t\t\t--indicator-secondary: #203829;\r\n\t\t\t\t\t--select2-opt-group: #1a6f5a;\r\n\t\t\t\t\t--input-box-outline: #242;\r\n\t\t\t\t\t--mute-button-normal: #49e980;\r\n\t\t\t\t\t--mute-button-mod: #c2e502;\r\n\t\t\t\t\t--mod-label-primary: #133613;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(27, 126, 40);\r\n\t\t\t\t\t--mod-label-primary-text: #efe;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 120;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 59;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 50;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 120;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 86;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 70;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 120;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 85;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 30;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-primary-note-hue: 120;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 80;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 200;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 22;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 200;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-primary-channel-sat: 48;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 65;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 200;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 33;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 200;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 64;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 40;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 44;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 40;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-primary-channel-sat: 60;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 40;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-secondary-note-sat: 62;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 55;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 40;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-primary-note-sat: 66;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"canyon\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #0a0000;\r\n\t\t\t\t\t--editor-background: #0a0000;\r\n\t\t\t\t\t--hover-preview: white;\r\n\t\t\t\t\t--playhead: rgba(247, 172, 196, 0.9);\r\n\t\t\t\t\t--primary-text: #f5d6bf;\r\n\t\t\t\t\t--secondary-text: #934050;\r\n\t\t\t\t\t--inverted-text: #290505;\r\n\t\t\t\t\t--text-selection: rgba(255, 208, 68, 0.99);\r\n\t\t\t\t\t--box-selection-fill: #94044870;\r\n\t\t\t\t\t--loop-accent: #ff1e1e;\r\n\t\t\t\t\t--link-accent: #da7b76;\r\n\t\t\t\t\t--ui-widget-background: #533137;\r\n\t\t\t\t\t--ui-widget-focus: #743e4b;\r\n\t\t\t\t\t--pitch-background: #4f3939;\r\n\t\t\t\t\t--tonic: #9e4145;\r\n\t\t\t\t\t--fifth-note: #5b3e6b;\r\n\t\t\t\t\t--white-piano-key: #d89898;\r\n\t\t\t\t\t--black-piano-key: #572b29;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #5e3a41;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #281d1c;\r\n\t\t\t\t\t--track-editor-bg-noise: #3a3551;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #272732;\r\n\t\t\t\t\t--track-editor-bg-mod: #552045;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #3e1442;\r\n\t\t\t\t\t--multiplicative-mod-slider: #9f6095;\r\n\t\t\t\t\t--overwriting-mod-slider: #b55050;\r\n\t\t\t\t\t--indicator-primary: #f2f764;\r\n\t\t\t\t\t--indicator-secondary: #4f3939;\r\n\t\t\t\t\t--select2-opt-group: #673030;\r\n\t\t\t\t\t--input-box-outline: #443131;\r\n\t\t\t\t\t--mute-button-normal: #d81833;\r\n\t\t\t\t\t--mute-button-mod: #9e2691;\r\n\t\t\t\t\t--mod-label-primary: #5f2b39;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(158, 66, 122);\r\n\t\t\t\t\t--mod-label-primary-text: #e6caed;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 73.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 90;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 83.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 35;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 60;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 60;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 60;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 60;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 222;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 222;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 222;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 54;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 222;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 75;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"midnight\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #000;\r\n\t\t\t--editor-background: #000;\r\n\t\t\t--hover-preview: #757575;\r\n\t\t\t--playhead: #fff;\r\n\t\t\t--primary-text: #fff;\r\n\t\t\t--secondary-text: #acacac;\r\n\t\t\t--inverted-text: #290505;\r\n\t\t\t--text-selection: rgba(155, 155, 155, 0.99);\r\n\t\t\t--box-selection-fill: #79797970;\r\n\t\t\t--loop-accent: #646464;\r\n\t\t\t--link-accent: #707070;\r\n\t\t\t--ui-widget-background: #353535;\r\n\t\t\t--ui-widget-focus: #464646;\r\n\t\t\t--pitch-background: #222121;\r\n\t\t\t--tonic: #1a1818;\r\n\t\t\t--fifth-note: #555955;\r\n\t\t\t--white-piano-key: #a89e9e;\r\n\t\t\t--black-piano-key: #2d2424;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #373737;\r\n\t\t\t--track-editor-bg-pitch-dim: #131313;\r\n\t\t\t--track-editor-bg-noise: #484848;\r\n\t\t\t--track-editor-bg-noise-dim: #131313;\r\n\t\t\t--track-editor-bg-mod: #373737;\r\n\t\t\t--track-editor-bg-mod-dim: #131313;\r\n\t\t\t--multiplicative-mod-slider: #555;\r\n\t\t\t--overwriting-mod-slider: #464545;\r\n\t\t\t--indicator-primary: #e0e0e0;\r\n\t\t\t--indicator-secondary: #404040;\r\n\t\t\t--select2-opt-group: #3c3b3b;\r\n\t\t\t--input-box-outline: #757575;\r\n\t\t\t--mute-button-normal: #8e8d8d;\r\n\t\t\t--mute-button-mod: #ddd;\r\n\t\t\t--mod-label-primary: #262526;\r\n\t\t\t--mod-label-secondary-text: rgb(227, 222, 225);\r\n\t\t\t--mod-label-primary-text: #b9b9b9;\r\n\t\t\t--pitch-secondary-channel-hue: 240;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 228;\r\n\t\t\t--pitch-secondary-channel-sat: 73.3;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-channel-lum: 25;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-channel-hue: 240;\r\n\t\t\t--pitch-primary-channel-hue-scale: 228;\r\n\t\t\t--pitch-primary-channel-sat: 80;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-channel-lum: 60.5;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-secondary-note-hue: 240;\r\n\t\t\t--pitch-secondary-note-hue-scale: 228;\r\n\t\t\t--pitch-secondary-note-sat: 73.9;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-note-lum: 32;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-note-hue: 240;\r\n\t\t\t--pitch-primary-note-hue-scale: 228;\r\n\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t--pitch-primary-note-lum: 80.6;\r\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t--noise-secondary-channel-hue: 160;\r\n\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 160;\r\n\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 160;\r\n\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 160;\r\n\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 62;\r\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 30;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 62;\r\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 62;\r\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 34;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 62;\r\n\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 75;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t}\r\n\t`,\r\n\t\t\"microbox classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #000000;\r\n\t\t\t\t\t--editor-background: #000000;\r\n\t\t\t\t\t--hover-preview: white;\r\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t\t\t--primary-text: white;\r\n\t\t\t\t\t--secondary-text: #93B6AD;\r\n\t\t\t\t\t--inverted-text: black;\r\n\t\t\t\t\t--text-selection: rgba(47,255,250,0.99);\r\n\t\t\t\t\t--box-selection-fill: #03B068;\r\n\t\t\t\t\t--loop-accent: #FF0061;\r\n\t\t\t\t\t--link-accent: #FFC800;\r\n\t\t\t\t\t--ui-widget-background: #38554E;\r\n\t\t\t\t\t--ui-widget-focus: #2A7E69;\r\n\t\t\t\t\t--pitch-background: #281F23;\r\n\t\t\t\t\t--tonic: #004634;\r\n\t\t\t\t\t--fifth-note: #463400;\r\n\t\t\t\t\t--white-piano-key: #edc;\r\n\t\t\t\t\t--black-piano-key: #456;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #333333;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #000000;\r\n\t\t\t\t\t--track-editor-bg-noise: #463400;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #000000;\r\n\t\t\t\t\t--track-editor-bg-mod: #004634;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #000000;\r\n\t\t\t\t\t--multiplicative-mod-slider: #FFC800;\r\n\t\t\t\t\t--overwriting-mod-slider: #00ffc0;\r\n\t\t\t\t\t--indicator-primary: #333333;\r\n\t\t\t\t\t--indicator-secondary: #00ffc0;\r\n\t\t\t\t\t--select2-opt-group: #2B2B2B;\r\n\t\t\t\t\t--input-box-outline: #69BFC6;\r\n\t\t\t\t\t--mute-button-normal: #00ffc0;\r\n\t\t\t\t\t--mute-button-mod: #FFC800;\r\n\t\t\t\t\t--mod-label-primary: #38554E;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(0, 43, 45);\r\n\t\t\t\t\t--mod-label-primary-text: white;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 0;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 192;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 192;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 192;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t}\r\n\t`,\r\n\t\t\"jummbox light\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t-webkit-text-stroke-width: 0.5px;\r\n\t\t\t\t\t--page-margin: #fefdff;\r\n\t\t\t\t\t--editor-background: #fefdff;\r\n\t\t\t\t\t--hover-preview: #302880;\r\n\t\t\t\t\t--playhead: rgba(62, 32, 120, 0.9);\r\n\t\t\t\t\t--primary-text: #401890;\r\n\t\t\t\t\t--secondary-text: #8769af;\r\n\t\t\t\t\t--inverted-text: #fefdff;\r\n\t\t\t\t\t--text-selection: rgba(255,160,235,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(30,62,220,0.5);\r\n\t\t\t\t\t--loop-accent: #4c35d4;\r\n\t\t\t\t\t--link-accent: #7af;\r\n\t\t\t\t\t--ui-widget-background: #bf9cec;\r\n\t\t\t\t\t--ui-widget-focus: #e9c4ff;\r\n\t\t\t\t\t--pitch-background: #e2d9f9;\r\n\t\t\t\t\t--tonic: #c288cc;\r\n\t\t\t\t\t--fifth-note: #d8c9fd;\r\n\t\t\t\t\t--white-piano-key: #e2e2ff;\r\n\t\t\t\t\t--black-piano-key: #66667a;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #d9e5ec;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #eaeef5;\r\n\t\t\t\t\t--track-editor-bg-noise: #ffc3ae;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #ffe0cf;\r\n\t\t\t\t\t--track-editor-bg-mod: #c9accc;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #ebe3ef;\r\n\t\t\t\t\t--multiplicative-mod-slider: #807caf;\r\n\t\t\t\t\t--overwriting-mod-slider: #909cdf;\r\n\t\t\t\t\t--indicator-primary: #ae38ff;\r\n\t\t\t\t\t--indicator-secondary: #bbd4ec;\r\n\t\t\t\t\t--select2-opt-group: #c1b7f1;\r\n\t\t\t\t\t--input-box-outline: #bbb;\r\n\t\t\t\t\t--mute-button-normal: #e9b752;\r\n\t\t\t\t\t--mute-button-mod: #9558ee;\r\n\t\t\t\t\t--mod-label-primary: #ececff;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(197, 145, 247);\r\n\t\t\t\t\t--mod-label-primary-text: #302880;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 53.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 72;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 97;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 45.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 95;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 43.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: -0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 220;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 62;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: -0.1;\r\n\t\t\t\t\t--noise-primary-channel-hue: 220;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 53;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 53.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: -0.1;\r\n\t\t\t\t\t--noise-secondary-note-hue: 220;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 58.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 85;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: -1;\r\n\t\t\t\t\t--noise-primary-note-hue: 220;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 56.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 54;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: -1;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 90;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 60;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 90;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 100;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 65;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 90;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 95;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 90;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 55;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.select2-selection__rendered {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t};\r\n\r\n\tpublic static readonly pageMargin: string = \"var(--page-margin)\";\r\n\tpublic static readonly editorBackground: string = \"var(--editor-background)\";\r\n\tpublic static readonly hoverPreview: string = \"var(--hover-preview)\";\r\n\tpublic static readonly playhead: string = \"var(--playhead)\";\r\n\tpublic static readonly primaryText: string = \"var(--primary-text)\";\r\n\tpublic static readonly secondaryText: string = \"var(--secondary-text)\";\r\n\tpublic static readonly invertedText: string = \"var(--inverted-text)\";\r\n\tpublic static readonly textSelection: string = \"var(--text-selection)\";\r\n\tpublic static readonly boxSelectionFill: string = \"var(--box-selection-fill)\";\r\n\tpublic static readonly loopAccent: string = \"var(--loop-accent)\";\r\n\tpublic static readonly linkAccent: string = \"var(--link-accent)\";\r\n\tpublic static readonly uiWidgetBackground: string = \"var(--ui-widget-background)\";\r\n\tpublic static readonly uiWidgetFocus: string = \"var(--ui-widget-focus)\";\r\n\tpublic static readonly pitchBackground: string = \"var(--pitch-background)\";\r\n\tpublic static readonly tonic: string = \"var(--tonic)\";\r\n\tpublic static readonly fifthNote: string = \"var(--fifth-note)\";\r\n\tpublic static readonly whitePianoKey: string = \"var(--white-piano-key)\";\r\n\tpublic static readonly blackPianoKey: string = \"var(--black-piano-key)\";\r\n\tpublic static readonly useColorFormula: string = \"var(--use-color-formula)\";\r\n\tpublic static readonly pitchSecondaryChannelHue: string = \"var(--pitch-secondary-channel-hue)\";\r\n\tpublic static readonly pitchSecondaryChannelHueScale: string = \"var(--pitch-secondary-channel-hue-scale)\";\r\n\tpublic static readonly pitchSecondaryChannelSat: string = \"var(--pitch-secondary-channel-sat)\";\r\n\tpublic static readonly pitchSecondaryChannelSatScale: string = \"var(--pitch-secondary-channel-sat-scale)\";\r\n\tpublic static readonly pitchSecondaryChannelLum: string = \"var(--pitch-secondary-channel-lum)\";\r\n\tpublic static readonly pitchSecondaryChannelLumScale: string = \"var(--pitch-secondary-channel-lum-scale)\";\r\n\tpublic static readonly pitchPrimaryChannelHue: string = \"var(--pitch-primary-channel-hue)\";\r\n\tpublic static readonly pitchPrimaryChannelHueScale: string = \"var(--pitch-primary-channel-hue-scale)\";\r\n\tpublic static readonly pitchPrimaryChannelSat: string = \"var(--pitch-primary-channel-sat)\";\r\n\tpublic static readonly pitchPrimaryChannelSatScale: string = \"var(--pitch-primary-channel-sat-scale)\";\r\n\tpublic static readonly pitchPrimaryChannelLum: string = \"var(--pitch-primary-channel-lum)\";\r\n\tpublic static readonly pitchPrimaryChannelLumScale: string = \"var(--pitch-primary-channel-lum-scale)\";\r\n\tpublic static readonly pitchSecondaryNoteHue: string = \"var(--pitch-secondary-note-hue)\";\r\n\tpublic static readonly pitchSecondaryNoteHueScale: string = \"var(--pitch-secondary-note-hue-scale)\";\r\n\tpublic static readonly pitchSecondaryNoteSat: string = \"var(--pitch-secondary-note-sat)\";\r\n\tpublic static readonly pitchSecondaryNoteSatScale: string = \"var(--pitch-secondary-note-sat-scale)\";\r\n\tpublic static readonly pitchSecondaryNoteLum: string = \"var(--pitch-secondary-note-lum)\";\r\n\tpublic static readonly pitchSecondaryNoteLumScale: string = \"var(--pitch-secondary-note-lum-scale)\";\r\n\tpublic static readonly pitchPrimaryNoteHue: string = \"var(--pitch-primary-note-hue)\";\r\n\tpublic static readonly pitchPrimaryNoteHueScale: string = \"var(--pitch-primary-note-hue-scale)\";\r\n\tpublic static readonly pitchPrimaryNoteSat: string = \"var(--pitch-primary-note-sat)\";\r\n\tpublic static readonly pitchPrimaryNoteSatScale: string = \"var(--pitch-primary-note-sat-scale)\";\r\n\tpublic static readonly pitchPrimaryNoteLum: string = \"var(--pitch-primary-note-lum)\";\r\n\tpublic static readonly pitchPrimaryNoteLumScale: string = \"var(--pitch-primary-note-lum-scale)\";\r\n\tpublic static readonly modSecondaryChannelHue: string = \"var(--mod-secondary-channel-hue)\";\r\n\tpublic static readonly modSecondaryChannelHueScale: string = \"var(--mod-secondary-channel-hue-scale)\";\r\n\tpublic static readonly modSecondaryChannelSat: string = \"var(--mod-secondary-channel-sat)\";\r\n\tpublic static readonly modSecondaryChannelSatScale: string = \"var(--mod-secondary-channel-sat-scale)\";\r\n\tpublic static readonly modSecondaryChannelLum: string = \"var(--mod-secondary-channel-lum)\";\r\n\tpublic static readonly modSecondaryChannelLumScale: string = \"var(--mod-secondary-channel-lum-scale)\";\r\n\tpublic static readonly modPrimaryChannelHue: string = \"var(--mod-primary-channel-hue)\";\r\n\tpublic static readonly modPrimaryChannelHueScale: string = \"var(--mod-primary-channel-hue-scale)\";\r\n\tpublic static readonly modPrimaryChannelSat: string = \"var(--mod-primary-channel-sat)\";\r\n\tpublic static readonly modPrimaryChannelSatScale: string = \"var(--mod-primary-channel-sat-scale)\";\r\n\tpublic static readonly modPrimaryChannelLum: string = \"var(--mod-primary-channel-lum)\";\r\n\tpublic static readonly modPrimaryChannelLumScale: string = \"var(--mod-primary-channel-lum-scale)\";\r\n\tpublic static readonly modSecondaryNoteHue: string = \"var(--mod-secondary-note-hue)\";\r\n\tpublic static readonly modSecondaryNoteHueScale: string = \"var(--mod-secondary-note-hue-scale)\";\r\n\tpublic static readonly modSecondaryNoteSat: string = \"var(--mod-secondary-note-sat)\";\r\n\tpublic static readonly modSecondaryNoteSatScale: string = \"var(--mod-secondary-note-sat-scale)\";\r\n\tpublic static readonly modSecondaryNoteLum: string = \"var(--mod-secondary-note-lum)\";\r\n\tpublic static readonly modSecondaryNoteLumScale: string = \"var(--mod-secondary-note-lum-scale)\";\r\n\tpublic static readonly modPrimaryNoteHue: string = \"var(--mod-primary-note-hue)\";\r\n\tpublic static readonly modPrimaryNoteHueScale: string = \"var(--mod-primary-note-hue-scale)\";\r\n\tpublic static readonly modPrimaryNoteSat: string = \"var(--mod-primary-note-sat)\";\r\n\tpublic static readonly modPrimaryNoteSatScale: string = \"var(--mod-primary-note-sat-scale)\";\r\n\tpublic static readonly modPrimaryNoteLum: string = \"var(--mod-primary-note-lum)\";\r\n\tpublic static readonly modPrimaryNoteLumScale: string = \"var(--mod-primary-note-lum-scale)\";\r\n\tpublic static readonly noiseSecondaryChannelHue: string = \"var(--noise-secondary-channel-hue)\";\r\n\tpublic static readonly noiseSecondaryChannelHueScale: string = \"var(--noise-secondary-channel-hue-scale)\";\r\n\tpublic static readonly noiseSecondaryChannelSat: string = \"var(--noise-secondary-channel-sat)\";\r\n\tpublic static readonly noiseSecondaryChannelSatScale: string = \"var(--noise-secondary-channel-sat-scale)\";\r\n\tpublic static readonly noiseSecondaryChannelLum: string = \"var(--noise-secondary-channel-lum)\";\r\n\tpublic static readonly noiseSecondaryChannelLumScale: string = \"var(--noise-secondary-channel-lum-scale)\";\r\n\tpublic static readonly noisePrimaryChannelHue: string = \"var(--noise-primary-channel-hue)\";\r\n\tpublic static readonly noisePrimaryChannelHueScale: string = \"var(--noise-primary-channel-hue-scale)\";\r\n\tpublic static readonly noisePrimaryChannelSat: string = \"var(--noise-primary-channel-sat)\";\r\n\tpublic static readonly noisePrimaryChannelSatScale: string = \"var(--noise-primary-channel-sat-scale)\";\r\n\tpublic static readonly noisePrimaryChannelLum: string = \"var(--noise-primary-channel-lum)\";\r\n\tpublic static readonly noisePrimaryChannelLumScale: string = \"var(--noise-primary-channel-lum-scale)\";\r\n\tpublic static readonly noiseSecondaryNoteHue: string = \"var(--noise-secondary-note-hue)\";\r\n\tpublic static readonly noiseSecondaryNoteHueScale: string = \"var(--noise-secondary-note-hue-scale)\";\r\n\tpublic static readonly noiseSecondaryNoteSat: string = \"var(--noise-secondary-note-sat)\";\r\n\tpublic static readonly noiseSecondaryNoteSatScale: string = \"var(--noise-secondary-note-sat-scale)\";\r\n\tpublic static readonly noiseSecondaryNoteLum: string = \"var(--noise-secondary-note-lum)\";\r\n\tpublic static readonly noiseSecondaryNoteLumScale: string = \"var(--noise-secondary-note-lum-scale)\";\r\n\tpublic static readonly noisePrimaryNoteHue: string = \"var(--noise-primary-note-hue)\";\r\n\tpublic static readonly noisePrimaryNoteHueScale: string = \"var(--noise-primary-note-hue-scale)\";\r\n\tpublic static readonly noisePrimaryNoteSat: string = \"var(--noise-primary-note-sat)\";\r\n\tpublic static readonly noisePrimaryNoteSatScale: string = \"var(--noise-primary-note-sat-scale)\";\r\n\tpublic static readonly noisePrimaryNoteLum: string = \"var(--noise-primary-note-lum)\";\r\n\tpublic static readonly noisePrimaryNoteLumScale: string = \"var(--noise-primary-note-lum-scale)\";\r\n\tpublic static readonly trackEditorBgPitch: string = \"var(--track-editor-bg-pitch)\";\r\n\tpublic static readonly trackEditorBgPitchDim: string = \"var(--track-editor-bg-pitch-dim)\";\r\n\tpublic static readonly trackEditorBgNoise: string = \"var(--track-editor-bg-noise)\";\r\n\tpublic static readonly trackEditorBgNoiseDim: string = \"var(--track-editor-bg-noise-dim)\";\r\n\tpublic static readonly trackEditorBgMod: string = \"var(--track-editor-bg-mod)\";\r\n\tpublic static readonly trackEditorBgModDim: string = \"var(--track-editor-bg-mod-dim)\";\r\n\tpublic static readonly multiplicativeModSlider: string = \"var(--multiplicative-mod-slider)\";\r\n\tpublic static readonly overwritingModSlider: string = \"var(--overwriting-mod-slider)\";\r\n\tpublic static readonly indicatorPrimary: string = \"var(--indicator-primary)\";\r\n\tpublic static readonly indicatorSecondary: string = \"var(--indicator-secondary)\";\r\n\tpublic static readonly select2OptGroup: string = \"var(--select2-opt-group)\";\r\n\tpublic static readonly inputBoxOutline: string = \"var(--input-box-outline)\";\r\n\tpublic static readonly muteButtonNormal: string = \"var(--mute-button-normal)\";\r\n\tpublic static readonly muteButtonMod: string = \"var(--mute-button-mod)\";\r\n\tpublic static readonly modLabelPrimary: string = \"var(--mod-label-primary)\";\r\n\tpublic static readonly modLabelSecondaryText: string = \"var(--mod-label-secondary-text)\";\r\n\tpublic static readonly modLabelPrimaryText: string = \"var(--mod-label-primary-text)\";\r\n\r\n\tpublic static readonly pitchChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"pitch1\", // cyan\r\n\t\t\tsecondaryChannel: \"var(--pitch1-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch1-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch1-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch1-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch2\", // yellow\r\n\t\t\tsecondaryChannel: \"var(--pitch2-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch2-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch2-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch2-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch3\", // orange\r\n\t\t\tsecondaryChannel: \"var(--pitch3-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch3-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch3-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch3-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch4\", // green\r\n\t\t\tsecondaryChannel: \"var(--pitch4-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch4-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch4-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch4-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch5\", // purple\r\n\t\t\tsecondaryChannel: \"var(--pitch5-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch5-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch5-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch5-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch6\", // blue\r\n\t\t\tsecondaryChannel: \"var(--pitch6-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch6-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch6-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch6-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch7\", // blue\r\n\t\t\tsecondaryChannel: \"var(--pitch7-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch7-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch7-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch7-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch8\", // blue\r\n\t\t\tsecondaryChannel: \"var(--pitch8-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch8-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch8-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch8-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch9\", // blue\r\n\t\t\tsecondaryChannel: \"var(--pitch9-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch9-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch9-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch9-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch10\", // blue\r\n\t\t\tsecondaryChannel: \"var(--pitch10-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch10-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch10-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch10-primary-note)\",\r\n\t\t},\r\n\t]);\r\n\tpublic static readonly noiseChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"noise1\", // gray\r\n\t\t\tsecondaryChannel: \"var(--noise1-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--noise1-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--noise1-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--noise1-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"noise2\", // brown\r\n\t\t\tsecondaryChannel: \"var(--noise2-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--noise2-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--noise2-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--noise2-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"noise3\", // azure\r\n\t\t\tsecondaryChannel: \"var(--noise3-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--noise3-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--noise3-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--noise3-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"noise4\",\r\n\t\t\tsecondaryChannel: \"var(--noise4-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--noise4-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--noise4-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--noise4-primary-note)\",\r\n\t\t},\r\n\t]);\r\n\tpublic static readonly modChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"mod1\",\r\n\t\t\tsecondaryChannel: \"var(--mod1-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--mod1-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--mod1-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--mod1-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"mod2\",\r\n\t\t\tsecondaryChannel: \"var(--mod2-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--mod2-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--mod2-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--mod2-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"mod3\",\r\n\t\t\tsecondaryChannel: \"var(--mod3-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--mod3-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--mod3-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--mod3-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"mod4\",\r\n\t\t\tsecondaryChannel: \"var(--mod4-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--mod4-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--mod4-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--mod4-primary-note)\",\r\n\t\t},\r\n\t]);\r\n\r\n\tpublic static resetColors() {\r\n\t\tthis.colorLookup.clear();\r\n\t}\r\n\r\n\t// Same as below, but won't return var colors\r\n\tpublic static getComputedChannelColor(song: Song, channel: number): ChannelColors {\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"false\") {\r\n\t\t\tlet base: ChannelColors = ColorConfig.getChannelColor(song, channel);\r\n\t\t\t// Trim away \"var(...)\"\r\n\t\t\tvar regex = /\\(([^)]+)\\)/;\r\n\t\t\tlet newChannelSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryChannel) as RegExpExecArray)[1] as string);\r\n\t\t\tlet newChannelPrimary: string = ColorConfig.getComputed((regex.exec(base.primaryChannel) as RegExpExecArray)[1] as string);\r\n\t\t\tlet newNoteSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryNote) as RegExpExecArray)[1] as string);\r\n\t\t\tlet newNotePrimary: string = ColorConfig.getComputed((regex.exec(base.primaryNote) as RegExpExecArray)[1] as string);\r\n\t\t\treturn <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn ColorConfig.getChannelColor(song, channel);\r\n\t\t}\r\n\t};\r\n\r\n\tpublic static getChannelColor(song: Song, channel: number): ChannelColors {\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"false\") {\r\n\t\t\t// Set colors, not defined by formula\r\n\t\t\tif (channel < song.pitchChannelCount) {\r\n\t\t\t\treturn ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length];\r\n\t\t\t} else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\r\n\t\t\t\treturn ColorConfig.noiseChannels[(channel - song.pitchChannelCount) % ColorConfig.noiseChannels.length];\r\n\t\t\t} else {\r\n\t\t\t\treturn ColorConfig.modChannels[(channel - song.pitchChannelCount - song.noiseChannelCount) % ColorConfig.modChannels.length];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Determine if color is cached\r\n\t\t\tif (ColorConfig.colorLookup.has(channel)) {\r\n\t\t\t\treturn ColorConfig.colorLookup.get(channel) as ChannelColors;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Formulaic color definition\r\n\t\t\t\tif (channel < song.pitchChannelCount) {\r\n\t\t\t\t\t// Pitch formula\r\n\t\t\t\t\tconst pitchSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue\");\r\n\t\t\t\t\tconst pitchSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue-scale\");\r\n\t\t\t\t\tconst pitchSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat\");\r\n\t\t\t\t\tconst pitchSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat-scale\");\r\n\t\t\t\t\tconst pitchSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum\");\r\n\t\t\t\t\tconst pitchSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum-scale\");\r\n\t\t\t\t\tconst pitchPrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue\");\r\n\t\t\t\t\tconst pitchPrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue-scale\");\r\n\t\t\t\t\tconst pitchPrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat\");\r\n\t\t\t\t\tconst pitchPrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat-scale\");\r\n\t\t\t\t\tconst pitchPrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum\");\r\n\t\t\t\t\tconst pitchPrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum-scale\");\r\n\t\t\t\t\tconst pitchSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue\");\r\n\t\t\t\t\tconst pitchSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue-scale\");\r\n\t\t\t\t\tconst pitchSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat\");\r\n\t\t\t\t\tconst pitchSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat-scale\");\r\n\t\t\t\t\tconst pitchSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum\");\r\n\t\t\t\t\tconst pitchSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum-scale\");\r\n\t\t\t\t\tconst pitchPrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue\");\r\n\t\t\t\t\tconst pitchPrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue-scale\");\r\n\t\t\t\t\tconst pitchPrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat\");\r\n\t\t\t\t\tconst pitchPrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat-scale\");\r\n\t\t\t\t\tconst pitchPrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum\");\r\n\t\t\t\t\tconst pitchPrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum-scale\");\r\n\r\n\t\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((+pitchSecondaryChannelHue + (channel * +pitchSecondaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+pitchSecondaryChannelSat * (1 - (+pitchSecondaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n\t\t\t\t\t\t+ (+pitchSecondaryChannelLum * (1 - (+pitchSecondaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((+pitchPrimaryChannelHue + (channel * +pitchPrimaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+pitchPrimaryChannelSat * (1 - (+pitchPrimaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n\t\t\t\t\t\t+ (+pitchPrimaryChannelLum * (1 - (+pitchPrimaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((+pitchSecondaryNoteHue + (channel * +pitchSecondaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+pitchSecondaryNoteSat * (1 - (+pitchSecondaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n\t\t\t\t\t\t+ (+pitchSecondaryNoteLum * (1 - (+pitchSecondaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((+pitchPrimaryNoteHue + (channel * +pitchPrimaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+pitchPrimaryNoteSat * (1 - (+pitchPrimaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n\t\t\t\t\t\t+ (+pitchPrimaryNoteLum * (1 - (+pitchPrimaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n\r\n\t\t\t\t\tlet newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n\t\t\t\t\tColorConfig.colorLookup.set(channel, newChannelColors);\r\n\t\t\t\t\treturn newChannelColors;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (channel < song.pitchChannelCount + song.noiseChannelCount) {\r\n\t\t\t\t\t// Noise formula\r\n\t\t\t\t\tconst noiseSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue\");\r\n\t\t\t\t\tconst noiseSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue-scale\");\r\n\t\t\t\t\tconst noiseSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat\");\r\n\t\t\t\t\tconst noiseSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat-scale\");\r\n\t\t\t\t\tconst noiseSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum\");\r\n\t\t\t\t\tconst noiseSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum-scale\");\r\n\t\t\t\t\tconst noisePrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue\");\r\n\t\t\t\t\tconst noisePrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue-scale\");\r\n\t\t\t\t\tconst noisePrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat\");\r\n\t\t\t\t\tconst noisePrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat-scale\");\r\n\t\t\t\t\tconst noisePrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum\");\r\n\t\t\t\t\tconst noisePrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum-scale\");\r\n\t\t\t\t\tconst noiseSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue\");\r\n\t\t\t\t\tconst noiseSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue-scale\");\r\n\t\t\t\t\tconst noiseSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat\");\r\n\t\t\t\t\tconst noiseSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat-scale\");\r\n\t\t\t\t\tconst noiseSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum\");\r\n\t\t\t\t\tconst noiseSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum-scale\");\r\n\t\t\t\t\tconst noisePrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue\");\r\n\t\t\t\t\tconst noisePrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue-scale\");\r\n\t\t\t\t\tconst noisePrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat\");\r\n\t\t\t\t\tconst noisePrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat-scale\");\r\n\t\t\t\t\tconst noisePrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum\");\r\n\t\t\t\t\tconst noisePrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum-scale\");\r\n\r\n\t\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((+noiseSecondaryChannelHue + (((channel - song.pitchChannelCount) * +noiseSecondaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+noiseSecondaryChannelSat + channel * +noiseSecondaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+noiseSecondaryChannelLum + channel * +noiseSecondaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((+noisePrimaryChannelHue + (((channel - song.pitchChannelCount) * +noisePrimaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+noisePrimaryChannelSat + channel * +noisePrimaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+noisePrimaryChannelLum + channel * +noisePrimaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((+noiseSecondaryNoteHue + (((channel - song.pitchChannelCount) * +noiseSecondaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+noiseSecondaryNoteSat + channel * +noiseSecondaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+noiseSecondaryNoteLum + channel * +noiseSecondaryNoteLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((+noisePrimaryNoteHue + (((channel - song.pitchChannelCount) * +noisePrimaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+noisePrimaryNoteSat + channel * +noisePrimaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+noisePrimaryNoteLum + channel * +noisePrimaryNoteLumScale) + \"%)\";\r\n\r\n\t\t\t\t\tlet newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n\t\t\t\t\tColorConfig.colorLookup.set(channel, newChannelColors);\r\n\t\t\t\t\treturn newChannelColors;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Mod formula\r\n\t\t\t\t\tconst modSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue\");\r\n\t\t\t\t\tconst modSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue-scale\");\r\n\t\t\t\t\tconst modSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat\");\r\n\t\t\t\t\tconst modSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat-scale\");\r\n\t\t\t\t\tconst modSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum\");\r\n\t\t\t\t\tconst modSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum-scale\");\r\n\t\t\t\t\tconst modPrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue\");\r\n\t\t\t\t\tconst modPrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue-scale\");\r\n\t\t\t\t\tconst modPrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat\");\r\n\t\t\t\t\tconst modPrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat-scale\");\r\n\t\t\t\t\tconst modPrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum\");\r\n\t\t\t\t\tconst modPrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum-scale\");\r\n\t\t\t\t\tconst modSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue\");\r\n\t\t\t\t\tconst modSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue-scale\");\r\n\t\t\t\t\tconst modSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat\");\r\n\t\t\t\t\tconst modSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat-scale\");\r\n\t\t\t\t\tconst modSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum\");\r\n\t\t\t\t\tconst modSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum-scale\");\r\n\t\t\t\t\tconst modPrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue\");\r\n\t\t\t\t\tconst modPrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue-scale\");\r\n\t\t\t\t\tconst modPrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat\");\r\n\t\t\t\t\tconst modPrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat-scale\");\r\n\t\t\t\t\tconst modPrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum\");\r\n\t\t\t\t\tconst modPrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum-scale\");\r\n\r\n\t\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((+modSecondaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modSecondaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+modSecondaryChannelSat + channel * +modSecondaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+modSecondaryChannelLum + channel * +modSecondaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((+modPrimaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modPrimaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+modPrimaryChannelSat + channel * +modPrimaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+modPrimaryChannelLum + channel * +modPrimaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((+modSecondaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modSecondaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+modSecondaryNoteSat + channel * +modSecondaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+modSecondaryNoteLum + channel * +modSecondaryNoteLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((+modPrimaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modPrimaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+modPrimaryNoteSat + channel * +modPrimaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+modPrimaryNoteLum + channel * +modPrimaryNoteLumScale) + \"%)\";\r\n\r\n\t\t\t\t\tlet newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n\t\t\t\t\tColorConfig.colorLookup.set(channel, newChannelColors);\r\n\t\t\t\t\treturn newChannelColors;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static readonly _styleElement: HTMLStyleElement = document.head.appendChild(HTML.style({ type: \"text/css\" }));\r\n\r\n\tpublic static setTheme(name: string): void {\r\n\t\tthis._styleElement.textContent = this.themes[name];\r\n\t\tconst themeColor = <HTMLMetaElement>document.querySelector(\"meta[name='theme-color']\");\r\n\t\tif (themeColor != null) {\r\n\t\t\tthemeColor.setAttribute(\"content\", getComputedStyle(document.documentElement).getPropertyValue('--ui-widget-background'));\r\n\t\t}\r\n\r\n\t\tthis.resetColors();\r\n\t}\r\n\r\n\tpublic static getComputed(name: string): string {\r\n\t\treturn getComputedStyle(this._styleElement).getPropertyValue(name);\r\n\t}\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap } from \"../synth/SynthConfig\";\r\n\r\n//namespace beepbox {\r\nexport interface PresetCategory extends BeepBoxOption {\r\n\treadonly presets: DictionaryArray<Preset>;\r\n}\r\n\r\nexport interface Preset extends BeepBoxOption {\r\n\treadonly isNoise?: boolean;\r\n\treadonly isMod?: boolean;\r\n\treadonly generalMidi?: boolean;\r\n\treadonly midiProgram?: number;\r\n\treadonly midiSubharmonicOctaves?: number;\r\n\treadonly customType?: InstrumentType;\r\n\treadonly settings?: any;\r\n}\r\n\r\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\nexport function prettyNumber(value: number): string {\r\n\treturn value.toFixed(2).replace(/\\.?0*$/, \"\");\r\n}\r\n\r\nexport class EditorConfig {\r\n\tpublic static readonly version: string = \"2.3\"; // Not using patch versions in display right now, maybe someday.\r\n\tpublic static readonly versionDisplayName: string = \"MicroBox \" + EditorConfig.version;\r\n\r\n\tpublic static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"chip wave\", customType: InstrumentType.chip },\r\n\t\t\t\t{ name: \"FM (expert)\", customType: InstrumentType.fm },\r\n\t\t\t\t{ name: \"basic noise\", customType: InstrumentType.noise },\r\n\t\t\t\t{ name: \"spectrum\", customType: InstrumentType.spectrum },\r\n\t\t\t\t{ name: \"drumset\", customType: InstrumentType.drumset },\r\n\t\t\t\t{ name: \"harmonics\", customType: InstrumentType.harmonics },\r\n\t\t\t\t{ name: \"pulse width\", customType: InstrumentType.pwm },\r\n\t\t\t\t{ name: \"custom chip\", customType: InstrumentType.customChipWave },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"triangle\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\r\n\t\t\t\t{ name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\r\n\t\t\t\t{ name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\r\n\t\t\t\t{ name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\r\n\t\t\t\t{ name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\r\n\t\t\t\t{ name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57] } },\r\n\t\t\t\t{ name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 86, 86, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"wave\": \"1/8 pulse\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"interval\": \"honky tonk\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 43, 43, 43, 43, 43, 29, 43, 43, 43, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"interval\": \"shimmer\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0] } },\r\n\t\t\t\t{ name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 14, 14, 14, 14, 14, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14] } },\r\n\t\t\t\t{ name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\r\n\t\t\t\t{ name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }, { \"frequency\": \"~2×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 2, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 1\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"pulseWidth\": 18, \"pulseEnvelope\": \"punch\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"distorted synth 2\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 3\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 4\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 50, \"pulseEnvelope\": \"swell 1\", \"vibrato\": \"delayed\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"transition\": \"slide\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t\t{ name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14] } },\r\n\t\t\t\t{ name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0] } },\r\n\t\t\t\t{ name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"flare 3\" }] } },\r\n\t\t\t\t{ name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"swell 2\" }, { \"frequency\": \"11×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 3\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"octave\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"tremolo1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 5, \"envelope\": \"twang 3\" }, { \"frequency\": \"11×\", \"amplitude\": 8, \"envelope\": \"tremolo5\" }] } },\r\n\t\t\t\t{ name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"tremolo1\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\r\n\t\t\t\t{ name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"flare 1\" }, { \"frequency\": \"3×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }] } },\r\n\t\t\t\t{ name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 3, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [0, 0, 0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0] } },\r\n\t\t\t\t{ name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 57, \"filterEnvelope\": \"swell 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\r\n\t\t\t\t{ name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"interval\": \"hum\", \"vibrato\": \"heavy\", \"harmonics\": [0, 0, 14, 100, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"tremolo1\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\r\n\t\t\t\t{ name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 4, \"pulseEnvelope\": \"tremolo6\", \"vibrato\": \"shaky\" } },\r\n\t\t\t\t{ name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\r\n\t\t\t\t{ name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\r\n\t\t\t\t{ name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"heavy\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t]);\r\n\r\n\tpublic static valueToPreset(presetValue: number): Preset | null {\r\n\t\tconst categoryIndex: number = presetValue >> 6;\r\n\t\tconst presetIndex: number = presetValue & 0x3F;\r\n\t\treturn EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\r\n\t}\r\n\tpublic static midiProgramToPresetValue(program: number): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic static nameToPresetValue(presetName: string): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\ninterface NumberArray {\r\n\tlength: number;\r\n\t[index: number]: number;\r\n}\r\n\r\n// A basic FFT operation scales the overall magnitude of elements by the\r\n// square root of the length of the array, √N. Performing a forward FFT and\r\n// then an inverse FFT results in the original array, but multiplied by N.\r\n// This helper function can be used to compensate for that. \r\nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tarray[i] *= factor;\r\n\t}\r\n}\r\n\r\nfunction isPowerOf2(n: number): boolean {\r\n\treturn !!n && !(n & (n - 1));\r\n}\r\n\r\nfunction countBits(n: number): number {\r\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\treturn Math.round(Math.log(n) / Math.log(2));\r\n}\r\n\r\n// Rearranges the elements of the array, swapping the element at an index\r\n// with an element at an index that is the bitwise reverse of the first\r\n// index in base 2. Useful for computing the FFT.\r\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\r\n\tconst bitCount: number = countBits(fullArrayLength);\r\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\tconst finalShift: number = 16 - bitCount;\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\tlet j: number;\r\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\tj = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;\r\n\t\tif (j > i) {\r\n\t\t\tlet temp: number = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Provided for educational purposes. Easier to read than\r\n// fastFourierTransform(), but computes the same result.\r\n// Takes two parallel arrays representing the real and imaginary elements,\r\n// respectively, and returns an array containing two new arrays, which\r\n// contain the complex result of the transform.\r\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\tconst realOut: number[] = [];\r\n\tconst imagOut: number[] = [];\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\trealOut[i] = 0.0;\r\n\t\timagOut[i] = 0.0;\r\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t}\r\n\t}\r\n\treturn [realOut, imagOut];\r\n}\r\n\r\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n// input real and imaginary arrays. Can be used for both forward and inverse\r\n// transforms: swap the order of the arguments for the inverse.\r\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\r\n\treverseIndexBits(realArray, fullArrayLength);\r\n\treverseIndexBits(imagArray, fullArrayLength);\r\n\r\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\tconst startIndex1: number = startIndex + 1;\r\n\t\tconst startIndex2: number = startIndex + 2;\r\n\t\tconst startIndex3: number = startIndex + 3;\r\n\t\tconst real0: number = realArray[startIndex];\r\n\t\tconst real1: number = realArray[startIndex1];\r\n\t\tconst real2: number = realArray[startIndex2];\r\n\t\tconst real3: number = realArray[startIndex3];\r\n\t\tconst imag0: number = imagArray[startIndex];\r\n\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\tconst realTemp0: number = real0 + real1;\r\n\t\tconst realTemp1: number = real0 - real1;\r\n\t\tconst realTemp2: number = real2 + real3;\r\n\t\tconst realTemp3: number = real2 - real3;\r\n\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\trealArray[startIndex] = realTemp0 + realTemp2;\r\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\timagArray[startIndex] = imagTemp0 + imagTemp2;\r\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t}\r\n\r\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\tconst halfLength: number = stride >>> 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tlet c: number = 1.0;\r\n\t\t\tlet s: number = 0.0;\r\n\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the Fourier transform from an array of real-valued time-domain\r\n// samples. The output is specially formatted for space efficieny: elements\r\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n// descending frequency. Overwrites the input array.\r\nexport function forwardRealFourierTransform(array: NumberArray): void {\r\n\tconst fullArrayLength: number = array.length;\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n\r\n\t// First and second pass.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\t// no imaginary elements yet since the input is fully real.\r\n\t\tconst tempA: number = real0 + real1;\r\n\t\tconst tempB: number = real2 + real3;\r\n\t\tarray[index] = tempA + tempB;\r\n\t\tarray[index1] = real0 - real1;\r\n\t\tarray[index2] = tempA - tempB;\r\n\t\tarray[index3] = real2 - real3;\r\n\t}\r\n\r\n\t// Third pass.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst imag3: number = array[index3];\r\n\t\tconst real4: number = array[index4];\r\n\t\tconst real5: number = array[index5];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\tarray[index] = real0 + real4;\r\n\t\tarray[index1] = real1 + tempA;\r\n\t\tarray[index3] = real1 - tempA;\r\n\t\tarray[index4] = real0 - real4;\r\n\t\tarray[index5] = tempB - imag3;\r\n\t\tarray[index7] = tempB + imag3;\r\n\t}\r\n\r\n\t// Handle remaining passes.\r\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\tarray[indexB0] = -imag0 - tempB;\r\n\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the inverse Fourier transform from a specially formatted array of\r\n// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n// the corresponding complex elements, representing cosine wave amplitudes in\r\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n// imaginary values, representing sine wave amplitudes in descending frequency.\r\n// Generates real-valued time-domain samples. Overwrites the input array.\r\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\t// Perform all but the last few passes in reverse.\r\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\tarray[midIndexA] *= 2;\r\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\tarray[midIndexB] *= 2;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// Commented out this block (and compensated with an extra pass above)\r\n\t// because it's slower in my testing so far.\r\n\t// Pass with stride 8.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index6: number = index + 6;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\tconst imag4: number = array[index4];\r\n\t\tconst imag5: number = array[index5];\r\n\t\tconst imag6: number = array[index6];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = real1 - real3;\r\n\t\tconst tempB: number = imag5 + imag7;\r\n\t\tarray[index ] = real0 + imag4;\r\n\t\tarray[index1] = real1 + real3;\r\n\t\tarray[index2] = real2 * 2;\r\n\t\tarray[index3] = imag7 - imag5;\r\n\t\tarray[index4] = real0 - imag4;\r\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\tarray[index6] = imag6 * 2;\r\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t}\r\n\t*/\r\n\t// The final passes with strides 4 and 2, combined into one loop.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1] * 2;\r\n\t\tconst imag2: number = array[index2];\r\n\t\tconst imag3: number = array[index3] * 2;\r\n\t\tconst tempA: number = real0 + imag2;\r\n\t\tconst tempB: number = real0 - imag2;\r\n\t\tarray[index] = tempA + real1;\r\n\t\tarray[index1] = tempA - real1;\r\n\t\tarray[index2] = tempB + imag3;\r\n\t\tarray[index3] = tempB - imag3;\r\n\t}\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}\r\n//}\r\n\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex } from \"./SynthConfig\";\r\nimport { EditorConfig } from \"../editor/EditorConfig\";\r\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\r\nimport { Deque } from \"./Deque\";\r\n\r\ndeclare global {\r\n\tinterface Window {\r\n\t\tAudioContext: any;\r\n\t\twebkitAudioContext: any;\r\n\t}\r\n}\r\n\r\n//namespace beepbox {\r\n// For performance debugging:\r\n//let samplesAccumulated: number = 0;\r\n//let samplePerformance: number = 0;\r\n\r\nconst enum CharCode {\r\n\tSPACE = 32,\r\n\tHASH = 35,\r\n\tPERCENT = 37,\r\n\tAMPERSAND = 38,\r\n\tPLUS = 43,\r\n\tDASH = 45,\r\n\tDOT = 46,\r\n\tNUM_0 = 48,\r\n\tNUM_1 = 49,\r\n\tNUM_2 = 50,\r\n\tNUM_3 = 51,\r\n\tNUM_4 = 52,\r\n\tNUM_5 = 53,\r\n\tNUM_6 = 54,\r\n\tNUM_7 = 55,\r\n\tNUM_8 = 56,\r\n\tNUM_9 = 57,\r\n\tEQUALS = 61,\r\n\tA = 65,\r\n\tB = 66,\r\n\tC = 67,\r\n\tD = 68,\r\n\tE = 69,\r\n\tF = 70,\r\n\tG = 71,\r\n\tH = 72,\r\n\tI = 73,\r\n\tJ = 74,\r\n\tK = 75,\r\n\tL = 76,\r\n\tM = 77,\r\n\tN = 78,\r\n\tO = 79,\r\n\tP = 80,\r\n\tQ = 81,\r\n\tR = 82,\r\n\tS = 83,\r\n\tT = 84,\r\n\tU = 85,\r\n\tV = 86,\r\n\tW = 87,\r\n\tX = 88,\r\n\tY = 89,\r\n\tZ = 90,\r\n\tUNDERSCORE = 95,\r\n\ta = 97,\r\n\tb = 98,\r\n\tc = 99,\r\n\td = 100,\r\n\te = 101,\r\n\tf = 102,\r\n\tg = 103,\r\n\th = 104,\r\n\ti = 105,\r\n\tj = 106,\r\n\tk = 107,\r\n\tl = 108,\r\n\tm = 109,\r\n\tn = 110,\r\n\to = 111,\r\n\tp = 112,\r\n\tq = 113,\r\n\tr = 114,\r\n\ts = 115,\r\n\tt = 116,\r\n\tu = 117,\r\n\tv = 118,\r\n\tw = 119,\r\n\tx = 120,\r\n\ty = 121,\r\n\tz = 122,\r\n\tLEFT_CURLY_BRACE = 123,\r\n\tRIGHT_CURLY_BRACE = 125,\r\n}\r\n\r\nconst enum SongTagCode {\r\n\tbeatCount = CharCode.a,\r\n\tbars = CharCode.b,\r\n\tvibrato = CharCode.c,\r\n\ttransition = CharCode.d,\r\n\tloopEnd = CharCode.e,\r\n\tfilterCutoff = CharCode.f,\r\n\tbarCount = CharCode.g,\r\n\tinterval = CharCode.h,\r\n\tinstrumentCount = CharCode.i,\r\n\tpatternCount = CharCode.j,\r\n\tkey = CharCode.k,\r\n\tloopStart = CharCode.l,\r\n\treverb = CharCode.m,\r\n\tchannelCount = CharCode.n,\r\n\tchannelOctave = CharCode.o,\r\n\tpatterns = CharCode.p,\r\n\teffects = CharCode.q,\r\n\trhythm = CharCode.r,\r\n\tscale = CharCode.s,\r\n\ttempo = CharCode.t,\r\n\tpreset = CharCode.u,\r\n\tvolume = CharCode.v,\r\n\twave = CharCode.w,\r\n\r\n\tfilterResonance = CharCode.y,\r\n\tfilterEnvelope = CharCode.z,\r\n\talgorithm = CharCode.A,\r\n\tfeedbackAmplitude = CharCode.B,\r\n\tchord = CharCode.C,\r\n\tdetune = CharCode.D,\r\n\toperatorEnvelopes = CharCode.E,\r\n\tfeedbackType = CharCode.F,\r\n\tarpeggioSpeed = CharCode.G,\r\n\tharmonics = CharCode.H,\r\n\r\n\tsquareDuty = CharCode.K,\r\n\tpanning = CharCode.L,\r\n\tcustomChipWave = CharCode.M,\r\n\tsongTitle = CharCode.N,\r\n\tlimiterSettings = CharCode.O,\r\n\toperatorAmplitudes = CharCode.P,\r\n\toperatorFrequencies = CharCode.Q,\r\n\r\n\tspectrum = CharCode.S,\r\n\tstartInstrument = CharCode.T,\r\n\tchannelNames = CharCode.U,\r\n\tfeedbackEnvelope = CharCode.V,\r\n\tpulseWidth = CharCode.W,\r\n}\r\n\r\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\r\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\r\nclass BitFieldReader {\r\n\tprivate _bits: number[] = [];\r\n\tprivate _readIndex: number = 0;\r\n\r\n\tconstructor(source: string, startIndex: number, stopIndex: number) {\r\n\t\tfor (let i: number = startIndex; i < stopIndex; i++) {\r\n\t\t\tconst value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n\t\t\tthis._bits.push((value >> 5) & 0x1);\r\n\t\t\tthis._bits.push((value >> 4) & 0x1);\r\n\t\t\tthis._bits.push((value >> 3) & 0x1);\r\n\t\t\tthis._bits.push((value >> 2) & 0x1);\r\n\t\t\tthis._bits.push((value >> 1) & 0x1);\r\n\t\t\tthis._bits.push(value & 0x1);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic read(bitCount: number): number {\r\n\t\tlet result: number = 0;\r\n\t\twhile (bitCount > 0) {\r\n\t\t\tresult = result << 1;\r\n\t\t\tresult += this._bits[this._readIndex++];\r\n\t\t\tbitCount--;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic readLongTail(minValue: number, minBits: number): number {\r\n\t\tlet result: number = minValue;\r\n\t\tlet numBits: number = minBits;\r\n\t\twhile (this._bits[this._readIndex++]) {\r\n\t\t\tresult += 1 << numBits;\r\n\t\t\tnumBits++;\r\n\t\t}\r\n\t\twhile (numBits > 0) {\r\n\t\t\tnumBits--;\r\n\t\t\tif (this._bits[this._readIndex++]) {\r\n\t\t\t\tresult += 1 << numBits;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic readPartDuration(): number {\r\n\t\treturn this.readLongTail(1, 3);\r\n\t}\r\n\r\n\tpublic readLegacyPartDuration(): number {\r\n\t\treturn this.readLongTail(1, 2);\r\n\t}\r\n\r\n\tpublic readPinCount(): number {\r\n\t\treturn this.readLongTail(1, 0);\r\n\t}\r\n\r\n\tpublic readPitchInterval(): number {\r\n\t\tif (this.read(1)) {\r\n\t\t\treturn -this.readLongTail(1, 3);\r\n\t\t} else {\r\n\t\t\treturn this.readLongTail(1, 3);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass BitFieldWriter {\r\n\tprivate _index: number = 0;\r\n\tprivate _bits: number[] = [];\r\n\r\n\tpublic clear() {\r\n\t\tthis._index = 0;\r\n\t}\r\n\r\n\tpublic write(bitCount: number, value: number): void {\r\n\t\tbitCount--;\r\n\t\twhile (bitCount >= 0) {\r\n\t\t\tthis._bits[this._index++] = (value >>> bitCount) & 1;\r\n\t\t\tbitCount--;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writeLongTail(minValue: number, minBits: number, value: number): void {\r\n\t\tif (value < minValue) throw new Error(\"value out of bounds\");\r\n\t\tvalue -= minValue;\r\n\t\tlet numBits: number = minBits;\r\n\t\twhile (value >= (1 << numBits)) {\r\n\t\t\tthis._bits[this._index++] = 1;\r\n\t\t\tvalue -= 1 << numBits;\r\n\t\t\tnumBits++;\r\n\t\t}\r\n\t\tthis._bits[this._index++] = 0;\r\n\t\twhile (numBits > 0) {\r\n\t\t\tnumBits--;\r\n\t\t\tthis._bits[this._index++] = (value >>> numBits) & 1;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writePartDuration(value: number): void {\r\n\t\tthis.writeLongTail(1, 3, value);\r\n\t}\r\n\r\n\tpublic writePinCount(value: number): void {\r\n\t\tthis.writeLongTail(1, 0, value);\r\n\t}\r\n\r\n\tpublic writePitchInterval(value: number): void {\r\n\t\tif (value < 0) {\r\n\t\t\tthis.write(1, 1); // sign\r\n\t\t\tthis.writeLongTail(1, 3, -value);\r\n\t\t} else {\r\n\t\t\tthis.write(1, 0); // sign\r\n\t\t\tthis.writeLongTail(1, 3, value);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic concat(other: BitFieldWriter): void {\r\n\t\tfor (let i: number = 0; i < other._index; i++) {\r\n\t\t\tthis._bits[this._index++] = other._bits[i];\r\n\t\t}\r\n\t}\r\n\r\n\tpublic encodeBase64(buffer: number[]): number[] {\r\n\r\n\t\tfor (let i: number = 0; i < this._index; i += 6) {\r\n\t\t\tconst value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\r\n\t\t\tbuffer.push(base64IntToCharCode[value]);\r\n\t\t}\r\n\t\treturn buffer;\r\n\t}\r\n\r\n\tpublic lengthBase64(): number {\r\n\t\treturn Math.ceil(this._index / 6);\r\n\t}\r\n}\r\n\r\nexport interface NotePin {\r\n\tinterval: number;\r\n\ttime: number;\r\n\tvolume: number;\r\n}\r\n\r\nexport function makeNotePin(interval: number, time: number, volume: number): NotePin {\r\n\treturn { interval: interval, time: time, volume: volume };\r\n}\r\n\r\nfunction clamp(min: number, max: number, val: number): number {\r\n\tmax = max - 1;\r\n\tif (val <= max) {\r\n\t\tif (val >= min) return val;\r\n\t\telse return min;\r\n\t} else {\r\n\t\treturn max;\r\n\t}\r\n}\r\n\r\nfunction validateRange(min: number, max: number, val: number): number {\r\n\tif (min <= val && val <= max) return val;\r\n\tthrow new Error(`Value ${val} not in range [${min}, ${max}]`);\r\n}\r\n\r\nexport class Note {\r\n\tpublic pitches: number[];\r\n\tpublic pins: NotePin[];\r\n\tpublic start: number;\r\n\tpublic end: number;\r\n\r\n\tpublic constructor(pitch: number, start: number, end: number, volume: number, fadeout: boolean = false) {\r\n\t\tthis.pitches = [pitch];\r\n\t\tthis.pins = [makeNotePin(0, 0, volume), makeNotePin(0, end - start, fadeout ? 0 : volume)];\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\t}\r\n\r\n\tpublic pickMainInterval(): number {\r\n\t\tlet longestFlatIntervalDuration: number = 0;\r\n\t\tlet mainInterval: number = 0;\r\n\t\tfor (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\r\n\t\t\tconst pinA: NotePin = this.pins[pinIndex - 1];\r\n\t\t\tconst pinB: NotePin = this.pins[pinIndex];\r\n\t\t\tif (pinA.interval == pinB.interval) {\r\n\t\t\t\tconst duration: number = pinB.time - pinA.time;\r\n\t\t\t\tif (longestFlatIntervalDuration < duration) {\r\n\t\t\t\t\tlongestFlatIntervalDuration = duration;\r\n\t\t\t\t\tmainInterval = pinA.interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (longestFlatIntervalDuration == 0) {\r\n\t\t\tlet loudestVolume: number = 0;\r\n\t\t\tfor (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\r\n\t\t\t\tconst pin: NotePin = this.pins[pinIndex];\r\n\t\t\t\tif (loudestVolume < pin.volume) {\r\n\t\t\t\t\tloudestVolume = pin.volume;\r\n\t\t\t\t\tmainInterval = pin.interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn mainInterval;\r\n\t}\r\n\r\n\tpublic clone(): Note {\r\n\t\tconst newNote: Note = new Note(-1, this.start, this.end, 6);\r\n\t\tnewNote.pitches = this.pitches.concat();\r\n\t\tnewNote.pins = [];\r\n\t\tfor (const pin of this.pins) {\r\n\t\t\tnewNote.pins.push(makeNotePin(pin.interval, pin.time, pin.volume));\r\n\t\t}\r\n\t\treturn newNote;\r\n\t}\r\n}\r\n\r\nexport class Pattern {\r\n\tpublic notes: Note[] = [];\r\n\tpublic instrument: number = 0;\r\n\r\n\tpublic cloneNotes(): Note[] {\r\n\t\tconst result: Note[] = [];\r\n\t\tfor (const note of this.notes) {\r\n\t\t\tresult.push(note.clone());\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tthis.notes.length = 0;\r\n\t\tthis.instrument = 0;\r\n\t}\r\n}\r\n\r\nexport class Operator {\r\n\tpublic frequency: number = 0;\r\n\tpublic amplitude: number = 0;\r\n\tpublic envelope: number = 0;\r\n\r\n\tconstructor(index: number) {\r\n\t\tthis.reset(index);\r\n\t}\r\n\r\n\tpublic reset(index: number): void {\r\n\t\tthis.frequency = 0;\r\n\t\tthis.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n\t\tthis.envelope = (index == 0) ? 0 : 1;\r\n\t}\r\n\r\n\tpublic copy(other: Operator): void {\r\n\t\tthis.frequency = other.frequency;\r\n\t\tthis.amplitude = other.amplitude;\r\n\t\tthis.envelope = other.envelope;\r\n\t}\r\n}\r\n\r\nexport class SpectrumWave {\r\n\tpublic spectrum: number[] = [];\r\n\tprivate _wave: Float32Array | null = null;\r\n\tprivate _waveIsReady: boolean = false;\r\n\r\n\tconstructor(isNoiseChannel: boolean) {\r\n\t\tthis.reset(isNoiseChannel);\r\n\t}\r\n\r\n\tpublic reset(isNoiseChannel: boolean): void {\r\n\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\tif (isNoiseChannel) {\r\n\t\t\t\tthis.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\r\n\t\t\t} else {\r\n\t\t\t\tconst isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\r\n\t\t\t\tthis.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic markCustomWaveDirty(): void {\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic getCustomWave(lowestOctave: number): Float32Array {\r\n\t\tif (!this._waveIsReady || this._wave == null) {\r\n\t\t\tlet waveLength: number = Config.chipNoiseLength;\r\n\r\n\t\t\tif (this._wave == null || this._wave.length != waveLength + 1) {\r\n\t\t\t\tthis._wave = new Float32Array(waveLength + 1);\r\n\t\t\t}\r\n\t\t\tconst wave: Float32Array = this._wave;\r\n\r\n\t\t\tfor (let i: number = 0; i < waveLength; i++) {\r\n\t\t\t\twave[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst highestOctave: number = 14;\r\n\t\t\tconst falloffRatio: number = 0.25;\r\n\t\t\t// Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\r\n\t\t\tconst pitchTweak: number[] = [0, 1 / 7, Math.log(5 / 4) / Math.LN2, 3 / 7, Math.log(3 / 2) / Math.LN2, 5 / 7, 6 / 7];\r\n\t\t\tfunction controlPointToOctave(point: number): number {\r\n\t\t\t\treturn lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\r\n\t\t\t}\r\n\r\n\t\t\tlet combinedAmplitude: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\r\n\t\t\t\tconst value1: number = (i <= 0) ? 0 : this.spectrum[i - 1];\r\n\t\t\t\tconst value2: number = (i >= Config.spectrumControlPoints) ? this.spectrum[Config.spectrumControlPoints - 1] : this.spectrum[i];\r\n\t\t\t\tconst octave1: number = controlPointToOctave(i - 1);\r\n\t\t\t\tlet octave2: number = controlPointToOctave(i);\r\n\t\t\t\tif (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\r\n\t\t\t\tif (value1 == 0 && value2 == 0) continue;\r\n\r\n\t\t\t\tcombinedAmplitude += 0.02 * drawNoiseSpectrum(wave, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\r\n\t\t\t}\r\n\t\t\tif (this.spectrum[Config.spectrumControlPoints - 1] > 0) {\r\n\t\t\t\tcombinedAmplitude += 0.02 * drawNoiseSpectrum(wave, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, this.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\r\n\t\t\t}\r\n\r\n\t\t\tinverseRealFourierTransform(wave, waveLength);\r\n\t\t\tscaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\r\n\r\n\t\t\t// Duplicate the first sample at the end for easier wrap-around interpolation.\r\n\t\t\twave[waveLength] = wave[0];\r\n\r\n\t\t\tthis._waveIsReady = true;\r\n\t\t}\r\n\t\treturn this._wave;\r\n\t}\r\n}\r\n\r\nexport class HarmonicsWave {\r\n\tpublic harmonics: number[] = [];\r\n\tprivate _wave: Float32Array | null = null;\r\n\tprivate _waveIsReady: boolean = false;\r\n\r\n\tconstructor() {\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\tthis.harmonics[i] = 0;\r\n\t\t}\r\n\t\tthis.harmonics[0] = Config.harmonicsMax;\r\n\t\tthis.harmonics[3] = Config.harmonicsMax;\r\n\t\tthis.harmonics[6] = Config.harmonicsMax;\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic markCustomWaveDirty(): void {\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic getCustomWave(): Float32Array {\r\n\t\tif (!this._waveIsReady || this._wave == null) {\r\n\t\t\tlet waveLength: number = Config.harmonicsWavelength;\r\n\t\t\tconst retroWave: Float32Array = getDrumWave(0);\r\n\r\n\t\t\tif (this._wave == null || this._wave.length != waveLength + 1) {\r\n\t\t\t\tthis._wave = new Float32Array(waveLength + 1);\r\n\t\t\t}\r\n\t\t\tconst wave: Float32Array = this._wave;\r\n\r\n\t\t\tfor (let i: number = 0; i < waveLength; i++) {\r\n\t\t\t\twave[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst overallSlope: number = -0.25;\r\n\t\t\tlet combinedControlPointAmplitude: number = 1;\r\n\r\n\t\t\tfor (let harmonicIndex: number = 0; harmonicIndex < Config.harmonicsRendered; harmonicIndex++) {\r\n\t\t\t\tconst harmonicFreq: number = harmonicIndex + 1;\r\n\t\t\t\tlet controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? this.harmonics[harmonicIndex] : this.harmonics[Config.harmonicsControlPoints - 1];\r\n\t\t\t\tif (harmonicIndex >= Config.harmonicsControlPoints) {\r\n\t\t\t\t\tcontrolValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (Config.harmonicsRendered - Config.harmonicsControlPoints);\r\n\t\t\t\t}\r\n\t\t\t\tconst normalizedValue: number = controlValue / Config.harmonicsMax;\r\n\t\t\t\tlet amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\r\n\t\t\t\tif (harmonicIndex < Config.harmonicsControlPoints) {\r\n\t\t\t\t\tcombinedControlPointAmplitude += amplitude;\r\n\t\t\t\t}\r\n\t\t\t\tamplitude *= Math.pow(harmonicFreq, overallSlope);\r\n\r\n\t\t\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the LFSR\r\n\t\t\t\t// retro wave (effectively random) to avoid egregiously tall spikes.\r\n\t\t\t\tamplitude *= retroWave[harmonicIndex + 589];\r\n\r\n\t\t\t\twave[waveLength - harmonicFreq] = amplitude;\r\n\t\t\t}\r\n\r\n\t\t\tinverseRealFourierTransform(wave, waveLength);\r\n\r\n\t\t\t// Limit the maximum wave amplitude.\r\n\t\t\tconst mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\r\n\r\n\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\tlet cumulative: number = 0;\r\n\t\t\tlet wavePrev: number = 0;\r\n\t\t\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\twavePrev = wave[i] * mult;\r\n\t\t\t\twave[i] = cumulative;\r\n\t\t\t}\r\n\t\t\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\t\t\twave[waveLength] = wave[0];\r\n\r\n\t\t\tthis._waveIsReady = true;\r\n\t\t}\r\n\t\treturn this._wave;\r\n\t}\r\n}\r\n\r\nexport class Instrument {\r\n\tpublic type: InstrumentType = InstrumentType.chip;\r\n\tpublic preset: number = 0;\r\n\tpublic chipWave: number = 2;\r\n\tpublic chipNoise: number = 1;\r\n\tpublic filterCutoff: number = 12;\r\n\tpublic filterResonance: number = 0;\r\n\tpublic filterEnvelope: number = 1;\r\n\tpublic transition: number = 1;\r\n\tpublic vibrato: number = 0;\r\n\tpublic vibratoDepth: number = 0;\r\n\tpublic vibratoSpeed: number = 10;\r\n\tpublic vibratoDelay: number = 0;\r\n\tpublic vibratoType: number = 0;\r\n\tpublic interval: number = 0;\r\n\tpublic effects: number = 0;\r\n\tpublic chord: number = 1;\r\n\tpublic volume: number = 0;\r\n\tpublic pan: number = Config.panCenter;\r\n\tpublic panDelay: number = 10;\r\n\tpublic arpeggioSpeed: number = 12;\r\n\tpublic fastTwoNoteArp: boolean = false;\r\n\tpublic tieNoteTransition: boolean = false;\r\n\tpublic clicklessTransition: boolean = false;\r\n\tpublic detune: number = 0;\r\n\tpublic pulseWidth: number = Config.pulseWidthRange;\r\n\tpublic pulseEnvelope: number = 1;\r\n\tpublic algorithm: number = 0;\r\n\tpublic feedbackType: number = 0;\r\n\tpublic feedbackAmplitude: number = 0;\r\n\tpublic feedbackEnvelope: number = 1;\r\n\tpublic LFOtime: number = 0;\r\n\tpublic nextLFOtime: number = 0;\r\n\tpublic arpTime: number = 0;\r\n\tpublic customChipWave: Float64Array = new Float64Array(64);\r\n\tpublic customChipWaveIntegral: Float64Array = new Float64Array(65); // One extra element for wrap-around in chipSynth.\r\n\tpublic readonly operators: Operator[] = [];\r\n\tpublic readonly spectrumWave: SpectrumWave;\r\n\tpublic readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\r\n\tpublic readonly drumsetEnvelopes: number[] = [];\r\n\tpublic readonly drumsetSpectrumWaves: SpectrumWave[] = [];\r\n\tpublic modChannels: number[] = [];\r\n\tpublic modStatuses: ModStatus[] = [];\r\n\tpublic modInstruments: number[] = [];\r\n\tpublic modSettings: ModSetting[] = [];\r\n\r\n\tconstructor(isNoiseChannel: boolean, isModChannel: boolean) {\r\n\r\n\t\tif (isModChannel) {\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tthis.modChannels.push(0);\r\n\t\t\t\tthis.modStatuses.push(ModStatus.msNone);\r\n\t\t\t\tthis.modInstruments.push(0);\r\n\t\t\t\tthis.modSettings.push(ModSetting.mstNone);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.spectrumWave = new SpectrumWave(isNoiseChannel);\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\tthis.operators[i] = new Operator(i);\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\tthis.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\tthis.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < 64; i++) {\r\n\t\t\tthis.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\r\n\t\t}\r\n\r\n\t\tlet sum: number = 0.0;\r\n\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\tsum += this.customChipWave[i];\r\n\t\t}\r\n\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\tlet cumulative: number = 0;\r\n\t\tlet wavePrev: number = 0;\r\n\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\tcumulative += wavePrev;\r\n\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t}\r\n\r\n\t\t// 65th, last sample is for anti-aliasing\r\n\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\r\n\t}\r\n\r\n\tpublic setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n\t\t// Mod channels are forced to one type.\r\n\t\tif (isModChannel) type = InstrumentType.mod;\r\n\t\tthis.type = type;\r\n\t\tthis.preset = type;\r\n\t\tthis.volume = 0;\r\n\t\tthis.pan = Config.panCenter;\r\n\t\tthis.panDelay = 10;\r\n\t\tthis.arpeggioSpeed = 12;\r\n\t\tthis.detune = 0;\r\n\t\tthis.tieNoteTransition = false;\r\n\t\tthis.clicklessTransition = false;\r\n\t\tswitch (type) {\r\n\t\t\tcase InstrumentType.chip:\r\n\t\t\t\tthis.chipWave = 2;\r\n\t\t\t\tthis.filterCutoff = 6;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.customChipWave:\r\n\t\t\t\tthis.chipWave = 2;\r\n\t\t\t\tthis.filterCutoff = 6;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tfor (let i: number = 0; i < 64; i++) {\r\n\t\t\t\t\tthis.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += this.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.fm:\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = 1;\r\n\t\t\t\tthis.algorithm = 0;\r\n\t\t\t\tthis.feedbackType = 0;\r\n\t\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\t\tthis.feedbackEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\r\n\t\t\t\t\tthis.operators[i].reset(i);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.noise:\r\n\t\t\t\tthis.chipNoise = 1;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.spectrum:\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.spectrumWave.reset(isNoiseChannel);\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.drumset:\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\t\tthis.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\t\tif (this.drumsetSpectrumWaves[i] == undefined) {\r\n\t\t\t\t\t\tthis.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.drumsetSpectrumWaves[i].reset(isNoiseChannel);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.harmonics:\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.harmonicsWave.reset();\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.pwm:\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange;\r\n\t\t\t\tthis.pulseEnvelope = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.mod:\r\n\t\t\t\tthis.transition = 0;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.modChannels = [];\r\n\t\t\t\tthis.modStatuses = [];\r\n\t\t\t\tthis.modInstruments = [];\r\n\t\t\t\tthis.modSettings = [];\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tthis.modChannels.push(0);\r\n\t\t\t\t\tthis.modStatuses.push(ModStatus.msNone);\r\n\t\t\t\t\tthis.modInstruments.push(0);\r\n\t\t\t\t\tthis.modSettings.push(ModSetting.mstNone);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Unrecognized instrument type: \" + type);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toJsonObject(): Object {\r\n\t\tconst instrumentObject: any = {\r\n\t\t\t\"type\": Config.instrumentTypeNames[this.type],\r\n\t\t\t\"volume\": this.volume,\r\n\t\t\t\"pan\": (this.pan - Config.panCenter) * 100 / Config.panCenter,\r\n\t\t\t\"panDelay\": this.panDelay,\r\n\t\t\t\"arpeggioSpeed\": this.arpeggioSpeed,\r\n\t\t\t\"fastTwoNoteArp\": this.fastTwoNoteArp,\r\n\t\t\t\"tieNoteTransition\": this.tieNoteTransition,\r\n\t\t\t\"clicklessTransition\": this.clicklessTransition,\r\n\t\t\t\"vibrato\": this.vibrato,\r\n\t\t\t\"vibratoDepth\": this.vibratoDepth,\r\n\t\t\t\"vibratoDelay\": this.vibratoDelay,\r\n\t\t\t\"vibratoSpeed\": this.vibratoSpeed,\r\n\t\t\t\"vibratoType\": this.vibratoType,\r\n\t\t\t\"detune\": this.detune,\r\n\t\t\t\"effects\": Config.effectsNames[this.effects],\r\n\t\t};\r\n\r\n\t\tif (this.preset != this.type) {\r\n\t\t\tinstrumentObject[\"preset\"] = this.preset;\r\n\t\t}\r\n\r\n\t\tif (this.type != InstrumentType.drumset) {\r\n\t\t\tinstrumentObject[\"transition\"] = Config.transitions[this.transition].name;\r\n\t\t\tinstrumentObject[\"chord\"] = this.getChord().name;\r\n\t\t\tinstrumentObject[\"filterCutoffHz\"] = Math.round(Config.filterCutoffMaxHz * Math.pow(2.0, this.getFilterCutoffOctaves()));\r\n\t\t\tinstrumentObject[\"filterResonance\"] = Math.round(100 * this.filterResonance / (Config.filterResonanceRange - 1));\r\n\t\t\tinstrumentObject[\"filterEnvelope\"] = this.getFilterEnvelope().name;\r\n\t\t}\r\n\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tinstrumentObject[\"spectrum\"] = [];\r\n\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\tinstrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tinstrumentObject[\"drums\"] = [];\r\n\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\tconst spectrum: number[] = [];\r\n\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\tspectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\r\n\t\t\t\t}\r\n\t\t\t\tinstrumentObject[\"drums\"][j] = {\r\n\t\t\t\t\t\"filterEnvelope\": this.getDrumsetEnvelope(j).name,\r\n\t\t\t\t\t\"spectrum\": spectrum,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.chip) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.customChipWave) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"customChipWave\"] = new Float64Array(64);\r\n\t\t\tinstrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\r\n\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\tinstrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\r\n\t\t\t\t// Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\r\n\t\t\t\t//instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\r\n\t\t\t}\r\n\r\n\t\t\tinstrumentObject[\"customChipWaveIntegral\"][64] = 0;\r\n\t\t} else if (this.type == InstrumentType.pwm) {\r\n\t\t\tinstrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n\t\t\tinstrumentObject[\"pulseEnvelope\"] = Config.envelopes[this.pulseEnvelope].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"harmonics\"] = [];\r\n\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\tinstrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.fm) {\r\n\t\t\tconst operatorArray: Object[] = [];\r\n\t\t\tfor (const operator of this.operators) {\r\n\t\t\t\toperatorArray.push({\r\n\t\t\t\t\t\"frequency\": Config.operatorFrequencies[operator.frequency].name,\r\n\t\t\t\t\t\"amplitude\": operator.amplitude,\r\n\t\t\t\t\t\"envelope\": Config.envelopes[operator.envelope].name,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\r\n\t\t\tinstrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\r\n\t\t\tinstrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n\t\t\tinstrumentObject[\"feedbackEnvelope\"] = Config.envelopes[this.feedbackEnvelope].name;\r\n\t\t\tinstrumentObject[\"operators\"] = operatorArray;\r\n\t\t} else if (this.type == InstrumentType.mod) {\r\n\t\t\tinstrumentObject[\"modChannels\"] = [];\r\n\t\t\tinstrumentObject[\"modInstruments\"] = [];\r\n\t\t\tinstrumentObject[\"modSettings\"] = [];\r\n\t\t\tinstrumentObject[\"modStatuses\"] = [];\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tinstrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\r\n\t\t\t\tinstrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\r\n\t\t\t\tinstrumentObject[\"modSettings\"][mod] = this.modSettings[mod];\r\n\t\t\t\tinstrumentObject[\"modStatuses\"][mod] = this.modStatuses[mod];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type\");\r\n\t\t}\r\n\t\treturn instrumentObject;\r\n\t}\r\n\r\n\tpublic fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean): void {\r\n\t\tif (instrumentObject == undefined) instrumentObject = {};\r\n\r\n\t\tlet type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\r\n\t\tif (type.valueOf() == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\r\n\t\tthis.setTypeAndReset(type, isNoiseChannel, isModChannel);\r\n\r\n\t\tif (instrumentObject[\"preset\"] != undefined) {\r\n\t\t\tthis.preset = instrumentObject[\"preset\"] >>> 0;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"volume\"] != undefined) {\r\n\t\t\tthis.volume = clamp(-Config.volumeRange / 2, Config.volumeRange / 2, instrumentObject[\"volume\"] | 0);\r\n\t\t} else {\r\n\t\t\tthis.volume = 0;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"pan\"] != undefined) {\r\n\t\t\tthis.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\r\n\t\t} else {\r\n\t\t\tthis.pan = Config.panCenter;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"panDelay\"] != undefined) {\r\n\t\t\tthis.panDelay = (instrumentObject[\"panDelay\"] | 0);\r\n\t\t} else {\r\n\t\t\tthis.panDelay = 10;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"detune\"] != undefined) {\r\n\t\t\tthis.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.detune = 0;\r\n\t\t}\r\n\r\n\t\tconst oldTransitionNames: Dictionary<number> = { \"binary\": 0, \"sudden\": 1, \"smooth\": 2 };\r\n\t\tconst transitionObject = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so try that too.\r\n\t\tthis.transition = oldTransitionNames[transitionObject] != undefined ? oldTransitionNames[transitionObject] : Config.transitions.findIndex(transition => transition.name == transitionObject);\r\n\t\tif (this.transition == -1) this.transition = 1;\r\n\r\n\t\tthis.effects = Config.effectsNames.indexOf(instrumentObject[\"effects\"]);\r\n\t\tif (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\r\n\r\n\t\tif (instrumentObject[\"filterCutoffHz\"] != undefined) {\r\n\t\t\tthis.filterCutoff = clamp(0, Config.filterCutoffRange, Math.round((Config.filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / Config.filterCutoffMaxHz) / Math.LN2));\r\n\t\t} else {\r\n\t\t\tthis.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\r\n\t\t}\r\n\t\tif (instrumentObject[\"filterResonance\"] != undefined) {\r\n\t\t\tthis.filterResonance = clamp(0, Config.filterResonanceRange, Math.round((Config.filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\r\n\t\t} else {\r\n\t\t\tthis.filterResonance = 0;\r\n\t\t}\r\n\t\tthis.filterEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"filterEnvelope\"]);\r\n\t\tif (this.filterEnvelope == -1) this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\r\n\t\tif (instrumentObject[\"filter\"] != undefined) {\r\n\t\t\tconst legacyToCutoff: number[] = [20, 12, 6, 0, 16, 10, 4];\r\n\t\t\tconst legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n\t\t\tconst filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\t\t\tconst oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\r\n\t\t\tlet legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\r\n\t\t\tif (legacyFilter == -1) legacyFilter = 0;\r\n\t\t\tthis.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\tthis.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\tthis.filterResonance = 0;\r\n\t\t}\r\n\r\n\t\tconst legacyEffectNames: ReadonlyArray<string> = [\"none\", \"vibrato light\", \"vibrato delayed\", \"vibrato heavy\"];\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tthis.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n\t\t\tif (this.chipNoise == -1) this.chipNoise = 1;\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tif (instrumentObject[\"spectrum\"] != undefined) {\r\n\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\tthis.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tif (instrumentObject[\"drums\"] != undefined) {\r\n\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\tconst drum: any = instrumentObject[\"drums\"][j];\r\n\t\t\t\t\tif (drum == undefined) continue;\r\n\r\n\t\t\t\t\tif (drum[\"filterEnvelope\"] != undefined) {\r\n\t\t\t\t\t\tthis.drumsetEnvelopes[j] = Config.envelopes.findIndex(envelope => envelope.name == drum[\"filterEnvelope\"]);\r\n\t\t\t\t\t\tif (this.drumsetEnvelopes[j] == -1) this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (drum[\"spectrum\"] != undefined) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tthis.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tif (instrumentObject[\"harmonics\"] != undefined) {\r\n\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\tthis.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\t\t} else if (this.type == InstrumentType.pwm) {\r\n\t\t\tif (instrumentObject[\"pulseWidth\"] != undefined) {\r\n\t\t\t\tthis.pulseWidth = clamp(0, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\r\n\t\t\t} else {\r\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"pulseEnvelope\"] != undefined) {\r\n\t\t\t\tthis.pulseEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"pulseEnvelope\"]);\r\n\t\t\t\tif (this.pulseEnvelope == -1) this.pulseEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\t\t} else if (this.type == InstrumentType.chip) {\r\n\t\t\tconst legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\r\n\t\t\tthis.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n\t\t\tif (this.chipWave == -1) this.chipWave = 1;\r\n\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t} else if (instrumentObject[\"chorus\"] != undefined) {\r\n\t\t\t\tconst legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n\t\t\t\tthis.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t\t// The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n\t\t\tif (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n\t\t\t\tthis.interval = 2;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.fm) {\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 3;\r\n\r\n\t\t\tthis.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\r\n\t\t\tif (this.algorithm == -1) this.algorithm = 0;\r\n\t\t\tthis.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\r\n\t\t\tif (this.feedbackType == -1) this.feedbackType = 0;\r\n\t\t\tif (instrumentObject[\"feedbackAmplitude\"] != undefined) {\r\n\t\t\t\tthis.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst legacyEnvelopeNames: Dictionary<number> = { \"pluck 1\": 6, \"pluck 2\": 7, \"pluck 3\": 8 };\r\n\t\t\tthis.feedbackEnvelope = legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] != undefined ? legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"feedbackEnvelope\"]);\r\n\t\t\tif (this.feedbackEnvelope == -1) this.feedbackEnvelope = 0;\r\n\r\n\t\t\tfor (let j: number = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\tconst operator: Operator = this.operators[j];\r\n\t\t\t\tlet operatorObject: any = undefined;\r\n\t\t\t\tif (instrumentObject[\"operators\"]) operatorObject = instrumentObject[\"operators\"][j];\r\n\t\t\t\tif (operatorObject == undefined) operatorObject = {};\r\n\r\n\t\t\t\toperator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\r\n\t\t\t\tif (operator.frequency == -1) operator.frequency = 0;\r\n\t\t\t\tif (operatorObject[\"amplitude\"] != undefined) {\r\n\t\t\t\t\toperator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\r\n\t\t\t\t} else {\r\n\t\t\t\t\toperator.amplitude = 0;\r\n\t\t\t\t}\r\n\t\t\t\toperator.envelope = legacyEnvelopeNames[operatorObject[\"envelope\"]] != undefined ? legacyEnvelopeNames[operatorObject[\"envelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == operatorObject[\"envelope\"]);\r\n\t\t\t\tif (operator.envelope == -1) operator.envelope = 0;\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.customChipWave) {\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t} else if (instrumentObject[\"chorus\"] != undefined) {\r\n\t\t\t\tconst legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n\t\t\t\tthis.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t\t// The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n\t\t\tif (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n\t\t\t\tthis.interval = 2;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"customChipWave\"]) {\r\n\r\n\t\t\t\tfor (let i: number = 0; i < 64; i++) {\r\n\t\t\t\t\tthis.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += this.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 65th, last sample is for anti-aliasing\r\n\t\t\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\t\t\t}\r\n\r\n\t\t} else if (this.type == InstrumentType.mod) {\r\n\t\t\tif (instrumentObject[\"modChannels\"] != undefined) {\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tthis.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\r\n\t\t\t\t\tthis.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\r\n\t\t\t\t\tthis.modSettings[mod] = instrumentObject[\"modSettings\"][mod];\r\n\t\t\t\t\tthis.modStatuses[mod] = instrumentObject[\"modStatuses\"][mod];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type.\");\r\n\t\t}\r\n\r\n\t\tif (this.type != InstrumentType.mod) {\r\n\t\t\t// Arpeggio speed\r\n\t\t\tif (this.chord == 2 && instrumentObject[\"arpeggioSpeed\"] != undefined) {\r\n\t\t\t\tthis.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\r\n\t\t\t\tthis.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fastTwoNoteArp = useFastTwoNoteArp;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"tieNoteTransition\"] != undefined) {\r\n\t\t\t\tthis.tieNoteTransition = instrumentObject[\"tieNoteTransition\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.tieNoteTransition = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"clicklessTransition\"] != undefined) {\r\n\t\t\t\tthis.clicklessTransition = instrumentObject[\"clicklessTransition\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.clicklessTransition = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static frequencyFromPitch(pitch: number): number {\r\n\t\t// the pitch relative to 1, then offset by half number of octaves, so that center frequency is in the center.\r\n\t\treturn Config.centerFrequency * Math.pow(2.0, pitch / Config.pitchesPerOctave - Math.round(Config.pitchOctaves/2) );\r\n\t}\r\n\r\n\tpublic static drumsetIndexReferenceDelta(index: number): number {\r\n\t\t// 44100 is common sampling frequency, 6 is the drum spacing interval needed to span from the spectrum Base Pitch to the max pitch (I think at least)\r\n\t\treturn Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * (Config.pitchOctaves * Config.pitchesPerOctave - Config.spectrumBasePitch) / Config.drumCount) / 44100;\r\n\t}\r\n\r\n\tprivate static _drumsetIndexToSpectrumOctave(index: number) {\r\n\t\t// 15 + (a negative (drumsetIndexReferenceDelta is less than 2^0)), I have no idea what 15 means here.\r\n\t\treturn 15 + Math.log(Instrument.drumsetIndexReferenceDelta(index)) / Math.LN2;\r\n\t}\r\n\r\n\tpublic warmUp(): void {\r\n\t\tthis.LFOtime = 0;\r\n\t\tthis.nextLFOtime = 0;\r\n\t\tthis.arpTime = 0;\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tgetDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tthis.harmonicsWave.getCustomWave();\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tthis.spectrumWave.getCustomWave(8);\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\tthis.drumsetSpectrumWaves[i].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(i));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getDrumWave(): Float32Array {\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\treturn getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\treturn this.spectrumWave.getCustomWave(8);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unhandled instrument type in getDrumWave\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getDrumsetWave(pitch: number): Float32Array {\r\n\t\tif (this.type == InstrumentType.drumset) {\r\n\t\t\treturn this.drumsetSpectrumWaves[pitch].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(pitch));\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unhandled instrument type in getDrumWave\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getTransition(): Transition {\r\n\t\treturn this.type == InstrumentType.drumset ? Config.transitions.dictionary[\"hard fade\"] :\r\n\t\t\tthis.type == InstrumentType.mod ? Config.transitions.dictionary[\"seamless\"] : Config.transitions[this.transition];\r\n\t}\r\n\tpublic getChord(): Chord {\r\n\t\treturn this.type == InstrumentType.drumset ? Config.chords.dictionary[\"harmony\"] : Config.chords[this.chord];\r\n\t}\r\n\tpublic getFilterCutoffOctaves(): number {\r\n\t\treturn this.type == InstrumentType.drumset ? 0 : (this.filterCutoff - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t}\r\n\tpublic getFilterIsFirstOrder(): boolean {\r\n\t\treturn this.type == InstrumentType.drumset ? false : this.filterResonance == 0;\r\n\t}\r\n\tpublic getFilterResonance(): number {\r\n\t\treturn this.type == InstrumentType.drumset ? 1 : this.filterResonance;\r\n\t}\r\n\tpublic getFilterEnvelope(): Envelope {\r\n\t\tif (this.type == InstrumentType.drumset) throw new Error(\"Can't getFilterEnvelope() for drumset.\");\r\n\t\treturn Config.envelopes[this.filterEnvelope];\r\n\t}\r\n\tpublic getDrumsetEnvelope(pitch: number): Envelope {\r\n\t\tif (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\r\n\t\treturn Config.envelopes[this.drumsetEnvelopes[pitch]];\r\n\t}\r\n}\r\n\r\nexport enum ModStatus {\r\n\tmsForPitch = 0,\r\n\tmsForNoise = 1,\r\n\tmsForSong = 2,\r\n\tmsNone = 3,\r\n}\r\n\r\nexport enum ModSetting {\r\n\tmstNone = 0,\r\n\tmstSongVolume = 1,\r\n\tmstTempo = 2,\r\n\tmstReverb = 3,\r\n\tmstNextBar = 4,\r\n\tmstInsVolume = 5,\r\n\tmstPan = 6,\r\n\tmstFilterCut = 7,\r\n\tmstFilterPeak = 8,\r\n\tmstFMSlider1 = 9,\r\n\tmstFMSlider2 = 10,\r\n\tmstFMSlider3 = 11,\r\n\tmstFMSlider4 = 12,\r\n\tmstFMFeedback = 13,\r\n\tmstPulseWidth = 14,\r\n\tmstDetune = 15,\r\n\tmstVibratoDepth = 16,\r\n\tmstSongDetune = 17,\r\n\tmstVibratoSpeed = 18,\r\n\tmstVibratoDelay = 19,\r\n\tmstArpeggioSpeed = 20,\r\n\tmstPanDelay = 21,\r\n\tmstResetArpeggio = 22,\r\n\tmstMaxValue = 23,\r\n}\r\n\r\nexport class Channel {\r\n\tpublic octave: number = 0;\r\n\tpublic readonly instruments: Instrument[] = [];\r\n\tpublic readonly patterns: Pattern[] = [];\r\n\tpublic readonly bars: number[] = [];\r\n\tpublic muted: boolean = false;\r\n\tpublic name: string = \"\";\r\n}\r\n\r\nexport class Song {\r\n\tprivate static readonly _format: string = \"BeepBox\";\r\n\tprivate static readonly _oldestBeepboxVersion: number = 2;\r\n\tprivate static readonly _latestBeepboxVersion: number = 8;\r\n\tprivate static readonly _oldestJummBoxVersion: number = 1;\r\n\tprivate static readonly _latestJummBoxVersion: number = 4;\r\n\t// One-character variant detection at the start of URL to distinguish variants such as JummBox.\r\n\tprivate static readonly _variant = 0x6A; //\"j\" ~ jummbox\r\n\r\n\tpublic title: string;\r\n\tpublic scale: number;\r\n\tpublic key: number;\r\n\tpublic tempo: number;\r\n\tpublic reverb: number;\r\n\tpublic beatsPerBar: number;\r\n\tpublic barCount: number;\r\n\tpublic patternsPerChannel: number;\r\n\tpublic rhythm: number;\r\n\tpublic instrumentsPerChannel: number;\r\n\tpublic loopStart: number;\r\n\tpublic loopLength: number;\r\n\tpublic pitchChannelCount: number;\r\n\tpublic noiseChannelCount: number;\r\n\tpublic modChannelCount: number;\r\n\tpublic readonly channels: Channel[] = [];\r\n\tpublic limitDecay: number = 4.0;\r\n\tpublic limitRise: number = 4000.0;\r\n\tpublic compressionThreshold: number = 1.0;\r\n\tpublic limitThreshold: number = 1.0;\r\n\tpublic compressionRatio: number = 1.0;\r\n\tpublic limitRatio: number = 1.0;\r\n\tpublic masterGain: number = 1.0;\r\n\tpublic inVolumeCap: number = 0.0;\r\n\tpublic outVolumeCap: number = 0.0;\r\n\r\n\t// Maximum value possible for the mod (total number of possible positions)\r\n\tpublic mstMaxVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n\t\t[ModSetting.mstNone, 6],\r\n\t\t[ModSetting.mstSongVolume, 100],\r\n\t\t[ModSetting.mstTempo, Config.tempoMax - Config.tempoMin],\r\n\t\t[ModSetting.mstReverb, Config.reverbRange - 1],\r\n\t\t[ModSetting.mstNextBar, 1],\r\n\t\t[ModSetting.mstInsVolume, Config.volumeRange],\r\n\t\t[ModSetting.mstPan, Config.panMax],\r\n\t\t[ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n\t\t[ModSetting.mstFilterPeak, Config.filterResonanceRange - 1],\r\n\t\t[ModSetting.mstFMSlider1, 15],\r\n\t\t[ModSetting.mstFMSlider2, 15],\r\n\t\t[ModSetting.mstFMSlider3, 15],\r\n\t\t[ModSetting.mstFMSlider4, 15],\r\n\t\t[ModSetting.mstFMFeedback, 15],\r\n\t\t[ModSetting.mstPulseWidth, Config.pulseWidthRange],\r\n\t\t[ModSetting.mstDetune, Config.detuneMax - Config.detuneMin],\r\n\t\t[ModSetting.mstVibratoDepth, 50],\r\n\t\t[ModSetting.mstSongDetune, Config.songDetuneMax - Config.songDetuneMin],\r\n\t\t[ModSetting.mstVibratoSpeed, 30],\r\n\t\t[ModSetting.mstVibratoDelay, 50],\r\n\t\t[ModSetting.mstArpeggioSpeed, 50],\r\n\t\t[ModSetting.mstPanDelay, 20],\r\n\t\t[ModSetting.mstResetArpeggio, 1],\r\n\t\t[ModSetting.mstMaxValue, 6],\r\n\t]\r\n\t);\r\n\r\n\t// When creating a new note, this is the value to set a mod note to (generally the most \"neutral\" value possible)\r\n\tpublic mstNewNoteVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n\t\t[ModSetting.mstNone, 6],\r\n\t\t[ModSetting.mstSongVolume, 100],\r\n\t\t[ModSetting.mstTempo, Math.ceil((Config.tempoMax - Config.tempoMin) / 2)],\r\n\t\t[ModSetting.mstReverb, 0],\r\n\t\t[ModSetting.mstNextBar, 1],\r\n\t\t[ModSetting.mstInsVolume, Math.ceil(Config.volumeRange / 2)],\r\n\t\t[ModSetting.mstPan, Math.ceil(Config.panMax / 2)],\r\n\t\t[ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n\t\t[ModSetting.mstFilterPeak, 0],\r\n\t\t[ModSetting.mstFMSlider1, 15],\r\n\t\t[ModSetting.mstFMSlider2, 15],\r\n\t\t[ModSetting.mstFMSlider3, 15],\r\n\t\t[ModSetting.mstFMSlider4, 15],\r\n\t\t[ModSetting.mstFMFeedback, 15],\r\n\t\t[ModSetting.mstPulseWidth, Math.ceil(Config.pulseWidthRange)],\r\n\t\t[ModSetting.mstDetune, Math.ceil((Config.detuneMax - Config.detuneMin) / 2)],\r\n\t\t[ModSetting.mstVibratoDepth, 0],\r\n\t\t[ModSetting.mstSongDetune, Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2)],\r\n\t\t[ModSetting.mstVibratoSpeed, 0],\r\n\t\t[ModSetting.mstVibratoDelay, 0],\r\n\t\t[ModSetting.mstArpeggioSpeed, 10],\r\n\t\t[ModSetting.mstPanDelay, 10],\r\n\t\t[ModSetting.mstResetArpeggio, 1],\r\n\t\t[ModSetting.mstMaxValue, 6],\r\n\t])\r\n\r\n\tconstructor(string?: string) {\r\n\t\tif (string != undefined) {\r\n\t\t\tthis.fromBase64String(string);\r\n\t\t} else {\r\n\t\t\tthis.initToDefault(true);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic modValueToReal(value: number, setting: ModSetting): number {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\t\tvalue += Config.tempoMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\t\tvalue -= Config.volumeRange / 2.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tvalue += Config.detuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tvalue += Config.songDetuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tpublic isSettingForSong(setting: ModSetting): boolean {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\t\treturn true;\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic realToModValue(value: number, setting: ModSetting): number {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\t\tvalue -= Config.tempoMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\t\tvalue += Config.volumeRange / 2.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tvalue -= Config.detuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tvalue -= Config.songDetuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\r\n\tpublic getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n\t\tif (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\t// Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n\t\t\tmodCount = Config.modCount - modCount - 1;\r\n\r\n\t\t\tlet cap: number | undefined = this.mstNewNoteVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n\r\n\t\t\t// For tempo, actually use user defined tempo\r\n\t\t\tif (this.channels[modChannel].instruments[modInstrument].modSettings[modCount] == ModSetting.mstTempo) {\r\n\t\t\t\tcap = this.realToModValue(this.tempo, ModSetting.mstTempo);\r\n\t\t\t}\r\n\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n\t\tif (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\t// Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n\t\t\tmodCount = Config.modCount - modCount - 1;\r\n\r\n\t\t\tlet cap: number | undefined = this.mstMaxVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getVolumeCapForSetting = (isMod: boolean, modSetting: ModSetting): number => {\r\n\t\tif (!isMod)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\tlet cap: number | undefined = this.mstMaxVols.get(modSetting);\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getChannelCount(): number {\r\n\t\treturn this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\r\n\t}\r\n\r\n\tpublic getChannelIsNoise(channel: number): boolean {\r\n\t\treturn (channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount);\r\n\t}\r\n\r\n\tpublic getChannelIsMod(channel: number): boolean {\r\n\t\treturn (channel >= this.pitchChannelCount + this.noiseChannelCount);\r\n\t}\r\n\r\n\tpublic initToDefault(andResetChannels: boolean = true): void {\r\n\t\tthis.scale = 0;\r\n\t\tthis.key = 0;\r\n\t\tthis.loopStart = 0;\r\n\t\tthis.loopLength = 4;\r\n\t\tthis.tempo = 150;\r\n\t\tthis.reverb = 0;\r\n\t\tthis.beatsPerBar = 8;\r\n\t\tthis.barCount = 16;\r\n\t\tthis.patternsPerChannel = 8;\r\n\t\tthis.rhythm = 1;\r\n\t\tthis.instrumentsPerChannel = 1;\r\n\r\n\t\tthis.title = \"Unnamed\";\r\n\t\tdocument.title = EditorConfig.versionDisplayName;\r\n\r\n\t\tif (andResetChannels) {\r\n\t\t\tthis.pitchChannelCount = 3;\r\n\t\t\tthis.noiseChannelCount = 1;\r\n\t\t\tthis.modChannelCount = 0;\r\n\t\t\tfor (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\tif (this.channels.length <= channelIndex) {\r\n\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t}\r\n\t\t\t\tconst channel: Channel = this.channels[channelIndex];\r\n\t\t\t\tchannel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0, 0, ...]; Descending octaves with drums at zero in last channel and onward.\r\n\r\n\t\t\t\tfor (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\tif (channel.patterns.length <= pattern) {\r\n\t\t\t\t\t\tchannel.patterns[pattern] = new Pattern();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchannel.patterns[pattern].reset();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\r\n\r\n\t\t\t\tconst isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\tconst isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\tfor (let instrument = 0; instrument < this.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tif (channel.instruments.length <= instrument) {\r\n\t\t\t\t\t\tchannel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchannel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\r\n\t\t\t\t}\r\n\t\t\t\tchannel.instruments.length = this.instrumentsPerChannel;\r\n\r\n\t\t\t\tfor (let bar = 0; bar < this.barCount; bar++) {\r\n\t\t\t\t\tchannel.bars[bar] = bar < 4 ? 1 : 0;\r\n\t\t\t\t}\r\n\t\t\t\tchannel.bars.length = this.barCount;\r\n\t\t\t}\r\n\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toBase64String(): string {\r\n\t\tlet bits: BitFieldWriter;\r\n\t\tlet buffer: number[] = [];\r\n\r\n\t\tbuffer.push(Song._variant);\r\n\t\tbuffer.push(base64IntToCharCode[Song._latestJummBoxVersion]);\r\n\r\n\t\tbuffer.push(SongTagCode.songTitle);\r\n\r\n\t\t// Length of the song name string\r\n\t\tvar encodedSongTitle: string = encodeURIComponent(this.title);\r\n\t\tbuffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\r\n\r\n\t\t// Actual encoded string follows\r\n\t\tfor (let i: number = 0; i < encodedSongTitle.length; i++) {\r\n\t\t\tbuffer.push(encodedSongTitle.charCodeAt(i));\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\r\n\t\tbuffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n\t\t// buffer.push(SongTagCode.key, base64IntToCharCode[this.key]); // key relic (TODO)\r\n\t\tbuffer.push(SongTagCode.key, base64IntToCharCode[0]);\r\n\t\tbuffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\r\n\t\tbuffer.push(SongTagCode.reverb, base64IntToCharCode[this.reverb]);\r\n\t\tbuffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n\t\tbuffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.instrumentCount, base64IntToCharCode[this.instrumentsPerChannel - 1]);\r\n\t\tbuffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\r\n\r\n\t\t// Push limiter settings, but only if they aren't the default!\r\n\t\tbuffer.push(SongTagCode.limiterSettings);\r\n\t\tif (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\r\n\t\t\tbuffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbuffer.push(base64IntToCharCode[0x3f]); // Not using limiter\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelNames);\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t// Length of the channel name string\r\n\t\t\tvar encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\r\n\t\t\tbuffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\r\n\r\n\t\t\t// Actual encoded string follows\r\n\t\t\tfor (let i: number = 0; i < encodedChannelName.length; i++) {\r\n\t\t\t\tbuffer.push(encodedChannelName.charCodeAt(i));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelOctave);\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tbuffer.push(base64IntToCharCode[this.channels[channel].octave]);\r\n\t\t}\r\n\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\tbuffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\r\n\t\t\t\tbuffer.push(SongTagCode.panning, base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\r\n\t\t\t\tbuffer.push(base64IntToCharCode[instrument.panDelay]); // Piggybacks after panning to reduce song tag code usage :P\r\n\t\t\t\tbuffer.push(SongTagCode.detune, base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3f]);\r\n\t\t\t\tbuffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\r\n\t\t\t\tbuffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects]);\r\n\r\n\r\n\t\t\t\tif (instrument.type != InstrumentType.drumset) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t// Transition info follows transition song tag\r\n\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.tieNoteTransition]);\r\n\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterCutoff, base64IntToCharCode[instrument.filterCutoff]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterResonance, base64IntToCharCode[instrument.filterResonance]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterEnvelope, base64IntToCharCode[instrument.filterEnvelope]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.chord, base64IntToCharCode[instrument.chord]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackEnvelope, base64IntToCharCode[instrument.feedbackEnvelope]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorFrequencies);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorAmplitudes);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorEnvelopes);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].envelope]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.customChipWave);\r\n\t\t\t\t\t// Push custom wave values\r\n\t\t\t\t\tfor (let j: number = 0; j < 64; j++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.spectrum) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.spectrum);\r\n\t\t\t\t\tconst spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\tspectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspectrumBits.encodeBase64(buffer);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterEnvelope);\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.spectrum);\r\n\t\t\t\t\tconst spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tspectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspectrumBits.encodeBase64(buffer);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.harmonics);\r\n\t\t\t\t\tconst harmonicsBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\t\tharmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tharmonicsBits.encodeBase64(buffer);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth], base64IntToCharCode[instrument.pulseEnvelope]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\t\t\t// Handled down below. Could be moved, but meh.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow new Error(\"Unknown instrument type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.bars);\r\n\t\tbits = new BitFieldWriter();\r\n\t\tlet neededBits: number = 0;\r\n\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) for (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\tbits.write(neededBits, this.channels[channel].bars[i]);\r\n\t\t}\r\n\t\tbits.encodeBase64(buffer);\r\n\r\n\t\tbuffer.push(SongTagCode.patterns);\r\n\t\tbits = new BitFieldWriter();\r\n\t\tconst shapeBits: BitFieldWriter = new BitFieldWriter();\r\n\t\tlet neededInstrumentBits: number = 0;\r\n\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\r\n\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n\t\t\t// Some info about modulator settings immediately follows in mod channels.\r\n\t\t\tif (isModChannel) {\r\n\t\t\t\tfor (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n\t\t\t\t\tlet instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\tconst modStatus: ModStatus = instrument.modStatuses[mod];\r\n\t\t\t\t\t\tconst modChannel: number = instrument.modChannels[mod];\r\n\t\t\t\t\t\tconst modInstrument: number = instrument.modInstruments[mod];\r\n\t\t\t\t\t\tconst modSetting: number = instrument.modSettings[mod];\r\n\r\n\t\t\t\t\t\tbits.write(2, modStatus);\r\n\r\n\t\t\t\t\t\t// Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n\t\t\t\t\t\tif (modStatus == ModStatus.msForPitch || modStatus == ModStatus.msForNoise) {\r\n\t\t\t\t\t\t\tbits.write(8, modChannel);\r\n\t\t\t\t\t\t\tbits.write(neededInstrumentBits, modInstrument);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Mod setting is only used if the status isn't \"none\".\r\n\t\t\t\t\t\tif (modStatus != ModStatus.msNone) {\r\n\t\t\t\t\t\t\tbits.write(6, modSetting);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * Config.pitchesPerOctave;\r\n\t\t\tlet lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : Config.pitchesPerOctave) + octaveOffset;\r\n\t\t\tconst recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n\t\t\tconst recentShapes: any[] = [];\r\n\r\n\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t}\r\n\t\t\tfor (const pattern of this.channels[channel].patterns) {\r\n\t\t\t\tbits.write(neededInstrumentBits, pattern.instrument);\r\n\r\n\t\t\t\tif (pattern.notes.length > 0) {\r\n\t\t\t\t\tbits.write(1, 1);\r\n\r\n\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\tfor (const note of pattern.notes) {\r\n\r\n\t\t\t\t\t\t// For mod channels, a negative offset may be necessary.\r\n\t\t\t\t\t\tif (note.start < curPart && isModChannel) {\r\n\t\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\t\tbits.write(1, 1); // negative offset\r\n\t\t\t\t\t\t\tbits.writePartDuration(curPart - note.start);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (note.start > curPart) {\r\n\t\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\t\tif (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\r\n\t\t\t\t\t\t\tbits.writePartDuration(note.start - curPart);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tshapeBits.clear();\r\n\r\n\t\t\t\t\t\t// Old format was:\r\n\t\t\t\t\t\t// 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n\t\t\t\t\t\t// New format is:\r\n\t\t\t\t\t\t//\t  0: 1 pitch\r\n\t\t\t\t\t\t// 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n\t\t\t\t\t\tif (note.pitches.length == 1) {\r\n\t\t\t\t\t\t\tshapeBits.write(1, 0);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tshapeBits.write(1, 1);\r\n\t\t\t\t\t\t\tshapeBits.write(3, note.pitches.length - 2);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tshapeBits.writePinCount(note.pins.length - 1);\r\n\r\n\t\t\t\t\t\tif (!isModChannel) {\r\n\t\t\t\t\t\t\tshapeBits.write(3, note.pins[0].volume); // volume\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tshapeBits.write(9, note.pins[0].volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet shapePart: number = 0;\r\n\t\t\t\t\t\tlet startPitch: number = note.pitches[0];\r\n\t\t\t\t\t\tlet currentPitch: number = startPitch;\r\n\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\tfor (let i: number = 1; i < note.pins.length; i++) {\r\n\t\t\t\t\t\t\tconst pin: NotePin = note.pins[i];\r\n\t\t\t\t\t\t\tconst nextPitch: number = startPitch + pin.interval;\r\n\t\t\t\t\t\t\tif (currentPitch != nextPitch) {\r\n\t\t\t\t\t\t\t\tshapeBits.write(1, 1);\r\n\t\t\t\t\t\t\t\tpitchBends.push(nextPitch);\r\n\t\t\t\t\t\t\t\tcurrentPitch = nextPitch;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tshapeBits.write(1, 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tshapeBits.writePartDuration(pin.time - shapePart);\r\n\t\t\t\t\t\t\tshapePart = pin.time;\r\n\r\n\t\t\t\t\t\t\tif (!isModChannel) {\r\n\t\t\t\t\t\t\t\tshapeBits.write(3, pin.volume); // volume\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tshapeBits.write(9, pin.volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\r\n\t\t\t\t\t\tconst shapeIndex: number = recentShapes.indexOf(shapeString);\r\n\t\t\t\t\t\tif (shapeIndex == -1) {\r\n\t\t\t\t\t\t\tbits.write(2, 1); // new shape\r\n\t\t\t\t\t\t\tbits.concat(shapeBits);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbits.write(1, 1); // old shape\r\n\t\t\t\t\t\t\tbits.writeLongTail(0, 0, shapeIndex);\r\n\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trecentShapes.unshift(shapeString);\r\n\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\r\n\t\t\t\t\t\tconst allPitches: number[] = note.pitches.concat(pitchBends);\r\n\t\t\t\t\t\tfor (let i: number = 0; i < allPitches.length; i++) {\r\n\t\t\t\t\t\t\tconst pitch: number = allPitches[i];\r\n\t\t\t\t\t\t\tconst pitchIndex: number = recentPitches.indexOf(pitch);\r\n\t\t\t\t\t\t\tif (pitchIndex == -1) {\r\n\t\t\t\t\t\t\t\tlet interval: number = 0;\r\n\t\t\t\t\t\t\t\tlet pitchIter: number = lastPitch;\r\n\t\t\t\t\t\t\t\tif (pitchIter < pitch) {\r\n\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\tpitchIter++;\r\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\tpitchIter--;\r\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t\t\t\t\tbits.writePitchInterval(interval);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbits.write(1, 1);\r\n\t\t\t\t\t\t\t\tbits.write(4, pitchIndex);\r\n\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\tif (recentPitches.length > 16) recentPitches.pop();\r\n\r\n\t\t\t\t\t\t\tif (i == note.pitches.length - 1) {\r\n\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurPart = note.end;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\tif (isModChannel) bits.write(1, 0); // positive offset\r\n\t\t\t\t\t\tbits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet stringLength: number = bits.lengthBase64();\r\n\t\tlet digits: number[] = [];\r\n\t\twhile (stringLength > 0) {\r\n\t\t\tdigits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n\t\t\tstringLength = stringLength >> 6;\r\n\t\t}\r\n\t\tbuffer.push(base64IntToCharCode[digits.length]);\r\n\t\tArray.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n\t\tbits.encodeBase64(buffer);\r\n\r\n\t\tconst maxApplyArgs: number = 64000;\r\n\t\tif (buffer.length < maxApplyArgs) {\r\n\t\t\t// Note: Function.apply may break for long argument lists.\r\n\t\t\treturn String.fromCharCode.apply(null, buffer);\r\n\t\t} else {\r\n\t\t\tlet result: string = \"\";\r\n\t\t\tfor (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\r\n\t\t\t\tresult += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic fromBase64String(compressed: string): void {\r\n\t\tif (compressed == null || compressed == \"\") {\r\n\t\t\tthis.initToDefault(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet charIndex: number = 0;\r\n\t\t// skip whitespace.\r\n\t\twhile (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n\t\t// skip hash mark.\r\n\t\tif (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n\t\t// if it starts with curly brace, treat it as JSON.\r\n\t\tif (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n\t\t\tthis.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst variantTest: number = compressed.charCodeAt(charIndex);\r\n\t\tvar variant: string = \"beepbox\";\r\n\r\n\t\t// Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n\t\tif (variantTest == 0x6A) { //\"j\"\r\n\t\t\tvariant = \"jummbox\";\r\n\t\t\tcharIndex++;\r\n\t\t}\r\n\r\n\t\tconst version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\tif (variant == \"beepbox\" && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n\t\tif (variant == \"jummbox\" && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\r\n\r\n\t\tconst beforeTwo: boolean = version < 2;\r\n\t\tconst beforeThree: boolean = version < 3;\r\n\t\tconst beforeFour: boolean = version < 4;\r\n\t\tconst beforeFive: boolean = version < 5;\r\n\t\tconst beforeSix: boolean = version < 6;\r\n\t\tconst beforeSeven: boolean = version < 7;\r\n\t\tconst beforeEight: boolean = version < 8;\r\n\t\tthis.initToDefault(variant == \"beepbox\" && beforeSix);\r\n\r\n\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t// Originally, the only instrument transition was \"seamless\" and the only drum wave was \"retro\".\r\n\t\t\tfor (const channel of this.channels) channel.instruments[0].transition = 0;\r\n\t\t\tthis.channels[3].instruments[0].chipNoise = 0;\r\n\t\t}\r\n\r\n\t\tlet instrumentChannelIterator: number = 0;\r\n\t\tlet instrumentIndexIterator: number = -1;\r\n\t\tlet toSetOctaves: number[] = [];\r\n\t\tlet command: number;\r\n\t\tlet channel: number;\r\n\t\tlet useSlowerArpSpeed: boolean = false;\r\n\t\tlet useFastTwoNoteArp: boolean = false;\r\n\t\twhile (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\r\n\t\t\tcase SongTagCode.songTitle: {\r\n\t\t\t\t// Length of song name string\r\n\t\t\t\tvar songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tthis.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n\t\t\t\tdocument.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n\t\t\t\tcharIndex += songNameLength;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelCount: {\r\n\t\t\t\tthis.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tthis.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tif (variant == \"beepbox\" || beforeTwo) {\r\n\t\t\t\t\t// No mod channel support before jummbox v2\r\n\t\t\t\t\tthis.modChannelCount = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t}\r\n\t\t\t\tthis.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\r\n\t\t\t\tthis.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\r\n\t\t\t\tthis.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\r\n\r\n\t\t\t\tfor (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t}\r\n\t\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.scale: {\r\n\t\t\t\tthis.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t// All the scales were jumbled around by Jummbox. Just convert to free.\r\n\t\t\t\tif (variant == \"beepbox\") this.scale = 0;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.key: {\r\n\t\t\t\t// if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t// \tthis.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t// } else {\r\n\t\t\t\t// \tthis.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t// } // key relic (TODO)\r\n\t\t\t\tthis.key = 0;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.loopStart: {\r\n\t\t\t\tif (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.loopEnd: {\r\n\t\t\t\tif (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.tempo: {\r\n\t\t\t\tif (beforeFour && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.reverb: {\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\tthis.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 8;\r\n\t\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.beatCount: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.barCount: {\r\n\t\t\t\tconst barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\tthis.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tfor (let bar = this.channels[channel].bars.length; bar < this.barCount; bar++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[bar] = (bar < 4) ? 1 : 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].bars.length = this.barCount;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.patternCount: {\r\n\t\t\t\tif (variant == \"beepbox\" && beforeEight) {\r\n\t\t\t\t\tthis.patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t\tthis.patternsPerChannel = validateRange(1, Config.barCountMax, this.patternsPerChannel);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tfor (let pattern = this.channels[channel].patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\t\tthis.channels[channel].patterns[pattern] = new Pattern();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].patterns.length = this.patternsPerChannel;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.instrumentCount: {\r\n\t\t\t\tconst instrumentsPerChannel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\tthis.instrumentsPerChannel = validateRange(Config.instrumentsPerChannelMin, Config.instrumentsPerChannelMax, instrumentsPerChannel);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tconst isNoiseChannel: boolean = channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\t\tconst isModChannel: boolean = channel >= this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\t\tfor (let instrumentIndex = this.channels[channel].instruments.length; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\t\t\t\t\t\tthis.channels[channel].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n\t\t\t\t\tif (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\t\tfor (let instrumentIndex = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.rhythm: {\r\n\t\t\t\tthis.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t// Port all arpeggio speeds over to match what they were, before arpeggio speed was decoupled from rhythm.\r\n\t\t\t\tif (variant == \"jummbox\" && beforeThree || variant == \"beepbox\") {\r\n\t\t\t\t\t// These are all the rhythms that had 4 ticks/arpeggio instead of 3.\r\n\t\t\t\t\tif (this.rhythm == 0 || this.rhythm == 2) {\r\n\t\t\t\t\t\tuseSlowerArpSpeed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Use faster two note arp on these rhythms\r\n\t\t\t\t\tif (this.rhythm >= 2) {\r\n\t\t\t\t\t\tuseFastTwoNoteArp = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelOctave: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t// Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n\t\t\t\t\tthis.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\ttoSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t// Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n\t\t\t\t\t\tthis.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\ttoSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.startInstrument: {\r\n\t\t\t\tinstrumentIndexIterator++;\r\n\t\t\t\tif (instrumentIndexIterator >= this.instrumentsPerChannel) {\r\n\t\t\t\t\tinstrumentChannelIterator++;\r\n\t\t\t\t\tinstrumentIndexIterator = 0;\r\n\t\t\t\t}\r\n\t\t\t\tvalidateRange(0, this.channels.length - 1, instrumentChannelIterator);\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tconst instrumentType: number = clamp(0, InstrumentType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tinstrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\r\n\t\t\t\tif (useSlowerArpSpeed) {\r\n\t\t\t\t\tinstrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\r\n\t\t\t\t}\r\n\t\t\t\tif (useFastTwoNoteArp) {\r\n\t\t\t\t\tinstrument.fastTwoNoteArp = true;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.preset: {\r\n\t\t\t\tconst presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.wave: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tconst channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tif (channel >= this.pitchChannelCount) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tif (instrumentChannelIterator >= this.pitchChannelCount) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (instrumentChannelIterator >= this.pitchChannelCount) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterCutoff: {\r\n\t\t\t\tif (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n\t\t\t\t\tconst legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n\t\t\t\t\tconst filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\r\n\t\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\t\tconst legacyFilter: number = [1, 3, 4, 5][clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\t\tconst legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n\t\t\t\t\t\t\t\tif (channel < this.pitchChannelCount) {\r\n\t\t\t\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tinstrument.filterCutoff = 10;\r\n\t\t\t\t\t\t\t\t\tinstrument.filterEnvelope = 1;\r\n\t\t\t\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.filterCutoff = clamp(0, Config.filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterResonance: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].filterResonance = clamp(0, Config.filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterEnvelope: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\t\t\tinstrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinstrument.filterEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.pulseWidth: {\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t// Convert back from beepbox's weird pulse width storage formula, rounding. The \"7\" in there is the old\r\n\t\t\t\t\t// piece of the formula \"beepbox.Config.pulseWidthRange - 1\".\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.pulseWidth = Math.round(clamp(0, Config.pulseWidthRange + 1, Math.pow(0.5, (7 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 0.5) * 50));\r\n\t\t\t\t\tinstrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.pulseWidth = clamp(0, Config.pulseWidthRange + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tinstrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.transition: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[i].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeFour || variant == \"beepbox\") {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].tieNoteTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.vibrato: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 3, 2, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 13];\r\n\t\t\t\t\tconst channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.vibrato = vibrato;\r\n\t\t\t\t\t// Custom vibrato\r\n\t\t\t\t\tif (vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tinstrument.vibratoDepth = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDepth)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\r\n\t\t\t\t\t\tinstrument.vibratoSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tinstrument.vibratoDelay = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDelay)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tinstrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Enforce standard vibrato settings\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinstrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n\t\t\t\t\t\tinstrument.vibratoSpeed = 10; // Normal speed\r\n\t\t\t\t\t\tinstrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t\t\t\tinstrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.arpeggioSpeed: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tinstrument.arpeggioSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstArpeggioSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tinstrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.interval: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\t\tlet interval: number = clamp(0, Config.intervals.length, originalValue);\r\n\t\t\t\t\t\t\tif (originalValue == 8) {\r\n\t\t\t\t\t\t\t\t// original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n\t\t\t\t\t\t\t\tinterval = 2;\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chord = 3;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[i].interval = interval;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tlet interval: number = clamp(0, Config.intervals.length, originalValue);\r\n\t\t\t\t\tif (originalValue == 8) {\r\n\t\t\t\t\t\t// original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n\t\t\t\t\t\tinterval = 2;\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = interval;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.chord: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.effects: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].effects = clamp(0, Config.effectsNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.volume: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t} else if (variant == \"beepbox\") {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t// Beepbox v7's volume range is 0-7 (0 is max, 7 is mute)\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t// Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.panning: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t// Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n\t\t\t\t\tinstrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tinstrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Now, pan delay follows on new versions of jummbox.\r\n\t\t\t\tif (variant == \"jummbox\" && !beforeThree)\r\n\t\t\t\t\tinstrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.detune: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n\t\t\t\tinstrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) + Config.detuneMin);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.customChipWave: {\r\n\t\t\t\tlet instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t// Pop custom wave values\r\n\t\t\t\tfor (let j: number = 0; j < 64; j++) {\r\n\t\t\t\t\tinstrument.customChipWave[j]\r\n\t\t\t\t\t\t= clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += instrument.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / instrument.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = instrument.customChipWave[i] - average;\r\n\t\t\t\t\tinstrument.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 65th, last sample is for anti-aliasing\r\n\t\t\t\tinstrument.customChipWaveIntegral[64] = 0.0;\r\n\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.limiterSettings: {\r\n\t\t\t\tlet nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t// Check if limiter settings are used... if not, restore to default\r\n\t\t\t\tif (nextValue == 0x3f) {\r\n\t\t\t\t\t// Limiter isn't used\r\n\t\t\t\t\tthis.compressionRatio = 1.0;\r\n\t\t\t\t\tthis.limitRatio = 1.0;\r\n\t\t\t\t\tthis.limitRise = 4000.0;\r\n\t\t\t\t\tthis.limitDecay = 4.0;\r\n\t\t\t\t\tthis.limitThreshold = 1.0;\r\n\t\t\t\t\tthis.compressionThreshold = 1.0;\r\n\t\t\t\t\tthis.masterGain = 1.0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Limiter is used, grab values\r\n\t\t\t\t\tthis.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\r\n\t\t\t\t\tnextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\r\n\t\t\t\t\tthis.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\r\n\t\t\t\t\tthis.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n\t\t\t\t\tthis.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n\t\t\t\t\tthis.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelNames: {\r\n\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t// Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\r\n\t\t\t\t\tvar channelNameLength;\r\n\t\t\t\t\tif (beforeFour)\r\n\t\t\t\t\t\tchannelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tchannelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tthis.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\r\n\r\n\t\t\t\t\tcharIndex += channelNameLength;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.algorithm: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackType: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackAmplitude: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackEnvelope: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorFrequencies: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorAmplitudes: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorEnvelopes: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].envelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.spectrum: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tif (instrument.type == InstrumentType.spectrum) {\r\n\t\t\t\t\tconst byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\tinstrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinstrument.spectrumWave.markCustomWaveDirty();\r\n\t\t\t\t\tcharIndex += byteCount;\r\n\t\t\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tconst byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tinstrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tinstrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcharIndex += byteCount;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Unhandled instrument type for spectrum song tag code.\");\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.harmonics: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tconst byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\r\n\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\tinstrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\r\n\t\t\t\t}\r\n\t\t\t\tinstrument.harmonicsWave.markCustomWaveDirty();\r\n\t\t\t\tcharIndex += byteCount;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.bars: {\r\n\t\t\t\tlet subStringLength: number;\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tsubStringLength = Math.ceil(barCount * 0.5);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let i: number = 0; i < barCount; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(3) + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits) + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcharIndex += subStringLength;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.patterns: {\r\n\t\t\t\tlet bitStringLength: number = 0;\r\n\t\t\t\tlet channel: number;\r\n\t\t\t\tlet largerChords: boolean = !((beforeFour && variant == \"jummbox\") || variant == \"beepbox\");\r\n\t\t\t\tlet recentPitchBitLength: number = (largerChords ? 4 : 3);\r\n\t\t\t\tlet recentPitchLength: number = (largerChords ? 16 : 8);\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t\t// The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default.\r\n\t\t\t\t\tcharIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t\tbitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tchannel = 0;\r\n\t\t\t\t\tlet bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\twhile (bitStringLengthLength > 0) {\r\n\t\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tbitStringLengthLength--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\r\n\t\t\t\tcharIndex += bitStringLength;\r\n\r\n\t\t\t\tlet neededInstrumentBits: number = 0;\r\n\t\t\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n\t\t\t\t\t// Some info about modulator settings immediately follows in mod channels.\r\n\t\t\t\t\tif (isModChannel) {\r\n\t\t\t\t\t\tfor (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n\t\t\t\t\t\t\tlet instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\tinstrument.modStatuses[mod] = bits.read(2);\r\n\r\n\t\t\t\t\t\t\t\t// Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForPitch || instrument.modStatuses[mod] == ModStatus.msForNoise) {\r\n\r\n\t\t\t\t\t\t\t\t\t// Clamp to pitch/noise max\r\n\t\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForPitch) {\r\n\t\t\t\t\t\t\t\t\t\tinstrument.modChannels[mod] = clamp(0, this.pitchChannelCount + 1, bits.read(8));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tinstrument.modChannels[mod] = clamp(0, this.noiseChannelCount + 1, bits.read(8));\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tinstrument.modInstruments[mod] = clamp(0, this.instrumentsPerChannel + 1, bits.read(neededInstrumentBits));\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Mod setting is only used if the status isn't \"none\".\r\n\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] != ModStatus.msNone) {\r\n\t\t\t\t\t\t\t\t\tinstrument.modSettings[mod] = bits.read(6);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * Config.pitchesPerOctave;\r\n\t\t\t\t\tlet note: Note | null = null;\r\n\t\t\t\t\tlet pin: NotePin | null = null;\r\n\t\t\t\t\tlet lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : Config.pitchesPerOctave) + octaveOffset;\r\n\t\t\t\t\tconst recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n\t\t\t\t\tconst recentShapes: any[] = [];\r\n\t\t\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\t\tconst newPattern: Pattern = this.channels[channel].patterns[i];\r\n\t\t\t\t\t\tnewPattern.reset();\r\n\t\t\t\t\t\tnewPattern.instrument = bits.read(neededInstrumentBits);\r\n\r\n\t\t\t\t\t\tif (!(variant == \"beepbox\" && beforeThree) && bits.read(1) == 0) continue;\r\n\r\n\t\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\t\tconst newNotes: Note[] = newPattern.notes;\r\n\t\t\t\t\t\t// Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\r\n\t\t\t\t\t\twhile (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\r\n\t\t\t\t\t\t\tconst useOldShape: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\tlet newNote: boolean = false;\r\n\t\t\t\t\t\t\tlet shapeIndex: number = 0;\r\n\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\tshapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tnewNote = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (!useOldShape && !newNote) {\r\n\t\t\t\t\t\t\t\t// For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\r\n\t\t\t\t\t\t\t\tif (isModChannel) {\r\n\t\t\t\t\t\t\t\t\tconst isBackwards: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\tconst restLength: number = bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\tif (isBackwards) {\r\n\t\t\t\t\t\t\t\t\t\tcurPart -= restLength;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tcurPart += restLength;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tconst restLength: number = (beforeSeven && variant == \"beepbox\")\r\n\t\t\t\t\t\t\t\t\t\t? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n\t\t\t\t\t\t\t\t\t\t: bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\tcurPart += restLength;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlet shape: any;\r\n\t\t\t\t\t\t\t\tlet pinObj: any;\r\n\t\t\t\t\t\t\t\tlet pitch: number;\r\n\t\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\t\tshape = recentShapes[shapeIndex];\r\n\t\t\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tshape = {};\r\n\r\n\t\t\t\t\t\t\t\t\tif (!largerChords) {\r\n\t\t\t\t\t\t\t\t\t\t// Old format: X 1's followed by a 0 => X+1 pitches, up to 4\r\n\t\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\r\n\t\t\t\t\t\t\t\t\t\twhile (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t// New format is:\r\n\t\t\t\t\t\t\t\t\t\t//\t  0: 1 pitch\r\n\t\t\t\t\t\t\t\t\t\t// 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n\t\t\t\t\t\t\t\t\t\tif (bits.read(1) == 1) {\r\n\t\t\t\t\t\t\t\t\t\t\tshape.pitchCount = bits.read(3) + 2;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tshape.pinCount = bits.readPinCount();\r\n\r\n\t\t\t\t\t\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(2) * 2;\r\n\t\t\t\t\t\t\t\t\t} else if (!isModChannel) {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(3);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(9);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tshape.pins = [];\r\n\t\t\t\t\t\t\t\t\tshape.length = 0;\r\n\t\t\t\t\t\t\t\t\tshape.bendCount = 0;\r\n\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pinCount; j++) {\r\n\t\t\t\t\t\t\t\t\t\tpinObj = {};\r\n\t\t\t\t\t\t\t\t\t\tpinObj.pitchBend = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) shape.bendCount++;\r\n\t\t\t\t\t\t\t\t\t\tshape.length += (beforeSeven && variant == \"beepbox\")\r\n\t\t\t\t\t\t\t\t\t\t\t? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n\t\t\t\t\t\t\t\t\t\t\t: bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\t\tpinObj.time = shape.length;\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(2) * 2;\r\n\t\t\t\t\t\t\t\t\t\t} else if (!isModChannel) {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(3);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(9);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tshape.pins.push(pinObj);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\trecentShapes.unshift(shape);\r\n\t\t\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\r\n\t\t\t\t\t\t\t\tnote = new Note(0, curPart, curPart + shape.length, shape.initialVolume);\r\n\t\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\t\tnote.pins.length = 1;\r\n\t\t\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n\t\t\t\t\t\t\t\t\tconst useOldPitch: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\tif (!useOldPitch) {\r\n\t\t\t\t\t\t\t\t\t\tconst interval: number = bits.readPitchInterval();\r\n\t\t\t\t\t\t\t\t\t\tpitch = lastPitch;\r\n\t\t\t\t\t\t\t\t\t\tlet intervalIter: number = interval;\r\n\t\t\t\t\t\t\t\t\t\twhile (intervalIter > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitch++;\r\n\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch++;\r\n\t\t\t\t\t\t\t\t\t\t\tintervalIter--;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\twhile (intervalIter < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitch--;\r\n\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch--;\r\n\t\t\t\t\t\t\t\t\t\t\tintervalIter++;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tconst pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\r\n\t\t\t\t\t\t\t\t\t\tpitch = recentPitches[pitchIndex];\r\n\t\t\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\t\t\tif (recentPitches.length > recentPitchLength) recentPitches.pop();\r\n\r\n\t\t\t\t\t\t\t\t\tif (j < shape.pitchCount) {\r\n\t\t\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tpitchBends.push(pitch);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif (j == shape.pitchCount - 1) {\r\n\t\t\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tpitchBends.unshift(note.pitches[0]);\r\n\r\n\t\t\t\t\t\t\t\tfor (const pinObj of shape.pins) {\r\n\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) pitchBends.shift();\r\n\t\t\t\t\t\t\t\t\tpin = makeNotePin(pitchBends[0] - note.pitches[0], pinObj.time, pinObj.volume);\r\n\t\t\t\t\t\t\t\t\tnote.pins.push(pin);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcurPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\r\n\t\t\t\t\t\t\t\tnewNotes.push(note);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchannel++;\r\n\t\t\t\t\t\tif (channel >= this.getChannelCount()) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t} // while (true)\r\n\t\t\t} break;\r\n\t\t\tdefault: {\r\n\t\t\t\tthrow new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1));\r\n\t\t\t} break;\r\n\t\t}\r\n\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tif (toSetOctaves[channel] != null) {\r\n\t\t\t\tthis.channels[channel].octave = toSetOctaves[channel];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n\t\tconst channelArray: Object[] = [];\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tconst instrumentArray: Object[] = [];\r\n\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\tinstrumentArray.push(this.channels[channel].instruments[i].toJsonObject());\r\n\t\t\t}\r\n\r\n\t\t\tconst patternArray: Object[] = [];\r\n\t\t\tfor (const pattern of this.channels[channel].patterns) {\r\n\t\t\t\tconst noteArray: Object[] = [];\r\n\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\tlet volumeCap: number = this.getVolumeCapForSetting(isModChannel, this.channels[channel].instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\t\t\t\t\tconst pointArray: Object[] = [];\r\n\t\t\t\t\tfor (const pin of note.pins) {\r\n\t\t\t\t\t\tlet useVol: number = isModChannel ? Math.round(pin.volume) : Math.round(pin.volume * 100 / volumeCap);\r\n\t\t\t\t\t\tpointArray.push({\r\n\t\t\t\t\t\t\t\"tick\": (pin.time + note.start) * Config.rhythms[this.rhythm].stepsPerBeat / Config.partsPerBeat,\r\n\t\t\t\t\t\t\t\"pitchBend\": pin.interval,\r\n\t\t\t\t\t\t\t\"volume\": useVol,\r\n\t\t\t\t\t\t\t\"forMod\": isModChannel,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnoteArray.push({\r\n\t\t\t\t\t\t\"pitches\": note.pitches,\r\n\t\t\t\t\t\t\"points\": pointArray,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpatternArray.push({\r\n\t\t\t\t\t\"instrument\": pattern.instrument + 1,\r\n\t\t\t\t\t\"notes\": noteArray,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst sequenceArray: number[] = [];\r\n\t\t\tif (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\t\t\tfor (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\t\t\tif (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\r\n\t\t\tchannelArray.push({\r\n\t\t\t\t\"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\r\n\t\t\t\t\"octaveScrollBar\": this.channels[channel].octave,\r\n\t\t\t\t\"instruments\": instrumentArray,\r\n\t\t\t\t\"patterns\": patternArray,\r\n\t\t\t\t\"sequence\": sequenceArray,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t\"name\": this.title,\r\n\t\t\t\"format\": Song._format,\r\n\t\t\t\"version\": Song._latestJummBoxVersion,\r\n\t\t\t\"scale\": Config.scales[this.scale].name,\r\n\t\t\t// \"key\": Config.keys[this.key].name, // key relic (TODO)\r\n\t\t\t\"introBars\": this.loopStart,\r\n\t\t\t\"loopBars\": this.loopLength,\r\n\t\t\t\"beatsPerBar\": this.beatsPerBar,\r\n\t\t\t\"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\r\n\t\t\t\"beatsPerMinute\": this.tempo,\r\n\t\t\t\"reverb\": this.reverb,\r\n\t\t\t//\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n\t\t\t//\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\r\n\t\t\t//\"instrumentsPerChannel\": this.instrumentsPerChannel, //derive this from instrument arrays?\r\n\t\t\t\"channels\": channelArray,\r\n\t\t};\r\n\t}\r\n\r\n\tpublic fromJsonObject(jsonObject: any): void { //TODO: edo decoding\r\n\t\tthis.initToDefault(true);\r\n\t\tif (!jsonObject) return;\r\n\r\n\t\t//const version: number = jsonObject[\"version\"] | 0;\r\n\t\t//if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\r\n\r\n\t\tif (jsonObject[\"name\"] != undefined) {\r\n\t\t\tthis.title = jsonObject[\"name\"];\r\n\t\t}\r\n\r\n\t\tthis.scale = 0; // default to free.\r\n\t\tif (jsonObject[\"scale\"] != undefined) {\r\n\t\t\tconst oldScaleNames: Dictionary<string> = {\r\n\t\t\t\t\"romani :)\": \"dbl harmonic :)\",\r\n\t\t\t\t\"romani :(\": \"dbl harmonic :(\",\r\n\t\t\t\t\"enigma\": \"strange\",\r\n\t\t\t};\r\n\t\t\tconst scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\r\n\t\t\tconst scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\r\n\t\t\tif (scale != -1) this.scale = scale;\r\n\t\t}\r\n\r\n\t\t// if (jsonObject[\"key\"] != undefined) {\r\n\t\t// \tif (typeof (jsonObject[\"key\"]) == \"number\") {\r\n\t\t// \t\tthis.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\r\n\t\t// \t} else if (typeof (jsonObject[\"key\"]) == \"string\") {\r\n\t\t// \t\tconst key: string = jsonObject[\"key\"];\r\n\t\t// \t\tconst letter: string = key.charAt(0).toUpperCase();\r\n\t\t// \t\tconst symbol: string = key.charAt(1).toLowerCase();\r\n\t\t// \t\tconst letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\r\n\t\t// \t\tconst accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\r\n\t\t// \t\tlet index: number | undefined = letterMap[letter];\r\n\t\t// \t\tconst offset: number | undefined = accidentalMap[symbol];\r\n\t\t// \t\tif (index != undefined) {\r\n\t\t// \t\t\tif (offset != undefined) index += offset;\r\n\t\t// \t\t\tif (index < 0) index += 12;\r\n\t\t// \t\t\tindex = index % 12;\r\n\t\t// \t\t\tthis.key = index;\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\t\tthis.key = 0; // key relic (TODO)\r\n\r\n\t\tif (jsonObject[\"beatsPerMinute\"] != undefined) {\r\n\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"reverb\"] != undefined) {\r\n\t\t\tthis.reverb = clamp(0, Config.reverbRange, jsonObject[\"reverb\"] | 0);\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"beatsPerBar\"] != undefined) {\r\n\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\r\n\t\t}\r\n\r\n\t\tlet importedPartsPerBeat: number = 4;\r\n\t\tif (jsonObject[\"ticksPerBeat\"] != undefined) {\r\n\t\t\timportedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\r\n\t\t\tthis.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\r\n\t\t\tif (this.rhythm == -1) {\r\n\t\t\t\tthis.rhythm = 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet maxInstruments: number = 1;\r\n\t\tlet maxPatterns: number = 1;\r\n\t\tlet maxBars: number = 1;\r\n\t\tif (jsonObject[\"channels\"]) {\r\n\t\t\tfor (const channelObject of jsonObject[\"channels\"]) {\r\n\t\t\t\tif (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\r\n\t\t\t\tif (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\r\n\t\t\t\tif (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.instrumentsPerChannel = Math.min(maxInstruments, Config.instrumentsPerChannelMax);\r\n\t\tthis.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\r\n\t\tthis.barCount = Math.min(maxBars, Config.barCountMax);\r\n\r\n\t\tif (jsonObject[\"introBars\"] != undefined) {\r\n\t\t\tthis.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\r\n\t\t}\r\n\t\tif (jsonObject[\"loopBars\"] != undefined) {\r\n\t\t\tthis.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\r\n\t\t}\r\n\r\n\t\tconst newPitchChannels: Channel[] = [];\r\n\t\tconst newNoiseChannels: Channel[] = [];\r\n\t\tconst newModChannels: Channel[] = [];\r\n\t\tif (jsonObject[\"channels\"]) {\r\n\t\t\tfor (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n\t\t\t\tlet channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n\r\n\t\t\t\tconst channel: Channel = new Channel();\r\n\r\n\t\t\t\tlet isNoiseChannel: boolean = false;\r\n\t\t\t\tlet isModChannel: boolean = false;\r\n\t\t\t\tif (channelObject[\"type\"] != undefined) {\r\n\t\t\t\t\tisNoiseChannel = (channelObject[\"type\"] == \"drum\");\r\n\t\t\t\t\tisModChannel = (channelObject[\"type\"] == \"mod\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// for older files, assume drums are channel 3.\r\n\t\t\t\t\tisNoiseChannel = (channelIndex >= 3);\r\n\t\t\t\t}\r\n\t\t\t\tif (isNoiseChannel) {\r\n\t\t\t\t\tnewNoiseChannels.push(channel);\r\n\t\t\t\t} else if (isModChannel) {\r\n\t\t\t\t\tnewModChannels.push(channel);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnewPitchChannels.push(channel);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (channelObject[\"octaveScrollBar\"] != undefined) {\r\n\t\t\t\t\tchannel.octave = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, channelObject[\"octaveScrollBar\"] | 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = channel.instruments.length; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tchannel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t}\r\n\t\t\t\tchannel.instruments.length = this.instrumentsPerChannel;\r\n\r\n\t\t\t\tfor (let i: number = channel.patterns.length; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\tchannel.patterns[i] = new Pattern();\r\n\t\t\t\t}\r\n\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\tchannel.bars[i] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tchannel.bars.length = this.barCount;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tconst instrument: Instrument = channel.instruments[i];\r\n\t\t\t\t\tinstrument.fromJsonObject(channelObject[\"instruments\"][i], isNoiseChannel, isModChannel, this.rhythm == 0 || this.rhythm == 2, this.rhythm >= 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\tconst pattern: Pattern = channel.patterns[i];\r\n\r\n\t\t\t\t\tlet patternObject: any = undefined;\r\n\t\t\t\t\tif (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\r\n\t\t\t\t\tif (patternObject == undefined) continue;\r\n\r\n\t\t\t\t\tpattern.instrument = clamp(0, this.instrumentsPerChannel, (patternObject[\"instrument\"] | 0) - 1);\r\n\r\n\t\t\t\t\tif (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\r\n\t\t\t\t\t\tconst maxNoteCount: number = Math.min(this.beatsPerBar * Config.partsPerBeat, patternObject[\"notes\"].length >>> 0);\r\n\r\n\t\t\t\t\t\t//let tickClock: number = 0;\r\n\t\t\t\t\t\tfor (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\r\n\t\t\t\t\t\t\tif (j >= maxNoteCount) break;\r\n\r\n\t\t\t\t\t\t\tconst noteObject = patternObject[\"notes\"][j];\r\n\t\t\t\t\t\t\tif (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tconst note: Note = new Note(0, 0, 0, 0);\r\n\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\tnote.pins = [];\r\n\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\r\n\t\t\t\t\t\t\t\tconst pitch: number = noteObject[\"pitches\"][k] | 0;\r\n\t\t\t\t\t\t\t\tif (note.pitches.indexOf(pitch) != -1) continue;\r\n\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\tif (note.pitches.length >= Config.maxChordSize) break;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\r\n\t\t\t\t\t\t\t//let noteClock: number = tickClock;\r\n\t\t\t\t\t\t\tlet startInterval: number = 0;\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject[\"points\"].length; k++) {\r\n\t\t\t\t\t\t\t\tconst pointObject: any = noteObject[\"points\"][k];\r\n\t\t\t\t\t\t\t\tif (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\r\n\t\t\t\t\t\t\t\tconst interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\r\n\r\n\t\t\t\t\t\t\t\tconst time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\r\n\r\n\t\t\t\t\t\t\t\tlet volumeCap: number = this.getVolumeCapForSetting(isModChannel, channel.instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\r\n\t\t\t\t\t\t\t\t// The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\r\n\t\t\t\t\t\t\t\t// A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\r\n\t\t\t\t\t\t\t\tlet volume: number;\r\n\t\t\t\t\t\t\t\tif (pointObject[\"volume\"] == undefined) {\r\n\t\t\t\t\t\t\t\t\tvolume = volumeCap;\r\n\t\t\t\t\t\t\t\t} else if (pointObject[\"forMod\"] == undefined) {\r\n\t\t\t\t\t\t\t\t\tvolume = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvolume = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (time > this.beatsPerBar * Config.partsPerBeat) continue;\r\n\t\t\t\t\t\t\t\tif (note.pins.length == 0) {\r\n\t\t\t\t\t\t\t\t\t//if (time < noteClock) continue;\r\n\t\t\t\t\t\t\t\t\tnote.start = time;\r\n\t\t\t\t\t\t\t\t\tstartInterval = interval;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t//if (time <= noteClock) continue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//noteClock = time;\r\n\r\n\t\t\t\t\t\t\t\tnote.pins.push(makeNotePin(interval - startInterval, time - note.start, volume));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pins.length < 2) continue;\r\n\r\n\t\t\t\t\t\t\tnote.end = note.pins[note.pins.length - 1].time + note.start;\r\n\r\n\t\t\t\t\t\t\tconst maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\r\n\t\t\t\t\t\t\tlet lowestPitch: number = maxPitch;\r\n\t\t\t\t\t\t\tlet highestPitch: number = 0;\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pitches.length; k++) {\r\n\t\t\t\t\t\t\t\tnote.pitches[k] += startInterval;\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n\t\t\t\t\t\t\t\t\tnote.pitches.splice(k, 1);\r\n\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pins.length; k++) {\r\n\t\t\t\t\t\t\t\tconst pin: NotePin = note.pins[k];\r\n\t\t\t\t\t\t\t\tif (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n\t\t\t\t\t\t\t\tif (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n\t\t\t\t\t\t\t\tif (k >= 2) {\r\n\t\t\t\t\t\t\t\t\tif (pin.interval == note.pins[k - 1].interval &&\r\n\t\t\t\t\t\t\t\t\t\tpin.interval == note.pins[k - 2].interval &&\r\n\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k - 1].volume &&\r\n\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k - 2].volume) {\r\n\t\t\t\t\t\t\t\t\t\tnote.pins.splice(k - 1, 1);\r\n\t\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tpattern.notes.push(note);\r\n\t\t\t\t\t\t\t//tickClock = note.end;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\tchannel.bars[i] = channelObject[\"sequence\"] ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\r\n\t\tif (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\r\n\t\tif (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\r\n\t\tthis.pitchChannelCount = newPitchChannels.length;\r\n\t\tthis.noiseChannelCount = newNoiseChannels.length;\r\n\t\tthis.modChannelCount = newModChannels.length;\r\n\t\tthis.channels.length = 0;\r\n\t\tArray.prototype.push.apply(this.channels, newPitchChannels);\r\n\t\tArray.prototype.push.apply(this.channels, newNoiseChannels);\r\n\t\tArray.prototype.push.apply(this.channels, newModChannels);\r\n\t}\r\n\r\n\tpublic getPattern(channel: number, bar: number): Pattern | null {\r\n\t\tif (bar < 0 || bar >= this.barCount) return null;\r\n\t\tconst patternIndex: number = this.channels[channel].bars[bar];\r\n\t\tif (patternIndex == 0) return null;\r\n\t\treturn this.channels[channel].patterns[patternIndex - 1];\r\n\t}\r\n\r\n\tpublic getPatternInstrument(channel: number, bar: number): number {\r\n\t\tconst pattern: Pattern | null = this.getPattern(channel, bar);\r\n\t\treturn pattern == null ? 0 : pattern.instrument;\r\n\t}\r\n\r\n\tpublic getBeatsPerMinute(): number {\r\n\t\treturn this.tempo;\r\n\t}\r\n\r\n}\r\n\r\nclass Tone {\r\n\tpublic instrument: Instrument;\r\n\tpublic readonly pitches: number[] = [0, 0, 0, 0];\r\n\tpublic pitchCount: number = 0;\r\n\tpublic chordSize: number = 0;\r\n\tpublic drumsetPitch: number = 0;\r\n\tpublic note: Note | null = null;\r\n\tpublic prevNote: Note | null = null;\r\n\tpublic nextNote: Note | null = null;\r\n\tpublic prevNotePitchIndex: number = 0;\r\n\tpublic nextNotePitchIndex: number = 0;\r\n\tpublic active: boolean = false;\r\n\tpublic noteStart: number = 0;\r\n\tpublic noteEnd: number = 0;\r\n\tpublic noteLengthTicks: number = 0;\r\n\tpublic ticksSinceReleased: number = 0;\r\n\tpublic liveInputSamplesHeld: number = 0;\r\n\tpublic lastInterval: number = 0;\r\n\tpublic lastVolume: number = 0;\r\n\tpublic stereoVolume1: number = 0.0;\r\n\tpublic stereoVolume2: number = 0.0;\r\n\tpublic stereoOffset: number = 0.0;\r\n\tpublic stereoDelay: number = 0.0;\r\n\tpublic sample: number = 0.0;\r\n\tpublic readonly phases: number[] = [];\r\n\tpublic readonly phaseDeltas: number[] = [];\r\n\tpublic readonly volumeStarts: number[] = [];\r\n\tpublic readonly volumeDeltas: number[] = [];\r\n\tpublic volumeStart: number = 0.0;\r\n\tpublic volumeDelta: number = 0.0;\r\n\tpublic phaseDeltaScale: number = 0.0;\r\n\tpublic pulseWidth: number = 0.0;\r\n\tpublic pulseWidthDelta: number = 0.0;\r\n\tpublic filter: number = 0.0;\r\n\tpublic filterScale: number = 0.0;\r\n\tpublic filterSample0: number = 0.0;\r\n\tpublic filterSample1: number = 0.0;\r\n\tpublic vibratoScale: number = 0.0;\r\n\tpublic intervalMult: number = 0.0;\r\n\tpublic intervalVolumeMult: number = 1.0;\r\n\tpublic feedbackOutputs: number[] = [];\r\n\tpublic feedbackMult: number = 0.0;\r\n\tpublic feedbackDelta: number = 0.0;\r\n\tpublic stereoVolumeLStart: number = 0.0;\r\n\tpublic stereoVolumeRStart: number = 0.0;\r\n\tpublic stereoVolumeLDelta: number = 0.0;\r\n\tpublic stereoVolumeRDelta: number = 0.0;\r\n\tpublic stereoDelayStart: number = 0.0;\r\n\tpublic stereoDelayEnd: number = 0.0;\r\n\tpublic stereoDelayDelta: number = 0.0;\r\n\tpublic customVolumeStart: number = 0.0;\r\n\tpublic customVolumeEnd: number = 0.0;\r\n\tpublic filterResonanceStart: number = 0.0;\r\n\tpublic filterResonanceDelta: number = 0.0;\r\n\tpublic isFirstOrder: boolean = false;\r\n\r\n\tconstructor() {\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\tthis.phases[i] = 0.0;\r\n\t\t\tthis.feedbackOutputs[i] = 0.0;\r\n\t\t}\r\n\t\tthis.sample = 0.0;\r\n\t\tthis.filterSample0 = 0.0;\r\n\t\tthis.filterSample1 = 0.0;\r\n\t\tthis.liveInputSamplesHeld = 0.0;\r\n\t}\r\n\r\n}\r\n\r\nexport class Synth {\r\n\r\n\tpublic warmUpSynthesizer(song: Song | null): void {\r\n\t\t// Don't bother to generate the drum waves unless the song actually\r\n\t\t// uses them, since they may require a lot of computation.\r\n\t\tif (song != null) {\r\n\t\t\tfor (let channel: number = 0; channel < song.getChannelCount(); channel++) {\r\n\t\t\t\tfor (let instrument: number = 0; instrument < song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tSynth.getInstrumentSynthFunction(song.channels[channel].instruments[instrument]);\r\n\t\t\t\t\tsong.channels[channel].instruments[instrument].warmUp();\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic computeLatestModValues(): void {\r\n\r\n\t\tif (this.song != null && this.song.modChannelCount > 0) {\r\n\r\n\t\t\t// Clear all mod values, and set up temp variables for the time a mod would be set at.\r\n\t\t\tlet latestModTimes: (number | null)[] = [];\r\n\t\t\tlet latestModInsTimes: (number | null)[][][] = [];\r\n\t\t\tthis.modValues = [];\r\n\t\t\tthis.nextModValues = [];\r\n\t\t\tthis.modInsValues = [];\r\n\t\t\tthis.nextModInsValues = [];\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\tlatestModInsTimes[channel] = [];\r\n\t\t\t\tthis.modInsValues[channel] = [];\r\n\t\t\t\tthis.nextModInsValues[channel] = [];\r\n\t\t\t\tfor (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tthis.modInsValues[channel][instrument] = [];\r\n\t\t\t\t\tthis.nextModInsValues[channel][instrument] = [];\r\n\t\t\t\t\tlatestModInsTimes[channel][instrument] = [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Find out where we're at in the fraction of the current bar.\r\n\t\t\tlet currentPart: number = this.beat * Config.partsPerBeat + this.part;\r\n\r\n\t\t\t// For mod channels, calculate last set value for each mod\r\n\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\tif (!(this.song.channels[channel].muted)) {\r\n\r\n\t\t\t\t\tlet pattern: Pattern | null;\r\n\r\n\t\t\t\t\tfor (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\r\n\t\t\t\t\t\tpattern = this.song.getPattern(channel, currentBar);\r\n\r\n\t\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\t\tlet instrumentIdx: number = this.song.getPatternInstrument(channel, currentBar);\r\n\t\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\t\t\tlet latestPinParts: number[] = [];\r\n\t\t\t\t\t\t\tlet latestPinValues: number[] = [];\r\n\r\n\t\t\t\t\t\t\tlet partsInBar: number = (currentBar == this.bar)\r\n\t\t\t\t\t\t\t\t? currentPart\r\n\t\t\t\t\t\t\t\t: this.findPartsInBar(currentBar);\r\n\r\n\t\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\t\tif (note.start < partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\r\n\t\t\t\t\t\t\t\t\tif (note.end <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\tlatestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\r\n\t\t\t\t\t\t\t\t\t\tlatestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].volume;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tlatestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\r\n\t\t\t\t\t\t\t\t\t\t// Find the pin where bar change happens, and compute where pin volume would be at that time\r\n\t\t\t\t\t\t\t\t\t\tfor (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tlatestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n\t\t\t\t\t\t\t\t\t\t\t\tpinIdx = note.pins.length;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Set modulator value, if it wasn't set in another pattern already scanned\r\n\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\tif (latestPinParts[mod] != null) {\r\n\t\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\t\t\t\tif (latestModTimes[instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modSettings[mod]] as number)) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n\t\t\t\t\t\t\t\t\t\t\tlatestModTimes[instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] as number)) {\r\n\t\t\t\t\t\t\t\t\t\tthis.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n\t\t\t\t\t\t\t\t\t\tlatestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static operatorAmplitudeCurve(amplitude: number): number {\r\n\t\treturn (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n\t}\r\n\r\n\tpublic samplesPerSecond: number = 44100;\r\n\r\n\tpublic song: Song | null = null;\r\n\tpublic liveInputDuration: number = 0;\r\n\tpublic liveInputStarted: boolean = false;\r\n\tpublic liveInputPitches: number[] = [];\r\n\tpublic liveInputChannel: number = 0;\r\n\tpublic loopRepeatCount: number = -1;\r\n\tpublic volume: number = 1.0;\r\n\r\n\tprivate wantToSkip: boolean = false;\r\n\tprivate playheadInternal: number = 0.0;\r\n\tprivate bar: number = 0;\r\n\tprivate beat: number = 0;\r\n\tprivate part: number = 0;\r\n\tprivate tick: number = 0;\r\n\tprivate tickSampleCountdown: number = 0;\r\n\tprivate modValues: (number | null)[];\r\n\tprivate modInsValues: (number | null)[][][];\r\n\tprivate nextModValues: (number | null)[];\r\n\tprivate nextModInsValues: (number | null)[][][];\r\n\tprivate isPlayingSong: boolean = false;\r\n\tprivate liveInputEndTime: number = 0.0;\r\n\tprivate readonly tonePool: Deque<Tone> = new Deque<Tone>();\r\n\tprivate readonly activeTones: Array<Deque<Tone>> = [];\r\n\tprivate tyingOver: number[] = [];\r\n\tprivate readonly activeModTones: Array<Array<Deque<Tone>>> = [];\r\n\t//private readonly releasedModTones: Array<Array<Deque<Tone>>> = [];\r\n\tprivate readonly releasedTones: Array<Deque<Tone>> = [];\r\n\tprivate readonly liveInputTones: Deque<Tone> = new Deque<Tone>();\r\n\r\n\t//private highpassInput: number = 0.0;\r\n\t//private highpassOutput: number = 0.0;\r\n\tprivate limit: number = 0.0;\r\n\r\n\tprivate stereoBufferIndex: number = 0;\r\n\tprivate samplesForNone: Float32Array | null = null;\r\n\tprivate samplesForReverb: Float32Array | null = null;\r\n\tprivate samplesForChorus: Float32Array | null = null;\r\n\tprivate samplesForChorusReverb: Float32Array | null = null;\r\n\r\n\tprivate chorusDelayLine: Float32Array = new Float32Array(2048);\r\n\tprivate chorusDelayPos: number = 0;\r\n\tprivate chorusPhase: number = 0;\r\n\r\n\tprivate reverbDelayLine: Float32Array = new Float32Array(16384);\r\n\tprivate reverbDelayPos: number = 0;\r\n\tprivate reverbFeedback0: number = 0.0;\r\n\tprivate reverbFeedback1: number = 0.0;\r\n\tprivate reverbFeedback2: number = 0.0;\r\n\tprivate reverbFeedback3: number = 0.0;\r\n\r\n\tprivate audioCtx: any | null = null;\r\n\tprivate scriptNode: any | null = null;\r\n\r\n\tpublic get playing(): boolean {\r\n\t\treturn this.isPlayingSong;\r\n\t}\r\n\r\n\tpublic get playhead(): number {\r\n\t\treturn this.playheadInternal;\r\n\t}\r\n\r\n\tpublic set playhead(value: number) {\r\n\t\tif (this.song != null) {\r\n\t\t\tthis.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n\t\t\tlet remainder: number = this.playheadInternal;\r\n\t\t\tthis.bar = Math.floor(remainder);\r\n\t\t\tremainder = this.song.beatsPerBar * (remainder - this.bar);\r\n\t\t\tthis.beat = Math.floor(remainder);\r\n\t\t\tremainder = Config.partsPerBeat * (remainder - this.beat);\r\n\t\t\tthis.part = Math.floor(remainder);\r\n\t\t\tremainder = Config.ticksPerPart * (remainder - this.part);\r\n\t\t\tthis.tick = Math.floor(remainder);\r\n\t\t\tconst samplesPerTick: number = this.getSamplesPerTick();\r\n\t\t\tremainder = samplesPerTick * (remainder - this.tick);\r\n\t\t\tthis.tickSampleCountdown = samplesPerTick - remainder;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getSamplesPerBar(): number {\r\n\t\tif (this.song == null) throw new Error();\r\n\t\treturn this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\r\n\t}\r\n\r\n\t// Calculate the total number of parts that will be played in the current bar before any next bar mods trigger.\r\n\tprivate findPartsInBar(bar: number): number {\r\n\t\tif (this.song == null) return 0;\r\n\t\tlet partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\tif (pattern != null) {\r\n\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\tif (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n\t\t\t\t\t\t\t\t// Find the earliest next bar note.\r\n\t\t\t\t\t\t\t\tif (partsInBar > note.start)\r\n\t\t\t\t\t\t\t\t\tpartsInBar = note.start;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn partsInBar;\r\n\t}\r\n\r\n\t// Returns the total samples in the song\r\n\tpublic getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\r\n\t\tif (this.song == null)\r\n\t\t\treturn -1;\r\n\r\n\t\t// Compute the window to be checked (start bar to end bar)\r\n\t\tlet startBar: number = enableIntro ? 0 : this.song.loopStart;\r\n\t\tlet endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\r\n\t\tlet hasTempoMods: boolean = false;\r\n\t\tlet hasNextBarMods: boolean = false;\r\n\t\tlet prevTempo: number = this.song.tempo;\r\n\r\n\t\t// Determine if any tempo or next bar mods happen anywhere in the window\r\n\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\tfor (let bar: number = startBar; bar < endBar; bar++) {\r\n\t\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\thasTempoMods = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\thasNextBarMods = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\r\n\t\tif (startBar > 0) {\r\n\t\t\tlet latestTempoPin: number | null = null;\r\n\t\t\tlet latestTempoValue: number = 0;\r\n\r\n\t\t\tfor (let bar: number = startBar - 1; bar >= 0; bar--) {\r\n\t\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\t\tlet pattern = this.song.getPattern(channel, bar);\r\n\r\n\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\tlet instrumentIdx: number = this.song.getPatternInstrument(channel, bar);\r\n\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\r\n\t\t\t\t\t\tlet partsInBar: number = this.findPartsInBar(bar);\r\n\r\n\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\tif (instrument.modSettings[Config.modCount - 1 - note.pitches[0]] == ModSetting.mstTempo && instrument.modStatuses[Config.modCount - 1 - note.pitches[0]] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\t\tif (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\r\n\t\t\t\t\t\t\t\t\tif (note.end <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoPin = note.end;\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoValue = note.pins[note.pins.length - 1].volume;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoPin = partsInBar;\r\n\t\t\t\t\t\t\t\t\t\t// Find the pin where bar change happens, and compute where pin volume would be at that time\r\n\t\t\t\t\t\t\t\t\t\tfor (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tlatestTempoValue = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n\t\t\t\t\t\t\t\t\t\t\t\tpinIdx = note.pins.length;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Done once you process a pattern where tempo mods happened, since the search happens backward\r\n\t\t\t\tif (latestTempoPin != null) {\r\n\t\t\t\t\tprevTempo = this.song.modValueToReal(latestTempoValue, ModSetting.mstTempo);\r\n\t\t\t\t\tbar = -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (hasTempoMods || hasNextBarMods) {\r\n\t\t\t// Run from start bar to end bar and observe looping, computing average tempo across each bar\r\n\t\t\tlet bar: number = startBar;\r\n\t\t\tlet ended: boolean = false;\r\n\t\t\tlet totalSamples: number = 0;\r\n\r\n\t\t\twhile (!ended) {\r\n\t\t\t\t// Compute the subsection of the pattern that will play\r\n\t\t\t\tlet partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n\t\t\t\tlet currentPart: number = 0;\r\n\r\n\t\t\t\tif (hasNextBarMods) {\r\n\t\t\t\t\tpartsInBar = this.findPartsInBar(bar);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Compute average tempo in this tick window, or use last tempo if nothing happened\r\n\t\t\t\tif (hasTempoMods) {\r\n\t\t\t\t\tlet foundMod: boolean = false;\r\n\t\t\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tif (foundMod == false) {\r\n\t\t\t\t\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\t\tif (foundMod == false && instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong\r\n\t\t\t\t\t\t\t\t\t\t&& pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\r\n\t\t\t\t\t\t\t\t\t\t// Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\r\n\t\t\t\t\t\t\t\t\t\tfoundMod = true;\r\n\t\t\t\t\t\t\t\t\t\t// Need to re-sort the notes by start time to make the next part much less painful.\r\n\t\t\t\t\t\t\t\t\t\tpattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\r\n\t\t\t\t\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// Compute samples up to this note\r\n\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (note.start < partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Compute samples up to this pin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst prevPinTempo: number = this.song.modValueToReal(note.pins[pinIdx - 1].volume, ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet currPinTempo: number = this.song.modValueToReal(note.pins[pinIdx].volume, ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrPinTempo = this.song.modValueToReal(note.pins[pinIdx - 1].volume + (note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time), ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (currPinTempo != prevPinTempo) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The starting formula is\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Substituting BPM for a step variable that moves with respect to the current tick, we get\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// No tempo change between the two pins.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprevTempo = currPinTempo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Compute samples for the rest of the bar\r\n\t\t\t\ttotalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n\t\t\t\tbar++;\r\n\t\t\t\tif (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\tbar = this.song.loopStart;\r\n\t\t\t\t\tif (loop > 0) loop--;\r\n\t\t\t\t}\r\n\t\t\t\tif (bar >= endBar) {\r\n\t\t\t\t\tended = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn Math.ceil(totalSamples);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// No tempo or next bar mods... phew! Just calculate normally.\r\n\t\t\treturn this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\r\n\t\tif (this.song == null) throw new Error();\r\n\t\tlet bars: number = this.song.loopLength * (useLoopCount + 1);\r\n\t\tif (enableIntro) bars += this.song.loopStart;\r\n\t\tif (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n\t\treturn bars;\r\n\t}\r\n\r\n\tconstructor(song: Song | string | null = null) {\r\n\t\tif (song != null) this.setSong(song);\r\n\t}\r\n\r\n\tpublic setSong(song: Song | string): void {\r\n\t\tif (typeof (song) == \"string\") {\r\n\t\t\tthis.song = new Song(song);\r\n\t\t} else if (song instanceof Song) {\r\n\t\t\tthis.song = song;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic setModValue(volumeStart: number, volumeEnd: number, mod: number, instrument: Instrument, setting: ModSetting): number {\r\n\t\tlet val: number;\r\n\t\tlet nextVal: number;\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tval = (this.song as Song).modValueToReal(volumeStart, setting);\r\n\t\t\t\tnextVal = (this.song as Song).modValueToReal(volumeEnd, setting);\r\n\t\t\t\tif (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\r\n\t\t\t\t\tthis.modValues[setting] = val;\r\n\t\t\t\t\tthis.nextModValues[setting] = nextVal;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tval = this.song!.modValueToReal(volumeStart, setting);\r\n\t\t\t\tnextVal = this.song!.modValueToReal(volumeEnd, setting);\r\n\t\t\t\tlet channelAdjust: number = instrument.modChannels[mod] + ((instrument.modStatuses[mod] == ModStatus.msForNoise) ? this.song!.pitchChannelCount : 0);\r\n\r\n\t\t\t\tif (this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] == null\r\n\t\t\t\t\t|| this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != val\r\n\t\t\t\t\t|| this.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != nextVal) {\r\n\t\t\t\t\tthis.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = val;\r\n\t\t\t\t\tthis.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = nextVal;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\t\tval = (this.song as Song).modValueToReal(volumeStart, setting);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tval = -1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn val;\r\n\t}\r\n\r\n\tpublic getModValue(setting: ModSetting, forSong: boolean, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\r\n\t\tif (forSong) {\r\n\t\t\tif (this.modValues[setting] != null && this.nextModValues[setting] != null) {\r\n\t\t\t\treturn nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\r\n\t\t\t}\r\n\t\t} else if (channel != undefined && instrument != undefined) {\r\n\t\t\tif (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n\t\t\t\treturn nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t// Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\r\n\tpublic isAnyModActive(channel: number, instrument: number): boolean {\r\n\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\tif ((this.modValues != undefined && this.modValues[setting] != null)\r\n\t\t\t\t|| (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic unsetMod(setting: ModSetting, channel?: number, instrument?: number) {\r\n\t\tif (this.isModActive(setting, true) || (channel != undefined && instrument != undefined && this.isModActive(setting, false, channel, instrument))) {\r\n\t\t\tthis.modValues[setting] = null;\r\n\t\t\tthis.nextModValues[setting] = null;\r\n\t\t\tif (channel != undefined && instrument != undefined) {\r\n\t\t\t\tthis.modInsValues[channel][instrument][setting] = null;\r\n\t\t\t\tthis.nextModInsValues[channel][instrument][setting] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isModActive(setting: ModSetting, forSong: boolean, channel?: number, instrument?: number): boolean {\r\n\t\tif (forSong) {\r\n\t\t\treturn (this.modValues != undefined && this.modValues[setting] != null);\r\n\t\t} else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null && this.modInsValues[channel][instrument][setting] != null) {\r\n\t\t\treturn (this.modInsValues[channel][instrument][setting] != null);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate activateAudio(): void {\r\n\t\tif (this.audioCtx == null || this.scriptNode == null) {\r\n\t\t\tthis.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)();\r\n\t\t\tthis.samplesPerSecond = this.audioCtx.sampleRate;\r\n\t\t\tthis.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(2048, 0, 2) : this.audioCtx.createJavaScriptNode(2048, 0, 2); // 2048, 0 input channels, 2 output channels\r\n\t\t\tthis.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n\t\t\tthis.scriptNode.channelCountMode = 'explicit';\r\n\t\t\tthis.scriptNode.channelInterpretation = 'speakers';\r\n\t\t\tthis.scriptNode.connect(this.audioCtx.destination);\r\n\t\t}\r\n\t\tthis.audioCtx.resume();\r\n\t}\r\n\r\n\tprivate deactivateAudio(): void {\r\n\t\tif (this.audioCtx != null && this.scriptNode != null) {\r\n\t\t\tthis.scriptNode.disconnect(this.audioCtx.destination);\r\n\t\t\tthis.scriptNode = null;\r\n\t\t\tif (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n\t\t\tthis.audioCtx = null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic maintainLiveInput(): void {\r\n\t\tthis.activateAudio();\r\n\t\tthis.liveInputEndTime = performance.now() + 10000.0;\r\n\t}\r\n\r\n\tpublic play(): void {\r\n\t\tif (this.isPlayingSong) return;\r\n\t\tthis.isPlayingSong = true;\r\n\t\tthis.warmUpSynthesizer(this.song);\r\n\t\tthis.computeLatestModValues();\r\n\t\tthis.activateAudio();\r\n\t}\r\n\r\n\tpublic pause(): void {\r\n\t\tif (!this.isPlayingSong) return;\r\n\t\tthis.isPlayingSong = false;\r\n\t\tif (this.song != null) {\r\n\t\t\tthis.song.inVolumeCap = 0.0;\r\n\t\t\tthis.song.outVolumeCap = 0.0;\r\n\t\t}\r\n\t\tthis.modValues = [];\r\n\t\tthis.modInsValues = [];\r\n\t\tthis.nextModValues = [];\r\n\t\tthis.nextModInsValues = [];\r\n\t\tthis.tyingOver = [];\r\n\t}\r\n\r\n\tpublic snapToStart(): void {\r\n\t\tthis.bar = 0;\r\n\t\tthis.snapToBar();\r\n\t}\r\n\r\n\tpublic goToBar(bar: number): void {\r\n\t\tthis.bar = bar;\r\n\t\tthis.playheadInternal = this.bar;\r\n\t}\r\n\r\n\tpublic snapToBar(): void {\r\n\t\tthis.playheadInternal = this.bar;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\t\tthis.tick = 0;\r\n\t\tthis.tickSampleCountdown = 0;\r\n\t}\r\n\r\n\tpublic resetEffects(): void {\r\n\t\tthis.reverbDelayPos = 0;\r\n\t\tthis.reverbFeedback0 = 0.0;\r\n\t\tthis.reverbFeedback1 = 0.0;\r\n\t\tthis.reverbFeedback2 = 0.0;\r\n\t\tthis.reverbFeedback3 = 0.0;\r\n\t\t//this.highpassInput = 0.0;\r\n\t\t//this.highpassOutput = 0.0;\r\n\t\tthis.freeAllTones();\r\n\t\tfor (let i: number = 0; i < this.reverbDelayLine.length; i++) this.reverbDelayLine[i] = 0.0;\r\n\t\tfor (let i: number = 0; i < this.chorusDelayLine.length; i++) this.chorusDelayLine[i] = 0.0;\r\n\t\tif (this.samplesForNone != null) for (let i: number = 0; i < this.samplesForNone.length; i++) this.samplesForNone[i] = 0.0;\r\n\t\tif (this.samplesForReverb != null) for (let i: number = 0; i < this.samplesForReverb.length; i++) this.samplesForReverb[i] = 0.0;\r\n\t\tif (this.samplesForChorus != null) for (let i: number = 0; i < this.samplesForChorus.length; i++) this.samplesForChorus[i] = 0.0;\r\n\t\tif (this.samplesForChorusReverb != null) for (let i: number = 0; i < this.samplesForChorusReverb.length; i++) this.samplesForChorusReverb[i] = 0.0;\r\n\t}\r\n\r\n\tpublic jumpIntoLoop(): void {\r\n\t\tif (!this.song) return;\r\n\t\tif (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\r\n\t\t\tconst oldBar: number = this.bar;\r\n\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t\tif (this.playing)\r\n\t\t\t\tthis.computeLatestModValues();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic nextBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst oldBar: number = this.bar;\r\n\t\tthis.bar++;\r\n\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\tthis.bar = 0;\r\n\t\t}\r\n\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic skipBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst samplesPerTick: number = this.getSamplesPerTick();\r\n\t\tthis.bar++;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\t\tthis.tick = 0;\r\n\t\tthis.tickSampleCountdown = samplesPerTick;\r\n\r\n\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic firstBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tthis.bar = 0;\r\n\t\tthis.playheadInternal = 0;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic jumpToEditingBar(bar: number): void {\r\n\t\tif (!this.song) return;\r\n\r\n\t\tthis.bar = bar;\r\n\r\n\t\tthis.playheadInternal = bar;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic prevBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst oldBar: number = this.bar;\r\n\t\tthis.bar--;\r\n\t\tif (this.bar < 0 || this.bar >= this.song.barCount) {\r\n\t\t\tthis.bar = this.song.barCount - 1;\r\n\t\t}\r\n\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tprivate audioProcessCallback = (audioProcessingEvent: any): void => {\r\n\t\tconst outputBuffer = audioProcessingEvent.outputBuffer;\r\n\t\tconst outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n\t\tconst outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n\t\tconst isPlayingLiveTones = performance.now() < this.liveInputEndTime;\r\n\t\tif (!isPlayingLiveTones && !this.isPlayingSong) {\r\n\t\t\tfor (let i: number = 0; i < outputBuffer.length; i++) {\r\n\t\t\t\toutputDataL[i] = 0.0;\r\n\t\t\t\toutputDataR[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.deactivateAudio();\r\n\t\t} else {\r\n\t\t\tthis.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\r\n\t\tif (this.song == null) {\r\n\t\t\tfor (let i: number = 0; i < outputBufferLength; i++) {\r\n\t\t\t\toutputDataL[i] = 0.0;\r\n\t\t\t\toutputDataR[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.deactivateAudio();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.song.inVolumeCap = 0.0; // Reset volume cap for this run\r\n\t\tthis.song.outVolumeCap = 0.0;\r\n\r\n\t\tconst channelCount: number = this.song.pitchChannelCount + this.song.noiseChannelCount;\r\n\r\n\t\tfor (let i: number = this.activeTones.length; i < channelCount; i++) {\r\n\t\t\tthis.activeTones[i] = new Deque<Tone>();\r\n\t\t\tthis.releasedTones[i] = new Deque<Tone>();\r\n\t\t}\r\n\t\tthis.activeTones.length = channelCount;\r\n\t\tthis.releasedTones.length = channelCount;\r\n\t\tif (channelCount != this.tyingOver.length) {\r\n\t\t\tlet idx: number = this.tyingOver.length;\r\n\t\t\tthis.tyingOver.length = channelCount;\r\n\t\t\twhile (idx < this.tyingOver.length) {\r\n\t\t\t\tthis.tyingOver[idx++] = -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i: number = this.activeModTones.length; i < this.song.modChannelCount; i++) {\r\n\t\t\tthis.activeModTones[i] = [];\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tthis.activeModTones[i][mod] = new Deque<Tone>();\r\n\t\t\t}\r\n\t\t\tthis.activeModTones[i].length = Config.modCount;\r\n\t\t}\r\n\t\tthis.activeModTones.length = this.song.modChannelCount;\r\n\r\n\t\tlet samplesPerTick: number = this.getSamplesPerTick();\r\n\t\tlet bufferIndex: number = 0;\r\n\t\tlet ended: boolean = false;\r\n\r\n\t\t// Check the bounds of the playhead:\r\n\t\twhile (this.tickSampleCountdown <= 0) this.tickSampleCountdown += samplesPerTick;\r\n\t\tif (this.tickSampleCountdown > samplesPerTick) this.tickSampleCountdown = samplesPerTick;\r\n\t\tif (playSong) {\r\n\t\t\tif (this.beat >= this.song.beatsPerBar) {\r\n\t\t\t\tthis.bar++;\r\n\t\t\t\tthis.beat = 0;\r\n\t\t\t\tthis.part = 0;\r\n\t\t\t\tthis.tick = 0;\r\n\t\t\t\tthis.tickSampleCountdown = samplesPerTick;\r\n\r\n\t\t\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\tthis.bar = 0;\r\n\t\t\t\tif (this.loopRepeatCount != -1) {\r\n\t\t\t\t\tended = true;\r\n\t\t\t\t\tthis.pause();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//const synthStartTime: number = performance.now();\r\n\r\n\t\tconst stereoBufferLength: number = outputBufferLength * 4;\r\n\t\tif (this.samplesForNone == null || this.samplesForNone.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForReverb == null || this.samplesForReverb.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForChorus == null || this.samplesForChorus.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForChorusReverb == null || this.samplesForChorusReverb.length != stereoBufferLength) {\r\n\t\t\tthis.samplesForNone = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForReverb = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForChorus = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForChorusReverb = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.stereoBufferIndex = 0;\r\n\t\t}\r\n\t\tlet stereoBufferIndex: number = this.stereoBufferIndex;\r\n\t\tconst samplesForNone: Float32Array = this.samplesForNone;\r\n\t\tconst samplesForReverb: Float32Array = this.samplesForReverb;\r\n\t\tconst samplesForChorus: Float32Array = this.samplesForChorus;\r\n\t\tconst samplesForChorusReverb: Float32Array = this.samplesForChorusReverb;\r\n\r\n\t\t// Post processing parameters:\r\n\t\tconst volume: number = +this.volume;\r\n\t\tconst chorusDelayLine: Float32Array = this.chorusDelayLine;\r\n\t\tconst reverbDelayLine: Float32Array = this.reverbDelayLine;\r\n\t\tconst chorusDuration: number = 2.0;\r\n\t\tconst chorusAngle: number = Math.PI * 2.0 / (chorusDuration * this.samplesPerSecond);\r\n\t\tconst chorusRange: number = 150 * this.samplesPerSecond / 44100;\r\n\t\tconst chorusOffset0: number = 0x800 - 1.51 * chorusRange;\r\n\t\tconst chorusOffset1: number = 0x800 - 2.10 * chorusRange;\r\n\t\tconst chorusOffset2: number = 0x800 - 3.35 * chorusRange;\r\n\t\tconst chorusOffset3: number = 0x800 - 1.47 * chorusRange;\r\n\t\tconst chorusOffset4: number = 0x800 - 2.15 * chorusRange;\r\n\t\tconst chorusOffset5: number = 0x800 - 3.25 * chorusRange;\r\n\t\tlet chorusPhase: number = this.chorusPhase % (Math.PI * 2.0);\r\n\t\tlet chorusDelayPos: number = this.chorusDelayPos & 0x7FF;\r\n\t\tlet reverbDelayPos: number = this.reverbDelayPos & 0x3FFF;\r\n\t\tlet reverbFeedback0: number = +this.reverbFeedback0;\r\n\t\tlet reverbFeedback1: number = +this.reverbFeedback1;\r\n\t\tlet reverbFeedback2: number = +this.reverbFeedback2;\r\n\t\tlet reverbFeedback3: number = +this.reverbFeedback3;\r\n\t\tlet useReverb: number = this.song.reverb;\r\n\t\tif (this.isModActive(ModSetting.mstReverb, true)) {\r\n\t\t\tuseReverb = this.getModValue(ModSetting.mstReverb, true);\r\n\t\t}\r\n\t\tlet reverb: number = Math.pow(useReverb / Config.reverbRange, 0.667) * 0.425;\r\n\t\t//const highpassFilter: number = Math.pow(0.5, 400 / this.samplesPerSecond);\r\n\t\tconst limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond); // Default 4.0\r\n\t\tconst limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond); // Default 4000.0;\r\n\t\tconst compressionThreshold: number = this.song.compressionThreshold; // Default 1\r\n\t\tconst limitThreshold: number = this.song.limitThreshold; // Default 1\r\n\t\tconst compressionRatio: number = this.song.compressionRatio; // Default 1\r\n\t\tconst limitRatio: number = this.song.limitRatio; // Default 1\r\n\t\tconst masterGain: number = this.song.masterGain; // Default 1\r\n\t\t//let highpassInput: number = +this.highpassInput;\r\n\t\t//let highpassOutput: number = +this.highpassOutput;\r\n\t\tlet limit: number = +this.limit;\r\n\r\n\t\twhile (bufferIndex < outputBufferLength && !ended) {\r\n\r\n\t\t\tconst samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\r\n\t\t\tconst runLength: number = Math.min(Math.ceil(this.tickSampleCountdown), samplesLeftInBuffer);\r\n\r\n\t\t\tfor (let modChannel: number = 0, channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; modChannel < this.song.modChannelCount; modChannel++, channel++) {\r\n\t\t\t\t// Also determines mod tones.\r\n\t\t\t\tthis.determineCurrentActiveTones(this.song, channel, playSong);\r\n\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tfor (let i: number = 0; i < this.activeModTones[modChannel][mod].count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.activeModTones[modChannel][mod].get(i);\r\n\r\n\t\t\t\t\t\tif (this.song.channels[channel].muted == false)\r\n\t\t\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Handle next bar mods if they were set\r\n\t\t\tif (this.wantToSkip) {\r\n\t\t\t\tthis.wantToSkip = false;\r\n\t\t\t\tthis.skipBar();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.isModActive(ModSetting.mstReverb, true)) {\r\n\t\t\t\treverb = Math.pow(this.getModValue(ModSetting.mstReverb, true) / Config.reverbRange, 0.667) * 0.425;\r\n\t\t\t}\r\n\r\n\t\t\t// Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\r\n\r\n\t\t\tconst tickSampleCountdown: number = this.tickSampleCountdown;\r\n\t\t\tconst startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n\t\t\tconst endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n\t\t\tconst ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n\t\t\tconst partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n\t\t\tconst partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n\t\t\tconst partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n\t\t\tconst partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\tfor (let instrumentIdx: number = 0; instrumentIdx < this.song.instrumentsPerChannel; instrumentIdx++) {\r\n\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\tlet useVibratoSpeed: number = instrument.vibratoSpeed;\r\n\r\n\t\t\t\t\tinstrument.LFOtime = instrument.nextLFOtime;\r\n\r\n\t\t\t\t\tif (this.isModActive(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t\tuseVibratoSpeed = this.getModValue(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx, false);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (useVibratoSpeed == 0) {\r\n\t\t\t\t\t\tinstrument.LFOtime = 0;\r\n\t\t\t\t\t\tinstrument.nextLFOtime = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinstrument.nextLFOtime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\r\n\t\t\t\tif (channel == this.liveInputChannel) {\r\n\t\t\t\t\tthis.determineLiveInputTones(this.song);\r\n\r\n\t\t\t\t\tfor (let i: number = 0; i < this.liveInputTones.count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.liveInputTones.get(i);\r\n\t\t\t\t\t\t// Hmm. Will allow active input from a muted channel for now.\r\n\t\t\t\t\t\t//if (this.song.channels[channel].muted == false)\r\n\t\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.determineCurrentActiveTones(this.song, channel, playSong);\r\n\t\t\t\tfor (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n\t\t\t\t\tconst tone: Tone = this.activeTones[channel].get(i);\r\n\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n\t\t\t\t\tconst tone: Tone = this.releasedTones[channel].get(i);\r\n\t\t\t\t\tif (tone.ticksSinceReleased >= tone.instrument.getTransition().releaseTicks) {\r\n\t\t\t\t\t\tthis.freeReleasedTone(channel, i);\r\n\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\r\n\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, true, shouldFadeOutFast);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Post processing:\r\n\t\t\tlet chorusTap0Index: number = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n\t\t\tlet chorusTap1Index: number = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n\t\t\tlet chorusTap2Index: number = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n\t\t\tlet chorusTap3Index: number = chorusDelayPos + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n\t\t\tlet chorusTap4Index: number = chorusDelayPos + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n\t\t\tlet chorusTap5Index: number = chorusDelayPos + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n\t\t\tchorusPhase += chorusAngle * runLength;\r\n\t\t\tconst chorusTap0End: number = chorusDelayPos + runLength + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n\t\t\tconst chorusTap1End: number = chorusDelayPos + runLength + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n\t\t\tconst chorusTap2End: number = chorusDelayPos + runLength + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n\t\t\tconst chorusTap3End: number = chorusDelayPos + runLength + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n\t\t\tconst chorusTap4End: number = chorusDelayPos + runLength + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n\t\t\tconst chorusTap5End: number = chorusDelayPos + runLength + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n\t\t\tconst chorusTap0Delta: number = (chorusTap0End - chorusTap0Index) / runLength;\r\n\t\t\tconst chorusTap1Delta: number = (chorusTap1End - chorusTap1Index) / runLength;\r\n\t\t\tconst chorusTap2Delta: number = (chorusTap2End - chorusTap2Index) / runLength;\r\n\t\t\tconst chorusTap3Delta: number = (chorusTap3End - chorusTap3Index) / runLength;\r\n\t\t\tconst chorusTap4Delta: number = (chorusTap4End - chorusTap4Index) / runLength;\r\n\t\t\tconst chorusTap5Delta: number = (chorusTap5End - chorusTap5Index) / runLength;\r\n\t\t\tconst runEnd: number = bufferIndex + runLength;\r\n\t\t\tfor (let i: number = bufferIndex; i < runEnd; i++) {\r\n\t\t\t\tconst bufferIndexL: number = stereoBufferIndex;\r\n\t\t\t\tconst bufferIndexR: number = stereoBufferIndex + 1;\r\n\t\t\t\tconst sampleForNoneL: number = samplesForNone[bufferIndexL]; samplesForNone[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForNoneR: number = samplesForNone[bufferIndexR]; samplesForNone[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForReverbL: number = samplesForReverb[bufferIndexL]; samplesForReverb[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForReverbR: number = samplesForReverb[bufferIndexR]; samplesForReverb[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForChorusL: number = samplesForChorus[bufferIndexL]; samplesForChorus[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForChorusR: number = samplesForChorus[bufferIndexR]; samplesForChorus[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForChorusReverbL: number = samplesForChorusReverb[bufferIndexL]; samplesForChorusReverb[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForChorusReverbR: number = samplesForChorusReverb[bufferIndexR]; samplesForChorusReverb[bufferIndexR] = 0.0;\r\n\t\t\t\tstereoBufferIndex += 2;\r\n\r\n\t\t\t\tconst combinedChorusL: number = sampleForChorusL + sampleForChorusReverbL;\r\n\t\t\t\tconst combinedChorusR: number = sampleForChorusR + sampleForChorusReverbR;\r\n\r\n\t\t\t\tconst chorusTap0Ratio: number = chorusTap0Index % 1;\r\n\t\t\t\tconst chorusTap1Ratio: number = chorusTap1Index % 1;\r\n\t\t\t\tconst chorusTap2Ratio: number = chorusTap2Index % 1;\r\n\t\t\t\tconst chorusTap3Ratio: number = chorusTap3Index % 1;\r\n\t\t\t\tconst chorusTap4Ratio: number = chorusTap4Index % 1;\r\n\t\t\t\tconst chorusTap5Ratio: number = chorusTap5Index % 1;\r\n\t\t\t\tconst chorusTap0A: number = chorusDelayLine[(chorusTap0Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap0B: number = chorusDelayLine[(chorusTap0Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap1A: number = chorusDelayLine[(chorusTap1Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap1B: number = chorusDelayLine[(chorusTap1Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap2A: number = chorusDelayLine[(chorusTap2Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap2B: number = chorusDelayLine[(chorusTap2Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap3A: number = chorusDelayLine[(chorusTap3Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap3B: number = chorusDelayLine[(chorusTap3Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap4A: number = chorusDelayLine[(chorusTap4Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap4B: number = chorusDelayLine[(chorusTap4Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap5A: number = chorusDelayLine[(chorusTap5Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap5B: number = chorusDelayLine[(chorusTap5Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap0: number = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n\t\t\t\tconst chorusTap1: number = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n\t\t\t\tconst chorusTap2: number = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n\t\t\t\tconst chorusTap3: number = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n\t\t\t\tconst chorusTap4: number = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n\t\t\t\tconst chorusTap5: number = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n\t\t\t\tconst chorusSampleL = 0.5 * (combinedChorusL - chorusTap0 + chorusTap1 - chorusTap2);\r\n\t\t\t\tconst chorusSampleR = 0.5 * (combinedChorusR - chorusTap3 + chorusTap4 - chorusTap5);\r\n\t\t\t\tchorusDelayLine[chorusDelayPos] = combinedChorusL;\r\n\t\t\t\tchorusDelayLine[(chorusDelayPos + 0x400) & 0x7FF] = combinedChorusR;\r\n\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & 0x7FF;\r\n\t\t\t\tchorusTap0Index += chorusTap0Delta;\r\n\t\t\t\tchorusTap1Index += chorusTap1Delta;\r\n\t\t\t\tchorusTap2Index += chorusTap2Delta;\r\n\t\t\t\tchorusTap3Index += chorusTap3Delta;\r\n\t\t\t\tchorusTap4Index += chorusTap4Delta;\r\n\t\t\t\tchorusTap5Index += chorusTap5Delta;\r\n\r\n\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n\t\t\t\t// good ratios:\t\t0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n\t\t\t\t// Delay lengths:\t3041\t + 3385\t\t+ 4481\t+  5477 = 16384 = 2^14\r\n\t\t\t\t// Buffer offsets:\t3041\t-> 6426\t   -> 10907 -> 16384\r\n\t\t\t\tconst reverbDelayPos1: number = (reverbDelayPos + 3041) & 0x3FFF;\r\n\t\t\t\tconst reverbDelayPos2: number = (reverbDelayPos + 6426) & 0x3FFF;\r\n\t\t\t\tconst reverbDelayPos3: number = (reverbDelayPos + 10907) & 0x3FFF;\r\n\t\t\t\tconst reverbSample0: number = (reverbDelayLine[reverbDelayPos]);\r\n\t\t\t\tconst reverbSample1: number = reverbDelayLine[reverbDelayPos1];\r\n\t\t\t\tconst reverbSample2: number = reverbDelayLine[reverbDelayPos2];\r\n\t\t\t\tconst reverbSample3: number = reverbDelayLine[reverbDelayPos3];\r\n\t\t\t\tconst reverbTemp0: number = -(reverbSample0 + sampleForChorusReverbL + sampleForReverbL) + reverbSample1;\r\n\t\t\t\tconst reverbTemp1: number = -(reverbSample0 + sampleForChorusReverbR + sampleForReverbR) - reverbSample1;\r\n\t\t\t\tconst reverbTemp2: number = -reverbSample2 + reverbSample3;\r\n\t\t\t\tconst reverbTemp3: number = -reverbSample2 - reverbSample3;\r\n\t\t\t\treverbFeedback0 += ((reverbTemp0 + reverbTemp2) * reverb - reverbFeedback0) * 0.5;\r\n\t\t\t\treverbFeedback1 += ((reverbTemp1 + reverbTemp3) * reverb - reverbFeedback1) * 0.5;\r\n\t\t\t\treverbFeedback2 += ((reverbTemp0 - reverbTemp2) * reverb - reverbFeedback2) * 0.5;\r\n\t\t\t\treverbFeedback3 += ((reverbTemp1 - reverbTemp3) * reverb - reverbFeedback3) * 0.5;\r\n\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbFeedback0;\r\n\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbFeedback1;\r\n\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbFeedback2;\r\n\t\t\t\treverbDelayLine[reverbDelayPos] = reverbFeedback3;\r\n\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & 0x3FFF;\r\n\r\n\t\t\t\t// Apply master pre-gain to the sound, before limiting. Master gain slider is 0-5, but it's squared for more range (0-25).\r\n\t\t\t\tconst sampleL = masterGain * masterGain * (sampleForNoneL + chorusSampleL + sampleForReverbL + reverbSample1 + reverbSample2 + reverbSample3);\r\n\t\t\t\tconst sampleR = masterGain * masterGain * (sampleForNoneR + chorusSampleR + sampleForReverbR + reverbSample0 + reverbSample2 - reverbSample3);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\thighpassOutput = highpassOutput * highpassFilter + sample - highpassInput;\r\n\t\t\t\thighpassInput = sample;\r\n\t\t\t\t// use highpassOutput instead of sample below?\r\n\t\t\t\t*/\r\n\r\n\t\t\t\t// A compressor/limiter.\r\n\t\t\t\tconst absL: number = sampleL < 0.0 ? -sampleL : sampleL;\r\n\t\t\t\tconst absR: number = sampleR < 0.0 ? -sampleR : sampleR;\r\n\t\t\t\tconst abs: number = absL > absR ? absL : absR;\r\n\t\t\t\tthis.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\r\n\t\t\t\t// Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\r\n\t\t\t\tconst limitRange: number = (+(abs > compressionThreshold)) + (+(abs > limitThreshold));\r\n\t\t\t\t// Determine the target amplification based on the range of the curve\r\n\t\t\t\tconst limitTarget: number =\r\n\t\t\t\t\t(+(limitRange == 0)) * (((abs + 1 - compressionThreshold) * 0.8 + 0.25) * compressionRatio + 1.05 * (1 - compressionRatio))\r\n\t\t\t\t\t+ (+(limitRange == 1)) * (1.05)\r\n\t\t\t\t\t+ (+(limitRange == 2)) * (1.05 * ((abs + 1 - limitThreshold) * limitRatio + (1 - limitThreshold)));\r\n\t\t\t\t// Move the limit towards the target\r\n\t\t\t\tlimit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\r\n\t\t\t\tconst limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\r\n\t\t\t\toutputDataL[i] = sampleL * limitedVolume;\r\n\t\t\t\toutputDataR[i] = sampleR * limitedVolume;\r\n\r\n\t\t\t\tthis.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\r\n\t\t\t}\r\n\r\n\t\t\tbufferIndex += runLength;\r\n\r\n\t\t\tthis.tickSampleCountdown -= runLength;\r\n\t\t\tif (this.tickSampleCountdown <= 0) {\r\n\r\n\t\t\t\t// Track how long tones have been released, and free them if there are too many.\r\n\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\tfor (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.releasedTones[channel].get(i);\r\n\t\t\t\t\t\ttone.ticksSinceReleased++;\r\n\r\n\t\t\t\t\t\tconst shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\t\t\t\t\t\tif (shouldFadeOutFast) {\r\n\t\t\t\t\t\t\tthis.freeReleasedTone(channel, i);\r\n\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Update arpeggio time, which is used to calculate arpeggio position\r\n\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\tfor (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\t\tlet useArpeggioSpeed: number = instrument.arpeggioSpeed;\r\n\t\t\t\t\t\tif (this.isModActive(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t\t\tuseArpeggioSpeed = this.getModValue(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx, false);\r\n\t\t\t\t\t\t\tif (Number.isInteger(useArpeggioSpeed)) {\r\n\t\t\t\t\t\t\t\tinstrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// Linear interpolate arpeggio values\r\n\t\t\t\t\t\t\t\tinstrument.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinstrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tick++;\r\n\t\t\t\tthis.tickSampleCountdown += samplesPerTick;\r\n\t\t\t\tif (this.tick == Config.ticksPerPart) {\r\n\t\t\t\t\tthis.tick = 0;\r\n\t\t\t\t\tthis.part++;\r\n\t\t\t\t\tthis.liveInputDuration--;\r\n\t\t\t\t\tvar atEnd = this.part + this.beat * Config.partsPerBeat >= this.findPartsInBar(this.bar) - 1;\r\n\t\t\t\t\t// Check if any active tones should be released.\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\t\t// Check if we're at the end of the bar and have a tie-over transition. If so, do not free tone\r\n\t\t\t\t\t\tvar carryOver = false;\r\n\t\t\t\t\t\tvar toneCount = this.activeTones[channel].count();\r\n\t\t\t\t\t\tvar pattern = this.song.getPattern(channel, this.bar);\r\n\t\t\t\t\t\tif (pattern != null && atEnd) {\r\n\t\t\t\t\t\t\tvar instrument = pattern.instrument;\r\n\t\t\t\t\t\t\tif (this.song.channels[channel].instruments[instrument].tieNoteTransition && toneCount > 0) {\r\n\t\t\t\t\t\t\t\t// Verify that all tie conditions are met\r\n\t\t\t\t\t\t\t\t// 1. Check for a note in this channel at the start of the next bar\r\n\t\t\t\t\t\t\t\t// 2. Check that the note's volume start matches the current volume\r\n\t\t\t\t\t\t\t\t// 3. Check that the shape (pitches, chord size) is a match\r\n\t\t\t\t\t\t\t\t// 4. Check that the instruments are the same\r\n\t\t\t\t\t\t\t\tvar targetBar = this.bar + 1;\r\n\t\t\t\t\t\t\t\tif (targetBar >= this.song.barCount || (targetBar >= this.song.loopStart + this.song.loopLength && this.loopRepeatCount != 0)) {\r\n\t\t\t\t\t\t\t\t\ttargetBar = this.song.loopStart;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvar nextPattern = this.song.getPattern(channel, targetBar);\r\n\t\t\t\t\t\t\t\tvar currNote = this.activeTones[channel].get(0).note;\r\n\t\t\t\t\t\t\t\tif (currNote != null) {\r\n\t\t\t\t\t\t\t\t\tvar pin = 0;\r\n\t\t\t\t\t\t\t\t\twhile (currNote.pins[pin].time + currNote.start < this.part + this.beat * Config.partsPerBeat && pin < currNote.pins.length - 1)\r\n\t\t\t\t\t\t\t\t\t\tpin++;\r\n\t\t\t\t\t\t\t\t\tvar currVolume = currNote.pins[pin].volume;\r\n\t\t\t\t\t\t\t\t\tvar lastInterval = currNote.pins[pin].interval;\r\n\r\n\t\t\t\t\t\t\t\t\tif (nextPattern != null && nextPattern.instrument == instrument) {\r\n\t\t\t\t\t\t\t\t\t\tfor (let i: number = 0; i < nextPattern.notes.length; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (nextPattern.notes[i].start == 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t&& nextPattern.notes[i].pins[0].volume == currVolume\r\n\t\t\t\t\t\t\t\t\t\t\t\t&& nextPattern.notes[i].pitches.length == currNote.pitches.length) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tcarryOver = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < currNote.pitches.length; j++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Allow any pitch order\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (nextPattern.notes[i].pitches.findIndex((p) => p == currNote!.pitches[j] + lastInterval) == -1) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcarryOver = false;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tj = currNote.pitches.length;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\ti = nextPattern.notes.length;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (carryOver) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Prior to an actual tie, all releasing for hard transitions also needs to be\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// cancelled. So, this check is ran a few parts before the end of a bar too.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// In those cases, just set tyingOver to 0 for that duration to cancel release\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// handling, but not affect note start time calculations.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.part + this.beat * Config.partsPerBeat < this.findPartsInBar(this.bar)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Only does this if it is needed, so if we're long tying (next else-if below) then don't ruin the math.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.tyingOver[channel] < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Special case: tying over a whole bar, just add the length.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (currNote.start == 0 && this.tyingOver[channel] >= 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] += this.part + this.beat * Config.partsPerBeat;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Set tyingOver to a number >= 0 representing how many parts back the tie note started.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = this.part + this.beat * Config.partsPerBeat - currNote.start;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n\t\t\t\t\t\t\tconst tone: Tone = this.activeTones[channel].get(i);\r\n\t\t\t\t\t\t\tconst transition: Transition = tone.instrument.getTransition();\r\n\r\n\t\t\t\t\t\t\tif (tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n\t\t\t\t\t\t\t\t// Free tone if the transition allows\r\n\t\t\t\t\t\t\t\tif (!(transition.isSeamless || tone.instrument.clicklessTransition || this.tyingOver[channel] >= 0)) {\r\n\t\t\t\t\t\t\t\t\tif (transition.releases) {\r\n\t\t\t\t\t\t\t\t\t\tthis.releaseTone(channel, tone);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tthis.freeTone(tone);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.activeTones[channel].remove(i);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// End of note: if not actively trying to carry over, kill note tie\r\n\t\t\t\t\t\t\t\tif (!carryOver) {\r\n\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.song.modChannelCount; channel++) {\r\n\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.activeModTones[channel][mod].count(); i++) {\r\n\t\t\t\t\t\t\t\tconst tone: Tone = this.activeModTones[channel][mod].get(i);\r\n\t\t\t\t\t\t\t\tconst transition: Transition = tone.instrument.getTransition();\r\n\t\t\t\t\t\t\t\tif (!transition.isSeamless && tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n\t\t\t\t\t\t\t\t\tthis.freeTone(tone);\r\n\t\t\t\t\t\t\t\t\tthis.activeModTones[channel][mod].remove(i);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.part == Config.partsPerBeat) {\r\n\t\t\t\t\t\tthis.part = 0;\r\n\r\n\t\t\t\t\t\tif (playSong) {\r\n\t\t\t\t\t\t\tthis.beat++;\r\n\t\t\t\t\t\t\tif (this.beat == this.song.beatsPerBar) {\r\n\t\t\t\t\t\t\t\t// bar changed, reset for next bar:\r\n\t\t\t\t\t\t\t\tthis.beat = 0;\r\n\t\t\t\t\t\t\t\tthis.bar++;\r\n\t\t\t\t\t\t\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\t\t\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\t\t\t\t\t\tthis.bar = 0;\r\n\t\t\t\t\t\t\t\t\tif (this.loopRepeatCount != -1) {\r\n\t\t\t\t\t\t\t\t\t\tended = true;\r\n\t\t\t\t\t\t\t\t\t\tthis.resetEffects();\r\n\t\t\t\t\t\t\t\t\t\tthis.pause();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Update mod values so that next values copy to current values\r\n\t\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\t\tif (this.nextModValues != null && this.nextModValues[setting] != null)\r\n\t\t\t\t\tthis.modValues[setting] = this.nextModValues[setting];\r\n\t\t\t}\r\n\r\n\t\t\t// Set samples per tick if song tempo mods changed it\r\n\t\t\tif (this.isModActive(ModSetting.mstTempo, true)) {\r\n\t\t\t\tsamplesPerTick = this.getSamplesPerTick();\r\n\t\t\t\tthis.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\r\n\t\t\t}\r\n\r\n\t\t\t// Bound LFO times to be within their period (to keep values from getting large)\r\n\t\t\t// I figured this modulo math probably doesn't have to happen every LFO tick.\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount; channel++) {\r\n\t\t\t\tfor (let instrument of this.song.channels[channel].instruments) {\r\n\t\t\t\t\tinstrument.nextLFOtime = (instrument.nextLFOtime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\r\n\t\t\t\t\tinstrument.arpTime = (instrument.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\t\tfor (let channel: number = 0; channel < channelCount; channel++) {\r\n\t\t\t\t\tfor (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\t\tif (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n\t\t\t\t\t\t\tthis.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Optimization: Avoid persistent reverb values in the float denormal range.\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < reverbFeedback0 && reverbFeedback0 < epsilon) reverbFeedback0 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback1 && reverbFeedback1 < epsilon) reverbFeedback1 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback2 && reverbFeedback2 < epsilon) reverbFeedback2 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback3 && reverbFeedback3 < epsilon) reverbFeedback3 = 0.0;\r\n\t\t//if (-epsilon < highpassInput && highpassInput < epsilon) highpassInput = 0.0;\r\n\t\t//if (-epsilon < highpassOutput && highpassOutput < epsilon) highpassOutput = 0.0;\r\n\t\tif (-epsilon < limit && limit < epsilon) limit = 0.0;\r\n\r\n\t\tthis.stereoBufferIndex = (this.stereoBufferIndex + outputBufferLength * 2) % stereoBufferLength;\r\n\t\tthis.chorusPhase = chorusPhase;\r\n\t\tthis.chorusDelayPos = chorusDelayPos;\r\n\t\tthis.reverbDelayPos = reverbDelayPos;\r\n\t\tthis.reverbFeedback0 = reverbFeedback0;\r\n\t\tthis.reverbFeedback1 = reverbFeedback1;\r\n\t\tthis.reverbFeedback2 = reverbFeedback2;\r\n\t\tthis.reverbFeedback3 = reverbFeedback3;\r\n\t\t//this.highpassInput = highpassInput;\r\n\t\t//this.highpassOutput = highpassOutput;\r\n\t\tthis.limit = limit;\r\n\r\n\t\tif (playSong) {\r\n\t\t\tthis.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / this.song.beatsPerBar + this.bar;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tconst synthDuration: number = performance.now() - synthStartTime;\r\n\t\t// Performance measurements:\r\n\t\tsamplesAccumulated += outputBufferLength;\r\n\t\tsamplePerformance += synthDuration;\r\n\t\t\r\n\t\tif (samplesAccumulated >= 44100 * 4) {\r\n\t\tconst secondsGenerated = samplesAccumulated / 44100;\r\n\t\tconst secondsRequired = samplePerformance / 1000;\r\n\t\tconst ratio = secondsRequired / secondsGenerated;\r\n\t\tconsole.log(ratio);\r\n\t\tsamplePerformance = 0;\r\n\t\tsamplesAccumulated = 0;\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tprivate freeTone(tone: Tone): void {\r\n\t\tthis.tonePool.pushBack(tone);\r\n\t}\r\n\r\n\tprivate newTone(): Tone {\r\n\t\tif (this.tonePool.count() > 0) {\r\n\t\t\tconst tone: Tone = this.tonePool.popBack();\r\n\t\t\ttone.reset();\r\n\t\t\ttone.active = false;\r\n\t\t\treturn tone;\r\n\t\t}\r\n\t\treturn new Tone();\r\n\t}\r\n\r\n\tprivate releaseTone(channel: number, tone: Tone): void {\r\n\t\tif (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n\t\t\tthis.releasedTones[channel].pushFront(tone);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t/*\r\n\t\t\tfor (let mod = 0; mod < Config.modCount; mod++) {\r\n\t\t\tthis.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].pushFront(tone);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t}\r\n\r\n\tprivate freeReleasedTone(channel: number, toneIndex: number): void {\r\n\t\tif (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n\t\t\tthis.freeTone(this.releasedTones[channel].get(toneIndex));\r\n\t\t\tthis.releasedTones[channel].remove(toneIndex);\r\n\t\t} else {\r\n\t\t\t/*\r\n\t\t\tfor (let mod = 0; mod < Config.modCount; mod++) {\r\n\t\t\tthis.freeTone(this.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].get(toneIndex));\r\n\t\t\tthis.releasedModTones[channel][mod].remove(toneIndex);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t}\r\n\r\n\tpublic freeAllTones(): void {\r\n\t\twhile (this.liveInputTones.count() > 0) {\r\n\t\t\tthis.freeTone(this.liveInputTones.popBack());\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < this.activeTones.length; i++) {\r\n\t\t\twhile (this.activeTones[i].count() > 0) {\r\n\t\t\t\tthis.freeTone(this.activeTones[i].popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < this.releasedTones.length; i++) {\r\n\t\t\twhile (this.releasedTones[i].count() > 0) {\r\n\t\t\t\tthis.freeTone(this.releasedTones[i].popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = 0; i < this.activeModTones.length; i++) {\r\n\t\t\tfor (let mod = 0; mod < this.activeModTones[i].length; mod++) {\r\n\t\t\t\twhile (this.activeModTones[i][mod].count() > 0) {\r\n\t\t\t\t\tthis.freeTone(this.activeModTones[i][mod].popBack());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*\r\n\t\tfor (let i = 0; i < this.releasedModTones.length; i++) {\r\n\t\tfor (let mod = 0; mod < this.releasedModTones[i].length; mod++) {\r\n\t\twhile (this.releasedModTones[i][mod].count() > 0) {\r\n\t\tthis.freeTone(this.releasedModTones[i][mod].popBack());\r\n\t\t}\r\n\t\t}\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tprivate determineLiveInputTones(song: Song): void {\r\n\t\tconst toneList: Deque<Tone> = this.liveInputTones;\r\n\t\tconst pitches: number[] = this.liveInputPitches;\r\n\t\tlet toneCount: number = 0;\r\n\t\tif (this.liveInputDuration > 0) {\r\n\t\t\tconst instrument: Instrument = song.channels[this.liveInputChannel].instruments[song.getPatternInstrument(this.liveInputChannel, this.bar)];\r\n\r\n\t\t\tif (instrument.getChord().arpeggiates) {\r\n\t\t\t\tlet tone: Tone;\r\n\t\t\t\tif (toneList.count() == 0) {\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popFront());\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttone = toneList.get(0);\r\n\t\t\t\t}\r\n\t\t\t\ttoneCount = 1;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\ttone.pitches[i] = pitches[i];\r\n\t\t\t\t}\r\n\t\t\t\ttone.pitchCount = pitches.length;\r\n\t\t\t\ttone.chordSize = 1;\r\n\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t} else {\r\n\t\t\t\t//const transition: Transition = instrument.getTransition();\r\n\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\t//const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n\t\t\t\t\tlet tone: Tone;\r\n\t\t\t\t\tif (toneList.count() <= i) {\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.get(i));\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.set(i, tone);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttone = toneList.get(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoneCount++;\r\n\r\n\t\t\t\t\ttone.pitches[0] = pitches[i];\r\n\t\t\t\t\ttone.pitchCount = 1;\r\n\t\t\t\t\ttone.chordSize = pitches.length;\r\n\t\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (toneList.count() > toneCount) {\r\n\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popBack());\r\n\t\t}\r\n\r\n\t\tthis.liveInputStarted = false;\r\n\t}\r\n\r\n\tprivate determineCurrentActiveTones(song: Song, channel: number, playSong: boolean): void {\r\n\t\tconst instrument: Instrument = song.channels[channel].instruments[song.getPatternInstrument(channel, this.bar)];\r\n\t\tconst pattern: Pattern | null = song.getPattern(channel, this.bar);\r\n\t\tconst time: number = this.part + this.beat * Config.partsPerBeat;\r\n\r\n\t\tif (playSong && song.getChannelIsMod(channel) && !song.channels[channel].muted) {\r\n\t\t\t// Offset channel (first mod channel is 0 index in mod tone array)\r\n\t\t\tlet modChannelIdx = channel - (song.pitchChannelCount + song.noiseChannelCount);\r\n\r\n\t\t\t// For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\r\n\t\t\t// The same transition logic should apply though, even though it isn't really used by mod channels.\r\n\t\t\tlet notes: (Note | null)[] = [];\r\n\t\t\tlet prevNotes: (Note | null)[] = [];\r\n\t\t\tlet nextNotes: (Note | null)[] = [];\r\n\t\t\tlet fillCount: number = Config.modCount;\r\n\t\t\twhile (fillCount--) {\r\n\t\t\t\tnotes.push(null);\r\n\t\t\t\tprevNotes.push(null);\r\n\t\t\t\tnextNotes.push(null);\r\n\t\t\t}\r\n\r\n\t\t\tif (pattern != null) {\r\n\t\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\t\tif (pattern.notes[i].end <= time) {\r\n\t\t\t\t\t\t// Actually need to check which note starts closer to the start of this note.\r\n\t\t\t\t\t\tif (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n\t\t\t\t\t\t\tprevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n\t\t\t\t\t\tnotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (pattern.notes[i].start > time) {\r\n\t\t\t\t\t\t// Actually need to check which note starts closer to the end of this note.\r\n\t\t\t\t\t\tif (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n\t\t\t\t\t\t\tnextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tconst toneList: Deque<Tone> = this.activeModTones[modChannelIdx][mod];\r\n\t\t\t\tif (notes[mod] != null) {\r\n\t\t\t\t\tif (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\r\n\t\t\t\t\tif (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\r\n\t\t\t\t\tthis.syncTones(channel, toneList, instrument, (notes[mod] as Note).pitches, (notes[mod] as Note), (prevNotes[mod] as Note), (nextNotes[mod] as Note), time);\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhile (toneList.count() > 0) {\r\n\t\t\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!song.getChannelIsMod(channel)) {\r\n\r\n\t\t\tlet note: Note | null = null;\r\n\t\t\tlet prevNote: Note | null = null;\r\n\t\t\tlet nextNote: Note | null = null;\r\n\r\n\t\t\tif (playSong && pattern != null && !song.channels[channel].muted) {\r\n\t\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\t\tif (pattern.notes[i].end <= time) {\r\n\t\t\t\t\t\tprevNote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n\t\t\t\t\t\tnote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start > time) {\r\n\t\t\t\t\t\tnextNote = pattern.notes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst toneList: Deque<Tone> = this.activeTones[channel];\r\n\t\t\tif (note != null) {\r\n\t\t\t\tif (prevNote != null && prevNote.end != note.start) prevNote = null;\r\n\t\t\t\tif (nextNote != null && nextNote.start != note.end) nextNote = null;\r\n\t\t\t\tthis.syncTones(channel, toneList, instrument, note.pitches, note, prevNote, nextNote, time);\r\n\t\t\t} else {\r\n\t\t\t\twhile (toneList.count() > 0) {\r\n\t\t\t\t\t// Automatically free or release seamless tones if there's no new note to take over.\r\n\t\t\t\t\tif (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n\t\t\t\t\t\tthis.releaseTone(channel, toneList.popBack());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate syncTones(channel: number, toneList: Deque<Tone>, instrument: Instrument, pitches: number[], note: Note, prevNote: Note | null, nextNote: Note | null, currentPart: number): void {\r\n\t\tlet toneCount: number = 0;\r\n\t\t// Mod channels don't ever tie over, so the real start point is always simply the note's start.\r\n\t\tlet noteStartAdjust = (channel < this.song!.pitchChannelCount + this.song!.noiseChannelCount)\r\n\t\t\t? Math.max(0, this.tyingOver[channel])\r\n\t\t\t: 0;\r\n\t\tif (instrument.getChord().arpeggiates) {\r\n\t\t\tlet tone: Tone;\r\n\t\t\tif (toneList.count() == 0) {\r\n\t\t\t\ttone = this.newTone();\r\n\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t} else {\r\n\t\t\t\ttone = toneList.get(0);\r\n\t\t\t}\r\n\t\t\ttoneCount = 1;\r\n\r\n\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\ttone.pitches[i] = pitches[i];\r\n\t\t\t}\r\n\t\t\ttone.pitchCount = pitches.length;\r\n\t\t\ttone.chordSize = 1;\r\n\t\t\ttone.instrument = instrument;\r\n\t\t\ttone.note = note;\r\n\t\t\ttone.noteStart = note.start - noteStartAdjust;\r\n\t\t\ttone.noteEnd = note.end;\r\n\t\t\ttone.prevNote = prevNote;\r\n\t\t\ttone.nextNote = nextNote;\r\n\t\t\ttone.prevNotePitchIndex = 0;\r\n\t\t\ttone.nextNotePitchIndex = 0;\r\n\t\t} else {\r\n\t\t\tconst transition: Transition = instrument.getTransition();\r\n\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\r\n\t\t\t\tconst strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\t\t\t\tlet prevNoteForThisTone: Note | null = (prevNote && prevNote.pitches.length > i) ? prevNote : null;\r\n\t\t\t\tlet noteForThisTone: Note = note;\r\n\t\t\t\tlet nextNoteForThisTone: Note | null = (nextNote && nextNote.pitches.length > i) ? nextNote : null;\r\n\t\t\t\tlet noteStart: number = noteForThisTone.start + strumOffsetParts - noteStartAdjust;\r\n\r\n\t\t\t\tif (noteStart > currentPart) {\r\n\t\t\t\t\tif (toneList.count() > i && (transition.isSeamless || this.tyingOver[channel] >= 0) && prevNoteForThisTone != null) {\r\n\t\t\t\t\t\tnextNoteForThisTone = noteForThisTone;\r\n\t\t\t\t\t\tnoteForThisTone = prevNoteForThisTone;\r\n\t\t\t\t\t\tprevNoteForThisTone = null;\r\n\t\t\t\t\t\tnoteStart = noteForThisTone.start + strumOffsetParts - noteStartAdjust;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet noteEnd: number = noteForThisTone.end;\r\n\t\t\t\tif ((transition.isSeamless || this.tyingOver[channel] >= 0) && nextNoteForThisTone != null) {\r\n\t\t\t\t\tnoteEnd = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEnd + strumOffsetParts);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet tone: Tone;\r\n\t\t\t\tif (toneList.count() <= i) {\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttone = toneList.get(i);\r\n\t\t\t\t}\r\n\t\t\t\ttoneCount++;\r\n\r\n\t\t\t\ttone.pitches[0] = noteForThisTone.pitches[i];\r\n\t\t\t\ttone.pitchCount = 1;\r\n\t\t\t\ttone.chordSize = noteForThisTone.pitches.length;\r\n\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\ttone.note = noteForThisTone;\r\n\t\t\t\ttone.noteStart = noteStart;\r\n\t\t\t\ttone.noteEnd = noteEnd;\r\n\t\t\t\ttone.prevNote = prevNoteForThisTone;\r\n\t\t\t\ttone.nextNote = nextNoteForThisTone;\r\n\t\t\t\ttone.prevNotePitchIndex = i;\r\n\t\t\t\ttone.nextNotePitchIndex = i;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (toneList.count() > toneCount) {\r\n\t\t\t// Automatically free or release seamless tones if there's no new note to take over.\r\n\t\t\tif (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n\t\t\t\tthis.releaseTone(channel, toneList.popBack());\r\n\t\t\t} else {\r\n\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate playTone(song: Song, stereoBufferIndex: number, stereoBufferLength: number, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n\t\tSynth.computeTone(this, song, channel, samplesPerTick, runLength, tone, released, shouldFadeOutFast);\r\n\t\tlet synthBuffer: Float32Array;\r\n\t\tswitch (tone.instrument.effects) {\r\n\t\t\tcase 0: synthBuffer = this.samplesForNone!; break;\r\n\t\t\tcase 1: synthBuffer = this.samplesForReverb!; break;\r\n\t\t\tcase 2: synthBuffer = this.samplesForChorus!; break;\r\n\t\t\tcase 3: synthBuffer = this.samplesForChorusReverb!; break;\r\n\t\t\tdefault: throw new Error();\r\n\t\t}\r\n\t\tconst synthesizer: Function = Synth.getInstrumentSynthFunction(tone.instrument);\r\n\t\tsynthesizer(this, synthBuffer, stereoBufferIndex, stereoBufferLength, runLength * 2, tone, tone.instrument);\r\n\t}\r\n\r\n\tprivate static computeEnvelope(envelope: Envelope, time: number, beats: number, customVolume: number): number {\r\n\t\tswitch (envelope.type) {\r\n\t\t\tcase EnvelopeType.custom: return customVolume;\r\n\t\t\tcase EnvelopeType.steady: return 1.0;\r\n\t\t\tcase EnvelopeType.twang:\r\n\t\t\t\treturn 1.0 / (1.0 + time * envelope.speed);\r\n\t\t\tcase EnvelopeType.swell:\r\n\t\t\t\treturn 1.0 - 1.0 / (1.0 + time * envelope.speed);\r\n\t\t\tcase EnvelopeType.tremolo:\r\n\t\t\t\treturn 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\r\n\t\t\tcase EnvelopeType.tremolo2:\r\n\t\t\t\treturn 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\r\n\t\t\tcase EnvelopeType.punch:\r\n\t\t\t\treturn Math.max(1.0, 2.0 - time * 10.0);\r\n\t\t\tcase EnvelopeType.flare:\r\n\t\t\t\tconst speed: number = envelope.speed;\r\n\t\t\t\tconst attack: number = 0.25 / Math.sqrt(speed);\r\n\t\t\t\treturn time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * speed);\r\n\t\t\tcase EnvelopeType.decay:\r\n\t\t\t\treturn Math.pow(2, -envelope.speed * time);\r\n\t\t\tdefault: throw new Error(\"Unrecognized operator envelope type.\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static computeChordVolume(chordSize: number): number {\r\n\t\treturn 1.0 / ((chordSize - 1) * 0.25 + 1.0);\r\n\t}\r\n\r\n\tprivate static computeTone(synth: Synth, song: Song, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n\t\tconst instrument: Instrument = tone.instrument;\r\n\t\tconst transition: Transition = instrument.getTransition();\r\n\t\tconst chord: Chord = instrument.getChord();\r\n\t\tconst chordVolume: number = chord.arpeggiates ? 1 : Synth.computeChordVolume(tone.chordSize);\r\n\t\tconst isNoiseChannel: boolean = song.getChannelIsNoise(channel);\r\n\t\tconst intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\r\n\t\tconst secondsPerPart: number = Config.ticksPerPart * samplesPerTick / synth.samplesPerSecond;\r\n\t\tconst beatsPerPart: number = 1.0 / Config.partsPerBeat;\r\n\t\tconst toneWasActive: boolean = tone.active;\r\n\t\tconst tickSampleCountdown: number = synth.tickSampleCountdown;\r\n\t\tconst startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n\t\tconst endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n\t\tconst ticksIntoBar: number = (synth.beat * Config.partsPerBeat + synth.part) * Config.ticksPerPart + synth.tick;\r\n\t\tconst partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n\t\tconst partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n\t\tconst partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n\t\tconst partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\t\tconst instrumentIdx: number = (synth.song as Song).channels[channel].instruments.findIndex(i => i == instrument);\r\n\t\tconst treatAsSeamless: boolean = transition.isSeamless || synth.tyingOver[channel] >= 0;\r\n\r\n\t\ttone.phaseDeltaScale = 0.0;\r\n\t\ttone.filter = 1.0;\r\n\t\ttone.filterScale = 1.0;\r\n\t\ttone.vibratoScale = 0.0;\r\n\t\ttone.intervalMult = 1.0;\r\n\t\ttone.intervalVolumeMult = 1.0;\r\n\t\ttone.active = false;\r\n\r\n\t\tlet startPan: number = instrument.pan;\r\n\t\tlet endPan: number = instrument.pan;\r\n\t\tif (synth.isModActive(ModSetting.mstPan, false, channel, instrumentIdx)) {\r\n\t\t\tstartPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\r\n\t\t\tendPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\r\n\t\t}\r\n\r\n\t\tlet startPanDelay: number = instrument.panDelay;\r\n\t\tlet endPanDelay: number = instrument.panDelay;\r\n\t\tif (synth.isModActive(ModSetting.mstPanDelay, false, channel, instrumentIdx)) {\r\n\t\t\tstartPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, false);\r\n\t\t\tendPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, true);\r\n\t\t}\r\n\r\n\t\tconst useStartPan: number = (startPan - Config.panCenter) / Config.panCenter;\r\n\t\tconst useEndPan: number = (endPan - Config.panCenter) / Config.panCenter;\r\n\t\t// 10 pan delay is the same amount as vanilla beepbox.\r\n\t\tconst maxDelayStart: number = startPanDelay * 0.00013 * synth.samplesPerSecond;\r\n\t\tconst maxDelayEnd: number = endPanDelay * 0.00013 * synth.samplesPerSecond;\r\n\t\ttone.stereoDelayStart = -useStartPan * maxDelayStart;\r\n\t\tconst delayEnd: number = -useEndPan * maxDelayEnd;\r\n\t\ttone.stereoDelayDelta = (delayEnd - tone.stereoDelayStart) / runLength;\r\n\t\ttone.stereoVolumeLStart = Math.cos((1 + useStartPan) * Math.PI * 0.25) * 1.414;\r\n\t\ttone.stereoVolumeRStart = Math.cos((1 - useStartPan) * Math.PI * 0.25) * 1.414;\r\n\t\tconst stereoVolumeLEnd: number = Math.cos((1 + useEndPan) * Math.PI * 0.25) * 1.414;\r\n\t\tconst stereoVolumeREnd: number = Math.cos((1 - useEndPan) * Math.PI * 0.25) * 1.414;\r\n\t\ttone.stereoVolumeLDelta = (stereoVolumeLEnd - tone.stereoVolumeLStart) / runLength;\r\n\t\ttone.stereoVolumeRDelta = (stereoVolumeREnd - tone.stereoVolumeRStart) / runLength;\r\n\r\n\t\tlet resetPhases: boolean = true;\r\n\t\tlet partsSinceStart: number = 0.0;\r\n\t\tlet intervalStart: number = 0.0;\r\n\t\tlet intervalEnd: number = 0.0;\r\n\t\tlet transitionVolumeStart: number = 1.0;\r\n\t\tlet transitionVolumeEnd: number = 1.0;\r\n\t\tlet chordVolumeStart: number = chordVolume;\r\n\t\tlet chordVolumeEnd: number = chordVolume;\r\n\t\tlet customVolumeStart: number = 0.0;\r\n\t\tlet customVolumeEnd: number = 0.0;\r\n\t\tlet decayTimeStart: number = 0.0;\r\n\t\tlet decayTimeEnd: number = 0.0;\r\n\r\n\t\tlet volumeReferencePitch: number;\r\n\t\tlet basePitch: number;\r\n\t\tlet baseVolume: number;\r\n\t\tlet pitchDamping: number;\r\n\t\tif (instrument.type == InstrumentType.spectrum) {\r\n\t\t\tif (isNoiseChannel) {\r\n\t\t\t\tbasePitch = Config.spectrumBasePitch;\r\n\t\t\t\tbaseVolume = 0.6; // Note: spectrum is louder for drum channels than pitch channels!\r\n\t\t\t} else {\r\n\t\t\t\t// basePitch = Config.keys[song.key].basePitch; // key relic (TODO), more following\r\n\t\t\t\tbasePitch = 0;\r\n\t\t\t\tbaseVolume = 0.3;\r\n\t\t\t}\r\n\t\t\tvolumeReferencePitch = Config.spectrumBasePitch;\r\n\t\t\tpitchDamping = 28;\r\n\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\tbasePitch = Config.spectrumBasePitch;\r\n\t\t\tbaseVolume = 0.45;\r\n\t\t\tvolumeReferencePitch = basePitch;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\tbasePitch = Config.chipNoises[instrument.chipNoise].basePitch;\r\n\t\t\tbaseVolume = 0.19;\r\n\t\t\tvolumeReferencePitch = basePitch;\r\n\t\t\tpitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\r\n\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.03;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.03375; // looks low compared to drums, but it's doubled for chorus and drums tend to be loud anyway.\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.025;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.04725;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\tbaseVolume = 1.0;\r\n\t\t\tvolumeReferencePitch = 0;\r\n\t\t\tpitchDamping = 1.0;\r\n\t\t\tbasePitch = 0;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unknown instrument type in computeTone.\");\r\n\t\t}\r\n\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\ttone.phaseDeltas[i] = 0.0;\r\n\t\t\ttone.volumeStarts[i] = 0.0;\r\n\t\t\ttone.volumeDeltas[i] = 0.0;\r\n\t\t}\r\n\r\n\t\tif (released) {\r\n\t\t\tconst ticksSoFar: number = tone.noteLengthTicks + tone.ticksSinceReleased;\r\n\t\t\tconst startTicksSinceReleased: number = tone.ticksSinceReleased + startRatio;\r\n\t\t\tconst endTicksSinceReleased: number = tone.ticksSinceReleased + endRatio;\r\n\t\t\tconst startTick: number = tone.noteLengthTicks + startTicksSinceReleased;\r\n\t\t\tconst endTick: number = tone.noteLengthTicks + endTicksSinceReleased;\r\n\t\t\tconst toneTransition: Transition = tone.instrument.getTransition();\r\n\t\t\tresetPhases = false;\r\n\t\t\tpartsSinceStart = Math.floor(ticksSoFar / Config.ticksPerPart);\r\n\t\t\tintervalStart = intervalEnd = tone.lastInterval;\r\n\t\t\tcustomVolumeStart = customVolumeEnd = Synth.expressionToVolumeMult(tone.lastVolume);\r\n\t\t\ttransitionVolumeStart = Synth.expressionToVolumeMult((1.0 - startTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n\t\t\ttransitionVolumeEnd = Synth.expressionToVolumeMult((1.0 - endTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n\t\t\tdecayTimeStart = startTick / Config.ticksPerPart;\r\n\t\t\tdecayTimeEnd = endTick / Config.ticksPerPart;\r\n\r\n\t\t\tif (shouldFadeOutFast) {\r\n\t\t\t\ttransitionVolumeStart *= 1.0 - startRatio;\r\n\t\t\t\ttransitionVolumeEnd *= 1.0 - endRatio;\r\n\t\t\t}\r\n\t\t} else if (tone.note == null) {\r\n\t\t\ttransitionVolumeStart = transitionVolumeEnd = 1;\r\n\t\t\tcustomVolumeStart = customVolumeEnd = 1;\r\n\t\t\ttone.lastInterval = 0;\r\n\t\t\ttone.lastVolume = 6;\r\n\t\t\ttone.ticksSinceReleased = 0;\r\n\t\t\tresetPhases = false;\r\n\r\n\t\t\tconst heldTicksStart: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n\t\t\ttone.liveInputSamplesHeld += runLength;\r\n\t\t\tconst heldTicksEnd: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n\t\t\ttone.noteLengthTicks = heldTicksEnd;\r\n\t\t\tconst heldPartsStart: number = heldTicksStart / Config.ticksPerPart;\r\n\t\t\tconst heldPartsEnd: number = heldTicksEnd / Config.ticksPerPart;\r\n\t\t\tpartsSinceStart = Math.floor(heldPartsStart);\r\n\t\t\tdecayTimeStart = heldPartsStart;\r\n\t\t\tdecayTimeEnd = heldPartsEnd;\r\n\t\t} else {\r\n\t\t\tconst note: Note = tone.note;\r\n\t\t\tconst prevNote: Note | null = tone.prevNote;\r\n\t\t\tconst nextNote: Note | null = tone.nextNote;\r\n\r\n\t\t\tconst time: number = synth.part + synth.beat * Config.partsPerBeat;\r\n\t\t\tconst partsPerBar: number = Config.partsPerBeat * song.beatsPerBar;\r\n\t\t\tconst noteStart: number = tone.noteStart;// - Math.max(0, synth.tyingOver[channel] || 0);\r\n\t\t\tconst noteEnd: number = tone.noteEnd;\r\n\r\n\t\t\tpartsSinceStart = time - noteStart;\r\n\r\n\t\t\tlet endPinIndex: number;\r\n\t\t\tfor (endPinIndex = 1; endPinIndex < note.pins.length - 1; endPinIndex++) {\r\n\t\t\t\tif (note.pins[endPinIndex].time + note.start > time) break;\r\n\t\t\t}\r\n\t\t\tconst startPin: NotePin = note.pins[endPinIndex - 1];\r\n\t\t\tconst endPin: NotePin = note.pins[endPinIndex];\r\n\t\t\tconst noteStartTick: number = noteStart * Config.ticksPerPart;\r\n\t\t\tconst noteEndTick: number = noteEnd * Config.ticksPerPart;\r\n\t\t\tconst noteLengthTicks: number = noteEndTick - noteStartTick;\r\n\t\t\tconst pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\r\n\t\t\tconst pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\r\n\r\n\t\t\ttone.lastInterval = note.pins[note.pins.length - 1].interval;\r\n\t\t\ttone.lastVolume = note.pins[note.pins.length - 1].volume;\r\n\t\t\ttone.ticksSinceReleased = 0;\r\n\t\t\ttone.noteLengthTicks = noteLengthTicks;\r\n\r\n\t\t\tconst tickTimeStart: number = time * Config.ticksPerPart + synth.tick;\r\n\t\t\tconst tickTimeEnd: number = time * Config.ticksPerPart + synth.tick + 1;\r\n\t\t\tconst noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\r\n\t\t\tconst noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\r\n\t\t\tconst pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\r\n\t\t\tconst pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\r\n\t\t\tlet customVolumeTickStart: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioStart;\r\n\t\t\tlet customVolumeTickEnd: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioEnd;\r\n\t\t\tlet transitionVolumeTickStart: number = 1.0;\r\n\t\t\tlet transitionVolumeTickEnd: number = 1.0;\r\n\t\t\tlet chordVolumeTickStart: number = chordVolume;\r\n\t\t\tlet chordVolumeTickEnd: number = chordVolume;\r\n\t\t\tlet intervalTickStart: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n\t\t\tlet intervalTickEnd: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n\t\t\tlet decayTimeTickStart: number = partTimeTickStart - noteStart;\r\n\t\t\tlet decayTimeTickEnd: number = partTimeTickEnd - noteStart;\r\n\t\t\tresetPhases = (tickTimeStart + startRatio - noteStartTick == 0.0) || !toneWasActive;\r\n\r\n\t\t\t// if seamless, don't reset phases at start. (it's probably not necessary to constantly reset phases if there are no notes? Just do it once when note starts? But make sure that reset phases doesn't also reset stuff that this function did to set up the tone. Remember when the first run length was lost!\r\n\t\t\t// if slide, average the interval, decayTime, and custom volume at the endpoints and interpolate between over slide duration.\r\n\t\t\t// note that currently seamless and slide make different assumptions about whether a note at the end of a bar will connect with the next bar!\r\n\t\t\tconst maximumSlideTicks: number = noteLengthTicks * 0.5;\r\n\t\t\tif (treatAsSeamless && !transition.slides && note.start == 0) {\r\n\t\t\t\t// Special case for seamless, no-slide transition: assume the previous bar ends with another seamless note, don't reset tone history.\r\n\t\t\t\tresetPhases = !toneWasActive;\r\n\t\t\t} else if (treatAsSeamless && prevNote != null) {\r\n\t\t\t\tresetPhases = !toneWasActive;\r\n\t\t\t\tif (transition.slides) {\r\n\t\t\t\t\tconst slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n\t\t\t\t\tconst slideRatioStartTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickStart / slideTicks);\r\n\t\t\t\t\tconst slideRatioEndTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickEnd / slideTicks);\r\n\t\t\t\t\tconst intervalDiff: number = ((prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval) - tone.pitches[0]) * 0.5;\r\n\t\t\t\t\tconst volumeDiff: number = (prevNote.pins[prevNote.pins.length - 1].volume - note.pins[0].volume) * 0.5;\r\n\t\t\t\t\tconst decayTimeDiff: number = (prevNote.end - prevNote.start) * 0.5;\r\n\t\t\t\t\tintervalTickStart += slideRatioStartTick * intervalDiff;\r\n\t\t\t\t\tintervalTickEnd += slideRatioEndTick * intervalDiff;\r\n\t\t\t\t\tcustomVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n\t\t\t\t\tcustomVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n\t\t\t\t\tdecayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n\t\t\t\t\tdecayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n\t\t\t\t\tif (!chord.arpeggiates) {\r\n\t\t\t\t\t\tconst chordSizeDiff: number = (prevNote.pitches.length - tone.chordSize) * 0.5;\r\n\t\t\t\t\t\tchordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n\t\t\t\t\t\tchordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (treatAsSeamless && !transition.slides && note.end == partsPerBar) {\r\n\t\t\t\t// Special case for seamless, no-slide transition: assume the next bar starts with another seamless note, don't fade out.\r\n\t\t\t} else if (treatAsSeamless && nextNote != null) {\r\n\t\t\t\tif (transition.slides) {\r\n\t\t\t\t\tconst slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n\t\t\t\t\tconst slideRatioStartTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickStart) / slideTicks);\r\n\t\t\t\t\tconst slideRatioEndTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickEnd) / slideTicks);\r\n\t\t\t\t\tconst intervalDiff: number = (nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + note.pins[note.pins.length - 1].interval)) * 0.5;\r\n\t\t\t\t\tconst volumeDiff: number = (nextNote.pins[0].volume - note.pins[note.pins.length - 1].volume) * 0.5;\r\n\t\t\t\t\tconst decayTimeDiff: number = -(noteEnd - noteStart) * 0.5;\r\n\t\t\t\t\tintervalTickStart += slideRatioStartTick * intervalDiff;\r\n\t\t\t\t\tintervalTickEnd += slideRatioEndTick * intervalDiff;\r\n\t\t\t\t\tcustomVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n\t\t\t\t\tcustomVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n\t\t\t\t\tdecayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n\t\t\t\t\tdecayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n\t\t\t\t\tif (!chord.arpeggiates) {\r\n\t\t\t\t\t\tconst chordSizeDiff: number = (nextNote.pitches.length - tone.chordSize) * 0.5;\r\n\t\t\t\t\t\tchordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n\t\t\t\t\t\tchordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (!(transition.releases && synth.tyingOver[channel] < 0)) {\r\n\t\t\t\tconst releaseTicks: number = transition.releaseTicks;\r\n\t\t\t\tif (releaseTicks > 0.0) {\r\n\t\t\t\t\ttransitionVolumeTickStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / releaseTicks);\r\n\t\t\t\t\ttransitionVolumeTickEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / releaseTicks);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tintervalStart = intervalTickStart + (intervalTickEnd - intervalTickStart) * startRatio;\r\n\t\t\tintervalEnd = intervalTickStart + (intervalTickEnd - intervalTickStart) * endRatio;\r\n\t\t\tif (instrument.type != InstrumentType.mod) {\r\n\t\t\t\tcustomVolumeStart = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * startRatio);\r\n\t\t\t\tcustomVolumeEnd = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * endRatio);\r\n\t\t\t} else {\r\n\t\t\t\tcustomVolumeStart = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.max(0.0, startRatio);\r\n\t\t\t\tcustomVolumeEnd = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.min(1.0, endRatio);\r\n\t\t\t\ttone.customVolumeStart = customVolumeStart;\r\n\t\t\t\ttone.customVolumeEnd = customVolumeEnd;\r\n\t\t\t}\r\n\t\t\ttransitionVolumeStart = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * startRatio;\r\n\t\t\ttransitionVolumeEnd = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * endRatio;\r\n\t\t\tchordVolumeStart = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * startRatio;\r\n\t\t\tchordVolumeEnd = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * endRatio;\r\n\t\t\tdecayTimeStart = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * startRatio;\r\n\t\t\tdecayTimeEnd = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * endRatio;\r\n\t\t}\r\n\r\n\t\tconst sampleTime: number = 1.0 / synth.samplesPerSecond;\r\n\t\ttone.active = true;\r\n\r\n\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.fm || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.spectrum) {\r\n\r\n\t\t\tconst lfoEffectStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.LFOtime);\r\n\t\t\tconst lfoEffectEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.nextLFOtime);\r\n\r\n\t\t\tlet useVibratoStart: number = instrument.vibratoDepth;\r\n\t\t\tlet useVibratoEnd: number = instrument.vibratoDepth;\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstVibratoDepth, false, channel, instrumentIdx)) {\r\n\t\t\t\tuseVibratoStart = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tuseVibratoEnd = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\t// Only use vibrato properties if the instrument's vibrato is custom or mods are applied to it\r\n\t\t\tlet partsStart: number;\r\n\t\t\tlet partsEnd: number;\r\n\t\t\tconst activeVibratoDelayMods: boolean = synth.isModActive(ModSetting.mstVibratoDelay, false, channel, instrumentIdx);\r\n\t\t\tif (instrument.vibrato != Config.vibratos.length && !activeVibratoDelayMods) {\r\n\t\t\t\tpartsStart = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t\tpartsEnd = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet vibratoDelayStart: number = instrument.vibratoDelay;\r\n\t\t\t\tlet vibratoDelayEnd: number = instrument.vibratoDelay;\r\n\r\n\t\t\t\tif (activeVibratoDelayMods) {\r\n\t\t\t\t\tvibratoDelayStart = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, false);\r\n\t\t\t\t\tvibratoDelayEnd = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, true);\r\n\r\n\t\t\t\t\t// Special case - max vibrato delay means neeeeeever vibrato.\r\n\t\t\t\t\tif (vibratoDelayStart == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n\t\t\t\t\t\tvibratoDelayStart = Number.MAX_VALUE;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (vibratoDelayEnd == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n\t\t\t\t\t\tvibratoDelayEnd = Number.MAX_VALUE;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpartsStart = vibratoDelayStart;\r\n\t\t\t\tpartsEnd = vibratoDelayEnd;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst vibratoScaleStart: number = (partsSinceStart < partsStart) ? 0.0 : useVibratoStart;\r\n\t\t\tconst vibratoScaleEnd: number = (partsSinceStart < partsEnd) ? 0.0 : useVibratoEnd;\r\n\r\n\t\t\tconst vibratoStart: number = vibratoScaleStart * lfoEffectStart;\r\n\t\t\tconst vibratoEnd: number = vibratoScaleEnd * lfoEffectEnd;\r\n\t\t\tintervalStart += vibratoStart;\r\n\t\t\tintervalEnd += vibratoEnd;\r\n\t\t}\r\n\r\n\t\tif (!treatAsSeamless || (!(!transition.slides && tone.note != null && tone.note.start == 0) && !(tone.prevNote != null))) {\r\n\t\t\tconst attackSeconds: number = transition.attackSeconds;\r\n\t\t\tif (attackSeconds > 0.0) {\r\n\t\t\t\ttransitionVolumeStart *= Math.min(1.0, secondsPerPart * decayTimeStart / attackSeconds);\r\n\t\t\t\ttransitionVolumeEnd *= Math.min(1.0, secondsPerPart * decayTimeEnd / attackSeconds);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst instrumentVolumeMult: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\r\n\r\n\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\t// It's possible that the note will change while the user is editing it,\r\n\t\t\t// but the tone's pitches don't get updated because the tone has already\r\n\t\t\t// ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\r\n\t\t\ttone.drumsetPitch = tone.pitches[0];\r\n\t\t\tif (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\r\n\t\t\ttone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\r\n\t\t}\r\n\r\n\t\tlet filterCutModStart: number = instrument.filterCutoff;\r\n\t\tlet filterCutModEnd: number = instrument.filterCutoff;\r\n\t\tif (synth.isModActive(ModSetting.mstFilterCut, false, channel, instrumentIdx)) {\r\n\t\t\tfilterCutModStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, false), ModSetting.mstFilterCut);\r\n\t\t\tfilterCutModEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, true), ModSetting.mstFilterCut);\r\n\t\t}\r\n\r\n\t\tlet cutoffOctavesModStart: number;\r\n\t\tlet cutoffOctavesModEnd: number;\r\n\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\tcutoffOctavesModStart = 0;\r\n\t\t\tcutoffOctavesModEnd = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcutoffOctavesModStart = (filterCutModStart - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t\t\tcutoffOctavesModEnd = (filterCutModEnd - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t\t}\r\n\r\n\t\tconst filterEnvelope: Envelope = (instrument.type == InstrumentType.drumset) ? instrument.getDrumsetEnvelope(tone.drumsetPitch) : instrument.getFilterEnvelope();\r\n\t\tconst filterCutoffHzStart: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModStart);\r\n\t\tconst filterCutoffHzEnd: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModEnd);\r\n\t\tconst filterBaseStart: number = 2.0 * Math.sin(Math.PI * filterCutoffHzStart / synth.samplesPerSecond);\r\n\t\tconst filterBaseEnd: number = 2.0 * Math.sin(Math.PI * filterCutoffHzEnd / synth.samplesPerSecond);\r\n\t\tconst filterMin: number = 2.0 * Math.sin(Math.PI * Config.filterCutoffMinHz / synth.samplesPerSecond);\r\n\t\ttone.filter = filterBaseStart * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\tlet endFilter: number = filterBaseEnd * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\t\ttone.filter = Math.min(Config.filterMax, Math.max(filterMin, tone.filter));\r\n\t\tendFilter = Math.min(Config.filterMax, Math.max(filterMin, endFilter));\r\n\t\ttone.filterScale = Math.pow(endFilter / tone.filter, 1.0 / runLength);\r\n\r\n\t\tlet filterVolumeStart: number = Math.pow(0.5, cutoffOctavesModStart * 0.35);\r\n\t\tlet filterVolumeEnd: number = Math.pow(0.5, cutoffOctavesModEnd * 0.35);\r\n\r\n\t\ttone.filterResonanceStart = instrument.getFilterResonance();\r\n\t\ttone.filterResonanceDelta = 0.0;\r\n\r\n\t\tlet useFilterResonanceStart: number = instrument.filterResonance;\r\n\t\tlet useFilterResonanceEnd: number = instrument.filterResonance;\r\n\r\n\t\ttone.isFirstOrder = (instrument.type == InstrumentType.drumset) ? false : (useFilterResonanceStart == 0);\r\n\r\n\t\tif (synth.isModActive(ModSetting.mstFilterPeak, false, channel, instrumentIdx)) {\r\n\t\t\t// This flag is used to avoid the special casing when filter resonance == 0 without mods. So, it will sound a bit different,\r\n\t\t\t// but the effect and ability to smoothly modulate will be preserved.\r\n\t\t\ttone.isFirstOrder = false;\r\n\r\n\t\t\tuseFilterResonanceStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, false), ModSetting.mstFilterPeak);\r\n\t\t\tuseFilterResonanceEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, true), ModSetting.mstFilterPeak);\r\n\r\n\t\t\t// Also set cut in the tone.\r\n\t\t\ttone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\t\t\tconst filterResonanceEnd: number = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceEnd - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\r\n\t\t\t// Just a linear delta. Could get messy since it's not an amazing approximation of sqrt?\r\n\t\t\ttone.filterResonanceDelta = (filterResonanceEnd - tone.filterResonanceStart) / runLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Still need to compute this, mods or no. This calc is delegated to the tone level instead of the synth level, a notable difference from beepbox.\r\n\t\t\t// No functional difference though.\r\n\t\t\ttone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\t\t}\r\n\r\n\t\tif (tone.isFirstOrder == false) {\r\n\t\t\tfilterVolumeStart = Math.pow(filterVolumeStart, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceStart - 1));\r\n\t\t\tfilterVolumeEnd = Math.pow(filterVolumeEnd, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceEnd - 1));\r\n\t\t}\r\n\t\tif (filterEnvelope.type == EnvelopeType.decay) {\r\n\t\t\tfilterVolumeStart *= (1.25 + .025 * filterEnvelope.speed);\r\n\t\t\tfilterVolumeEnd *= (1.25 + .025 * filterEnvelope.speed);\r\n\t\t} else if (filterEnvelope.type == EnvelopeType.twang) {\r\n\t\t\tfilterVolumeStart *= (1 + .02 * filterEnvelope.speed);\r\n\t\t\tfilterVolumeEnd *= (1 + .02 * filterEnvelope.speed);\r\n\t\t}\r\n\r\n\t\tif (resetPhases) {\r\n\t\t\ttone.reset();\r\n\t\t}\r\n\r\n\t\tif (instrument.type == InstrumentType.fm) {\r\n\t\t\t// phase modulation!\r\n\r\n\t\t\tlet sineVolumeBoostStart: number = 1.0;\r\n\t\t\tlet sineVolumeBoostEnd: number = 1.0;\r\n\t\t\tlet totalCarrierVolumeStart: number = 0.0;\r\n\t\t\tlet totalCarrierVolumeEnd: number = 0.0;\r\n\r\n\t\t\tlet arpeggioInterval: number = 0;\r\n\t\t\tif (tone.pitchCount > 1 && !chord.harmonizes) {\r\n\t\t\t\tconst arpeggio: number = Math.floor((instrument.arpTime) / Config.ticksPerArpeggio);\r\n\t\t\t\tarpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n\t\t\t}\r\n\r\n\t\t\tlet detuneStart: number = instrument.detune / 25;\r\n\t\t\tlet detuneEnd: number = instrument.detune / 25;\r\n\t\t\tif (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n\t\t\t\tdetuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tdetuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n\t\t\t\tdetuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n\t\t\t\tdetuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tconst carrierCount: number = Config.algorithms[instrument.algorithm].carrierCount;\r\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\r\n\t\t\t\tconst associatedCarrierIndex: number = Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1;\r\n\t\t\t\tconst pitch: number = tone.pitches[!chord.harmonizes ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\r\n\t\t\t\tconst freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\r\n\t\t\t\tconst interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\r\n\t\t\t\tconst startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale + interval;\r\n\t\t\t\tconst startFreq: number = freqMult * (Instrument.frequencyFromPitch(startPitch)) + Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n\r\n\t\t\t\ttone.phaseDeltas[i] = startFreq * sampleTime * Config.sineWaveLength;\r\n\r\n\t\t\t\tlet amplitudeStart: number = instrument.operators[i].amplitude;\r\n\t\t\t\tlet amplitudeEnd: number = instrument.operators[i].amplitude;\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx)) {\r\n\t\t\t\t\tamplitudeStart *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, false) / 15.0;\r\n\t\t\t\t\tamplitudeEnd *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, true) / 15.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\r\n\t\t\t\tconst amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\r\n\t\t\t\tconst amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\t\t\t\tconst amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\t\t\t\tlet volumeStart: number = amplitudeMultStart;\r\n\t\t\t\tlet volumeEnd: number = amplitudeMultEnd;\r\n\r\n\t\t\t\t// Check for mod-related volume delta\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t// Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n\t\t\t\t\tconst startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n\t\t\t\t\tconst endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n\t\t\t\t\tvolumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n\t\t\t\t\tvolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check for SONG mod-related volume delta\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n\t\t\t\t\tvolumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n\t\t\t\t\tvolumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (i < carrierCount) {\r\n\t\t\t\t\t// carrier\r\n\t\t\t\t\tconst endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale + interval;\r\n\t\t\t\t\tconst pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\t\t\tconst pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\t\t\tvolumeStart *= pitchVolumeStart;\r\n\t\t\t\t\tvolumeEnd *= pitchVolumeEnd;\r\n\r\n\t\t\t\t\ttotalCarrierVolumeStart += amplitudeCurveStart;\r\n\t\t\t\t\ttotalCarrierVolumeEnd += amplitudeCurveEnd;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// modulator\r\n\t\t\t\t\tvolumeStart *= Config.sineWaveLength * 1.5;\r\n\t\t\t\t\tvolumeEnd *= Config.sineWaveLength * 1.5;\r\n\r\n\t\t\t\t\tsineVolumeBoostStart *= 1.0 - Math.min(1.0, amplitudeStart / 15);\r\n\t\t\t\t\tsineVolumeBoostEnd *= 1.0 - Math.min(1.0, amplitudeEnd / 15);\r\n\t\t\t\t}\r\n\t\t\t\tconst operatorEnvelope: Envelope = Config.envelopes[instrument.operators[i].envelope];\r\n\r\n\t\t\t\tvolumeStart *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\t\tvolumeEnd *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n\t\t\t\ttone.volumeStarts[i] = volumeStart;\r\n\t\t\t\ttone.volumeDeltas[i] = (volumeEnd - volumeStart) / runLength;\r\n\t\t\t}\r\n\r\n\t\t\tlet useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\r\n\t\t\tlet useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\r\n\t\t\tif (synth.isModActive(ModSetting.mstFMFeedback, false, channel, instrumentIdx)) {\r\n\t\t\t\tuseFeedbackAmplitudeStart *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, false) / 15.0;\r\n\t\t\t\tuseFeedbackAmplitudeEnd *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, true) / 15.0;\r\n\t\t\t}\r\n\r\n\t\t\tconst feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\r\n\t\t\tconst feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\r\n\t\t\tconst feedbackEnvelope: Envelope = Config.envelopes[instrument.feedbackEnvelope];\r\n\t\t\tlet feedbackStart: number = feedbackAmplitudeStart * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\tlet feedbackEnd: number = feedbackAmplitudeEnd * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\t\t\ttone.feedbackMult = feedbackStart;\r\n\t\t\ttone.feedbackDelta = (feedbackEnd - tone.feedbackMult) / runLength;\r\n\r\n\t\t\tconst volumeMult: number = baseVolume * instrumentVolumeMult;\r\n\t\t\ttone.volumeStart = filterVolumeStart * volumeMult * transitionVolumeStart * chordVolumeStart;\r\n\t\t\tconst volumeEnd: number = filterVolumeEnd * volumeMult * transitionVolumeEnd * chordVolumeEnd;\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n\t\t\tsineVolumeBoostStart *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeStart / 15.0)) - 1.0) / 3.0;\r\n\t\t\tsineVolumeBoostEnd *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeEnd / 15.0)) - 1.0) / 3.0;\r\n\t\t\tsineVolumeBoostStart *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeStart - 1) / 2.0);\r\n\t\t\tsineVolumeBoostEnd *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeEnd - 1) / 2.0);\r\n\t\t\ttone.volumeStart *= 1.0 + sineVolumeBoostStart * 3.0;\r\n\t\t\ttone.volumeDelta *= 1.0 + (sineVolumeBoostStart + sineVolumeBoostEnd) * 1.5; // Volume boosts are averaged such that delta brings you to next target start boost.\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\t// Modulator value is used for data, so don't actually compute audio nonsense for it.\r\n\t\t\ttone.volumeStart = transitionVolumeStart;\r\n\t\t\tlet volumeEnd: number = transitionVolumeEnd;\r\n\r\n\t\t\ttone.volumeStart *= customVolumeStart;\r\n\t\t\tvolumeEnd *= customVolumeEnd;\r\n\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n\t\t} else {\r\n\t\t\tlet detuneStart: number = instrument.detune / 25;\r\n\t\t\tlet detuneEnd: number = instrument.detune / 25;\r\n\t\t\tif (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n\t\t\t\tdetuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tdetuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n\t\t\t\tdetuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n\t\t\t\tdetuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tlet pitch: number = tone.pitches[0];\r\n\r\n\t\t\tif (tone.pitchCount > 1) {\r\n\t\t\t\tconst arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\r\n\t\t\t\tif (chord.harmonizes) {\r\n\t\t\t\t\tconst intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n\t\t\t\t\ttone.intervalMult = Math.pow(2.0, intervalOffset / Config.pitchesPerOctave);\r\n\t\t\t\t\ttone.intervalVolumeMult = Math.pow(2.0, -intervalOffset / pitchDamping);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale;\r\n\t\t\tconst endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale;\r\n\t\t\tconst startFreq: number = Instrument.frequencyFromPitch(startPitch);\r\n\t\t\tconst pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\tconst pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\tlet settingsVolumeMultStart: number = baseVolume * filterVolumeStart;\r\n\t\t\tlet settingsVolumeMultEnd: number = baseVolume * filterVolumeEnd;\r\n\t\t\tif (instrument.type == InstrumentType.noise) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.chipNoises[instrument.chipNoise].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.chipNoises[instrument.chipNoise].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.chipWaves[instrument.chipWave].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.chipWaves[instrument.chipWave].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.intervals[instrument.interval].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.intervals[instrument.interval].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.pwm) {\r\n\r\n\t\t\t\t// Check for PWM mods to this instrument\r\n\t\t\t\tlet pulseWidthModStart: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n\t\t\t\tlet pulseWidthModEnd: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstPulseWidth, false, channel, instrumentIdx)) {\r\n\t\t\t\t\tpulseWidthModStart = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, false)) / (Config.pulseWidthRange * 2);\r\n\t\t\t\t\tpulseWidthModEnd = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, true)) / (Config.pulseWidthRange * 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst pulseEnvelope: Envelope = Config.envelopes[instrument.pulseEnvelope];\r\n\t\t\t\tconst pulseWidthStart: number = pulseWidthModStart * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\t\tconst pulseWidthEnd: number = pulseWidthModEnd * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n\t\t\t\ttone.pulseWidth = pulseWidthStart;\r\n\t\t\t\ttone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / runLength;\r\n\t\t\t}\r\n\r\n\t\t\ttone.phaseDeltas[0] = startFreq * sampleTime;\r\n\r\n\t\t\ttone.volumeStart = transitionVolumeStart * chordVolumeStart * pitchVolumeStart * settingsVolumeMultStart * instrumentVolumeMult;\r\n\t\t\tlet volumeEnd: number = transitionVolumeEnd * chordVolumeEnd * pitchVolumeEnd * settingsVolumeMultEnd * instrumentVolumeMult;\r\n\r\n\t\t\tif (filterEnvelope.type != EnvelopeType.custom && (instrument.type != InstrumentType.pwm || Config.envelopes[instrument.pulseEnvelope].type != EnvelopeType.custom)) {\r\n\t\t\t\ttone.volumeStart *= customVolumeStart;\r\n\t\t\t\tvolumeEnd *= customVolumeEnd;\r\n\t\t\t}\r\n\r\n\t\t\t// Check for mod-related volume delta\r\n\t\t\tif (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n\t\t\t\t// Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n\t\t\t\tconst startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n\t\t\t\tconst endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n\t\t\t\ttone.volumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n\t\t\t\tvolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n\t\t\t}\r\n\t\t\t// Check for SONG mod-related volume delta\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n\t\t\t\ttone.volumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n\t\t\t\tvolumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n\t\t\t}\r\n\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\t\t}\r\n\r\n\t\ttone.phaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / Config.pitchesPerOctave) / runLength);\r\n\t}\r\n\r\n\tpublic static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\r\n\t\tlet effect: number = 0;\r\n\t\tfor (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\r\n\t\t\teffect += Math.sin(Math.PI * 2 * secondsIntoBar / vibratoPeriodSeconds);\r\n\t\t}\r\n\t\treturn effect;\r\n\t}\r\n\r\n\tprivate static readonly fmSynthFunctionCache: Dictionary<Function> = {};\r\n\r\n\tprivate static getInstrumentSynthFunction(instrument: Instrument): Function {\r\n\t\tif (instrument.type == InstrumentType.fm) {\r\n\t\t\tconst fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\r\n\t\t\tif (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\r\n\t\t\t\tconst synthSource: string[] = [];\r\n\r\n\t\t\t\tfor (const line of Synth.fmSourceTemplate) {\r\n\t\t\t\t\tif (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n\t\t\t\t\t\tconst outputs: string[] = [];\r\n\t\t\t\t\t\tfor (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\r\n\t\t\t\t\t\t\toutputs.push(\"operator\" + j + \"Scaled\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsynthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n\t\t\t\t\t} else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n\t\t\t\t\t\tfor (let j: number = Config.operatorCount - 1; j >= 0; j--) {\r\n\t\t\t\t\t\t\tfor (const operatorLine of Synth.operatorSourceTemplate) {\r\n\t\t\t\t\t\t\t\tif (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n\t\t\t\t\t\t\t\t\tlet modulators = \"\";\r\n\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\r\n\t\t\t\t\t\t\t\t\t\tmodulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tconst feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\r\n\t\t\t\t\t\t\t\t\tif (feedbackIndices.length > 0) {\r\n\t\t\t\t\t\t\t\t\t\tmodulators += \" + feedbackMult * (\";\r\n\t\t\t\t\t\t\t\t\t\tconst feedbacks: string[] = [];\r\n\t\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of feedbackIndices) {\r\n\t\t\t\t\t\t\t\t\t\t\tfeedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tmodulators += feedbacks.join(\" + \") + \")\";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (line.indexOf(\"#\") != -1) {\r\n\t\t\t\t\t\tfor (let j = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\t\t\t\tsynthSource.push(line.replace(/\\#/g, j + \"\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsynthSource.push(line);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//console.log(synthSource.join(\"\\n\"));\r\n\r\n\t\t\t\tSynth.fmSynthFunctionCache[fingerprint] = new Function(\"synth\", \"data\", \"stereoBufferIndex\", \"stereoBufferLength\", \"runLength\", \"tone\", \"instrument\", synthSource.join(\"\\n\"));\r\n\t\t\t}\r\n\t\t\treturn Synth.fmSynthFunctionCache[fingerprint];\r\n\t\t} else if (instrument.type == InstrumentType.chip) {\r\n\t\t\treturn Synth.chipSynth;\r\n\t\t} else if (instrument.type == InstrumentType.customChipWave) {\r\n\t\t\treturn Synth.chipSynth;\r\n\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\treturn Synth.harmonicsSynth;\r\n\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\treturn Synth.pulseWidthSynth;\r\n\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\treturn Synth.noiseSynth;\r\n\t\t} else if (instrument.type == InstrumentType.spectrum) {\r\n\t\t\treturn Synth.spectrumSynth;\r\n\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\treturn Synth.drumsetSynth;\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\treturn Synth.modSynth;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type: \" + instrument.type);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static chipSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tvar wave: Float64Array;\r\n\t\tvar volumeScale: number;\r\n\r\n\t\tconst isCustomWave: boolean = (instrument.type == InstrumentType.customChipWave);\r\n\r\n\t\tif (!isCustomWave) {\r\n\t\t\twave = Config.chipWaves[instrument.chipWave].samples;\r\n\t\t\tvolumeScale = 1.0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\twave = instrument.customChipWaveIntegral;\r\n\t\t\t// Integrals for custom chip wave can get rather big. This \"zero point\" can be config'ed later.\r\n\t\t\tvolumeScale = 0.1;\r\n\t\t}\r\n\r\n\t\tconst waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n\t\tconst intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / Config.pitchesPerOctave);\r\n\t\tconst intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / Config.pitchesPerOctave) * tone.intervalMult;\r\n\t\tconst intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n\t\tif (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n\t\tconst deltaRatio: number = intervalB / intervalA;\r\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n\t\tlet phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\tlet prevWaveIntegralA: number = wave[indexA];\r\n\t\tlet prevWaveIntegralB: number = wave[indexB];\r\n\t\tprevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n\t\tprevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\t//console.log(\"S: \" + stereoBufferIndex + \" P: \" + stopIndex);\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tphaseA += phaseDeltaA;\r\n\t\t\tphaseB += phaseDeltaB;\r\n\r\n\t\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\r\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\r\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\t\tnextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n\t\t\tnextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n\t\t\tlet waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n\t\t\tlet waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\r\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\r\n\r\n\t\t\tconst combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDeltaA *= phaseDeltaScale;\r\n\t\t\tphaseDeltaB *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume * volumeScale;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\t//debugString += \",\" + data.subarray(stereoBufferIndex - runLength, stereoBufferIndex).toString();\r\n\t\t//console.log(stereoBufferIndex);\r\n\r\n\t\ttone.phases[0] = phaseA / waveLength;\r\n\t\ttone.phases[1] = phaseB / waveLength;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\r\n\t}\r\n\r\n\r\n\tprivate static harmonicsSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tconst wave: Float32Array = instrument.harmonicsWave.getCustomWave();\r\n\t\tconst waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n\t\tconst intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / Config.pitchesPerOctave);\r\n\t\tconst intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / Config.pitchesPerOctave) * tone.intervalMult;\r\n\t\tconst intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n\t\tif (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n\t\tconst deltaRatio: number = intervalB / intervalA;\r\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n\t\tlet phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\tlet prevWaveIntegralA: number = wave[indexA];\r\n\t\tlet prevWaveIntegralB: number = wave[indexB];\r\n\t\tprevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n\t\tprevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tphaseA += phaseDeltaA;\r\n\t\t\tphaseB += phaseDeltaB;\r\n\r\n\t\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\r\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\r\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\t\tnextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n\t\t\tnextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n\t\t\tlet waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n\t\t\tlet waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\r\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\r\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\r\n\r\n\t\t\tconst combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDeltaA *= phaseDeltaScale;\r\n\t\t\tphaseDeltaB *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phaseA / waveLength;\r\n\t\ttone.phases[1] = phaseB / waveLength;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static pulseWidthSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phase: number = (tone.phases[0] % 1);\r\n\r\n\t\tlet pulseWidth: number = tone.pulseWidth;\r\n\t\tconst pulseWidthDelta: number = tone.pulseWidthDelta;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tconst sawPhaseA: number = phase % 1;\r\n\t\t\tconst sawPhaseB: number = (phase + pulseWidth) % 1;\r\n\r\n\t\t\tlet pulseWave: number = sawPhaseB - sawPhaseA;\r\n\r\n\t\t\t// This a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing.\r\n\t\t\tif (sawPhaseA < phaseDelta) {\r\n\t\t\t\tvar t = sawPhaseA / phaseDelta;\r\n\t\t\t\tpulseWave += (t + t - t * t - 1) * 0.5;\r\n\t\t\t} else if (sawPhaseA > 1.0 - phaseDelta) {\r\n\t\t\t\tvar t = (sawPhaseA - 1.0) / phaseDelta;\r\n\t\t\t\tpulseWave += (t + t + t * t + 1) * 0.5;\r\n\t\t\t}\r\n\t\t\tif (sawPhaseB < phaseDelta) {\r\n\t\t\t\tvar t = sawPhaseB / phaseDelta;\r\n\t\t\t\tpulseWave -= (t + t - t * t - 1) * 0.5;\r\n\t\t\t} else if (sawPhaseB > 1.0 - phaseDelta) {\r\n\t\t\t\tvar t = (sawPhaseB - 1.0) / phaseDelta;\r\n\t\t\t\tpulseWave -= (t + t + t * t + 1) * 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (pulseWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tpulseWidth += pulseWidthDelta;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static fmSourceTemplate: string[] = (`\r\nconst sineWave = beepbox.Config.sineWave;\r\n\r\nlet phaseDeltaScale = +tone.phaseDeltaScale;\r\n// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\nlet operator#Phase\t   = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\r\nlet operator#PhaseDelta  = +tone.phaseDeltas[#];\r\nlet operator#OutputMult  = +tone.volumeStarts[#];\r\nconst operator#OutputDelta = +tone.volumeDeltas[#];\r\nlet operator#Output\t  = +tone.feedbackOutputs[#];\r\nlet feedbackMult\t\t = +tone.feedbackMult;\r\nconst feedbackDelta\t\t= +tone.feedbackDelta;\r\nlet volume = +tone.volumeStart;\r\nconst volumeDelta = +tone.volumeDelta;\r\n\r\nconst isFirstOrder = tone.isFirstOrder;\r\nlet filter1 = +tone.filter;\r\nlet filter2 = isFirstOrder ? 1.0 : filter1;\r\nconst filterScale1 = +tone.filterScale;\r\nconst filterScale2 = isFirstOrder ? 1.0 : filterScale1;\r\nlet filterResonance = tone.filterResonanceStart;\r\nlet filterResonanceDelta = tone.filterResonanceDelta;\r\nlet filterSample0 = +tone.filterSample0;\r\nlet filterSample1 = +tone.filterSample1;\r\n\r\nconst stopIndex = stereoBufferIndex + runLength;\r\nstereoBufferIndex += tone.stereoOffset;\r\nlet stereoVolumeL = tone.stereoVolumeLStart;\r\nlet stereoVolumeLDelta = tone.stereoVolumeLDelta;\r\nlet stereoVolumeR = tone.stereoVolumeRStart;\r\nlet stereoVolumeRDelta = tone.stereoVolumeRDelta;\r\nlet stereoDelay = tone.stereoDelayStart;\r\nlet stereoDelayDelta = tone.stereoDelayDelta;\r\nlet delays = [];\r\nwhile (stereoBufferIndex < stopIndex) {\r\n// INSERT OPERATOR COMPUTATION HERE\r\nconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\r\nconst feedback = filterResonance + filterResonance / (1.0 - filter1);\r\nfilterSample0 += filter1 * (fmOutput - filterSample0 + feedback * (filterSample0 - filterSample1));\r\nfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\nfeedbackMult += feedbackDelta;\r\noperator#OutputMult += operator#OutputDelta;\r\noperator#Phase += operator#PhaseDelta;\r\noperator#PhaseDelta *= phaseDeltaScale;\r\nfilter1 *= filterScale1;\r\nfilter2 *= filterScale2;\r\nfilterResonance += filterResonanceDelta;\r\n\r\nconst output = filterSample1 * volume;\r\nvolume += volumeDelta;\r\n\r\n//const absStereoDelay: number = Math.abs(stereoDelay);\r\n//const fracStereoDelay: number = absStereoDelay % 1;\r\n//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\ndelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\ndata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\ndata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\ndata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\ndata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\nstereoVolumeL += stereoVolumeLDelta;\r\nstereoVolumeR += stereoVolumeRDelta;\r\nstereoDelay += stereoDelayDelta;\r\n\r\nstereoBufferIndex += 2;\r\n}\r\n\r\ntone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\ntone.feedbackOutputs[#] = operator#Output;\r\n\r\nconst epsilon = (1.0e-24);\r\nif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\nif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\ntone.filterSample0 = filterSample0;\r\ntone.filterSample1 = filterSample1;\r\n`).split(\"\\n\");\r\n\r\n\tprivate static operatorSourceTemplate: string[] = (`\r\nconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\nconst operator#PhaseInt = operator#PhaseMix|0;\r\nconst operator#Index\t= operator#PhaseInt & ` + Config.sineWaveMask + `;\r\nconst operator#Sample   = sineWave[operator#Index];\r\noperator#Output\t   = operator#Sample + (sineWave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\nconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n`).split(\"\\n\");\r\n\r\n\tprivate static noiseSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumWave();\r\n\t\tlet phaseDelta: number = +tone.phaseDeltas[0];\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\tif (tone.phases[0] == 0) {\r\n\t\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\t\tphase = Math.random() * Config.chipNoiseLength;\r\n\t\t}\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst pitchRelativefilter: number = Math.min(1.0, tone.phaseDeltas[0] * Config.chipNoises[instrument.chipNoise].pitchFilterMult);\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst waveSample: number = wave[phase & 0x7fff];\r\n\r\n\t\t\tsample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static spectrumSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumWave();\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] * (1 << 7);\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\tif (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n\t\tconst pitchRelativefilter: number = Math.min(1.0, phaseDelta);\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst phaseInt: number = phase | 0;\r\n\t\t\tconst index: number = phaseInt & 0x7fff;\r\n\t\t\tlet waveSample: number = wave[index];\r\n\t\t\tconst phaseRatio: number = phase - phaseInt;\r\n\t\t\twaveSample += (wave[index + 1] - waveSample) * phaseRatio;\r\n\r\n\t\t\tsample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static drumsetSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumsetWave(tone.drumsetPitch);\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] / Instrument.drumsetIndexReferenceDelta(tone.drumsetPitch);\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\tif (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst phaseInt: number = phase | 0;\r\n\t\t\tconst index: number = phaseInt & 0x7fff;\r\n\t\t\tsample = wave[index];\r\n\t\t\tconst phaseRatio: number = phase - phaseInt;\r\n\t\t\tsample += (wave[index + 1] - sample) * phaseRatio;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static modSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\t// Note: present modulator value is tone.volumeStart.\r\n\r\n\t\tif (!synth.song) return;\r\n\r\n\t\tlet mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\t\tlet setting: ModSetting = instrument.modSettings[mod];\r\n\r\n\t\tsynth.setModValue(tone.customVolumeStart, tone.customVolumeEnd, mod, instrument, setting);\r\n\r\n\t\t// Reset arps, but only at the start of the note\r\n\t\tif (setting == ModSetting.mstResetArpeggio && synth.tick == 0 && tone.noteStart == synth.beat * Config.partsPerBeat + synth.part) {\r\n\t\t\tsynth.song.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].arpTime = 0;\r\n\t\t}\r\n\t\telse if (setting == ModSetting.mstNextBar) {\r\n\t\t\tsynth.wantToSkip = true;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static findRandomZeroCrossing(wave: Float32Array): number {\r\n\t\tlet phase: number = Math.random() * Config.chipNoiseLength;\r\n\r\n\t\t// Spectrum and drumset waves sounds best when they start at a zero crossing,\r\n\t\t// otherwise they pop. Try to find a zero crossing.\r\n\t\tlet indexPrev: number = phase & 0x7fff;\r\n\t\tlet wavePrev: number = wave[indexPrev];\r\n\t\tconst stride: number = 16;\r\n\t\tfor (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\r\n\t\t\tconst indexNext: number = (indexPrev + stride) & 0x7fff;\r\n\t\t\tconst waveNext: number = wave[indexNext];\r\n\t\t\tif (wavePrev * waveNext <= 0.0) {\r\n\t\t\t\t// Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\r\n\t\t\t\tfor (let i: number = 0; i < 16; i++) {\r\n\t\t\t\t\tconst innerIndexNext: number = (indexPrev + 1) & 0x7fff;\r\n\t\t\t\t\tconst innerWaveNext: number = wave[innerIndexNext];\r\n\t\t\t\t\tif (wavePrev * innerWaveNext <= 0.0) {\r\n\t\t\t\t\t\t// Found the zero crossing again! Now let's find the exact intersection.\r\n\t\t\t\t\t\tconst slope: number = innerWaveNext - wavePrev;\r\n\t\t\t\t\t\tphase = indexPrev;\r\n\t\t\t\t\t\tif (Math.abs(slope) > 0.00000001) {\r\n\t\t\t\t\t\t\tphase += -wavePrev / slope;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tphase = Math.max(0, phase) % Config.chipNoiseLength;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tindexPrev = innerIndexNext;\r\n\t\t\t\t\t\twavePrev = innerWaveNext;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tindexPrev = indexNext;\r\n\t\t\t\twavePrev = waveNext;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn phase;\r\n\t}\r\n\r\n\tpublic static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\r\n\t\treturn (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\r\n\t}\r\n\tpublic static volumeMultToInstrumentVolume(volumeMult: number): number {\r\n\t\treturn (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\r\n\t}\r\n\tpublic static expressionToVolumeMult(expression: number): number {\r\n\t\treturn Math.pow(Math.max(0.0, expression) / 6.0, 1.5);\r\n\t}\r\n\tpublic static volumeMultToExpression(volumeMult: number): number {\r\n\t\treturn Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * 6.0;\r\n\t}\r\n\r\n\tprivate getSamplesPerTick(): number {\r\n\t\tif (this.song == null) return 0;\r\n\t\tlet beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n\t\tif (this.isModActive(ModSetting.mstTempo, true)) {\r\n\t\t\tbeatsPerMinute = this.getModValue(ModSetting.mstTempo, true);\r\n\t\t}\r\n\t\treturn this.getSamplesPerTickSpecificBPM(beatsPerMinute);\r\n\t}\r\n\r\n\tprivate getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\r\n\t\tconst beatsPerSecond: number = beatsPerMinute / 60.0;\r\n\t\tconst partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\r\n\t\tconst tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\r\n\t\treturn this.samplesPerSecond / tickPerSecond;\r\n\t}\r\n}\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config } from \"../synth/SynthConfig\";\r\nimport { ColorConfig } from \"../editor/ColorConfig\";\r\nimport { NotePin, Note, Pattern, Instrument, Channel, Synth } from \"../synth/synth\";\r\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\r\n\r\n//namespace beepbox {\r\nconst { a, button, div, h1, input } = HTML;\r\nconst { svg, circle, rect, path } = SVG;\r\n\r\ndocument.head.appendChild(HTML.style({ type: \"text/css\" }, `\r\n\t\tbody {\r\n\t\t\tcolor: ${ColorConfig.primaryText};\r\n\t\t\tbackground: ${ColorConfig.editorBackground};\r\n\t\t}\r\n\t\th1 {\r\n\t\t\tfont-weight: bold;\r\n\t\t\tfont-size: 14px;\r\n\t\t\tline-height: 22px;\r\n\t\t\ttext-align: initial;\r\n\t\t\tmargin: 0;\r\n\t\t}\r\n\t\ta {\r\n\t\t\tfont-weight: bold;\r\n\t\t\tfont-size: 12px;\r\n\t\t\tline-height: 22px;\r\n\t\t\twhite-space: nowrap;\r\n\t\t\tcolor: ${ColorConfig.linkAccent};\r\n\t\t}\r\n\t\tbutton {\r\n\t\t\tmargin: 0;\r\n\t\t\tpadding: 0;\r\n\t\t\tposition: relative;\r\n\t\t\tborder: none;\r\n\t\t\tborder-radius: 5px;\r\n\t\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\t\tcolor: ${ColorConfig.primaryText};\r\n\t\t\tcursor: pointer;\r\n\t\t\tfont-size: 14px;\r\n\t\t\tfont-family: inherit;\r\n\t\t}\r\n\t\tbutton:hover, button:focus {\r\n\t\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t\t}\r\n\t\t.playButton, .pauseButton {\r\n\t\t\tpadding-left: 24px;\r\n\t\t\tpadding-right: 6px;\r\n\t\t}\r\n\t\t.playButton::before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: 6px;\r\n\t\t\ttop: 50%;\r\n\t\t\tmargin-top: -6px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tpointer-events: none;\r\n\t\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\r\n\t\t\t-webkit-mask-repeat: no-repeat;\r\n\t\t\t-webkit-mask-position: center;\r\n\t\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\r\n\t\t\tmask-repeat: no-repeat;\r\n\t\t\tmask-position: center;\r\n\t\t}\r\n\t\t.pauseButton::before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: 6px;\r\n\t\t\ttop: 50%;\r\n\t\t\tmargin-top: -6px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tpointer-events: none;\r\n\t\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\r\n\t\t\t-webkit-mask-repeat: no-repeat;\r\n\t\t\t-webkit-mask-position: center;\r\n\t\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\r\n\t\t\tmask-repeat: no-repeat;\r\n\t\t\tmask-position: center;\r\n\t\t}\r\n\t\t\r\n\t\tinput[type=range] {\r\n\t\t\t-webkit-appearance: none;\r\n\t\t\tappearance: none;\r\n\t\t\theight: 16px;\r\n\t\t\tmargin: 0;\r\n\t\t\tcursor: pointer;\r\n\t\t\tbackground-color: ${ColorConfig.editorBackground};\r\n\t\t\ttouch-action: pan-y;\r\n\t\t}\r\n\t\tinput[type=range]:focus {\r\n\t\t\toutline: none;\r\n\t\t}\r\n\t\tinput[type=range]::-webkit-slider-runnable-track {\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 4px;\r\n\t\t\tcursor: pointer;\r\n\t\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\t}\r\n\t\tinput[type=range]::-webkit-slider-thumb {\r\n\t\t\theight: 16px;\r\n\t\t\twidth: 4px;\r\n\t\t\tborder-radius: 2px;\r\n\t\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t\tcursor: pointer;\r\n\t\t\t-webkit-appearance: none;\r\n\t\t\tmargin-top: -6px;\r\n\t\t}\r\n\t\tinput[type=range]:focus::-webkit-slider-runnable-track, input[type=range]:hover::-webkit-slider-runnable-track {\r\n\t\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t\t}\r\n\t\tinput[type=range]::-moz-range-track {\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 4px;\r\n\t\t\tcursor: pointer;\r\n\t\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\t}\r\n\t\tinput[type=range]:focus::-moz-range-track, input[type=range]:hover::-moz-range-track  {\r\n\t\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t\t}\r\n\t\tinput[type=range]::-moz-range-thumb {\r\n\t\t\theight: 16px;\r\n\t\t\twidth: 4px;\r\n\t\t\tborder-radius: 2px;\r\n\t\t\tborder: none;\r\n\t\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t\tcursor: pointer;\r\n\t\t}\r\n\t\tinput[type=range]::-ms-track {\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 4px;\r\n\t\t\tcursor: pointer;\r\n\t\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\t\tborder-color: transparent;\r\n\t\t}\r\n\t\tinput[type=range]:focus::-ms-track, input[type=range]:hover::-ms-track {\r\n\t\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t\t}\r\n\t\tinput[type=range]::-ms-thumb {\r\n\t\t\theight: 16px;\r\n\t\t\twidth: 4px;\r\n\t\t\tborder-radius: 2px;\r\n\t\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t\tcursor: pointer;\r\n\t\t}\r\n\t`));\r\n\r\nColorConfig.setTheme(\"jummbox classic\");\r\n\r\nlet prevHash: string | null = null;\r\nlet id: string = ((Math.random() * 0xffffffff) >>> 0).toString(16);\r\nlet pauseButtonDisplayed: boolean = false;\r\nlet animationRequest: number | null;\r\nlet zoomEnabled: boolean = false;\r\nlet timelineWidth: number = 1;\r\nlet outVolumeHistoricTimer: number = 0;\r\nlet outVolumeHistoricCap: number = 0;\r\n\r\nconst synth: Synth = new Synth();\r\nlet titleText: HTMLHeadingElement = h1({ style: \"flex-grow: 1; margin: 0 1px; margin-left: 10px; overflow: hidden;\" }, \"\");\r\nlet editLink: HTMLAnchorElement = a({ target: \"_top\", style: \"margin: 0 4px;\" }, \"✎ Edit\");\r\nlet copyLink: HTMLAnchorElement = a({ href: \"javascript:void(0)\", style: \"margin: 0 4px;\" }, \"⎘ Copy URL\");\r\nlet shareLink: HTMLAnchorElement = a({ href: \"javascript:void(0)\", style: \"margin: 0 4px;\" }, \"⤳ Share\");\r\nlet fullscreenLink: HTMLAnchorElement = a({ target: \"_top\", style: \"margin: 0 4px;\" }, \"⇱ Fullscreen\");\r\n\r\nlet draggingPlayhead: boolean = false;\r\nconst playButton: HTMLButtonElement = button({ style: \"width: 100%; height: 100%; max-height: 50px;\" });\r\nconst playButtonContainer: HTMLDivElement = div({ style: \"flex-shrink: 0; display: flex; padding: 2px; width: 80px; height: 100%; box-sizing: border-box; align-items: center;\" },\r\n\tplayButton,\r\n);\r\nconst loopIcon: SVGPathElement = path({ d: \"M 4 2 L 4 0 L 7 3 L 4 6 L 4 4 Q 2 4 2 6 Q 2 8 4 8 L 4 10 Q 0 10 0 6 Q 0 2 4 2 M 8 10 L 8 12 L 5 9 L 8 6 L 8 8 Q 10 8 10 6 Q 10 4 8 4 L 8 2 Q 12 2 12 6 Q 12 10 8 10 z\" });\r\nconst loopButton: HTMLButtonElement = button({ title: \"loop\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\" }, svg({ width: 12, height: 12, viewBox: \"0 0 12 12\" },\r\n\tloopIcon,\r\n));\r\n\r\nconst volumeIcon: SVGSVGElement = svg({ style: \"flex: 0 0 12px; margin: 0 1px; width: 12px; height: 12px;\", viewBox: \"0 0 12 12\" },\r\n\tpath({ fill: ColorConfig.uiWidgetBackground, d: \"M 1 9 L 1 3 L 4 3 L 7 0 L 7 12 L 4 9 L 1 9 M 9 3 Q 12 6 9 9 L 8 8 Q 10.5 6 8 4 L 9 3 z\" }),\r\n);\r\nconst volumeSlider: HTMLInputElement = input({ title: \"volume\", type: \"range\", value: 75, min: 0, max: 75, step: 1, style: \"width: 12vw; max-width: 100px; margin: 0 1px;\" });\r\n\r\nconst zoomIcon: SVGSVGElement = svg({ width: 12, height: 12, viewBox: \"0 0 12 12\" },\r\n\tcircle({ cx: \"5\", cy: \"5\", r: \"4.5\", \"stroke-width\": \"1\", stroke: \"currentColor\", fill: \"none\" }),\r\n\tpath({ stroke: \"currentColor\", \"stroke-width\": \"2\", d: \"M 8 8 L 11 11 M 5 2 L 5 8 M 2 5 L 8 5\", fill: \"none\" }),\r\n);\r\nconst zoomButton: HTMLButtonElement = button({ title: \"zoom\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\" },\r\n\tzoomIcon,\r\n);\r\n\r\nconst timeline: SVGSVGElement = svg({ style: \"min-width: 0; min-height: 0; touch-action: pan-y pinch-zoom;\" });\r\nconst playhead: HTMLDivElement = div({ style: `position: absolute; left: 0; top: 0; width: 2px; height: 100%; background: ${ColorConfig.playhead}; pointer-events: none;` });\r\nconst timelineContainer: HTMLDivElement = div({ style: \"display: flex; flex-grow: 1; flex-shrink: 1; position: relative;\" }, timeline, playhead);\r\nconst visualizationContainer: HTMLDivElement = div({ style: \"display: flex; flex-grow: 1; flex-shrink: 1; height: 0; position: relative; align-items: center; overflow: hidden;\" }, timelineContainer);\r\n\r\nconst outVolumeBarBg: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"90%\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetBackground });\r\nconst outVolumeBar: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", height: \"50%\", width: \"0%\", x: \"5%\", y: \"25%\", fill: \"url('#volumeGrad2')\" });\r\nconst outVolumeCap: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"2px\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetFocus });\r\nconst stop1: SVGStopElement = SVG.stop({ \"stop-color\": \"lime\", offset: \"60%\" });\r\nconst stop2: SVGStopElement = SVG.stop({ \"stop-color\": \"orange\", offset: \"90%\" });\r\nconst stop3: SVGStopElement = SVG.stop({ \"stop-color\": \"red\", offset: \"100%\" });\r\nconst gradient: SVGGradientElement = SVG.linearGradient({ id: \"volumeGrad2\", gradientUnits: \"userSpaceOnUse\" }, stop1, stop2, stop3);\r\nconst defs: SVGDefsElement = SVG.defs({}, gradient);\r\nconst volumeBarContainer: SVGSVGElement = SVG.svg({ style: `touch-action: none; overflow: hidden; margin: auto;`, width: \"160px\", height: \"10px\", preserveAspectRatio: \"none\" },\r\n\tdefs,\r\n\toutVolumeBarBg,\r\n\toutVolumeBar,\r\n\toutVolumeCap,\r\n);\r\n\r\ndocument.body.appendChild(visualizationContainer);\r\ndocument.body.appendChild(\r\n\tdiv({ style: `flex-shrink: 0; height: 20vh; min-height: 22px; max-height: 70px; display: flex; align-items: center;` },\r\n\t\tplayButtonContainer,\r\n\t\tloopButton,\r\n\t\tvolumeIcon,\r\n\t\tvolumeSlider,\r\n\t\tzoomButton,\r\n\t\tvolumeBarContainer,\r\n\t\ttitleText,\r\n\t\teditLink,\r\n\t\tcopyLink,\r\n\t\tshareLink,\r\n\t\tfullscreenLink,\r\n\t),\r\n);\r\n\r\nfunction hashUpdatedExternally(): void {\r\n\tlet myHash: string = location.hash;\r\n\tif (prevHash == myHash || myHash == \"\") return;\r\n\r\n\tprevHash = myHash;\r\n\r\n\tif (myHash.charAt(0) == \"#\") {\r\n\t\tmyHash = myHash.substring(1);\r\n\t}\r\n\r\n\tfullscreenLink.setAttribute(\"href\", location.href);\r\n\r\n\tfor (const parameter of myHash.split(\"&\")) {\r\n\t\tlet equalsIndex: number = parameter.indexOf(\"=\");\r\n\t\tif (equalsIndex != -1) {\r\n\t\t\tlet paramName: string = parameter.substring(0, equalsIndex);\r\n\t\t\tlet value: string = parameter.substring(equalsIndex + 1);\r\n\t\t\tswitch (paramName) {\r\n\t\t\t\tcase \"song\":\r\n\t\t\t\t\tsynth.setSong(value);\r\n\t\t\t\t\tsynth.snapToStart();\r\n\t\t\t\t\tif (synth.song) {\r\n\t\t\t\t\t\ttitleText.textContent = synth.song.title;\r\n\t\t\t\t\t}\r\n\t\t\t\t\teditLink.setAttribute(\"href\", \"../#\" + value);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//case \"title\":\r\n\t\t\t\t//\ttitleText.textContent = decodeURIComponent(value);\r\n\t\t\t\t//\tbreak;\r\n\t\t\t\tcase \"loop\":\r\n\t\t\t\t\tsynth.loopRepeatCount = (value != \"1\") ? 0 : -1;\r\n\t\t\t\t\trenderLoopIcon();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsynth.setSong(myHash);\r\n\t\t\tsynth.snapToStart();\r\n\t\t\teditLink.setAttribute(\"href\", \"../#\" + myHash);\r\n\t\t}\r\n\t}\r\n\r\n\trenderTimeline();\r\n}\r\n\r\nfunction onWindowResize(): void {\r\n\trenderTimeline();\r\n}\r\n\r\nfunction animate(): void {\r\n\tif (synth.playing) {\r\n\t\tanimationRequest = requestAnimationFrame(animate);\r\n\t\tif (localStorage.getItem(\"playerId\") != id) {\r\n\t\t\tonTogglePlay();\r\n\t\t}\r\n\t\trenderPlayhead();\r\n\r\n\t\tvolumeUpdate();\r\n\t}\r\n\r\n\tif (pauseButtonDisplayed != synth.playing) {\r\n\t\trenderPlayButton();\r\n\t}\r\n\r\n}\r\n\r\nfunction volumeUpdate(): void {\r\n\tif (synth.song == null) {\r\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\r\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\r\n\t\treturn;\r\n\t}\r\n\toutVolumeHistoricTimer--;\r\n\tif (outVolumeHistoricTimer <= 0) {\r\n\t\toutVolumeHistoricCap -= 0.03;\r\n\t}\r\n\tif (synth.song.outVolumeCap > outVolumeHistoricCap) {\r\n\t\toutVolumeHistoricCap = synth.song.outVolumeCap;\r\n\t\toutVolumeHistoricTimer = 50;\r\n\t}\r\n\r\n\tanimateVolume(synth.song.outVolumeCap, outVolumeHistoricCap);\r\n\r\n\tif (!synth.playing) {\r\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\r\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\r\n\t}\r\n}\r\n\r\nfunction animateVolume(useOutVolumeCap: number, historicOutCap: number): void {\r\n\toutVolumeBar.setAttribute(\"width\", \"\" + Math.min(144, useOutVolumeCap * 144));\r\n\toutVolumeCap.setAttribute(\"x\", \"\" + (8 + Math.min(144, historicOutCap * 144)));\r\n}\r\n\r\nfunction onTogglePlay(): void {\r\n\tif (synth.song != null) {\r\n\t\tif (animationRequest != null) cancelAnimationFrame(animationRequest);\r\n\t\tanimationRequest = null;\r\n\t\tif (synth.playing) {\r\n\t\t\tsynth.pause();\r\n\t\t\tvolumeUpdate();\r\n\t\t} else {\r\n\t\t\tsynth.play();\r\n\t\t\tlocalStorage.setItem(\"playerId\", id);\r\n\t\t\tanimate();\r\n\t\t}\r\n\t}\r\n\trenderPlayButton();\r\n}\r\n\r\nfunction onToggleLoop(): void {\r\n\tif (synth.loopRepeatCount == -1) {\r\n\t\tsynth.loopRepeatCount = 0;\r\n\t} else {\r\n\t\tsynth.loopRepeatCount = -1;\r\n\t}\r\n\trenderLoopIcon();\r\n}\r\n\r\nfunction onVolumeChange(): void {\r\n\tlocalStorage.setItem(\"volume\", volumeSlider.value);\r\n\tsetSynthVolume();\r\n}\r\n\r\nfunction onToggleZoom(): void {\r\n\tzoomEnabled = !zoomEnabled;\r\n\trenderZoomIcon();\r\n\trenderTimeline();\r\n}\r\n\r\nfunction onTimelineMouseDown(event: MouseEvent): void {\r\n\tdraggingPlayhead = true;\r\n\tonTimelineMouseMove(event);\r\n}\r\n\r\nfunction onTimelineMouseMove(event: MouseEvent): void {\r\n\tevent.preventDefault();\r\n\tonTimelineCursorMove(event.clientX || event.pageX);\r\n}\r\n\r\nfunction onTimelineTouchDown(event: TouchEvent): void {\r\n\tdraggingPlayhead = true;\r\n\tonTimelineTouchMove(event);\r\n}\r\n\r\nfunction onTimelineTouchMove(event: TouchEvent): void {\r\n\tonTimelineCursorMove(event.touches[0].clientX);\r\n}\r\n\r\nfunction onTimelineCursorMove(mouseX: number): void {\r\n\tif (draggingPlayhead && synth.song != null) {\r\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\t\tsynth.playhead = synth.song.barCount * (mouseX - boundingRect.left) / (boundingRect.right - boundingRect.left);\r\n\t\tsynth.computeLatestModValues();\r\n\t\trenderPlayhead();\r\n\t}\r\n}\r\n\r\nfunction onTimelineCursorUp(): void {\r\n\tdraggingPlayhead = false;\r\n}\r\n\r\nfunction setSynthVolume(): void {\r\n\tconst volume: number = +volumeSlider.value;\r\n\tsynth.volume = Math.min(1.0, Math.pow(volume / 50.0, 0.5)) * Math.pow(2.0, (volume - 75.0) / 25.0);\r\n}\r\n\r\nfunction renderPlayhead(): void {\r\n\tif (synth.song != null) {\r\n\t\tlet pos: number = synth.playhead / synth.song.barCount;\r\n\t\tplayhead.style.left = (timelineWidth * pos) + \"px\";\r\n\r\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\t\tvisualizationContainer.scrollLeft = pos * (timelineWidth - boundingRect.width);\r\n\t}\r\n}\r\n\r\nfunction renderTimeline(): void {\r\n\ttimeline.innerHTML = \"\";\r\n\tif (synth.song == null) return;\r\n\r\n\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\r\n\tlet timelineHeight: number;\r\n\tlet windowOctaves: number;\r\n\tlet windowPitchCount: number;\r\n\r\n\tif (zoomEnabled) {\r\n\t\ttimelineHeight = boundingRect.height;\r\n\t\twindowOctaves = Math.max(3, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * 2))));\r\n\t\twindowPitchCount = windowOctaves * 12 + 1;\r\n\t\tconst semitoneHeight: number = (timelineHeight - 1) / windowPitchCount;\r\n\t\tconst targetBeatWidth: number = Math.max(8, semitoneHeight * 4);\r\n\t\ttimelineWidth = Math.max(boundingRect.width, targetBeatWidth * synth.song.barCount * synth.song.beatsPerBar);\r\n\t} else {\r\n\t\ttimelineWidth = boundingRect.width;\r\n\t\tconst targetSemitoneHeight: number = Math.max(1, timelineWidth / (synth.song.barCount * synth.song.beatsPerBar) / 6.0);\r\n\t\ttimelineHeight = Math.min(boundingRect.height, targetSemitoneHeight * (Config.maxPitch + 1) + 1);\r\n\t\twindowOctaves = Math.max(3, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * targetSemitoneHeight))));\r\n\t\twindowPitchCount = windowOctaves * 12 + 1;\r\n\t}\r\n\r\n\ttimelineContainer.style.width = timelineWidth + \"px\";\r\n\ttimelineContainer.style.height = timelineHeight + \"px\";\r\n\ttimeline.style.width = timelineWidth + \"px\";\r\n\ttimeline.style.height = timelineHeight + \"px\";\r\n\r\n\tconst barWidth: number = timelineWidth / synth.song.barCount;\r\n\tconst partWidth: number = barWidth / (synth.song.beatsPerBar * Config.partsPerBeat);\r\n\r\n\tconst wavePitchHeight: number = (timelineHeight - 1) / windowPitchCount;\r\n\tconst drumPitchHeight: number = (timelineHeight - 1) / Config.drumCount;\r\n\r\n\tfor (let bar: number = 0; bar < synth.song.barCount + 1; bar++) {\r\n\t\tconst color: string = (bar == synth.song.loopStart || bar == synth.song.loopStart + synth.song.loopLength) ? ColorConfig.loopAccent : ColorConfig.uiWidgetBackground;\r\n\t\ttimeline.appendChild(rect({ x: bar * barWidth - 1, y: 0, width: 2, height: timelineHeight, fill: color }));\r\n\t}\r\n\r\n\tfor (let octave: number = 0; octave <= windowOctaves; octave++) {\r\n\t\ttimeline.appendChild(rect({ x: 0, y: octave * 12 * wavePitchHeight, width: timelineWidth, height: wavePitchHeight + 1, fill: ColorConfig.tonic, opacity: 0.75 }));\r\n\t}\r\n\r\n\tfor (let channel: number = synth.song.channels.length - 1 - synth.song.modChannelCount; channel >= 0; channel--) {\r\n\r\n\t\tconst isNoise: boolean = synth.song.getChannelIsNoise(channel);\r\n\t\tconst pitchHeight: number = isNoise ? drumPitchHeight : wavePitchHeight;\r\n\r\n\t\tconst configuredOctaveScroll: number = synth.song.channels[channel].octave;\r\n\t\tconst octavesToMove: number = (windowOctaves - 3) / 2;\r\n\t\tconst newScrollableOctaves: number = Config.pitchOctaves - windowOctaves;\r\n\t\tconst oldCenter: number = 5 / 2;\r\n\t\tconst newCenter: number = newScrollableOctaves / 2;\r\n\t\tlet distanceFromCenter: number = configuredOctaveScroll - oldCenter;\r\n\t\tif (Math.abs(distanceFromCenter) <= octavesToMove) {\r\n\t\t\tdistanceFromCenter = 0;\r\n\t\t} else if (distanceFromCenter < 0) {\r\n\t\t\tdistanceFromCenter += octavesToMove;\r\n\t\t} else {\r\n\t\t\tdistanceFromCenter -= octavesToMove;\r\n\t\t}\r\n\t\tconst newOctaveScroll = Math.max(0, Math.min(newScrollableOctaves, Math.round(newCenter + distanceFromCenter)));\r\n\r\n\t\tconst offsetY: number = newOctaveScroll * pitchHeight * 12 + timelineHeight - pitchHeight * 0.5 - 0.5;\r\n\r\n\t\tfor (let bar: number = 0; bar < synth.song.barCount; bar++) {\r\n\t\t\tconst pattern: Pattern | null = synth.song.getPattern(channel, bar);\r\n\t\t\tif (pattern == null) continue;\r\n\t\t\tconst offsetX: number = bar * barWidth;\r\n\r\n\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\tconst note: Note = pattern.notes[i];\r\n\r\n\t\t\t\tfor (const pitch of note.pitches) {\r\n\t\t\t\t\tconst d: string = drawNote(pitch, note.start, note.pins, (pitchHeight + 1) / 2, offsetX, offsetY, partWidth, pitchHeight);\r\n\t\t\t\t\tconst noteElement: SVGPathElement = path({ d: d, fill: ColorConfig.getChannelColor(synth.song, channel).primaryChannel });\r\n\t\t\t\t\tif (isNoise) noteElement.style.opacity = String(0.6);\r\n\t\t\t\t\ttimeline.appendChild(noteElement);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trenderPlayhead();\r\n}\r\n\r\nfunction drawNote(pitch: number, start: number, pins: NotePin[], radius: number, offsetX: number, offsetY: number, partWidth: number, pitchHeight: number): string {\r\n\tlet d: string = `M ${offsetX + partWidth * (start + pins[0].time)} ${offsetY - pitch * pitchHeight + radius * (pins[0].volume / 6.0)} `;\r\n\tfor (let i: number = 0; i < pins.length; i++) {\r\n\t\tconst pin: NotePin = pins[i];\r\n\t\tconst x: number = offsetX + partWidth * (start + pin.time);\r\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\r\n\t\tconst expression: number = pin.volume / 6.0;\r\n\t\td += `L ${x} ${y - radius * expression} `;\r\n\t}\r\n\tfor (let i: number = pins.length - 1; i >= 0; i--) {\r\n\t\tconst pin: NotePin = pins[i];\r\n\t\tconst x: number = offsetX + partWidth * (start + pin.time);\r\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\r\n\t\tconst expression: number = pin.volume / 6.0;\r\n\t\td += `L ${x} ${y + radius * expression} `;\r\n\t}\r\n\treturn d;\r\n}\r\n\r\nfunction renderPlayButton(): void {\r\n\tif (synth.playing) {\r\n\t\tplayButton.classList.remove(\"playButton\");\r\n\t\tplayButton.classList.add(\"pauseButton\");\r\n\t\tplayButton.title = \"Pause (Space)\";\r\n\t\tplayButton.innerText = \"Pause\";\r\n\t} else {\r\n\t\tplayButton.classList.remove(\"pauseButton\");\r\n\t\tplayButton.classList.add(\"playButton\");\r\n\t\tplayButton.title = \"Play (Space)\";\r\n\t\tplayButton.innerText = \"Play\";\r\n\t}\r\n\tpauseButtonDisplayed = synth.playing;\r\n}\r\n\r\nfunction renderLoopIcon(): void {\r\n\tloopIcon.setAttribute(\"fill\", (synth.loopRepeatCount == -1) ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground);\r\n}\r\n\r\nfunction renderZoomIcon(): void {\r\n\tzoomIcon.style.color = zoomEnabled ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground;\r\n}\r\n\r\nfunction onKeyPressed(event: KeyboardEvent): void {\r\n\tswitch (event.keyCode) {\r\n\t\tcase 32: // space\r\n\t\t\tonTogglePlay();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 219: // left brace\r\n\t\t\tsynth.prevBar();\r\n\t\t\trenderPlayhead();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 221: // right brace\r\n\t\t\tsynth.nextBar();\r\n\t\t\trenderPlayhead();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nfunction onCopyClicked(): void {\r\n\t// Set as any to allow compilation without clipboard types (since, uh, I didn't write this bit and don't know the proper types library) -jummbus\r\n\tlet nav: any;\r\n\tnav = navigator;\r\n\r\n\tif (nav.clipboard && nav.clipboard.writeText) {\r\n\t\tnav.clipboard.writeText(location.href).catch(() => {\r\n\t\t\twindow.prompt(\"Copy to clipboard:\", location.href);\r\n\t\t});\r\n\t\treturn;\r\n\t}\r\n\tconst textField: HTMLTextAreaElement = document.createElement(\"textarea\");\r\n\ttextField.innerText = location.href;\r\n\tdocument.body.appendChild(textField);\r\n\ttextField.select();\r\n\tconst succeeded: boolean = document.execCommand(\"copy\");\r\n\ttextField.remove();\r\n\tif (!succeeded) window.prompt(\"Copy this:\", location.href);\r\n}\r\n\r\nfunction onShareClicked(): void {\r\n\t(<any>navigator).share({ url: location.href });\r\n}\r\n\r\nif (top !== self) {\r\n\t// In an iframe.\r\n\tcopyLink.style.display = \"none\";\r\n\tshareLink.style.display = \"none\";\r\n} else {\r\n\t// Fullscreen.\r\n\tfullscreenLink.style.display = \"none\";\r\n\tif (!(\"share\" in navigator)) shareLink.style.display = \"none\";\r\n}\r\n\r\nif (localStorage.getItem(\"volume\") != null) {\r\n\tvolumeSlider.value = localStorage.getItem(\"volume\")!;\r\n}\r\nsetSynthVolume();\r\n\r\nwindow.addEventListener(\"resize\", onWindowResize);\r\nwindow.addEventListener(\"keydown\", onKeyPressed);\r\n\r\ntimeline.addEventListener(\"mousedown\", onTimelineMouseDown);\r\nwindow.addEventListener(\"mousemove\", onTimelineMouseMove);\r\nwindow.addEventListener(\"mouseup\", onTimelineCursorUp);\r\ntimeline.addEventListener(\"touchstart\", onTimelineTouchDown);\r\ntimeline.addEventListener(\"touchmove\", onTimelineTouchMove);\r\ntimeline.addEventListener(\"touchend\", onTimelineCursorUp);\r\ntimeline.addEventListener(\"touchcancel\", onTimelineCursorUp);\r\n\r\nplayButton.addEventListener(\"click\", onTogglePlay);\r\nloopButton.addEventListener(\"click\", onToggleLoop);\r\nvolumeSlider.addEventListener(\"input\", onVolumeChange);\r\nzoomButton.addEventListener(\"click\", onToggleZoom);\r\ncopyLink.addEventListener(\"click\", onCopyClicked);\r\nshareLink.addEventListener(\"click\", onShareClicked);\r\nwindow.addEventListener(\"hashchange\", hashUpdatedExternally);\r\n\r\nhashUpdatedExternally();\r\nrenderLoopIcon();\r\nrenderZoomIcon();\r\nrenderPlayButton();\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, NotePin, Note, Pattern, Instrument, Channel, Synth };\r\n//}\r\n"]}