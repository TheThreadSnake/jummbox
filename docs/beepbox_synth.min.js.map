{"version":3,"sources":["../src/synth/SynthConfig.ts","../src/editor/EditorConfig.ts","../src/synth/FFT.ts","../src/synth/Deque.ts","../src/synth/synth.ts"],"names":["Config","centerWave","wave","sum","i","length","average","cumulative","wavePrev","push","Float64Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","getDrumWave","index","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","samples","Float32Array","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","Error","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","pow","highIndex","min","retroWave","combinedAmplitude","lerped","log","LN2","amplitude","spectrumMax","radians","PI","cos","sin","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","dictionary","value","name","result","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","reverbRange","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","edoMin","edoMax","instrumentsPerChannelMin","instrumentsPerChannelMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipWaves","volume","pitchFilterMult","isSoft","filterCutoffMaxHz","filterCutoffMinHz","filterMax","filterMaxResonance","filterCutoffRange","filterResonanceRange","transitions","isSeamless","attackSeconds","releases","releaseTicks","slides","slideTicks","vibratos","type","delayParts","vibratoTypes","periodsSeconds","period","arpSpeedScale","intervals","spread","offset","sign","effectsNames","volumeRange","volumeLogScale","panCenter","panMax","detuneMin","detuneMax","songDetuneMin","songDetuneMax","chords","harmonizes","customInterval","arpeggiates","isCustomInterval","strumParts","maxChordSize","operatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","harmonicsControlPoints","harmonicsRendered","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthRange","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","centerFrequency","pitchesPerOctave","drumCount","modCount","pitchOctaves","maxScrollableOctaves","maxPitch","maximumTonesPerChannel","sineWaveLength","sineWaveMask","sineWave","generateSineWave","barEditorHeight","test","navigator","userAgent","EditorConfig","[object Object]","presetValue","categoryIndex","presetIndex","presetCategories","presets","program","category","preset","generalMidi","midiProgram","presetName","factor","countBits","n","isPowerOf2","round","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","customType","settings","transition","effects","chord","filterCutoffHz","filterResonance","filterEnvelope","interval","vibrato","isNoise","algorithm","feedbackType","feedbackAmplitude","feedbackEnvelope","operators","frequency","envelope","customChipWave","harmonics","midiSubharmonicOctaves","pulseWidth","pulseEnvelope","spectrum","drums","Deque","this","_capacity","_buffer","undefined","_mask","_offset","_count","element","_expandCapacity","set","get","popFront","popBack","oldBuffer","Array","size","base64IntToCharCode","base64CharCodeToInt","BitFieldReader","source","_bits","_readIndex","charCodeAt","minValue","minBits","numBits","readLongTail","read","BitFieldWriter","_index","writeLongTail","write","other","buffer","ceil","makeNotePin","time","clamp","max","val","validateRange","Note","pitch","start","end","fadeout","pitches","pins","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestVolume","pin","newNote","concat","Pattern","notes","instrument","note","clone","Operator","reset","SpectrumWave","isNoiseChannel","_wave","_waveIsReady","isHarmonic","lowestOctave","waveLength","highestOctave","falloffRatio","pitchTweak","controlPointToOctave","point","floor","value1","value2","octave1","octave2","HarmonicsWave","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","Instrument","isModChannel","chipWave","chipNoise","filterCutoff","vibratoDepth","vibratoSpeed","vibratoDelay","vibratoType","pan","panDelay","arpeggioSpeed","fastTwoNoteArp","tieNoteTransition","clicklessTransition","detune","LFOtime","nextLFOtime","arpTime","customChipWaveIntegral","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modChannels","modStatuses","modInstruments","modSettings","mod","ModStatus","msNone","ModSetting","mstNone","spectrumWave","instrumentObject","getChord","getFilterCutoffOctaves","getFilterEnvelope","getDrumsetEnvelope","operatorArray","operator","useSlowerRhythm","indexOf","valueOf","setTypeAndReset","oldTransitionNames","binary","sudden","smooth","transitionObject","findIndex","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","sustain sharp","sustain medium","sustain soft","decay sharp","legacyFilter","legacyEffectNames","drum","legacyWaveNames","triangle","square","pulse wide","pulse narrow","sawtooth","double saw","double pulse","spiky","plateau","legacyChorusNames","fifths","octaves","feedback","legacyEnvelopeNames","pluck 1","pluck 2","pluck 3","operatorObject","freq","frequencyFromPitch","drumsetIndexReferenceDelta","getCustomWave","_drumsetIndexToSpectrumOctave","Channel","octave","instruments","patterns","bars","muted","Song","string","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","mstMaxVols","Map","mstSongVolume","mstTempo","mstReverb","mstNextBar","mstInsVolume","mstPan","mstFilterCut","mstFilterPeak","mstFMSlider1","mstFMSlider2","mstFMSlider3","mstFMSlider4","mstFMFeedback","mstPulseWidth","mstDetune","mstVibratoDepth","mstSongDetune","mstVibratoSpeed","mstVibratoDelay","mstArpeggioSpeed","mstPanDelay","mstResetArpeggio","mstMaxValue","mstNewNoteVols","getNewNoteVolume","isMod","modChannel","modInstrument","cap","realToModValue","tempo","getVolumeCap","getVolumeCapForSetting","modSetting","fromBase64String","initToDefault","setting","pitchChannelCount","noiseChannelCount","modChannelCount","channel","andResetChannels","scale","key","loopStart","loopLength","reverb","edo","beatsPerBar","barCount","patternsPerChannel","rhythm","instrumentsPerChannel","title","document","channelIndex","getChannelCount","pattern","bar","bits","_variant","_latestJummBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","o","spectrumBits","encodeBase64","harmonicsBits","neededBits","shapeBits","neededInstrumentBits","getChannelIsNoise","getChannelIsMod","instrumentIndex","modStatus","msForPitch","msForNoise","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","writePartDuration","clear","writePinCount","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","splice","unshift","pop","allPitches","pitchIndex","pitchIter","writePitchInterval","stringLength","lengthBase64","digits","prototype","maxApplyArgs","slice","compressed","charIndex","fromJsonObject","JSON","parse","substring","variant","_latestBeepboxVersion","_oldestBeepboxVersion","_oldestJummBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","command","instrumentChannelIterator","instrumentIndexIterator","toSetOctaves","useSlowerArpSpeed","songNameLength","decodeURIComponent","window","localStorage","getItem","instrumentType","legacyWaves","legacyEffects","legacyEnvelopes","effect","originalValue","nextValue","channelNameLength","byteCount","markCustomWaveDirty","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","newPattern","newNotes","useOldShape","shape","pinObj","pinCount","readPinCount","initialVolume","bendCount","pitchBend","readLegacyPartDuration","readPartDuration","readPitchInterval","intervalIter","shift","isBackwards","restLength","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","toJsonObject","patternArray","noteArray","volumeCap","pointArray","useVol","tick","forMod","points","sequenceArray","l","octaveScrollBar","sequence","format","_format","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","importedPartsPerBeat","maxInstruments","maxPatterns","maxBars","channelObject","newPitchChannels","newNoiseChannels","newModChannels","patternObject","maxNoteCount","noteObject","k","startInterval","pointObject","lowestPitch","highestPitch","patternIndex","getPattern","Tone","chordSize","drumsetPitch","prevNote","nextNote","prevNotePitchIndex","nextNotePitchIndex","active","noteStart","noteEnd","noteLengthTicks","ticksSinceReleased","liveInputSamplesHeld","lastInterval","lastVolume","stereoVolume1","stereoVolume2","stereoOffset","stereoDelay","sample","phases","phaseDeltas","volumeStarts","volumeDeltas","volumeStart","volumeDelta","phaseDeltaScale","pulseWidthDelta","filter","filterScale","filterSample0","filterSample1","vibratoScale","intervalMult","intervalVolumeMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","Synth","song","samplesPerSecond","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","loopRepeatCount","wantToSkip","playheadInternal","beat","part","tickSampleCountdown","isPlayingSong","liveInputEndTime","tonePool","activeTones","tyingOver","activeModTones","releasedTones","liveInputTones","limit","stereoBufferIndex","samplesForNone","samplesForReverb","samplesForChorus","samplesForChorusReverb","chorusDelayLine","chorusDelayPos","chorusPhase","reverbDelayLine","reverbDelayPos","reverbFeedback0","reverbFeedback1","reverbFeedback2","reverbFeedback3","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","synthesize","deactivateAudio","setSong","getInstrumentSynthFunction","warmUp","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","currentPart","currentBar","instrumentIdx","getPatternInstrument","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","msForSong","setModValue","playing","playhead","remainder","samplesPerTick","getSamplesPerTick","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","modValueToReal","ended","totalSamples","foundMod","find","sort","a","b","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getSamplesPerBar","getTotalBars","useLoopCount","volumeEnd","nextVal","channelAdjust","forSong","isModActive","AudioContext","webkitAudioContext","sampleRate","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","activateAudio","warmUpSynthesizer","computeLatestModValues","snapToBar","freeAllTones","oldBar","outputBufferLength","playSong","channelCount","idx","bufferIndex","pause","stereoBufferLength","chorusAngle","chorusRange","chorusOffset0","chorusOffset1","chorusOffset2","chorusOffset3","chorusOffset4","chorusOffset5","useReverb","getModValue","samplesLeftInBuffer","runLength","determineCurrentActiveTones","count","tone","playTone","skipBar","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","determineLiveInputTones","getTransition","freeReleasedTone","shouldFadeOutFast","chorusTap0Index","chorusTap1Index","chorusTap2Index","chorusTap3Index","chorusTap4Index","chorusTap5Index","chorusTap0Delta","chorusTap1Delta","chorusTap2Delta","chorusTap3Delta","chorusTap4Delta","chorusTap5Delta","runEnd","bufferIndexL","bufferIndexR","sampleForNoneL","sampleForNoneR","sampleForReverbL","sampleForReverbR","sampleForChorusL","sampleForChorusR","sampleForChorusReverbL","sampleForChorusReverbR","combinedChorusL","combinedChorusR","chorusTap0Ratio","chorusTap1Ratio","chorusTap2Ratio","chorusTap3Ratio","chorusTap4Ratio","chorusTap5Ratio","chorusTap0A","chorusTap0B","chorusTap1A","chorusTap1B","chorusTap2A","chorusTap2B","chorusTap3A","chorusTap3B","chorusTap4A","chorusTap4B","chorusTap5A","chorusSampleL","chorusSampleR","reverbDelayPos1","reverbDelayPos2","reverbDelayPos3","reverbSample0","reverbSample1","reverbSample2","reverbSample3","reverbTemp0","reverbTemp1","reverbTemp2","reverbTemp3","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","Number","isInteger","atEnd","carryOver","toneCount","targetBar","nextPattern","currNote","currVolume","p","releaseTone","freeTone","remove","resetEffects","epsilon","pushBack","pushFront","toneIndex","toneList","newTone","modChannelIdx","prevNotes","nextNotes","fillCount","syncTones","peakBack","noteStartAdjust","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","synthBuffer","computeTone","synthesizer","beats","customVolume","attack","synth","chordVolume","computeChordVolume","intervalScale","secondsPerPart","beatsPerPart","toneWasActive","treatAsSeamless","startPan","endPan","startPanDelay","endPanDelay","useStartPan","useEndPan","maxDelayStart","maxDelayEnd","delayEnd","stereoVolumeLEnd","stereoVolumeREnd","volumeReferencePitch","baseVolume","pitchDamping","resetPhases","partsSinceStart","intervalStart","intervalEnd","transitionVolumeStart","transitionVolumeEnd","chordVolumeStart","chordVolumeEnd","decayTimeStart","decayTimeEnd","ticksSoFar","startTicksSinceReleased","endTicksSinceReleased","startTick","endTick","toneTransition","expressionToVolumeMult","heldTicksStart","heldTicksEnd","heldPartsStart","heldPartsEnd","partsPerBar","endPinIndex","startPin","endPin","noteStartTick","pinStart","pinEnd","tickTimeStart","tickTimeEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","customVolumeTickStart","customVolumeTickEnd","transitionVolumeTickStart","transitionVolumeTickEnd","chordVolumeTickStart","chordVolumeTickEnd","intervalTickStart","intervalTickEnd","decayTimeTickStart","decayTimeTickEnd","maximumSlideTicks","slideRatioStartTick","slideRatioEndTick","intervalDiff","volumeDiff","decayTimeDiff","chordSizeDiff","sampleTime","lfoEffectStart","getLFOAmplitude","lfoEffectEnd","partsStart","partsEnd","useVibratoStart","useVibratoEnd","activeVibratoDelayMods","vibratoDelayStart","vibratoDelayEnd","MAX_VALUE","instrumentVolumeMult","instrumentVolumeToVolumeMult","pickMainInterval","cutoffOctavesModStart","cutoffOctavesModEnd","filterCutModStart","filterCutModEnd","filterCutoffHzStart","filterCutoffHzEnd","filterBaseStart","filterBaseEnd","filterMin","computeEnvelope","endFilter","filterVolumeStart","filterVolumeEnd","getFilterResonance","useFilterResonanceStart","useFilterResonanceEnd","filterResonanceEnd","sineVolumeBoostStart","sineVolumeBoostEnd","totalCarrierVolumeStart","totalCarrierVolumeEnd","arpeggioInterval","detuneStart","detuneEnd","associatedCarrierIndex","freqMult","startFreq","amplitudeStart","amplitudeEnd","amplitudeCurveStart","operatorAmplitudeCurve","amplitudeCurveEnd","startVal","endVal","endPitch","pitchVolumeStart","pitchVolumeEnd","operatorEnvelope","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","volumeMult","intervalOffset","settingsVolumeMultStart","settingsVolumeMultEnd","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","replace","join","operatorLine","operatorSourceTemplate","modulators","modulatorNumber","feedbackIndices","Function","chipSynth","harmonicsSynth","pulseWidthSynth","noiseSynth","spectrumSynth","drumsetSynth","modSynth","data","volumeScale","intervalA","intervalB","intervalSign","deltaRatio","phaseDeltaA","phaseDeltaB","phaseA","phaseB","filter1","filter2","filterScale1","filterScale2","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","prevWaveIntegralA","prevWaveIntegralB","delays","stereoVolumeL","stereoVolumeR","nextWaveIntegralA","nextWaveIntegralB","waveA","waveB","output","phaseDelta","phase","sawPhaseA","sawPhaseB","pulseWave","t","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","phaseRatio","getDrumsetWave","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","slope","instrumentVolume","expression","getBeatsPerMinute","beatsPerSecond","partsPerSecond","tickPerSecond","split"],"mappings":"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,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO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","sourcesContent":["/*!\r\nCopyright (C) 2020 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\n//namespace beepbox {\r\nexport interface Dictionary<T> {\r\n\t[K: string]: T;\r\n}\r\n\r\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\r\n\tdictionary: Dictionary<T>;\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tcustom,\r\n\tsteady,\r\n\tpunch,\r\n\tflare,\r\n\ttwang,\r\n\tswell,\r\n\ttremolo,\r\n\ttremolo2,\r\n\tdecay,\r\n}\r\n\r\nexport const enum InstrumentType {\r\n\tchip = 0,\r\n\tfm = 1,\r\n\tnoise = 2,\r\n\tspectrum = 3,\r\n\tdrumset = 4,\r\n\tharmonics = 5,\r\n\tpwm = 6,\r\n\tcustomChipWave = 7,\r\n\tmod = 8,\r\n\tlength,\r\n}\r\n\r\nexport interface BeepBoxOption {\r\n\treadonly index: number;\r\n\treadonly name: string;\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n\treadonly flags: ReadonlyArray<boolean>;\r\n\treadonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n\treadonly isWhiteKey: boolean;\r\n\treadonly basePitch: number;\r\n}\r\n\r\nexport interface Rhythm extends BeepBoxOption {\r\n\treadonly stepsPerBeat: number;\r\n\t//readonly ticksPerArpeggio: number;\r\n\t//readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>>;\r\n\treadonly roundUpThresholds: number[] | null;\r\n}\r\n\r\nexport interface ChipWave extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly samples: Float64Array;\r\n}\r\n\r\nexport interface ChipNoise extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly basePitch: number;\r\n\treadonly pitchFilterMult: number;\r\n\treadonly isSoft: boolean;\r\n\tsamples: Float32Array | null;\r\n}\r\n\r\nexport interface Transition extends BeepBoxOption {\r\n\treadonly isSeamless: boolean;\r\n\treadonly attackSeconds: number;\r\n\treadonly releases: boolean;\r\n\treadonly releaseTicks: number;\r\n\treadonly slides: boolean;\r\n\treadonly slideTicks: number;\r\n}\r\n\r\nexport interface Vibrato extends BeepBoxOption {\r\n\treadonly amplitude: number;\r\n\treadonly type: number;\r\n\treadonly delayParts: number;\r\n}\r\n\r\nexport interface VibratoType extends BeepBoxOption {\r\n\treadonly periodsSeconds: number[];\r\n\treadonly period: number;\r\n}\r\n\r\nexport interface Interval extends BeepBoxOption {\r\n\treadonly spread: number;\r\n\treadonly offset: number;\r\n\treadonly volume: number;\r\n\treadonly sign: number;\r\n}\r\n\r\nexport interface Chord extends BeepBoxOption {\r\n\treadonly harmonizes: boolean;\r\n\treadonly customInterval: boolean;\r\n\treadonly arpeggiates: boolean;\r\n\treadonly isCustomInterval: boolean;\r\n\treadonly strumParts: number;\r\n}\r\n\r\nexport interface Algorithm extends BeepBoxOption {\r\n\treadonly carrierCount: number;\r\n\treadonly associatedCarrier: ReadonlyArray<number>;\r\n\treadonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface OperatorFrequency extends BeepBoxOption {\r\n\treadonly mult: number;\r\n\treadonly hzOffset: number;\r\n\treadonly amplitudeSign: number;\r\n}\r\n\r\nexport interface Envelope extends BeepBoxOption {\r\n\treadonly type: EnvelopeType;\r\n\treadonly speed: number;\r\n}\r\n\r\nexport interface Feedback extends BeepBoxOption {\r\n\treadonly indices: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport class Config {\r\n\t// Params for post-processing compressor\r\n\tpublic static thresholdVal: number = -10;\r\n\tpublic static kneeVal: number = 40;\r\n\tpublic static ratioVal: number = 12;\r\n\tpublic static attackVal: number = 0;\r\n\tpublic static releaseVal: number = 0.25;\r\n\r\n\tpublic static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\r\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\r\n\t\t{ name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\r\n\t\t{ name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\r\n\t\t{ name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\r\n\t\t{ name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\r\n\t\t{ name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\r\n\t\t{ name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\r\n\t\t{ name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\r\n\t\t{ name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\r\n\t\t{ name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\r\n\t\t{ name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\r\n\t\t{ name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\r\n\t\t{ name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\r\n\t\t{ name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\r\n\t\t{ name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\r\n\t\t{ name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\r\n\t\t{ name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\r\n\t\t{ name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\r\n\t\t{ name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\r\n\t\t{ name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\r\n\t\t{ name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\r\n\r\n\r\n\t]);\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{ name: \"0\", isWhiteKey: true, basePitch: 0 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{ name: \"1\", isWhiteKey: false, basePitch: 1 }, // TODO: I lowered these by 12, idk if I still want to have midi import so I might have to adjust if I don't.\r\n\t\t{ name: \"2\", isWhiteKey: true, basePitch: 2 },\r\n\t\t{ name: \"3\", isWhiteKey: false, basePitch: 3 },\r\n\t\t{ name: \"4\", isWhiteKey: true, basePitch: 4 },\r\n\t\t{ name: \"5\", isWhiteKey: true, basePitch: 5 },\r\n\t\t{ name: \"6\", isWhiteKey: false, basePitch: 6 },\r\n\t\t{ name: \"7\", isWhiteKey: true, basePitch: 7 },\r\n\t\t{ name: \"8\", isWhiteKey: false, basePitch: 8 },\r\n\t\t{ name: \"9\", isWhiteKey: true, basePitch: 9 },\r\n\t\t{ name: \"A\", isWhiteKey: false, basePitch: 10 },\r\n\t\t{ name: \"B\", isWhiteKey: true, basePitch: 11 },\r\n\t]);\r\n\t// public static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1]; // key relic (TODO)\r\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\r\n\tpublic static readonly tempoMin: number = 16;\r\n\tpublic static readonly tempoMax: number = 512;\r\n\tpublic static readonly reverbRange: number = 32;\r\n\tpublic static readonly beatsPerBarMin: number = 1;\r\n\tpublic static readonly beatsPerBarMax: number = 32;\r\n\tpublic static readonly barCountMin: number = 1;\r\n\tpublic static readonly barCountMax: number = 512;\r\n\tpublic static readonly edoMin: number = 1;\r\n\tpublic static readonly edoMax: number = 72;\r\n\tpublic static readonly instrumentsPerChannelMin: number = 1;\r\n\tpublic static readonly instrumentsPerChannelMax: number = 16;\r\n\tpublic static readonly partsPerBeat: number = 48; // prev 24;\r\n\tpublic static readonly ticksPerPart: number = 2;\r\n\tpublic static readonly ticksPerArpeggio: number = 3;\r\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];\r\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\r\n\t\t{ name: \"÷1 (singlets '_')\", stepsPerBeat: 1, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷2 (duplets)\", stepsPerBeat: 2, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\r\n\t\t{ name: \"÷5\", stepsPerBeat: 5, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷6\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷8\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷9\", stepsPerBeat: 9, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷12\", stepsPerBeat: 12, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷16\", stepsPerBeat: 16, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷24 (freehand)\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t]);\r\n\r\n\tpublic static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"custom chip\", \"mod\"];\r\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, true];\r\n\tpublic static readonly chipWaves: DictionaryArray<ChipWave> = toNameMap([\r\n\t\t{ name: \"rounded\", volume: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\r\n\t\t{ name: \"triangle\", volume: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\r\n\t\t{ name: \"square\", volume: 0.5, samples: centerWave([1.0, -1.0]) },\r\n\t\t{ name: \"1/4 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"1/8 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"sawtooth\", volume: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n\t\t{ name: \"double saw\", volume: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n\t\t{ name: \"double pulse\", volume: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"spiky\", volume: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\r\n\t\t{ name: \"sine\", volume: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\r\n\t\t{ name: \"flute\", volume: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\r\n\t\t{ name: \"harp\", volume: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\r\n\t\t{ name: \"sharp clarinet\", volume: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\r\n\t\t{ name: \"soft clarinet\", volume: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n\t\t{ name: \"alto sax\", volume: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\r\n\t\t{ name: \"bassoon\", volume: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\r\n\t\t{ name: \"trumpet\", volume: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\r\n\t\t{ name: \"electric guitar\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\r\n\t\t{ name: \"organ\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\r\n\t\t{ name: \"pan flute\", volume: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\r\n\t\t{ name: \"glitch\", volume: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n\t]);\r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\r\n\t\t{ name: \"retro\", volume: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"white\", volume: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\r\n\t\t{ name: \"clang\", volume: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"buzz\", volume: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"hollow\", volume: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\r\n\t\t{ name: \"shine\", volume: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"deep\", volume: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\r\n\t\t{ name: \"cutter\", volume: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"metallic\", volume: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t]);\r\n\tpublic static readonly filterCutoffMaxHz: number = 8000; // This is carefully calculated to correspond to no change when filtering at 48000 samples per second.\r\n\tpublic static readonly filterCutoffMinHz: number = 1;\r\n\tpublic static readonly filterMax: number = 0.95;\r\n\tpublic static readonly filterMaxResonance: number = 0.95;\r\n\tpublic static readonly filterCutoffRange: number = 11;\r\n\tpublic static readonly filterResonanceRange: number = 8;\r\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\r\n\t\t{ name: \"seamless\", isSeamless: true, attackSeconds: 0.0, releases: false, releaseTicks: 1, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard\", isSeamless: false, attackSeconds: 0.0, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft\", isSeamless: false, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"slide\", isSeamless: true, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: true, slideTicks: 3 },\r\n\t\t{ name: \"cross fade\", isSeamless: false, attackSeconds: 0.04, releases: true, releaseTicks: 6, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard fade\", isSeamless: false, attackSeconds: 0.0, releases: true, releaseTicks: 48, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"medium fade\", isSeamless: false, attackSeconds: 0.0125, releases: true, releaseTicks: 72, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft fade\", isSeamless: false, attackSeconds: 0.06, releases: true, releaseTicks: 96, slides: false, slideTicks: 6 },\r\n\t]);\r\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\r\n\t\t{ name: \"none\", amplitude: 0.0, type: 0, delayParts: 0 },\r\n\t\t{ name: \"light\", amplitude: 0.15, type: 0, delayParts: 0 },\r\n\t\t{ name: \"delayed\", amplitude: 0.3, type: 0, delayParts: 18 },\r\n\t\t{ name: \"heavy\", amplitude: 0.45, type: 0, delayParts: 0 },\r\n\t\t{ name: \"shaky\", amplitude: 0.1, type: 1, delayParts: 0 },\r\n\t]);\r\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\r\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\r\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\r\n\t]);\r\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\r\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\r\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\r\n\tpublic static readonly intervals: DictionaryArray<Interval> = toNameMap([\r\n\t\t{ name: \"union\", spread: 0.0, offset: 0.0, volume: 0.7, sign: 1.0 },\r\n\t\t{ name: \"shimmer\", spread: 0.018, offset: 0.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"hum\", spread: 0.045, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"honky tonk\", spread: 0.09, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"dissonant\", spread: 0.25, offset: 0.0, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"fifth\", spread: 3.5, offset: 3.5, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"octave\", spread: 6.0, offset: 6.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"bowed\", spread: 0.02, offset: 0.0, volume: 1.0, sign: -1.0 },\r\n\t\t{ name: \"piano\", spread: 0.01, offset: 0.0, volume: 1.0, sign: 0.7 },\r\n\t]);\r\n\tpublic static readonly effectsNames: ReadonlyArray<string> = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\r\n\tpublic static readonly volumeRange: number = 50;\r\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\r\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\r\n\tpublic static readonly volumeLogScale: number = 0.1428;\r\n\tpublic static readonly panCenter: number = 50;\r\n\tpublic static readonly panMax: number = Config.panCenter * 2;\r\n\tpublic static readonly detuneMin: number = -50;\r\n\tpublic static readonly detuneMax: number = 50;\r\n\tpublic static readonly songDetuneMin: number = -250;\r\n\tpublic static readonly songDetuneMax: number = 250;\r\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\r\n\t\t{ name: \"harmony\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"strum\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 1 },\r\n\t\t{ name: \"arpeggio\", harmonizes: false, customInterval: false, arpeggiates: true, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"custom interval\", harmonizes: true, customInterval: true, arpeggiates: true, isCustomInterval: true, strumParts: 0 },\r\n\t]);\r\n\tpublic static readonly maxChordSize: number = 9; // Pandora's box... ?0_0\r\n\tpublic static readonly operatorCount: number = 4;\r\n\tpublic static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\r\n\t\t{ name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\r\n\t\t{ name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\r\n\t\t{ name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\r\n\t\t{ name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\r\n\t\t{ name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\r\n\t\t{ name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\r\n\t\t{ name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\r\n\t\t{ name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\r\n\t\t{ name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\r\n\t\t{ name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\r\n\t\t{ name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\r\n\t]);\r\n\tpublic static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091];\r\n\tpublic static readonly operatorAmplitudeMax: number = 15;\r\n\tpublic static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\r\n\t\t{ name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\r\n\t\t{ name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\r\n\t\t{ name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t]);\r\n\tpublic static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\r\n\t\t{ name: \"custom\", type: EnvelopeType.custom, speed: 0.0 },\r\n\t\t{ name: \"steady\", type: EnvelopeType.steady, speed: 0.0 },\r\n\t\t{ name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\r\n\t\t{ name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\r\n\t\t{ name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\r\n\t\t{ name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\r\n\t\t{ name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\r\n\t\t{ name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\r\n\t\t{ name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\r\n\t\t{ name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\r\n\t\t{ name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\r\n\t\t{ name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\r\n\t\t{ name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\r\n\t\t{ name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\r\n\t\t{ name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\r\n\t\t{ name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\r\n\t\t{ name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\r\n\t\t{ name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\r\n\t\t{ name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\r\n\t\t{ name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\r\n\t\t{ name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\r\n\t]);\r\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\r\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\r\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\r\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\r\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\r\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\r\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\r\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\r\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\r\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\r\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\r\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\r\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\r\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\r\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\r\n\t\t{ name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\r\n\t]);\r\n\tpublic static readonly chipNoiseLength: number = 1 << 15; // 32768\r\n\tpublic static readonly spectrumBasePitch: number = 24;\r\n\tpublic static readonly spectrumControlPoints: number = 30;\r\n\tpublic static readonly spectrumControlPointsPerOctave: number = 7;\r\n\tpublic static readonly spectrumControlPointBits: number = 3;\r\n\tpublic static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\r\n\tpublic static readonly harmonicsControlPoints: number = 28;\r\n\tpublic static readonly harmonicsRendered: number = 64;\r\n\tpublic static readonly harmonicsControlPointBits: number = 3;\r\n\tpublic static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\r\n\tpublic static readonly harmonicsWavelength: number = 1 << 11; // 2048\r\n\tpublic static readonly pulseWidthRange: number = 50;\r\n\tpublic static readonly pitchChannelCountMin: number = 1;\r\n\tpublic static readonly pitchChannelCountMax: number = 32;\r\n\tpublic static readonly noiseChannelCountMin: number = 0;\r\n\tpublic static readonly noiseChannelCountMax: number = 8;\r\n\tpublic static readonly modChannelCountMin: number = 0;\r\n\tpublic static readonly modChannelCountMax: number = 8;\r\n\tpublic static readonly noiseInterval: number = 6;\r\n\tpublic static readonly centerFrequency = 425.85465642512778279\r\n\tpublic static readonly pitchesPerOctave: number = 12;\r\n\tpublic static readonly drumCount: number = 12;\r\n\tpublic static readonly modCount: number = 6;\r\n\tpublic static readonly pitchOctaves: number = 9; // prev 8\r\n\tpublic static readonly maxScrollableOctaves: number = 5; // Largest number possible with any config setting\r\n\tpublic static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\r\n\tpublic static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\r\n\tpublic static readonly sineWaveLength: number = 1 << 8; // 256\r\n\tpublic static readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n\tpublic static readonly sineWave: Float64Array = generateSineWave();\r\n\r\n\t// Height of the small editor column for inserting/deleting rows, in pixels.\r\n\tpublic static readonly barEditorHeight: number = 10;\r\n\r\n}\r\n\r\nfunction centerWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = wave[i] - average;\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\nfunction centerAndNormalizeWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tlet magn: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t\tmagn += Math.abs(wave[i]);\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\tconst magnAvg: number = magn / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = (wave[i] - average) / (magnAvg);\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\n\r\n// The function arguments will be defined in FFT.ts, but I want\r\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\r\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\r\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\r\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\r\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null = null, scaleElementsByFactor: Function | null = null): Float32Array {\r\n\tlet wave: Float32Array | null = Config.chipNoises[index].samples;\r\n\tif (wave == null) {\r\n\t\twave = new Float32Array(Config.chipNoiseLength + 1);\r\n\t\tConfig.chipNoises[index].samples = wave;\r\n\r\n\t\tif (index == 0) {\r\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 1) {\r\n\t\t\t// White noise is just random values for each sample.\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t}\r\n\t\t} else if (index == 2) {\r\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 3) {\r\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 4) {\r\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\tdrawNoiseSpectrum(wave, 10, 11, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 11, 14, .6578, .6578, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 5) {\r\n\t\t\t// \"Shine\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 6) {\r\n\t\t\t// \"Deep\" drums from modbox!\r\n\t\t\tdrawNoiseSpectrum(wave, 1, 10, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 20, 14, -2, -2, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 7) {\r\n\t\t\t// \"Cutter\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1);\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 8) {\r\n\t\t\t// \"Metallic\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < 32768; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 + 0.5;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t}\r\n\r\n\t\twave[Config.chipNoiseLength] = wave[0];\r\n\t}\r\n\r\n\treturn wave;\r\n}\r\n\r\nexport function drawNoiseSpectrum(wave: Float32Array, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\r\n\tconst referenceOctave: number = 11;\r\n\tconst referenceIndex: number = 1 << referenceOctave;\r\n\tconst lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n\tconst highIndex: number = Math.min(Config.chipNoiseLength >> 1, Math.pow(2, highOctave) | 0);\r\n\tconst retroWave: Float32Array = getDrumWave(0);\r\n\tlet combinedAmplitude: number = 0.0;\r\n\tfor (let i: number = lowIndex; i < highIndex; i++) {\r\n\r\n\t\tlet lerped: number = lowPower + (highPower - lowPower) * (Math.log(i) / Math.LN2 - lowOctave) / (highOctave - lowOctave);\r\n\t\t//let amplitude: number = Math.pow(2, lerped);\r\n\t\t//let amplitude: number = Math.pow((lerped + 5) / 7, 4);\r\n\t\tlet amplitude: number = Math.pow(2, (lerped - 1) * Config.spectrumMax + 1) * lerped;\r\n\r\n\t\tamplitude *= Math.pow(i / referenceIndex, overallSlope);\r\n\r\n\t\tcombinedAmplitude += amplitude;\r\n\r\n\t\t// Add two different sources of psuedo-randomness to the noise\r\n\t\t// (individually they aren't random enough) but in a deterministic\r\n\t\t// way so that live spectrum editing doesn't result in audible pops.\r\n\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the \r\n\t\t// LFSR retro wave (effectively random), and also rotate the phase\r\n\t\t// of each sine wave based on the golden angle to disrupt the symmetry.\r\n\t\tamplitude *= retroWave[i];\r\n\t\tconst radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\r\n\r\n\t\twave[i] = Math.cos(radians) * amplitude;\r\n\t\twave[Config.chipNoiseLength - i] = Math.sin(radians) * amplitude;\r\n\t}\r\n\r\n\treturn combinedAmplitude;\r\n}\r\n\r\nfunction generateSineWave(): Float64Array {\r\n\tconst wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n\tfor (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n\t\twave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n\t}\r\n\treturn wave;\r\n}\r\n\r\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\r\n\tlet arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\r\n\tif (arpeggioPattern != null) {\r\n\t\tif (pitchCount == 2 && useFastTwoNoteArp == false) {\r\n\t\t\tarpeggioPattern = [0, 0, 1, 1];\r\n\t\t}\r\n\t\treturn arpeggioPattern[arpeggio % arpeggioPattern.length];\r\n\t} else {\r\n\t\treturn arpeggio % pitchCount;\r\n\t}\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n\tconst dictionary: Dictionary<T> = {};\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tconst value: any = array[i];\r\n\t\tvalue.index = i;\r\n\t\tdictionary[value.name] = <T>value;\r\n\t}\r\n\tconst result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\r\n\tresult.dictionary = dictionary;\r\n\treturn result;\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap } from \"../synth/SynthConfig\";\r\n\r\n//namespace beepbox {\r\nexport interface PresetCategory extends BeepBoxOption {\r\n\treadonly presets: DictionaryArray<Preset>;\r\n}\r\n\r\nexport interface Preset extends BeepBoxOption {\r\n\treadonly isNoise?: boolean;\r\n\treadonly isMod?: boolean;\r\n\treadonly generalMidi?: boolean;\r\n\treadonly midiProgram?: number;\r\n\treadonly midiSubharmonicOctaves?: number;\r\n\treadonly customType?: InstrumentType;\r\n\treadonly settings?: any;\r\n}\r\n\r\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\nexport function prettyNumber(value: number): string {\r\n\treturn value.toFixed(2).replace(/\\.?0*$/, \"\");\r\n}\r\n\r\nexport class EditorConfig {\r\n\tpublic static readonly version: string = \"2.3\"; // Not using patch versions in display right now, maybe someday.\r\n\tpublic static readonly versionDisplayName: string = \"MicroBox Alpha \" + EditorConfig.version;\r\n\r\n\tpublic static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"chip wave\", customType: InstrumentType.chip },\r\n\t\t\t\t{ name: \"FM (expert)\", customType: InstrumentType.fm },\r\n\t\t\t\t{ name: \"basic noise\", customType: InstrumentType.noise },\r\n\t\t\t\t{ name: \"spectrum\", customType: InstrumentType.spectrum },\r\n\t\t\t\t{ name: \"drumset\", customType: InstrumentType.drumset },\r\n\t\t\t\t{ name: \"harmonics\", customType: InstrumentType.harmonics },\r\n\t\t\t\t{ name: \"pulse width\", customType: InstrumentType.pwm },\r\n\t\t\t\t{ name: \"custom chip\", customType: InstrumentType.customChipWave },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"triangle\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\r\n\t\t\t\t{ name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\r\n\t\t\t\t{ name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\r\n\t\t\t\t{ name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\r\n\t\t\t\t{ name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\r\n\t\t\t\t{ name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57] } },\r\n\t\t\t\t{ name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 86, 86, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"wave\": \"1/8 pulse\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"interval\": \"honky tonk\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 43, 43, 43, 43, 43, 29, 43, 43, 43, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"interval\": \"shimmer\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0] } },\r\n\t\t\t\t{ name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 14, 14, 14, 14, 14, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14] } },\r\n\t\t\t\t{ name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\r\n\t\t\t\t{ name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }, { \"frequency\": \"~2×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 2, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 1\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"pulseWidth\": 18, \"pulseEnvelope\": \"punch\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"distorted synth 2\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 3\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 4\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 50, \"pulseEnvelope\": \"swell 1\", \"vibrato\": \"delayed\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"transition\": \"slide\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t\t{ name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14] } },\r\n\t\t\t\t{ name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0] } },\r\n\t\t\t\t{ name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"flare 3\" }] } },\r\n\t\t\t\t{ name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"swell 2\" }, { \"frequency\": \"11×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 3\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"octave\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"tremolo1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 5, \"envelope\": \"twang 3\" }, { \"frequency\": \"11×\", \"amplitude\": 8, \"envelope\": \"tremolo5\" }] } },\r\n\t\t\t\t{ name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"tremolo1\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\r\n\t\t\t\t{ name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"flare 1\" }, { \"frequency\": \"3×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }] } },\r\n\t\t\t\t{ name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 3, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [0, 0, 0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0] } },\r\n\t\t\t\t{ name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 57, \"filterEnvelope\": \"swell 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\r\n\t\t\t\t{ name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"interval\": \"hum\", \"vibrato\": \"heavy\", \"harmonics\": [0, 0, 14, 100, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"tremolo1\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\r\n\t\t\t\t{ name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 4, \"pulseEnvelope\": \"tremolo6\", \"vibrato\": \"shaky\" } },\r\n\t\t\t\t{ name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\r\n\t\t\t\t{ name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\r\n\t\t\t\t{ name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"heavy\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t]);\r\n\r\n\tpublic static valueToPreset(presetValue: number): Preset | null {\r\n\t\tconst categoryIndex: number = presetValue >> 6;\r\n\t\tconst presetIndex: number = presetValue & 0x3F;\r\n\t\treturn EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\r\n\t}\r\n\tpublic static midiProgramToPresetValue(program: number): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic static nameToPresetValue(presetName: string): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\ninterface NumberArray {\r\n\tlength: number;\r\n\t[index: number]: number;\r\n}\r\n\r\n// A basic FFT operation scales the overall magnitude of elements by the\r\n// square root of the length of the array, √N. Performing a forward FFT and\r\n// then an inverse FFT results in the original array, but multiplied by N.\r\n// This helper function can be used to compensate for that. \r\nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tarray[i] *= factor;\r\n\t}\r\n}\r\n\r\nfunction isPowerOf2(n: number): boolean {\r\n\treturn !!n && !(n & (n - 1));\r\n}\r\n\r\nfunction countBits(n: number): number {\r\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\treturn Math.round(Math.log(n) / Math.log(2));\r\n}\r\n\r\n// Rearranges the elements of the array, swapping the element at an index\r\n// with an element at an index that is the bitwise reverse of the first\r\n// index in base 2. Useful for computing the FFT.\r\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\r\n\tconst bitCount: number = countBits(fullArrayLength);\r\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\tconst finalShift: number = 16 - bitCount;\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\tlet j: number;\r\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\tj = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;\r\n\t\tif (j > i) {\r\n\t\t\tlet temp: number = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Provided for educational purposes. Easier to read than\r\n// fastFourierTransform(), but computes the same result.\r\n// Takes two parallel arrays representing the real and imaginary elements,\r\n// respectively, and returns an array containing two new arrays, which\r\n// contain the complex result of the transform.\r\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\tconst realOut: number[] = [];\r\n\tconst imagOut: number[] = [];\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\trealOut[i] = 0.0;\r\n\t\timagOut[i] = 0.0;\r\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t}\r\n\t}\r\n\treturn [realOut, imagOut];\r\n}\r\n\r\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n// input real and imaginary arrays. Can be used for both forward and inverse\r\n// transforms: swap the order of the arguments for the inverse.\r\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\r\n\treverseIndexBits(realArray, fullArrayLength);\r\n\treverseIndexBits(imagArray, fullArrayLength);\r\n\r\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\tconst startIndex1: number = startIndex + 1;\r\n\t\tconst startIndex2: number = startIndex + 2;\r\n\t\tconst startIndex3: number = startIndex + 3;\r\n\t\tconst real0: number = realArray[startIndex];\r\n\t\tconst real1: number = realArray[startIndex1];\r\n\t\tconst real2: number = realArray[startIndex2];\r\n\t\tconst real3: number = realArray[startIndex3];\r\n\t\tconst imag0: number = imagArray[startIndex];\r\n\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\tconst realTemp0: number = real0 + real1;\r\n\t\tconst realTemp1: number = real0 - real1;\r\n\t\tconst realTemp2: number = real2 + real3;\r\n\t\tconst realTemp3: number = real2 - real3;\r\n\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\trealArray[startIndex] = realTemp0 + realTemp2;\r\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\timagArray[startIndex] = imagTemp0 + imagTemp2;\r\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t}\r\n\r\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\tconst halfLength: number = stride >>> 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tlet c: number = 1.0;\r\n\t\t\tlet s: number = 0.0;\r\n\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the Fourier transform from an array of real-valued time-domain\r\n// samples. The output is specially formatted for space efficieny: elements\r\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n// descending frequency. Overwrites the input array.\r\nexport function forwardRealFourierTransform(array: NumberArray): void {\r\n\tconst fullArrayLength: number = array.length;\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n\r\n\t// First and second pass.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\t// no imaginary elements yet since the input is fully real.\r\n\t\tconst tempA: number = real0 + real1;\r\n\t\tconst tempB: number = real2 + real3;\r\n\t\tarray[index] = tempA + tempB;\r\n\t\tarray[index1] = real0 - real1;\r\n\t\tarray[index2] = tempA - tempB;\r\n\t\tarray[index3] = real2 - real3;\r\n\t}\r\n\r\n\t// Third pass.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst imag3: number = array[index3];\r\n\t\tconst real4: number = array[index4];\r\n\t\tconst real5: number = array[index5];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\tarray[index] = real0 + real4;\r\n\t\tarray[index1] = real1 + tempA;\r\n\t\tarray[index3] = real1 - tempA;\r\n\t\tarray[index4] = real0 - real4;\r\n\t\tarray[index5] = tempB - imag3;\r\n\t\tarray[index7] = tempB + imag3;\r\n\t}\r\n\r\n\t// Handle remaining passes.\r\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\tarray[indexB0] = -imag0 - tempB;\r\n\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the inverse Fourier transform from a specially formatted array of\r\n// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n// the corresponding complex elements, representing cosine wave amplitudes in\r\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n// imaginary values, representing sine wave amplitudes in descending frequency.\r\n// Generates real-valued time-domain samples. Overwrites the input array.\r\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\t// Perform all but the last few passes in reverse.\r\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\tarray[midIndexA] *= 2;\r\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\tarray[midIndexB] *= 2;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// Commented out this block (and compensated with an extra pass above)\r\n\t// because it's slower in my testing so far.\r\n\t// Pass with stride 8.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index6: number = index + 6;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\tconst imag4: number = array[index4];\r\n\t\tconst imag5: number = array[index5];\r\n\t\tconst imag6: number = array[index6];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = real1 - real3;\r\n\t\tconst tempB: number = imag5 + imag7;\r\n\t\tarray[index ] = real0 + imag4;\r\n\t\tarray[index1] = real1 + real3;\r\n\t\tarray[index2] = real2 * 2;\r\n\t\tarray[index3] = imag7 - imag5;\r\n\t\tarray[index4] = real0 - imag4;\r\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\tarray[index6] = imag6 * 2;\r\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t}\r\n\t*/\r\n\t// The final passes with strides 4 and 2, combined into one loop.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1] * 2;\r\n\t\tconst imag2: number = array[index2];\r\n\t\tconst imag3: number = array[index3] * 2;\r\n\t\tconst tempA: number = real0 + imag2;\r\n\t\tconst tempB: number = real0 - imag2;\r\n\t\tarray[index] = tempA + real1;\r\n\t\tarray[index1] = tempA - real1;\r\n\t\tarray[index2] = tempB + imag3;\r\n\t\tarray[index3] = tempB - imag3;\r\n\t}\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}\r\n//}\r\n\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex } from \"./SynthConfig\";\r\nimport { EditorConfig } from \"../editor/EditorConfig\";\r\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\r\nimport { Deque } from \"./Deque\";\r\n\r\ndeclare global {\r\n\tinterface Window {\r\n\t\tAudioContext: any;\r\n\t\twebkitAudioContext: any;\r\n\t}\r\n}\r\n\r\n//namespace beepbox {\r\n// For performance debugging:\r\n//let samplesAccumulated: number = 0;\r\n//let samplePerformance: number = 0;\r\n\r\nconst enum CharCode {\r\n\tSPACE = 32,\r\n\tHASH = 35,\r\n\tPERCENT = 37,\r\n\tAMPERSAND = 38,\r\n\tPLUS = 43,\r\n\tDASH = 45,\r\n\tDOT = 46,\r\n\tNUM_0 = 48,\r\n\tNUM_1 = 49,\r\n\tNUM_2 = 50,\r\n\tNUM_3 = 51,\r\n\tNUM_4 = 52,\r\n\tNUM_5 = 53,\r\n\tNUM_6 = 54,\r\n\tNUM_7 = 55,\r\n\tNUM_8 = 56,\r\n\tNUM_9 = 57,\r\n\tEQUALS = 61,\r\n\tA = 65,\r\n\tB = 66,\r\n\tC = 67,\r\n\tD = 68,\r\n\tE = 69,\r\n\tF = 70,\r\n\tG = 71,\r\n\tH = 72,\r\n\tI = 73,\r\n\tJ = 74,\r\n\tK = 75,\r\n\tL = 76,\r\n\tM = 77,\r\n\tN = 78,\r\n\tO = 79,\r\n\tP = 80,\r\n\tQ = 81,\r\n\tR = 82,\r\n\tS = 83,\r\n\tT = 84,\r\n\tU = 85,\r\n\tV = 86,\r\n\tW = 87,\r\n\tX = 88,\r\n\tY = 89,\r\n\tZ = 90,\r\n\tUNDERSCORE = 95,\r\n\ta = 97,\r\n\tb = 98,\r\n\tc = 99,\r\n\td = 100,\r\n\te = 101,\r\n\tf = 102,\r\n\tg = 103,\r\n\th = 104,\r\n\ti = 105,\r\n\tj = 106,\r\n\tk = 107,\r\n\tl = 108,\r\n\tm = 109,\r\n\tn = 110,\r\n\to = 111,\r\n\tp = 112,\r\n\tq = 113,\r\n\tr = 114,\r\n\ts = 115,\r\n\tt = 116,\r\n\tu = 117,\r\n\tv = 118,\r\n\tw = 119,\r\n\tx = 120,\r\n\ty = 121,\r\n\tz = 122,\r\n\tLEFT_CURLY_BRACE = 123,\r\n\tRIGHT_CURLY_BRACE = 125,\r\n}\r\n\r\nconst enum SongTagCode {\r\n\tbeatCount = CharCode.a,\r\n\tbars = CharCode.b,\r\n\tvibrato = CharCode.c,\r\n\ttransition = CharCode.d,\r\n\tloopEnd = CharCode.e,\r\n\tfilterCutoff = CharCode.f,\r\n\tbarCount = CharCode.g,\r\n\tinterval = CharCode.h,\r\n\tinstrumentCount = CharCode.i,\r\n\tpatternCount = CharCode.j,\r\n\tkey = CharCode.k,\r\n\tloopStart = CharCode.l,\r\n\treverb = CharCode.m,\r\n\tchannelCount = CharCode.n,\r\n\tchannelOctave = CharCode.o,\r\n\tpatterns = CharCode.p,\r\n\teffects = CharCode.q,\r\n\trhythm = CharCode.r,\r\n\tscale = CharCode.s,\r\n\ttempo = CharCode.t,\r\n\tpreset = CharCode.u,\r\n\tvolume = CharCode.v,\r\n\twave = CharCode.w,\r\n\r\n\tfilterResonance = CharCode.y,\r\n\tfilterEnvelope = CharCode.z,\r\n\talgorithm = CharCode.A,\r\n\tfeedbackAmplitude = CharCode.B,\r\n\tchord = CharCode.C,\r\n\tdetune = CharCode.D,\r\n\toperatorEnvelopes = CharCode.E,\r\n\tfeedbackType = CharCode.F,\r\n\tarpeggioSpeed = CharCode.G,\r\n\tharmonics = CharCode.H,\r\n\r\n\tsquareDuty = CharCode.K,\r\n\tpanning = CharCode.L,\r\n\tcustomChipWave = CharCode.M,\r\n\tsongTitle = CharCode.N,\r\n\tlimiterSettings = CharCode.O,\r\n\toperatorAmplitudes = CharCode.P,\r\n\toperatorFrequencies = CharCode.Q,\r\n\r\n\tspectrum = CharCode.S,\r\n\tstartInstrument = CharCode.T,\r\n\tchannelNames = CharCode.U,\r\n\tfeedbackEnvelope = CharCode.V,\r\n\tpulseWidth = CharCode.W,\r\n\tedo = CharCode.X,\r\n}\r\n\r\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\r\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\r\nclass BitFieldReader {\r\n\tprivate _bits: number[] = [];\r\n\tprivate _readIndex: number = 0;\r\n\r\n\tconstructor(source: string, startIndex: number, stopIndex: number) {\r\n\t\tfor (let i: number = startIndex; i < stopIndex; i++) {\r\n\t\t\tconst value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n\t\t\tthis._bits.push((value >> 5) & 0x1);\r\n\t\t\tthis._bits.push((value >> 4) & 0x1);\r\n\t\t\tthis._bits.push((value >> 3) & 0x1);\r\n\t\t\tthis._bits.push((value >> 2) & 0x1);\r\n\t\t\tthis._bits.push((value >> 1) & 0x1);\r\n\t\t\tthis._bits.push(value & 0x1);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic read(bitCount: number): number {\r\n\t\tlet result: number = 0;\r\n\t\twhile (bitCount > 0) {\r\n\t\t\tresult = result << 1;\r\n\t\t\tresult += this._bits[this._readIndex++];\r\n\t\t\tbitCount--;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic readLongTail(minValue: number, minBits: number): number {\r\n\t\tlet result: number = minValue;\r\n\t\tlet numBits: number = minBits;\r\n\t\twhile (this._bits[this._readIndex++]) {\r\n\t\t\tresult += 1 << numBits;\r\n\t\t\tnumBits++;\r\n\t\t}\r\n\t\twhile (numBits > 0) {\r\n\t\t\tnumBits--;\r\n\t\t\tif (this._bits[this._readIndex++]) {\r\n\t\t\t\tresult += 1 << numBits;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic readPartDuration(): number {\r\n\t\treturn this.readLongTail(1, 3);\r\n\t}\r\n\r\n\tpublic readLegacyPartDuration(): number {\r\n\t\treturn this.readLongTail(1, 2);\r\n\t}\r\n\r\n\tpublic readPinCount(): number {\r\n\t\treturn this.readLongTail(1, 0);\r\n\t}\r\n\r\n\tpublic readPitchInterval(): number {\r\n\t\tif (this.read(1)) {\r\n\t\t\treturn -this.readLongTail(1, 3);\r\n\t\t} else {\r\n\t\t\treturn this.readLongTail(1, 3);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass BitFieldWriter {\r\n\tprivate _index: number = 0;\r\n\tprivate _bits: number[] = [];\r\n\r\n\tpublic clear() {\r\n\t\tthis._index = 0;\r\n\t}\r\n\r\n\tpublic write(bitCount: number, value: number): void {\r\n\t\tbitCount--;\r\n\t\twhile (bitCount >= 0) {\r\n\t\t\tthis._bits[this._index++] = (value >>> bitCount) & 1;\r\n\t\t\tbitCount--;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writeLongTail(minValue: number, minBits: number, value: number): void {\r\n\t\tif (value < minValue) throw new Error(\"value out of bounds\");\r\n\t\tvalue -= minValue;\r\n\t\tlet numBits: number = minBits;\r\n\t\twhile (value >= (1 << numBits)) {\r\n\t\t\tthis._bits[this._index++] = 1;\r\n\t\t\tvalue -= 1 << numBits;\r\n\t\t\tnumBits++;\r\n\t\t}\r\n\t\tthis._bits[this._index++] = 0;\r\n\t\twhile (numBits > 0) {\r\n\t\t\tnumBits--;\r\n\t\t\tthis._bits[this._index++] = (value >>> numBits) & 1;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writePartDuration(value: number): void {\r\n\t\tthis.writeLongTail(1, 3, value);\r\n\t}\r\n\r\n\tpublic writePinCount(value: number): void {\r\n\t\tthis.writeLongTail(1, 0, value);\r\n\t}\r\n\r\n\tpublic writePitchInterval(value: number): void {\r\n\t\tif (value < 0) {\r\n\t\t\tthis.write(1, 1); // sign\r\n\t\t\tthis.writeLongTail(1, 3, -value);\r\n\t\t} else {\r\n\t\t\tthis.write(1, 0); // sign\r\n\t\t\tthis.writeLongTail(1, 3, value);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic concat(other: BitFieldWriter): void {\r\n\t\tfor (let i: number = 0; i < other._index; i++) {\r\n\t\t\tthis._bits[this._index++] = other._bits[i];\r\n\t\t}\r\n\t}\r\n\r\n\tpublic encodeBase64(buffer: number[]): number[] {\r\n\r\n\t\tfor (let i: number = 0; i < this._index; i += 6) {\r\n\t\t\tconst value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\r\n\t\t\tbuffer.push(base64IntToCharCode[value]);\r\n\t\t}\r\n\t\treturn buffer;\r\n\t}\r\n\r\n\tpublic lengthBase64(): number {\r\n\t\treturn Math.ceil(this._index / 6);\r\n\t}\r\n}\r\n\r\nexport interface NotePin {\r\n\tinterval: number;\r\n\ttime: number;\r\n\tvolume: number;\r\n}\r\n\r\nexport function makeNotePin(interval: number, time: number, volume: number): NotePin {\r\n\treturn { interval: interval, time: time, volume: volume };\r\n}\r\n\r\nfunction clamp(min: number, max: number, val: number): number {\r\n\tmax = max - 1;\r\n\tif (val <= max) {\r\n\t\tif (val >= min) return val;\r\n\t\telse return min;\r\n\t} else {\r\n\t\treturn max;\r\n\t}\r\n}\r\n\r\nfunction validateRange(min: number, max: number, val: number): number {\r\n\tif (min <= val && val <= max) return val;\r\n\tthrow new Error(`Value ${val} not in range [${min}, ${max}]`);\r\n}\r\n\r\nexport class Note {\r\n\tpublic pitches: number[];\r\n\tpublic pins: NotePin[];\r\n\tpublic start: number;\r\n\tpublic end: number;\r\n\r\n\tpublic constructor(pitch: number, start: number, end: number, volume: number, fadeout: boolean = false) {\r\n\t\tthis.pitches = [pitch];\r\n\t\tthis.pins = [makeNotePin(0, 0, volume), makeNotePin(0, end - start, fadeout ? 0 : volume)];\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\t}\r\n\r\n\tpublic pickMainInterval(): number {\r\n\t\tlet longestFlatIntervalDuration: number = 0;\r\n\t\tlet mainInterval: number = 0;\r\n\t\tfor (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\r\n\t\t\tconst pinA: NotePin = this.pins[pinIndex - 1];\r\n\t\t\tconst pinB: NotePin = this.pins[pinIndex];\r\n\t\t\tif (pinA.interval == pinB.interval) {\r\n\t\t\t\tconst duration: number = pinB.time - pinA.time;\r\n\t\t\t\tif (longestFlatIntervalDuration < duration) {\r\n\t\t\t\t\tlongestFlatIntervalDuration = duration;\r\n\t\t\t\t\tmainInterval = pinA.interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (longestFlatIntervalDuration == 0) {\r\n\t\t\tlet loudestVolume: number = 0;\r\n\t\t\tfor (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\r\n\t\t\t\tconst pin: NotePin = this.pins[pinIndex];\r\n\t\t\t\tif (loudestVolume < pin.volume) {\r\n\t\t\t\t\tloudestVolume = pin.volume;\r\n\t\t\t\t\tmainInterval = pin.interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn mainInterval;\r\n\t}\r\n\r\n\tpublic clone(): Note {\r\n\t\tconst newNote: Note = new Note(-1, this.start, this.end, 6);\r\n\t\tnewNote.pitches = this.pitches.concat();\r\n\t\tnewNote.pins = [];\r\n\t\tfor (const pin of this.pins) {\r\n\t\t\tnewNote.pins.push(makeNotePin(pin.interval, pin.time, pin.volume));\r\n\t\t}\r\n\t\treturn newNote;\r\n\t}\r\n}\r\n\r\nexport class Pattern {\r\n\tpublic notes: Note[] = [];\r\n\tpublic instrument: number = 0;\r\n\r\n\tpublic cloneNotes(): Note[] {\r\n\t\tconst result: Note[] = [];\r\n\t\tfor (const note of this.notes) {\r\n\t\t\tresult.push(note.clone());\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tthis.notes.length = 0;\r\n\t\tthis.instrument = 0;\r\n\t}\r\n}\r\n\r\nexport class Operator {\r\n\tpublic frequency: number = 0;\r\n\tpublic amplitude: number = 0;\r\n\tpublic envelope: number = 0;\r\n\r\n\tconstructor(index: number) {\r\n\t\tthis.reset(index);\r\n\t}\r\n\r\n\tpublic reset(index: number): void {\r\n\t\tthis.frequency = 0;\r\n\t\tthis.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n\t\tthis.envelope = (index == 0) ? 0 : 1;\r\n\t}\r\n\r\n\tpublic copy(other: Operator): void {\r\n\t\tthis.frequency = other.frequency;\r\n\t\tthis.amplitude = other.amplitude;\r\n\t\tthis.envelope = other.envelope;\r\n\t}\r\n}\r\n\r\nexport class SpectrumWave {\r\n\tpublic spectrum: number[] = [];\r\n\tprivate _wave: Float32Array | null = null;\r\n\tprivate _waveIsReady: boolean = false;\r\n\r\n\tconstructor(isNoiseChannel: boolean) {\r\n\t\tthis.reset(isNoiseChannel);\r\n\t}\r\n\r\n\tpublic reset(isNoiseChannel: boolean): void {\r\n\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\tif (isNoiseChannel) {\r\n\t\t\t\tthis.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\r\n\t\t\t} else {\r\n\t\t\t\tconst isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\r\n\t\t\t\tthis.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic markCustomWaveDirty(): void {\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic getCustomWave(lowestOctave: number): Float32Array {\r\n\t\tif (!this._waveIsReady || this._wave == null) {\r\n\t\t\tlet waveLength: number = Config.chipNoiseLength;\r\n\r\n\t\t\tif (this._wave == null || this._wave.length != waveLength + 1) {\r\n\t\t\t\tthis._wave = new Float32Array(waveLength + 1);\r\n\t\t\t}\r\n\t\t\tconst wave: Float32Array = this._wave;\r\n\r\n\t\t\tfor (let i: number = 0; i < waveLength; i++) {\r\n\t\t\t\twave[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst highestOctave: number = 14;\r\n\t\t\tconst falloffRatio: number = 0.25;\r\n\t\t\t// Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\r\n\t\t\tconst pitchTweak: number[] = [0, 1 / 7, Math.log(5 / 4) / Math.LN2, 3 / 7, Math.log(3 / 2) / Math.LN2, 5 / 7, 6 / 7];\r\n\t\t\tfunction controlPointToOctave(point: number): number {\r\n\t\t\t\treturn lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\r\n\t\t\t}\r\n\r\n\t\t\tlet combinedAmplitude: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\r\n\t\t\t\tconst value1: number = (i <= 0) ? 0 : this.spectrum[i - 1];\r\n\t\t\t\tconst value2: number = (i >= Config.spectrumControlPoints) ? this.spectrum[Config.spectrumControlPoints - 1] : this.spectrum[i];\r\n\t\t\t\tconst octave1: number = controlPointToOctave(i - 1);\r\n\t\t\t\tlet octave2: number = controlPointToOctave(i);\r\n\t\t\t\tif (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\r\n\t\t\t\tif (value1 == 0 && value2 == 0) continue;\r\n\r\n\t\t\t\tcombinedAmplitude += 0.02 * drawNoiseSpectrum(wave, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\r\n\t\t\t}\r\n\t\t\tif (this.spectrum[Config.spectrumControlPoints - 1] > 0) {\r\n\t\t\t\tcombinedAmplitude += 0.02 * drawNoiseSpectrum(wave, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, this.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\r\n\t\t\t}\r\n\r\n\t\t\tinverseRealFourierTransform(wave, waveLength);\r\n\t\t\tscaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\r\n\r\n\t\t\t// Duplicate the first sample at the end for easier wrap-around interpolation.\r\n\t\t\twave[waveLength] = wave[0];\r\n\r\n\t\t\tthis._waveIsReady = true;\r\n\t\t}\r\n\t\treturn this._wave;\r\n\t}\r\n}\r\n\r\nexport class HarmonicsWave {\r\n\tpublic harmonics: number[] = [];\r\n\tprivate _wave: Float32Array | null = null;\r\n\tprivate _waveIsReady: boolean = false;\r\n\r\n\tconstructor() {\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\tthis.harmonics[i] = 0;\r\n\t\t}\r\n\t\tthis.harmonics[0] = Config.harmonicsMax;\r\n\t\tthis.harmonics[3] = Config.harmonicsMax;\r\n\t\tthis.harmonics[6] = Config.harmonicsMax;\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic markCustomWaveDirty(): void {\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic getCustomWave(): Float32Array {\r\n\t\tif (!this._waveIsReady || this._wave == null) {\r\n\t\t\tlet waveLength: number = Config.harmonicsWavelength;\r\n\t\t\tconst retroWave: Float32Array = getDrumWave(0);\r\n\r\n\t\t\tif (this._wave == null || this._wave.length != waveLength + 1) {\r\n\t\t\t\tthis._wave = new Float32Array(waveLength + 1);\r\n\t\t\t}\r\n\t\t\tconst wave: Float32Array = this._wave;\r\n\r\n\t\t\tfor (let i: number = 0; i < waveLength; i++) {\r\n\t\t\t\twave[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst overallSlope: number = -0.25;\r\n\t\t\tlet combinedControlPointAmplitude: number = 1;\r\n\r\n\t\t\tfor (let harmonicIndex: number = 0; harmonicIndex < Config.harmonicsRendered; harmonicIndex++) {\r\n\t\t\t\tconst harmonicFreq: number = harmonicIndex + 1;\r\n\t\t\t\tlet controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? this.harmonics[harmonicIndex] : this.harmonics[Config.harmonicsControlPoints - 1];\r\n\t\t\t\tif (harmonicIndex >= Config.harmonicsControlPoints) {\r\n\t\t\t\t\tcontrolValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (Config.harmonicsRendered - Config.harmonicsControlPoints);\r\n\t\t\t\t}\r\n\t\t\t\tconst normalizedValue: number = controlValue / Config.harmonicsMax;\r\n\t\t\t\tlet amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\r\n\t\t\t\tif (harmonicIndex < Config.harmonicsControlPoints) {\r\n\t\t\t\t\tcombinedControlPointAmplitude += amplitude;\r\n\t\t\t\t}\r\n\t\t\t\tamplitude *= Math.pow(harmonicFreq, overallSlope);\r\n\r\n\t\t\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the LFSR\r\n\t\t\t\t// retro wave (effectively random) to avoid egregiously tall spikes.\r\n\t\t\t\tamplitude *= retroWave[harmonicIndex + 589];\r\n\r\n\t\t\t\twave[waveLength - harmonicFreq] = amplitude;\r\n\t\t\t}\r\n\r\n\t\t\tinverseRealFourierTransform(wave, waveLength);\r\n\r\n\t\t\t// Limit the maximum wave amplitude.\r\n\t\t\tconst mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\r\n\r\n\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\tlet cumulative: number = 0;\r\n\t\t\tlet wavePrev: number = 0;\r\n\t\t\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\twavePrev = wave[i] * mult;\r\n\t\t\t\twave[i] = cumulative;\r\n\t\t\t}\r\n\t\t\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\t\t\twave[waveLength] = wave[0];\r\n\r\n\t\t\tthis._waveIsReady = true;\r\n\t\t}\r\n\t\treturn this._wave;\r\n\t}\r\n}\r\n\r\nexport class Instrument {\r\n\tpublic type: InstrumentType = InstrumentType.chip;\r\n\tpublic preset: number = 0;\r\n\tpublic chipWave: number = 2;\r\n\tpublic chipNoise: number = 1;\r\n\tpublic filterCutoff: number = 12;\r\n\tpublic filterResonance: number = 0;\r\n\tpublic filterEnvelope: number = 1;\r\n\tpublic transition: number = 1;\r\n\tpublic vibrato: number = 0;\r\n\tpublic vibratoDepth: number = 0;\r\n\tpublic vibratoSpeed: number = 10;\r\n\tpublic vibratoDelay: number = 0;\r\n\tpublic vibratoType: number = 0;\r\n\tpublic interval: number = 0;\r\n\tpublic effects: number = 0;\r\n\tpublic chord: number = 1;\r\n\tpublic volume: number = 0;\r\n\tpublic pan: number = Config.panCenter;\r\n\tpublic panDelay: number = 10;\r\n\tpublic arpeggioSpeed: number = 12;\r\n\tpublic fastTwoNoteArp: boolean = false;\r\n\tpublic tieNoteTransition: boolean = false;\r\n\tpublic clicklessTransition: boolean = false;\r\n\tpublic detune: number = 0;\r\n\tpublic pulseWidth: number = Config.pulseWidthRange;\r\n\tpublic pulseEnvelope: number = 1;\r\n\tpublic algorithm: number = 0;\r\n\tpublic feedbackType: number = 0;\r\n\tpublic feedbackAmplitude: number = 0;\r\n\tpublic feedbackEnvelope: number = 1;\r\n\tpublic LFOtime: number = 0;\r\n\tpublic nextLFOtime: number = 0;\r\n\tpublic arpTime: number = 0;\r\n\tpublic customChipWave: Float64Array = new Float64Array(64);\r\n\tpublic customChipWaveIntegral: Float64Array = new Float64Array(65); // One extra element for wrap-around in chipSynth.\r\n\tpublic readonly operators: Operator[] = [];\r\n\tpublic readonly spectrumWave: SpectrumWave;\r\n\tpublic readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\r\n\tpublic readonly drumsetEnvelopes: number[] = [];\r\n\tpublic readonly drumsetSpectrumWaves: SpectrumWave[] = [];\r\n\tpublic modChannels: number[] = [];\r\n\tpublic modStatuses: ModStatus[] = [];\r\n\tpublic modInstruments: number[] = [];\r\n\tpublic modSettings: ModSetting[] = [];\r\n\r\n\tconstructor(isNoiseChannel: boolean, isModChannel: boolean) {\r\n\r\n\t\tif (isModChannel) {\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tthis.modChannels.push(0);\r\n\t\t\t\tthis.modStatuses.push(ModStatus.msNone);\r\n\t\t\t\tthis.modInstruments.push(0);\r\n\t\t\t\tthis.modSettings.push(ModSetting.mstNone);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.spectrumWave = new SpectrumWave(isNoiseChannel);\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\tthis.operators[i] = new Operator(i);\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\tthis.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\tthis.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < 64; i++) {\r\n\t\t\tthis.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\r\n\t\t}\r\n\r\n\t\tlet sum: number = 0.0;\r\n\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\tsum += this.customChipWave[i];\r\n\t\t}\r\n\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\tlet cumulative: number = 0;\r\n\t\tlet wavePrev: number = 0;\r\n\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\tcumulative += wavePrev;\r\n\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t}\r\n\r\n\t\t// 65th, last sample is for anti-aliasing\r\n\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\r\n\t}\r\n\r\n\tpublic setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n\t\t// Mod channels are forced to one type.\r\n\t\tif (isModChannel) type = InstrumentType.mod;\r\n\t\tthis.type = type;\r\n\t\tthis.preset = type;\r\n\t\tthis.volume = 0;\r\n\t\tthis.pan = Config.panCenter;\r\n\t\tthis.panDelay = 10;\r\n\t\tthis.arpeggioSpeed = 12;\r\n\t\tthis.detune = 0;\r\n\t\tthis.tieNoteTransition = false;\r\n\t\tthis.clicklessTransition = false;\r\n\t\tswitch (type) {\r\n\t\t\tcase InstrumentType.chip:\r\n\t\t\t\tthis.chipWave = 2;\r\n\t\t\t\tthis.filterCutoff = 6;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.customChipWave:\r\n\t\t\t\tthis.chipWave = 2;\r\n\t\t\t\tthis.filterCutoff = 6;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tfor (let i: number = 0; i < 64; i++) {\r\n\t\t\t\t\tthis.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += this.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.fm:\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = 1;\r\n\t\t\t\tthis.algorithm = 0;\r\n\t\t\t\tthis.feedbackType = 0;\r\n\t\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\t\tthis.feedbackEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\r\n\t\t\t\t\tthis.operators[i].reset(i);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.noise:\r\n\t\t\t\tthis.chipNoise = 1;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.spectrum:\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.spectrumWave.reset(isNoiseChannel);\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.drumset:\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\t\tthis.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\t\tif (this.drumsetSpectrumWaves[i] == undefined) {\r\n\t\t\t\t\t\tthis.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.drumsetSpectrumWaves[i].reset(isNoiseChannel);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.harmonics:\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.harmonicsWave.reset();\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.pwm:\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange;\r\n\t\t\t\tthis.pulseEnvelope = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.mod:\r\n\t\t\t\tthis.transition = 0;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.modChannels = [];\r\n\t\t\t\tthis.modStatuses = [];\r\n\t\t\t\tthis.modInstruments = [];\r\n\t\t\t\tthis.modSettings = [];\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tthis.modChannels.push(0);\r\n\t\t\t\t\tthis.modStatuses.push(ModStatus.msNone);\r\n\t\t\t\t\tthis.modInstruments.push(0);\r\n\t\t\t\t\tthis.modSettings.push(ModSetting.mstNone);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Unrecognized instrument type: \" + type);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toJsonObject(): Object {\r\n\t\tconst instrumentObject: any = {\r\n\t\t\t\"type\": Config.instrumentTypeNames[this.type],\r\n\t\t\t\"volume\": this.volume,\r\n\t\t\t\"pan\": (this.pan - Config.panCenter) * 100 / Config.panCenter,\r\n\t\t\t\"panDelay\": this.panDelay,\r\n\t\t\t\"arpeggioSpeed\": this.arpeggioSpeed,\r\n\t\t\t\"fastTwoNoteArp\": this.fastTwoNoteArp,\r\n\t\t\t\"tieNoteTransition\": this.tieNoteTransition,\r\n\t\t\t\"clicklessTransition\": this.clicklessTransition,\r\n\t\t\t\"vibrato\": this.vibrato,\r\n\t\t\t\"vibratoDepth\": this.vibratoDepth,\r\n\t\t\t\"vibratoDelay\": this.vibratoDelay,\r\n\t\t\t\"vibratoSpeed\": this.vibratoSpeed,\r\n\t\t\t\"vibratoType\": this.vibratoType,\r\n\t\t\t\"detune\": this.detune,\r\n\t\t\t\"effects\": Config.effectsNames[this.effects],\r\n\t\t};\r\n\r\n\t\tif (this.preset != this.type) {\r\n\t\t\tinstrumentObject[\"preset\"] = this.preset;\r\n\t\t}\r\n\r\n\t\tif (this.type != InstrumentType.drumset) {\r\n\t\t\tinstrumentObject[\"transition\"] = Config.transitions[this.transition].name;\r\n\t\t\tinstrumentObject[\"chord\"] = this.getChord().name;\r\n\t\t\tinstrumentObject[\"filterCutoffHz\"] = Math.round(Config.filterCutoffMaxHz * Math.pow(2.0, this.getFilterCutoffOctaves()));\r\n\t\t\tinstrumentObject[\"filterResonance\"] = Math.round(100 * this.filterResonance / (Config.filterResonanceRange - 1));\r\n\t\t\tinstrumentObject[\"filterEnvelope\"] = this.getFilterEnvelope().name;\r\n\t\t}\r\n\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tinstrumentObject[\"spectrum\"] = [];\r\n\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\tinstrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tinstrumentObject[\"drums\"] = [];\r\n\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\tconst spectrum: number[] = [];\r\n\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\tspectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\r\n\t\t\t\t}\r\n\t\t\t\tinstrumentObject[\"drums\"][j] = {\r\n\t\t\t\t\t\"filterEnvelope\": this.getDrumsetEnvelope(j).name,\r\n\t\t\t\t\t\"spectrum\": spectrum,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.chip) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.customChipWave) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"customChipWave\"] = new Float64Array(64);\r\n\t\t\tinstrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\r\n\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\tinstrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\r\n\t\t\t\t// Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\r\n\t\t\t\t//instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\r\n\t\t\t}\r\n\r\n\t\t\tinstrumentObject[\"customChipWaveIntegral\"][64] = 0;\r\n\t\t} else if (this.type == InstrumentType.pwm) {\r\n\t\t\tinstrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n\t\t\tinstrumentObject[\"pulseEnvelope\"] = Config.envelopes[this.pulseEnvelope].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"harmonics\"] = [];\r\n\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\tinstrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.fm) {\r\n\t\t\tconst operatorArray: Object[] = [];\r\n\t\t\tfor (const operator of this.operators) {\r\n\t\t\t\toperatorArray.push({\r\n\t\t\t\t\t\"frequency\": Config.operatorFrequencies[operator.frequency].name,\r\n\t\t\t\t\t\"amplitude\": operator.amplitude,\r\n\t\t\t\t\t\"envelope\": Config.envelopes[operator.envelope].name,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\r\n\t\t\tinstrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\r\n\t\t\tinstrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n\t\t\tinstrumentObject[\"feedbackEnvelope\"] = Config.envelopes[this.feedbackEnvelope].name;\r\n\t\t\tinstrumentObject[\"operators\"] = operatorArray;\r\n\t\t} else if (this.type == InstrumentType.mod) {\r\n\t\t\tinstrumentObject[\"modChannels\"] = [];\r\n\t\t\tinstrumentObject[\"modInstruments\"] = [];\r\n\t\t\tinstrumentObject[\"modSettings\"] = [];\r\n\t\t\tinstrumentObject[\"modStatuses\"] = [];\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tinstrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\r\n\t\t\t\tinstrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\r\n\t\t\t\tinstrumentObject[\"modSettings\"][mod] = this.modSettings[mod];\r\n\t\t\t\tinstrumentObject[\"modStatuses\"][mod] = this.modStatuses[mod];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type\");\r\n\t\t}\r\n\t\treturn instrumentObject;\r\n\t}\r\n\r\n\tpublic fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean): void {\r\n\t\tif (instrumentObject == undefined) instrumentObject = {};\r\n\r\n\t\tlet type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\r\n\t\tif (type.valueOf() == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\r\n\t\tthis.setTypeAndReset(type, isNoiseChannel, isModChannel);\r\n\r\n\t\tif (instrumentObject[\"preset\"] != undefined) {\r\n\t\t\tthis.preset = instrumentObject[\"preset\"] >>> 0;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"volume\"] != undefined) {\r\n\t\t\tthis.volume = clamp(-Config.volumeRange / 2, Config.volumeRange / 2, instrumentObject[\"volume\"] | 0);\r\n\t\t} else {\r\n\t\t\tthis.volume = 0;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"pan\"] != undefined) {\r\n\t\t\tthis.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\r\n\t\t} else {\r\n\t\t\tthis.pan = Config.panCenter;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"panDelay\"] != undefined) {\r\n\t\t\tthis.panDelay = (instrumentObject[\"panDelay\"] | 0);\r\n\t\t} else {\r\n\t\t\tthis.panDelay = 10;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"detune\"] != undefined) {\r\n\t\t\tthis.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.detune = 0;\r\n\t\t}\r\n\r\n\t\tconst oldTransitionNames: Dictionary<number> = { \"binary\": 0, \"sudden\": 1, \"smooth\": 2 };\r\n\t\tconst transitionObject = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so try that too.\r\n\t\tthis.transition = oldTransitionNames[transitionObject] != undefined ? oldTransitionNames[transitionObject] : Config.transitions.findIndex(transition => transition.name == transitionObject);\r\n\t\tif (this.transition == -1) this.transition = 1;\r\n\r\n\t\tthis.effects = Config.effectsNames.indexOf(instrumentObject[\"effects\"]);\r\n\t\tif (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\r\n\r\n\t\tif (instrumentObject[\"filterCutoffHz\"] != undefined) {\r\n\t\t\tthis.filterCutoff = clamp(0, Config.filterCutoffRange, Math.round((Config.filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / Config.filterCutoffMaxHz) / Math.LN2));\r\n\t\t} else {\r\n\t\t\tthis.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\r\n\t\t}\r\n\t\tif (instrumentObject[\"filterResonance\"] != undefined) {\r\n\t\t\tthis.filterResonance = clamp(0, Config.filterResonanceRange, Math.round((Config.filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\r\n\t\t} else {\r\n\t\t\tthis.filterResonance = 0;\r\n\t\t}\r\n\t\tthis.filterEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"filterEnvelope\"]);\r\n\t\tif (this.filterEnvelope == -1) this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\r\n\t\tif (instrumentObject[\"filter\"] != undefined) {\r\n\t\t\tconst legacyToCutoff: number[] = [20, 12, 6, 0, 16, 10, 4];\r\n\t\t\tconst legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n\t\t\tconst filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\t\t\tconst oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\r\n\t\t\tlet legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\r\n\t\t\tif (legacyFilter == -1) legacyFilter = 0;\r\n\t\t\tthis.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\tthis.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\tthis.filterResonance = 0;\r\n\t\t}\r\n\r\n\t\tconst legacyEffectNames: ReadonlyArray<string> = [\"none\", \"vibrato light\", \"vibrato delayed\", \"vibrato heavy\"];\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tthis.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n\t\t\tif (this.chipNoise == -1) this.chipNoise = 1;\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tif (instrumentObject[\"spectrum\"] != undefined) {\r\n\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\tthis.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tif (instrumentObject[\"drums\"] != undefined) {\r\n\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\tconst drum: any = instrumentObject[\"drums\"][j];\r\n\t\t\t\t\tif (drum == undefined) continue;\r\n\r\n\t\t\t\t\tif (drum[\"filterEnvelope\"] != undefined) {\r\n\t\t\t\t\t\tthis.drumsetEnvelopes[j] = Config.envelopes.findIndex(envelope => envelope.name == drum[\"filterEnvelope\"]);\r\n\t\t\t\t\t\tif (this.drumsetEnvelopes[j] == -1) this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (drum[\"spectrum\"] != undefined) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tthis.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tif (instrumentObject[\"harmonics\"] != undefined) {\r\n\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\tthis.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\t\t} else if (this.type == InstrumentType.pwm) {\r\n\t\t\tif (instrumentObject[\"pulseWidth\"] != undefined) {\r\n\t\t\t\tthis.pulseWidth = clamp(0, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\r\n\t\t\t} else {\r\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"pulseEnvelope\"] != undefined) {\r\n\t\t\t\tthis.pulseEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"pulseEnvelope\"]);\r\n\t\t\t\tif (this.pulseEnvelope == -1) this.pulseEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\t\t} else if (this.type == InstrumentType.chip) {\r\n\t\t\tconst legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\r\n\t\t\tthis.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n\t\t\tif (this.chipWave == -1) this.chipWave = 1;\r\n\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t} else if (instrumentObject[\"chorus\"] != undefined) {\r\n\t\t\t\tconst legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n\t\t\t\tthis.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t\t// The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n\t\t\tif (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n\t\t\t\tthis.interval = 2;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.fm) {\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 3;\r\n\r\n\t\t\tthis.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\r\n\t\t\tif (this.algorithm == -1) this.algorithm = 0;\r\n\t\t\tthis.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\r\n\t\t\tif (this.feedbackType == -1) this.feedbackType = 0;\r\n\t\t\tif (instrumentObject[\"feedbackAmplitude\"] != undefined) {\r\n\t\t\t\tthis.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst legacyEnvelopeNames: Dictionary<number> = { \"pluck 1\": 6, \"pluck 2\": 7, \"pluck 3\": 8 };\r\n\t\t\tthis.feedbackEnvelope = legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] != undefined ? legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"feedbackEnvelope\"]);\r\n\t\t\tif (this.feedbackEnvelope == -1) this.feedbackEnvelope = 0;\r\n\r\n\t\t\tfor (let j: number = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\tconst operator: Operator = this.operators[j];\r\n\t\t\t\tlet operatorObject: any = undefined;\r\n\t\t\t\tif (instrumentObject[\"operators\"]) operatorObject = instrumentObject[\"operators\"][j];\r\n\t\t\t\tif (operatorObject == undefined) operatorObject = {};\r\n\r\n\t\t\t\toperator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\r\n\t\t\t\tif (operator.frequency == -1) operator.frequency = 0;\r\n\t\t\t\tif (operatorObject[\"amplitude\"] != undefined) {\r\n\t\t\t\t\toperator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\r\n\t\t\t\t} else {\r\n\t\t\t\t\toperator.amplitude = 0;\r\n\t\t\t\t}\r\n\t\t\t\toperator.envelope = legacyEnvelopeNames[operatorObject[\"envelope\"]] != undefined ? legacyEnvelopeNames[operatorObject[\"envelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == operatorObject[\"envelope\"]);\r\n\t\t\t\tif (operator.envelope == -1) operator.envelope = 0;\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.customChipWave) {\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t} else if (instrumentObject[\"chorus\"] != undefined) {\r\n\t\t\t\tconst legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n\t\t\t\tthis.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t\t// The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n\t\t\tif (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n\t\t\t\tthis.interval = 2;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"customChipWave\"]) {\r\n\r\n\t\t\t\tfor (let i: number = 0; i < 64; i++) {\r\n\t\t\t\t\tthis.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += this.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 65th, last sample is for anti-aliasing\r\n\t\t\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\t\t\t}\r\n\r\n\t\t} else if (this.type == InstrumentType.mod) {\r\n\t\t\tif (instrumentObject[\"modChannels\"] != undefined) {\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tthis.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\r\n\t\t\t\t\tthis.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\r\n\t\t\t\t\tthis.modSettings[mod] = instrumentObject[\"modSettings\"][mod];\r\n\t\t\t\t\tthis.modStatuses[mod] = instrumentObject[\"modStatuses\"][mod];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type.\");\r\n\t\t}\r\n\r\n\t\tif (this.type != InstrumentType.mod) {\r\n\t\t\t// Arpeggio speed\r\n\t\t\tif (this.chord == 2 && instrumentObject[\"arpeggioSpeed\"] != undefined) {\r\n\t\t\t\tthis.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\r\n\t\t\t\tthis.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fastTwoNoteArp = useFastTwoNoteArp;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"tieNoteTransition\"] != undefined) {\r\n\t\t\t\tthis.tieNoteTransition = instrumentObject[\"tieNoteTransition\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.tieNoteTransition = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"clicklessTransition\"] != undefined) {\r\n\t\t\t\tthis.clicklessTransition = instrumentObject[\"clicklessTransition\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.clicklessTransition = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// public static frequencyFromPitch(pitch: number, _centerFeq: number, _edo: number): number {\r\n\tpublic static frequencyFromPitch(pitch: number): number {\r\n\t\t// the pitch relative to 1, then offset by half number of octaves, so that center frequency is in the center.\r\n\t\t// return _centerFeq * Math.pow(2.0, pitch / _edo - Math.round(Config.pitchOctaves/2) );\r\n\t\treturn Config.centerFrequency * Math.pow(2.0, pitch / Config.pitchesPerOctave - Math.round(Config.pitchOctaves/2) );\r\n\t}\r\n\r\n\tpublic static drumsetIndexReferenceDelta(index: number): number { // this pretends that the song is 440hz 12edo for now\r\n\t\t// 44100 is common sampling frequency, 6 is the drum spacing interval needed to span from the spectrum Base Pitch to the max pitch (I think at least)\r\n\t\t// return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * (Config.pitchOctaves * _edo - Config.spectrumBasePitch) / Config.drumCount, 440, 12) / 44100;\r\n\t\t// return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * (8 * 12 - Config.spectrumBasePitch) / Config.drumCount, 440, 12) / 44100;\r\n\t\treturn Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * (8 * 12 - Config.spectrumBasePitch) / Config.drumCount) / 44100;\r\n\t}\r\n\r\n\tprivate static _drumsetIndexToSpectrumOctave(index: number) { // this pretends that the song is 440hz 12edo for now\r\n\t\t// 15 + (a negative (drumsetIndexReferenceDelta is less than 2^0)), I have no idea what 15 means here.\r\n\t\treturn 15 + Math.log(Instrument.drumsetIndexReferenceDelta(index)) / Math.LN2;\r\n\t}\r\n\r\n\tpublic warmUp(): void {\r\n\t\tthis.LFOtime = 0;\r\n\t\tthis.nextLFOtime = 0;\r\n\t\tthis.arpTime = 0;\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tgetDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tthis.harmonicsWave.getCustomWave();\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tthis.spectrumWave.getCustomWave(8);\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\tthis.drumsetSpectrumWaves[i].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(i));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getDrumWave(): Float32Array {\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\treturn getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\treturn this.spectrumWave.getCustomWave(8);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unhandled instrument type in getDrumWave\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getDrumsetWave(pitch: number): Float32Array {\r\n\t\tif (this.type == InstrumentType.drumset) {\r\n\t\t\treturn this.drumsetSpectrumWaves[pitch].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(pitch));\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unhandled instrument type in getDrumWave\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getTransition(): Transition {\r\n\t\treturn this.type == InstrumentType.drumset ? Config.transitions.dictionary[\"hard fade\"] :\r\n\t\t\tthis.type == InstrumentType.mod ? Config.transitions.dictionary[\"seamless\"] : Config.transitions[this.transition];\r\n\t}\r\n\tpublic getChord(): Chord {\r\n\t\treturn this.type == InstrumentType.drumset ? Config.chords.dictionary[\"harmony\"] : Config.chords[this.chord];\r\n\t}\r\n\tpublic getFilterCutoffOctaves(): number {\r\n\t\treturn this.type == InstrumentType.drumset ? 0 : (this.filterCutoff - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t}\r\n\tpublic getFilterIsFirstOrder(): boolean {\r\n\t\treturn this.type == InstrumentType.drumset ? false : this.filterResonance == 0;\r\n\t}\r\n\tpublic getFilterResonance(): number {\r\n\t\treturn this.type == InstrumentType.drumset ? 1 : this.filterResonance;\r\n\t}\r\n\tpublic getFilterEnvelope(): Envelope {\r\n\t\tif (this.type == InstrumentType.drumset) throw new Error(\"Can't getFilterEnvelope() for drumset.\");\r\n\t\treturn Config.envelopes[this.filterEnvelope];\r\n\t}\r\n\tpublic getDrumsetEnvelope(pitch: number): Envelope {\r\n\t\tif (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\r\n\t\treturn Config.envelopes[this.drumsetEnvelopes[pitch]];\r\n\t}\r\n}\r\n\r\nexport enum ModStatus {\r\n\tmsForPitch = 0,\r\n\tmsForNoise = 1,\r\n\tmsForSong = 2,\r\n\tmsNone = 3,\r\n}\r\n\r\nexport enum ModSetting {\r\n\tmstNone = 0,\r\n\tmstSongVolume = 1,\r\n\tmstTempo = 2,\r\n\tmstReverb = 3,\r\n\tmstNextBar = 4,\r\n\tmstInsVolume = 5,\r\n\tmstPan = 6,\r\n\tmstFilterCut = 7,\r\n\tmstFilterPeak = 8,\r\n\tmstFMSlider1 = 9,\r\n\tmstFMSlider2 = 10,\r\n\tmstFMSlider3 = 11,\r\n\tmstFMSlider4 = 12,\r\n\tmstFMFeedback = 13,\r\n\tmstPulseWidth = 14,\r\n\tmstDetune = 15,\r\n\tmstVibratoDepth = 16,\r\n\tmstSongDetune = 17,\r\n\tmstVibratoSpeed = 18,\r\n\tmstVibratoDelay = 19,\r\n\tmstArpeggioSpeed = 20,\r\n\tmstPanDelay = 21,\r\n\tmstResetArpeggio = 22,\r\n\tmstMaxValue = 23,\r\n}\r\n\r\nexport class Channel {\r\n\tpublic octave: number = 0;\r\n\tpublic readonly instruments: Instrument[] = [];\r\n\tpublic readonly patterns: Pattern[] = [];\r\n\tpublic readonly bars: number[] = [];\r\n\tpublic muted: boolean = false;\r\n\tpublic name: string = \"\";\r\n}\r\n\r\nexport class Song {\r\n\tprivate static readonly _format: string = \"BeepBox\";\r\n\tprivate static readonly _oldestBeepboxVersion: number = 2;\r\n\tprivate static readonly _latestBeepboxVersion: number = 8;\r\n\tprivate static readonly _oldestJummBoxVersion: number = 1;\r\n\tprivate static readonly _latestJummBoxVersion: number = 4;\r\n\t// private static readonly _oldestMicroBoxVersion: number = 0;\r\n\t// private static readonly _latestMicroBoxVersion: number = 0;\r\n\t// One-character variant detection at the start of URL to distinguish variants such as JummBox.\r\n\tprivate static readonly _variant = 0x6A; // \"j\" ~ jummbox\r\n\t// private static readonly _variant = 0x6D; // \"m\" ~ microbox\r\n\r\n\tpublic title: string;\r\n\tpublic scale: number;\r\n\t// public key: number; // this is frequency offset for different edos (TODO)\r\n\tpublic key: number;\r\n\tpublic tempo: number;\r\n\tpublic reverb: number;\r\n\tpublic centerFrequency: number;\r\n\tpublic edo: number;\r\n\tpublic maxPitch: number;\r\n\tpublic beatsPerBar: number;\r\n\tpublic barCount: number;\r\n\tpublic patternsPerChannel: number;\r\n\tpublic rhythm: number;\r\n\tpublic instrumentsPerChannel: number;\r\n\tpublic loopStart: number;\r\n\tpublic loopLength: number;\r\n\tpublic pitchChannelCount: number;\r\n\tpublic noiseChannelCount: number;\r\n\tpublic modChannelCount: number;\r\n\tpublic readonly channels: Channel[] = [];\r\n\tpublic limitDecay: number = 4.0;\r\n\tpublic limitRise: number = 4000.0;\r\n\tpublic compressionThreshold: number = 1.0;\r\n\tpublic limitThreshold: number = 1.0;\r\n\tpublic compressionRatio: number = 1.0;\r\n\tpublic limitRatio: number = 1.0;\r\n\tpublic masterGain: number = 1.0;\r\n\tpublic inVolumeCap: number = 0.0;\r\n\tpublic outVolumeCap: number = 0.0;\r\n\r\n\t// Maximum value possible for the mod (total number of possible positions)\r\n\tpublic mstMaxVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n\t\t[ModSetting.mstNone, 6],\r\n\t\t[ModSetting.mstSongVolume, 100],\r\n\t\t[ModSetting.mstTempo, Config.tempoMax - Config.tempoMin],\r\n\t\t[ModSetting.mstReverb, Config.reverbRange - 1],\r\n\t\t[ModSetting.mstNextBar, 1],\r\n\t\t[ModSetting.mstInsVolume, Config.volumeRange],\r\n\t\t[ModSetting.mstPan, Config.panMax],\r\n\t\t[ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n\t\t[ModSetting.mstFilterPeak, Config.filterResonanceRange - 1],\r\n\t\t[ModSetting.mstFMSlider1, 15],\r\n\t\t[ModSetting.mstFMSlider2, 15],\r\n\t\t[ModSetting.mstFMSlider3, 15],\r\n\t\t[ModSetting.mstFMSlider4, 15],\r\n\t\t[ModSetting.mstFMFeedback, 15],\r\n\t\t[ModSetting.mstPulseWidth, Config.pulseWidthRange],\r\n\t\t[ModSetting.mstDetune, Config.detuneMax - Config.detuneMin],\r\n\t\t[ModSetting.mstVibratoDepth, 50],\r\n\t\t[ModSetting.mstSongDetune, Config.songDetuneMax - Config.songDetuneMin],\r\n\t\t[ModSetting.mstVibratoSpeed, 30],\r\n\t\t[ModSetting.mstVibratoDelay, 50],\r\n\t\t[ModSetting.mstArpeggioSpeed, 50],\r\n\t\t[ModSetting.mstPanDelay, 20],\r\n\t\t[ModSetting.mstResetArpeggio, 1],\r\n\t\t[ModSetting.mstMaxValue, 6],\r\n\t]\r\n\t);\r\n\r\n\t// When creating a new note, this is the value to set a mod note to (generally the most \"neutral\" value possible)\r\n\tpublic mstNewNoteVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n\t\t[ModSetting.mstNone, 6],\r\n\t\t[ModSetting.mstSongVolume, 100],\r\n\t\t[ModSetting.mstTempo, Math.ceil((Config.tempoMax - Config.tempoMin) / 2)],\r\n\t\t[ModSetting.mstReverb, 0],\r\n\t\t[ModSetting.mstNextBar, 1],\r\n\t\t[ModSetting.mstInsVolume, Math.ceil(Config.volumeRange / 2)],\r\n\t\t[ModSetting.mstPan, Math.ceil(Config.panMax / 2)],\r\n\t\t[ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n\t\t[ModSetting.mstFilterPeak, 0],\r\n\t\t[ModSetting.mstFMSlider1, 15],\r\n\t\t[ModSetting.mstFMSlider2, 15],\r\n\t\t[ModSetting.mstFMSlider3, 15],\r\n\t\t[ModSetting.mstFMSlider4, 15],\r\n\t\t[ModSetting.mstFMFeedback, 15],\r\n\t\t[ModSetting.mstPulseWidth, Math.ceil(Config.pulseWidthRange)],\r\n\t\t[ModSetting.mstDetune, Math.ceil((Config.detuneMax - Config.detuneMin) / 2)],\r\n\t\t[ModSetting.mstVibratoDepth, 0],\r\n\t\t[ModSetting.mstSongDetune, Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2)],\r\n\t\t[ModSetting.mstVibratoSpeed, 0],\r\n\t\t[ModSetting.mstVibratoDelay, 0],\r\n\t\t[ModSetting.mstArpeggioSpeed, 10],\r\n\t\t[ModSetting.mstPanDelay, 10],\r\n\t\t[ModSetting.mstResetArpeggio, 1],\r\n\t\t[ModSetting.mstMaxValue, 6],\r\n\t])\r\n\r\n\tconstructor(string?: string) {\r\n\t\tif (string != undefined) {\r\n\t\t\tthis.fromBase64String(string);\r\n\t\t} else {\r\n\t\t\tthis.initToDefault(true);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic modValueToReal(value: number, setting: ModSetting): number {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\t\tvalue += Config.tempoMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\t\tvalue -= Config.volumeRange / 2.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tvalue += Config.detuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tvalue += Config.songDetuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tpublic isSettingForSong(setting: ModSetting): boolean {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\t\treturn true;\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic realToModValue(value: number, setting: ModSetting): number {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\t\tvalue -= Config.tempoMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\t\tvalue += Config.volumeRange / 2.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tvalue -= Config.detuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tvalue -= Config.songDetuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\r\n\tpublic getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n\t\tif (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\t// Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n\t\t\tmodCount = Config.modCount - modCount - 1;\r\n\r\n\t\t\tlet cap: number | undefined = this.mstNewNoteVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n\r\n\t\t\t// For tempo, actually use user defined tempo\r\n\t\t\tif (this.channels[modChannel].instruments[modInstrument].modSettings[modCount] == ModSetting.mstTempo) {\r\n\t\t\t\tcap = this.realToModValue(this.tempo, ModSetting.mstTempo);\r\n\t\t\t}\r\n\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n\t\tif (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\t// Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n\t\t\tmodCount = Config.modCount - modCount - 1;\r\n\r\n\t\t\tlet cap: number | undefined = this.mstMaxVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getVolumeCapForSetting = (isMod: boolean, modSetting: ModSetting): number => {\r\n\t\tif (!isMod)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\tlet cap: number | undefined = this.mstMaxVols.get(modSetting);\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getChannelCount(): number {\r\n\t\treturn this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\r\n\t}\r\n\r\n\tpublic getChannelIsNoise(channel: number): boolean {\r\n\t\treturn (channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount);\r\n\t}\r\n\r\n\tpublic getChannelIsMod(channel: number): boolean {\r\n\t\treturn (channel >= this.pitchChannelCount + this.noiseChannelCount);\r\n\t}\r\n\r\n\tpublic initToDefault(andResetChannels: boolean = true): void {\r\n\t\tthis.scale = 0;\r\n\t\tthis.key = 0;\r\n\t\tthis.loopStart = 0;\r\n\t\tthis.loopLength = 4;\r\n\t\tthis.tempo = 100;\r\n\t\tthis.reverb = 0;\r\n\t\tthis.centerFrequency = 425.85465642512778279; // very specific :}\r\n\t\tthis.edo = 12;\r\n\t\tthis.maxPitch = this.edo * Config.pitchOctaves;\r\n\t\tthis.beatsPerBar = 6;\r\n\t\t// this.beatsPerBar = 8;\r\n\t\tthis.barCount = 16;\r\n\t\tthis.patternsPerChannel = 16;\r\n\t\tthis.rhythm = 3; // div4 standard\r\n\t\tthis.instrumentsPerChannel = 2;\r\n\t\t// this.patternsPerChannel = 8;\r\n\t\t// this.rhythm = 1;\r\n\t\t// this.instrumentsPerChannel = 1;\r\n\r\n\t\tthis.title = \"Unnamed\";\r\n\t\tdocument.title = EditorConfig.versionDisplayName;\r\n\r\n\t\tif (andResetChannels) {\r\n\t\t\tthis.pitchChannelCount = 4;\r\n\t\t\tthis.noiseChannelCount = 2;\r\n\t\t\tthis.modChannelCount = 1;\r\n\t\t\tfor (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\tif (this.channels.length <= channelIndex) {\r\n\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t}\r\n\t\t\t\tconst channel: Channel = this.channels[channelIndex];\r\n\t\t\t\tchannel.octave = Math.max(6 - 2*channelIndex, 0); // [6, 4, 2, 0, 0, ...]; Descending octaves with drums at zero in last channel and onward.\r\n\r\n\t\t\t\tfor (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\tif (channel.patterns.length <= pattern) {\r\n\t\t\t\t\t\tchannel.patterns[pattern] = new Pattern();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchannel.patterns[pattern].reset();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\r\n\r\n\t\t\t\tconst isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\tconst isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\tfor (let instrument = 0; instrument < this.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tif (channel.instruments.length <= instrument) {\r\n\t\t\t\t\t\tchannel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchannel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\r\n\t\t\t\t}\r\n\t\t\t\tchannel.instruments.length = this.instrumentsPerChannel;\r\n\r\n\t\t\t\tfor (let bar = 0; bar < this.barCount; bar++) {\r\n\t\t\t\t\tchannel.bars[bar] = bar < 4 ? 1 : 0;\r\n\t\t\t\t}\r\n\t\t\t\tchannel.bars.length = this.barCount;\r\n\t\t\t}\r\n\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toBase64String(): string {\r\n\t\tlet bits: BitFieldWriter;\r\n\t\tlet buffer: number[] = [];\r\n\r\n\t\tbuffer.push(Song._variant); // TODO: Replace _variant Jummbox with variant Microbox\r\n\t\tbuffer.push(base64IntToCharCode[Song._latestJummBoxVersion]);\r\n\t\t// buffer.push(base64IntToCharCode[Song._latestMicroBoxVersion]);\r\n\r\n\t\tbuffer.push(SongTagCode.songTitle);\r\n\r\n\t\t// Length of the song name string\r\n\t\tvar encodedSongTitle: string = encodeURIComponent(this.title);\r\n\t\tbuffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\r\n\r\n\t\t// Actual encoded string follows\r\n\t\tfor (let i: number = 0; i < encodedSongTitle.length; i++) {\r\n\t\t\tbuffer.push(encodedSongTitle.charCodeAt(i));\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\r\n\t\tbuffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n\t\t// buffer.push(SongTagCode.key, base64IntToCharCode[this.key]); // key relic (TODO)\r\n\t\tbuffer.push(SongTagCode.key, base64IntToCharCode[0]);\r\n\t\tbuffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\r\n\t\tbuffer.push(SongTagCode.reverb, base64IntToCharCode[this.reverb]);\r\n\t\tbuffer.push(SongTagCode.edo, base64IntToCharCode[this.edo]);\r\n\t\tbuffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n\t\tbuffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.instrumentCount, base64IntToCharCode[this.instrumentsPerChannel - 1]);\r\n\t\tbuffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\r\n\r\n\t\t// Push limiter settings, but only if they aren't the default!\r\n\t\tbuffer.push(SongTagCode.limiterSettings);\r\n\t\tif (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\r\n\t\t\tbuffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbuffer.push(base64IntToCharCode[0x3f]); // Not using limiter\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelNames);\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t// Length of the channel name string\r\n\t\t\tvar encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\r\n\t\t\tbuffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\r\n\r\n\t\t\t// Actual encoded string follows\r\n\t\t\tfor (let i: number = 0; i < encodedChannelName.length; i++) {\r\n\t\t\t\tbuffer.push(encodedChannelName.charCodeAt(i));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelOctave);\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tbuffer.push(base64IntToCharCode[this.channels[channel].octave]);\r\n\t\t}\r\n\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\tbuffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\r\n\t\t\t\tbuffer.push(SongTagCode.panning, base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\r\n\t\t\t\tbuffer.push(base64IntToCharCode[instrument.panDelay]); // Piggybacks after panning to reduce song tag code usage :P\r\n\t\t\t\tbuffer.push(SongTagCode.detune, base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3f]);\r\n\t\t\t\tbuffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\r\n\t\t\t\tbuffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects]);\r\n\r\n\r\n\t\t\t\tif (instrument.type != InstrumentType.drumset) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t// Transition info follows transition song tag\r\n\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.tieNoteTransition]);\r\n\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterCutoff, base64IntToCharCode[instrument.filterCutoff]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterResonance, base64IntToCharCode[instrument.filterResonance]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterEnvelope, base64IntToCharCode[instrument.filterEnvelope]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.chord, base64IntToCharCode[instrument.chord]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackEnvelope, base64IntToCharCode[instrument.feedbackEnvelope]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorFrequencies);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorAmplitudes);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorEnvelopes);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].envelope]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.customChipWave);\r\n\t\t\t\t\t// Push custom wave values\r\n\t\t\t\t\tfor (let j: number = 0; j < 64; j++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.spectrum) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.spectrum);\r\n\t\t\t\t\tconst spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\tspectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspectrumBits.encodeBase64(buffer);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterEnvelope);\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.spectrum);\r\n\t\t\t\t\tconst spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tspectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspectrumBits.encodeBase64(buffer);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.harmonics);\r\n\t\t\t\t\tconst harmonicsBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\t\tharmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tharmonicsBits.encodeBase64(buffer);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth], base64IntToCharCode[instrument.pulseEnvelope]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\t\t\t// Handled down below. Could be moved, but meh.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow new Error(\"Unknown instrument type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.bars);\r\n\t\tbits = new BitFieldWriter();\r\n\t\tlet neededBits: number = 0;\r\n\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) for (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\tbits.write(neededBits, this.channels[channel].bars[i]);\r\n\t\t}\r\n\t\tbits.encodeBase64(buffer);\r\n\r\n\t\tbuffer.push(SongTagCode.patterns);\r\n\t\tbits = new BitFieldWriter();\r\n\t\tconst shapeBits: BitFieldWriter = new BitFieldWriter();\r\n\t\tlet neededInstrumentBits: number = 0;\r\n\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\r\n\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n\t\t\t// Some info about modulator settings immediately follows in mod channels.\r\n\t\t\tif (isModChannel) {\r\n\t\t\t\tfor (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n\t\t\t\t\tlet instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\tconst modStatus: ModStatus = instrument.modStatuses[mod];\r\n\t\t\t\t\t\tconst modChannel: number = instrument.modChannels[mod];\r\n\t\t\t\t\t\tconst modInstrument: number = instrument.modInstruments[mod];\r\n\t\t\t\t\t\tconst modSetting: number = instrument.modSettings[mod];\r\n\r\n\t\t\t\t\t\tbits.write(2, modStatus);\r\n\r\n\t\t\t\t\t\t// Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n\t\t\t\t\t\tif (modStatus == ModStatus.msForPitch || modStatus == ModStatus.msForNoise) {\r\n\t\t\t\t\t\t\tbits.write(8, modChannel);\r\n\t\t\t\t\t\t\tbits.write(neededInstrumentBits, modInstrument);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Mod setting is only used if the status isn't \"none\".\r\n\t\t\t\t\t\tif (modStatus != ModStatus.msNone) {\r\n\t\t\t\t\t\t\tbits.write(6, modSetting);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * this.edo;\r\n\t\t\t// let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : this.edo) + octaveOffset;\r\n\t\t\tconst octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * Config.pitchesPerOctave;\r\n\t\t\tlet lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : Config.pitchesPerOctave) + octaveOffset;\r\n\t\t\tconst recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n\t\t\tconst recentShapes: any[] = [];\r\n\r\n\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t}\r\n\t\t\tfor (const pattern of this.channels[channel].patterns) {\r\n\t\t\t\tbits.write(neededInstrumentBits, pattern.instrument);\r\n\r\n\t\t\t\tif (pattern.notes.length > 0) {\r\n\t\t\t\t\tbits.write(1, 1);\r\n\r\n\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\tfor (const note of pattern.notes) {\r\n\r\n\t\t\t\t\t\t// For mod channels, a negative offset may be necessary.\r\n\t\t\t\t\t\tif (note.start < curPart && isModChannel) {\r\n\t\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\t\tbits.write(1, 1); // negative offset\r\n\t\t\t\t\t\t\tbits.writePartDuration(curPart - note.start);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (note.start > curPart) {\r\n\t\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\t\tif (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\r\n\t\t\t\t\t\t\tbits.writePartDuration(note.start - curPart);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tshapeBits.clear();\r\n\r\n\t\t\t\t\t\t// Old format was:\r\n\t\t\t\t\t\t// 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n\t\t\t\t\t\t// New format is:\r\n\t\t\t\t\t\t//\t  0: 1 pitch\r\n\t\t\t\t\t\t// 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n\t\t\t\t\t\tif (note.pitches.length == 1) {\r\n\t\t\t\t\t\t\tshapeBits.write(1, 0);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tshapeBits.write(1, 1);\r\n\t\t\t\t\t\t\tshapeBits.write(3, note.pitches.length - 2);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tshapeBits.writePinCount(note.pins.length - 1);\r\n\r\n\t\t\t\t\t\tif (!isModChannel) {\r\n\t\t\t\t\t\t\tshapeBits.write(3, note.pins[0].volume); // volume\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tshapeBits.write(9, note.pins[0].volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet shapePart: number = 0;\r\n\t\t\t\t\t\tlet startPitch: number = note.pitches[0];\r\n\t\t\t\t\t\tlet currentPitch: number = startPitch;\r\n\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\tfor (let i: number = 1; i < note.pins.length; i++) {\r\n\t\t\t\t\t\t\tconst pin: NotePin = note.pins[i];\r\n\t\t\t\t\t\t\tconst nextPitch: number = startPitch + pin.interval;\r\n\t\t\t\t\t\t\tif (currentPitch != nextPitch) {\r\n\t\t\t\t\t\t\t\tshapeBits.write(1, 1);\r\n\t\t\t\t\t\t\t\tpitchBends.push(nextPitch);\r\n\t\t\t\t\t\t\t\tcurrentPitch = nextPitch;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tshapeBits.write(1, 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tshapeBits.writePartDuration(pin.time - shapePart);\r\n\t\t\t\t\t\t\tshapePart = pin.time;\r\n\r\n\t\t\t\t\t\t\tif (!isModChannel) {\r\n\t\t\t\t\t\t\t\tshapeBits.write(3, pin.volume); // volume\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tshapeBits.write(9, pin.volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\r\n\t\t\t\t\t\tconst shapeIndex: number = recentShapes.indexOf(shapeString);\r\n\t\t\t\t\t\tif (shapeIndex == -1) {\r\n\t\t\t\t\t\t\tbits.write(2, 1); // new shape\r\n\t\t\t\t\t\t\tbits.concat(shapeBits);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbits.write(1, 1); // old shape\r\n\t\t\t\t\t\t\tbits.writeLongTail(0, 0, shapeIndex);\r\n\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trecentShapes.unshift(shapeString);\r\n\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\r\n\t\t\t\t\t\tconst allPitches: number[] = note.pitches.concat(pitchBends);\r\n\t\t\t\t\t\tfor (let i: number = 0; i < allPitches.length; i++) {\r\n\t\t\t\t\t\t\tconst pitch: number = allPitches[i];\r\n\t\t\t\t\t\t\tconst pitchIndex: number = recentPitches.indexOf(pitch);\r\n\t\t\t\t\t\t\tif (pitchIndex == -1) {\r\n\t\t\t\t\t\t\t\tlet interval: number = 0;\r\n\t\t\t\t\t\t\t\tlet pitchIter: number = lastPitch;\r\n\t\t\t\t\t\t\t\tif (pitchIter < pitch) {\r\n\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\tpitchIter++;\r\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\tpitchIter--;\r\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t\t\t\t\tbits.writePitchInterval(interval);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbits.write(1, 1);\r\n\t\t\t\t\t\t\t\tbits.write(4, pitchIndex);\r\n\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\tif (recentPitches.length > 16) recentPitches.pop();\r\n\r\n\t\t\t\t\t\t\tif (i == note.pitches.length - 1) {\r\n\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurPart = note.end;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\tif (isModChannel) bits.write(1, 0); // positive offset\r\n\t\t\t\t\t\tbits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet stringLength: number = bits.lengthBase64();\r\n\t\tlet digits: number[] = [];\r\n\t\twhile (stringLength > 0) {\r\n\t\t\tdigits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n\t\t\tstringLength = stringLength >> 6;\r\n\t\t}\r\n\t\tbuffer.push(base64IntToCharCode[digits.length]);\r\n\t\tArray.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n\t\tbits.encodeBase64(buffer);\r\n\r\n\t\tconst maxApplyArgs: number = 64000;\r\n\t\tif (buffer.length < maxApplyArgs) {\r\n\t\t\t// Note: Function.apply may break for long argument lists.\r\n\t\t\treturn String.fromCharCode.apply(null, buffer);\r\n\t\t} else {\r\n\t\t\tlet result: string = \"\";\r\n\t\t\tfor (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\r\n\t\t\t\tresult += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic fromBase64String(compressed: string): void {\r\n\t\tif (compressed == null || compressed == \"\") {\r\n\t\t\tthis.initToDefault(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet charIndex: number = 0;\r\n\t\t// skip whitespace.\r\n\t\twhile (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n\t\t// skip hash mark.\r\n\t\tif (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n\t\t// if it starts with curly brace, treat it as JSON.\r\n\t\tif (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n\t\t\tthis.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst variantTest: number = compressed.charCodeAt(charIndex);\r\n\t\tvar variant: string = \"beepbox\";\r\n\r\n\t\t// Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n\t\tif (variantTest == 0x6A) { //\"j\"\r\n\t\t\tvariant = \"jummbox\";\r\n\t\t\tcharIndex++;\r\n\t\t}\r\n\t\t// if (variantTest == 0x6D) { //\"m\"\r\n\t\t// \tvariant = \"microbox\";\r\n\t\t// \tcharIndex++;\r\n\t\t// }\r\n\r\n\t\tconst version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\tif (variant == \"beepbox\" && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n\t\tif (variant == \"jummbox\" && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\r\n\t\t// if (variant == \"microbox\" && (version == -1 || version > Song._latestMicroBoxVersion || version < Song._oldestMicroBoxVersion)) return;\r\n\r\n\r\n\t\tconst beforeTwo: boolean = version < 2;\r\n\t\tconst beforeThree: boolean = version < 3;\r\n\t\tconst beforeFour: boolean = version < 4;\r\n\t\tconst beforeFive: boolean = version < 5;\r\n\t\tconst beforeSix: boolean = version < 6;\r\n\t\tconst beforeSeven: boolean = version < 7;\r\n\t\tconst beforeEight: boolean = version < 8;\r\n\t\tthis.initToDefault(variant == \"beepbox\" && beforeSix);\r\n\r\n\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t// Originally, the only instrument transition was \"seamless\" and the only drum wave was \"retro\".\r\n\t\t\tfor (const channel of this.channels) channel.instruments[0].transition = 0;\r\n\t\t\tthis.channels[3].instruments[0].chipNoise = 0;\r\n\t\t}\r\n\r\n\t\tlet instrumentChannelIterator: number = 0;\r\n\t\tlet instrumentIndexIterator: number = -1;\r\n\t\tlet toSetOctaves: number[] = [];\r\n\t\tlet command: number;\r\n\t\tlet channel: number;\r\n\t\tlet useSlowerArpSpeed: boolean = false;\r\n\t\tlet useFastTwoNoteArp: boolean = false;\r\n\t\twhile (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\r\n\t\t\tcase SongTagCode.songTitle: {\r\n\t\t\t\t// Length of song name string\r\n\t\t\t\tvar songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tthis.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n\t\t\t\tdocument.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n\t\t\t\tcharIndex += songNameLength;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelCount: {\r\n\t\t\t\tthis.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tthis.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tif (variant == \"beepbox\" || beforeTwo) {\r\n\t\t\t\t\t// No mod channel support before jummbox v2\r\n\t\t\t\t\tthis.modChannelCount = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t}\r\n\t\t\t\tthis.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\r\n\t\t\t\tthis.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\r\n\t\t\t\tthis.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\r\n\r\n\t\t\t\tfor (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t}\r\n\t\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.scale: {\r\n\t\t\t\tthis.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t// All the scales were jumbled around by Jummbox. Just convert to free.\r\n\t\t\t\tif (variant == \"beepbox\") this.scale = 0;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.key: {\r\n\t\t\t\t// if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t// \tthis.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t// } else {\r\n\t\t\t\t// \tthis.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t// } // key relic (TODO)\r\n\t\t\t\tcharIndex++;\r\n\t\t\t\tthis.key = 0;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.loopStart: {\r\n\t\t\t\tif (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.loopEnd: {\r\n\t\t\t\tif (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.tempo: {\r\n\t\t\t\tif (beforeFour && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.reverb: {\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\tthis.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 8;\r\n\t\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.edo: {\r\n\t\t\t\tif (beforeEight && ( variant == \"beepbox\" || variant == \"jummbox\")) {\r\n\t\t\t\t\tthis.edo = 12;\r\n\t\t\t\t\tcharIndex++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.edo = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.beatCount: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.barCount: {\r\n\t\t\t\tconst barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\tthis.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tfor (let bar = this.channels[channel].bars.length; bar < this.barCount; bar++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[bar] = (bar < 4) ? 1 : 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].bars.length = this.barCount;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.patternCount: {\r\n\t\t\t\tif (variant == \"beepbox\" && beforeEight) {\r\n\t\t\t\t\tthis.patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t\tthis.patternsPerChannel = validateRange(1, Config.barCountMax, this.patternsPerChannel);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tfor (let pattern = this.channels[channel].patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\t\tthis.channels[channel].patterns[pattern] = new Pattern();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].patterns.length = this.patternsPerChannel;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.instrumentCount: {\r\n\t\t\t\tconst instrumentsPerChannel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\tthis.instrumentsPerChannel = validateRange(Config.instrumentsPerChannelMin, Config.instrumentsPerChannelMax, instrumentsPerChannel);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tconst isNoiseChannel: boolean = channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\t\tconst isModChannel: boolean = channel >= this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\t\tfor (let instrumentIndex = this.channels[channel].instruments.length; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\t\t\t\t\t\tthis.channels[channel].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n\t\t\t\t\tif (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\t\tfor (let instrumentIndex = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.rhythm: {\r\n\t\t\t\tthis.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t// Port all arpeggio speeds over to match what they were, before arpeggio speed was decoupled from rhythm.\r\n\t\t\t\tif (variant == \"jummbox\" && beforeThree || variant == \"beepbox\") {\r\n\t\t\t\t\t// These are all the rhythms that had 4 ticks/arpeggio instead of 3.\r\n\t\t\t\t\tif (this.rhythm == 0 || this.rhythm == 2) {\r\n\t\t\t\t\t\tuseSlowerArpSpeed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Use faster two note arp on these rhythms\r\n\t\t\t\t\tif (this.rhythm >= 2) {\r\n\t\t\t\t\t\tuseFastTwoNoteArp = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelOctave: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t// Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n\t\t\t\t\tthis.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\ttoSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t// Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n\t\t\t\t\t\tthis.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\ttoSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.startInstrument: {\r\n\t\t\t\tinstrumentIndexIterator++;\r\n\t\t\t\tif (instrumentIndexIterator >= this.instrumentsPerChannel) {\r\n\t\t\t\t\tinstrumentChannelIterator++;\r\n\t\t\t\t\tinstrumentIndexIterator = 0;\r\n\t\t\t\t}\r\n\t\t\t\tvalidateRange(0, this.channels.length - 1, instrumentChannelIterator);\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tconst instrumentType: number = clamp(0, InstrumentType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tinstrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\r\n\t\t\t\tif (useSlowerArpSpeed) {\r\n\t\t\t\t\tinstrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\r\n\t\t\t\t}\r\n\t\t\t\tif (useFastTwoNoteArp) {\r\n\t\t\t\t\tinstrument.fastTwoNoteArp = true;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.preset: {\r\n\t\t\t\tconst presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.wave: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tconst channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tif (channel >= this.pitchChannelCount) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tif (instrumentChannelIterator >= this.pitchChannelCount) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (instrumentChannelIterator >= this.pitchChannelCount) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterCutoff: {\r\n\t\t\t\tif (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n\t\t\t\t\tconst legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n\t\t\t\t\tconst filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\r\n\t\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\t\tconst legacyFilter: number = [1, 3, 4, 5][clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\t\tconst legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n\t\t\t\t\t\t\t\tif (channel < this.pitchChannelCount) {\r\n\t\t\t\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tinstrument.filterCutoff = 10;\r\n\t\t\t\t\t\t\t\t\tinstrument.filterEnvelope = 1;\r\n\t\t\t\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.filterCutoff = clamp(0, Config.filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterResonance: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].filterResonance = clamp(0, Config.filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterEnvelope: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\t\t\tinstrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinstrument.filterEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.pulseWidth: {\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t// Convert back from beepbox's weird pulse width storage formula, rounding. The \"7\" in there is the old\r\n\t\t\t\t\t// piece of the formula \"beepbox.Config.pulseWidthRange - 1\".\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.pulseWidth = Math.round(clamp(0, Config.pulseWidthRange + 1, Math.pow(0.5, (7 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 0.5) * 50));\r\n\t\t\t\t\tinstrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.pulseWidth = clamp(0, Config.pulseWidthRange + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tinstrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.transition: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[i].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeFour || variant == \"beepbox\") {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].tieNoteTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.vibrato: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 3, 2, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 13];\r\n\t\t\t\t\tconst channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.vibrato = vibrato;\r\n\t\t\t\t\t// Custom vibrato\r\n\t\t\t\t\tif (vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tinstrument.vibratoDepth = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDepth)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\r\n\t\t\t\t\t\tinstrument.vibratoSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tinstrument.vibratoDelay = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDelay)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tinstrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Enforce standard vibrato settings\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinstrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n\t\t\t\t\t\tinstrument.vibratoSpeed = 10; // Normal speed\r\n\t\t\t\t\t\tinstrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t\t\t\tinstrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.arpeggioSpeed: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tinstrument.arpeggioSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstArpeggioSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tinstrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.interval: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\t\tlet interval: number = clamp(0, Config.intervals.length, originalValue);\r\n\t\t\t\t\t\t\tif (originalValue == 8) {\r\n\t\t\t\t\t\t\t\t// original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n\t\t\t\t\t\t\t\tinterval = 2;\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chord = 3;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[i].interval = interval;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tlet interval: number = clamp(0, Config.intervals.length, originalValue);\r\n\t\t\t\t\tif (originalValue == 8) {\r\n\t\t\t\t\t\t// original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n\t\t\t\t\t\tinterval = 2;\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = interval;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.chord: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.effects: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].effects = clamp(0, Config.effectsNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.volume: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t} else if (variant == \"beepbox\") {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t// Beepbox v7's volume range is 0-7 (0 is max, 7 is mute)\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t// Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.panning: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t// Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n\t\t\t\t\tinstrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tinstrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Now, pan delay follows on new versions of jummbox.\r\n\t\t\t\tif (variant == \"jummbox\" && !beforeThree)\r\n\t\t\t\t\tinstrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.detune: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n\t\t\t\tinstrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) + Config.detuneMin);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.customChipWave: {\r\n\t\t\t\tlet instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t// Pop custom wave values\r\n\t\t\t\tfor (let j: number = 0; j < 64; j++) {\r\n\t\t\t\t\tinstrument.customChipWave[j]\r\n\t\t\t\t\t\t= clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += instrument.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / instrument.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = instrument.customChipWave[i] - average;\r\n\t\t\t\t\tinstrument.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 65th, last sample is for anti-aliasing\r\n\t\t\t\tinstrument.customChipWaveIntegral[64] = 0.0;\r\n\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.limiterSettings: {\r\n\t\t\t\tlet nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t// Check if limiter settings are used... if not, restore to default\r\n\t\t\t\tif (nextValue == 0x3f) {\r\n\t\t\t\t\t// Limiter isn't used\r\n\t\t\t\t\tthis.compressionRatio = 1.0;\r\n\t\t\t\t\tthis.limitRatio = 1.0;\r\n\t\t\t\t\tthis.limitRise = 4000.0;\r\n\t\t\t\t\tthis.limitDecay = 4.0;\r\n\t\t\t\t\tthis.limitThreshold = 1.0;\r\n\t\t\t\t\tthis.compressionThreshold = 1.0;\r\n\t\t\t\t\tthis.masterGain = 1.0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Limiter is used, grab values\r\n\t\t\t\t\tthis.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\r\n\t\t\t\t\tnextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\r\n\t\t\t\t\tthis.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\r\n\t\t\t\t\tthis.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n\t\t\t\t\tthis.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n\t\t\t\t\tthis.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelNames: {\r\n\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t// Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\r\n\t\t\t\t\tvar channelNameLength;\r\n\t\t\t\t\tif (beforeFour)\r\n\t\t\t\t\t\tchannelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tchannelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tthis.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\r\n\r\n\t\t\t\t\tcharIndex += channelNameLength;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.algorithm: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackType: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackAmplitude: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackEnvelope: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorFrequencies: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorAmplitudes: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorEnvelopes: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].envelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.spectrum: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tif (instrument.type == InstrumentType.spectrum) {\r\n\t\t\t\t\tconst byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\tinstrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinstrument.spectrumWave.markCustomWaveDirty();\r\n\t\t\t\t\tcharIndex += byteCount;\r\n\t\t\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tconst byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tinstrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tinstrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcharIndex += byteCount;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Unhandled instrument type for spectrum song tag code.\");\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.harmonics: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tconst byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\r\n\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\tinstrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\r\n\t\t\t\t}\r\n\t\t\t\tinstrument.harmonicsWave.markCustomWaveDirty();\r\n\t\t\t\tcharIndex += byteCount;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.bars: {\r\n\t\t\t\tlet subStringLength: number;\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tsubStringLength = Math.ceil(barCount * 0.5);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let i: number = 0; i < barCount; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(3) + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits) + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcharIndex += subStringLength;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.patterns: {\r\n\t\t\t\tlet bitStringLength: number = 0;\r\n\t\t\t\tlet channel: number;\r\n\t\t\t\tlet largerChords: boolean = !((beforeFour && variant == \"jummbox\") || variant == \"beepbox\");\r\n\t\t\t\tlet recentPitchBitLength: number = (largerChords ? 4 : 3);\r\n\t\t\t\tlet recentPitchLength: number = (largerChords ? 16 : 8);\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t\t// The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default.\r\n\t\t\t\t\tcharIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t\tbitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tchannel = 0;\r\n\t\t\t\t\tlet bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\twhile (bitStringLengthLength > 0) {\r\n\t\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tbitStringLengthLength--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\r\n\t\t\t\tcharIndex += bitStringLength;\r\n\r\n\t\t\t\tlet neededInstrumentBits: number = 0;\r\n\t\t\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n\t\t\t\t\t// Some info about modulator settings immediately follows in mod channels.\r\n\t\t\t\t\tif (isModChannel) {\r\n\t\t\t\t\t\tfor (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n\t\t\t\t\t\t\tlet instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\tinstrument.modStatuses[mod] = bits.read(2);\r\n\r\n\t\t\t\t\t\t\t\t// Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForPitch || instrument.modStatuses[mod] == ModStatus.msForNoise) {\r\n\r\n\t\t\t\t\t\t\t\t\t// Clamp to pitch/noise max\r\n\t\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForPitch) {\r\n\t\t\t\t\t\t\t\t\t\tinstrument.modChannels[mod] = clamp(0, this.pitchChannelCount + 1, bits.read(8));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tinstrument.modChannels[mod] = clamp(0, this.noiseChannelCount + 1, bits.read(8));\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tinstrument.modInstruments[mod] = clamp(0, this.instrumentsPerChannel + 1, bits.read(neededInstrumentBits));\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Mod setting is only used if the status isn't \"none\".\r\n\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] != ModStatus.msNone) {\r\n\t\t\t\t\t\t\t\t\tinstrument.modSettings[mod] = bits.read(6);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * this.edo;\r\n\t\t\t\t\tconst octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * Config.pitchesPerOctave;\r\n\t\t\t\t\tlet note: Note | null = null;\r\n\t\t\t\t\tlet pin: NotePin | null = null;\r\n\t\t\t\t\t// let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : this.edo) + octaveOffset;\r\n\t\t\t\t\tlet lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : Config.pitchesPerOctave) + octaveOffset;\r\n\t\t\t\t\tconst recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n\t\t\t\t\tconst recentShapes: any[] = [];\r\n\t\t\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\t\tconst newPattern: Pattern = this.channels[channel].patterns[i];\r\n\t\t\t\t\t\tnewPattern.reset();\r\n\t\t\t\t\t\tnewPattern.instrument = bits.read(neededInstrumentBits);\r\n\r\n\t\t\t\t\t\tif (!(variant == \"beepbox\" && beforeThree) && bits.read(1) == 0) continue;\r\n\r\n\t\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\t\tconst newNotes: Note[] = newPattern.notes;\r\n\t\t\t\t\t\t// Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\r\n\t\t\t\t\t\twhile (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\r\n\t\t\t\t\t\t\tconst useOldShape: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\tlet newNote: boolean = false;\r\n\t\t\t\t\t\t\tlet shapeIndex: number = 0;\r\n\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\tshapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tnewNote = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (!useOldShape && !newNote) {\r\n\t\t\t\t\t\t\t\t// For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\r\n\t\t\t\t\t\t\t\tif (isModChannel) {\r\n\t\t\t\t\t\t\t\t\tconst isBackwards: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\tconst restLength: number = bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\tif (isBackwards) {\r\n\t\t\t\t\t\t\t\t\t\tcurPart -= restLength;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tcurPart += restLength;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tconst restLength: number = (beforeSeven && variant == \"beepbox\")\r\n\t\t\t\t\t\t\t\t\t\t? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n\t\t\t\t\t\t\t\t\t\t: bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\tcurPart += restLength;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlet shape: any;\r\n\t\t\t\t\t\t\t\tlet pinObj: any;\r\n\t\t\t\t\t\t\t\tlet pitch: number;\r\n\t\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\t\tshape = recentShapes[shapeIndex];\r\n\t\t\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tshape = {};\r\n\r\n\t\t\t\t\t\t\t\t\tif (!largerChords) {\r\n\t\t\t\t\t\t\t\t\t\t// Old format: X 1's followed by a 0 => X+1 pitches, up to 4\r\n\t\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\r\n\t\t\t\t\t\t\t\t\t\twhile (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t// New format is:\r\n\t\t\t\t\t\t\t\t\t\t//\t  0: 1 pitch\r\n\t\t\t\t\t\t\t\t\t\t// 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n\t\t\t\t\t\t\t\t\t\tif (bits.read(1) == 1) {\r\n\t\t\t\t\t\t\t\t\t\t\tshape.pitchCount = bits.read(3) + 2;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tshape.pinCount = bits.readPinCount();\r\n\r\n\t\t\t\t\t\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(2) * 2;\r\n\t\t\t\t\t\t\t\t\t} else if (!isModChannel) {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(3);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(9);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tshape.pins = [];\r\n\t\t\t\t\t\t\t\t\tshape.length = 0;\r\n\t\t\t\t\t\t\t\t\tshape.bendCount = 0;\r\n\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pinCount; j++) {\r\n\t\t\t\t\t\t\t\t\t\tpinObj = {};\r\n\t\t\t\t\t\t\t\t\t\tpinObj.pitchBend = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) shape.bendCount++;\r\n\t\t\t\t\t\t\t\t\t\tshape.length += (beforeSeven && variant == \"beepbox\")\r\n\t\t\t\t\t\t\t\t\t\t\t? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n\t\t\t\t\t\t\t\t\t\t\t: bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\t\tpinObj.time = shape.length;\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(2) * 2;\r\n\t\t\t\t\t\t\t\t\t\t} else if (!isModChannel) {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(3);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(9);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tshape.pins.push(pinObj);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\trecentShapes.unshift(shape);\r\n\t\t\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\r\n\t\t\t\t\t\t\t\tnote = new Note(0, curPart, curPart + shape.length, shape.initialVolume);\r\n\t\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\t\tnote.pins.length = 1;\r\n\t\t\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n\t\t\t\t\t\t\t\t\tconst useOldPitch: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\tif (!useOldPitch) {\r\n\t\t\t\t\t\t\t\t\t\tconst interval: number = bits.readPitchInterval();\r\n\t\t\t\t\t\t\t\t\t\tpitch = lastPitch;\r\n\t\t\t\t\t\t\t\t\t\tlet intervalIter: number = interval;\r\n\t\t\t\t\t\t\t\t\t\twhile (intervalIter > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitch++;\r\n\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch++;\r\n\t\t\t\t\t\t\t\t\t\t\tintervalIter--;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\twhile (intervalIter < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitch--;\r\n\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch--;\r\n\t\t\t\t\t\t\t\t\t\t\tintervalIter++;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tconst pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\r\n\t\t\t\t\t\t\t\t\t\tpitch = recentPitches[pitchIndex];\r\n\t\t\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\t\t\tif (recentPitches.length > recentPitchLength) recentPitches.pop();\r\n\r\n\t\t\t\t\t\t\t\t\tif (j < shape.pitchCount) {\r\n\t\t\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tpitchBends.push(pitch);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif (j == shape.pitchCount - 1) {\r\n\t\t\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tpitchBends.unshift(note.pitches[0]);\r\n\r\n\t\t\t\t\t\t\t\tfor (const pinObj of shape.pins) {\r\n\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) pitchBends.shift();\r\n\t\t\t\t\t\t\t\t\tpin = makeNotePin(pitchBends[0] - note.pitches[0], pinObj.time, pinObj.volume);\r\n\t\t\t\t\t\t\t\t\tnote.pins.push(pin);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcurPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\r\n\t\t\t\t\t\t\t\tnewNotes.push(note);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchannel++;\r\n\t\t\t\t\t\tif (channel >= this.getChannelCount()) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t} // while (true)\r\n\t\t\t} break;\r\n\t\t\tdefault: {\r\n\t\t\t\tthrow new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1));\r\n\t\t\t} break;\r\n\t\t}\r\n\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tif (toSetOctaves[channel] != null) {\r\n\t\t\t\tthis.channels[channel].octave = toSetOctaves[channel];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n\t\tconst channelArray: Object[] = [];\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tconst instrumentArray: Object[] = [];\r\n\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\tinstrumentArray.push(this.channels[channel].instruments[i].toJsonObject());\r\n\t\t\t}\r\n\r\n\t\t\tconst patternArray: Object[] = [];\r\n\t\t\tfor (const pattern of this.channels[channel].patterns) {\r\n\t\t\t\tconst noteArray: Object[] = [];\r\n\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\tlet volumeCap: number = this.getVolumeCapForSetting(isModChannel, this.channels[channel].instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\t\t\t\t\tconst pointArray: Object[] = [];\r\n\t\t\t\t\tfor (const pin of note.pins) {\r\n\t\t\t\t\t\tlet useVol: number = isModChannel ? Math.round(pin.volume) : Math.round(pin.volume * 100 / volumeCap);\r\n\t\t\t\t\t\tpointArray.push({\r\n\t\t\t\t\t\t\t\"tick\": (pin.time + note.start) * Config.rhythms[this.rhythm].stepsPerBeat / Config.partsPerBeat,\r\n\t\t\t\t\t\t\t\"pitchBend\": pin.interval,\r\n\t\t\t\t\t\t\t\"volume\": useVol,\r\n\t\t\t\t\t\t\t\"forMod\": isModChannel,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnoteArray.push({\r\n\t\t\t\t\t\t\"pitches\": note.pitches,\r\n\t\t\t\t\t\t\"points\": pointArray,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpatternArray.push({\r\n\t\t\t\t\t\"instrument\": pattern.instrument + 1,\r\n\t\t\t\t\t\"notes\": noteArray,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst sequenceArray: number[] = [];\r\n\t\t\tif (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\t\t\tfor (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\t\t\tif (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\r\n\t\t\tchannelArray.push({\r\n\t\t\t\t\"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\r\n\t\t\t\t\"octaveScrollBar\": this.channels[channel].octave,\r\n\t\t\t\t\"instruments\": instrumentArray,\r\n\t\t\t\t\"patterns\": patternArray,\r\n\t\t\t\t\"sequence\": sequenceArray,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t\"name\": this.title,\r\n\t\t\t\"format\": Song._format,\r\n\t\t\t\"version\": Song._latestJummBoxVersion,\r\n\t\t\t// \"scale\": Config.scales[this.scale].name,\r\n\t\t\t// \"key\": Config.keys[this.key].name, // key relic (TODO)\r\n\t\t\t\"centerFrequency\": this.centerFrequency,\r\n\t\t\t\"edo\": this.edo,\r\n\t\t\t\"introBars\": this.loopStart,\r\n\t\t\t\"loopBars\": this.loopLength,\r\n\t\t\t\"beatsPerBar\": this.beatsPerBar,\r\n\t\t\t\"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\r\n\t\t\t\"beatsPerMinute\": this.tempo,\r\n\t\t\t\"reverb\": this.reverb,\r\n\t\t\t//\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n\t\t\t//\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\r\n\t\t\t//\"instrumentsPerChannel\": this.instrumentsPerChannel, //derive this from instrument arrays?\r\n\t\t\t\"channels\": channelArray,\r\n\t\t};\r\n\t}\r\n\r\n\tpublic fromJsonObject(jsonObject: any): void { //TODO: edo decoding\r\n\t\tthis.initToDefault(true);\r\n\t\tif (!jsonObject) return;\r\n\r\n\t\t//const version: number = jsonObject[\"version\"] | 0;\r\n\t\t//if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\r\n\r\n\t\tif (jsonObject[\"name\"] != undefined) {\r\n\t\t\tthis.title = jsonObject[\"name\"];\r\n\t\t}\r\n\r\n\t\tthis.scale = 0; // default to free.\r\n\t\t// if (jsonObject[\"scale\"] != undefined) {\r\n\t\t// \tconst oldScaleNames: Dictionary<string> = {\r\n\t\t// \t\t\"romani :)\": \"dbl harmonic :)\",\r\n\t\t// \t\t\"romani :(\": \"dbl harmonic :(\",\r\n\t\t// \t\t\"enigma\": \"strange\",\r\n\t\t// \t};\r\n\t\t// \tconst scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\r\n\t\t// \tconst scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\r\n\t\t// \tif (scale != -1) this.scale = scale;\r\n\t\t// }\r\n\r\n\t\t// TODO: Change key to song frequency offset\r\n\t\t// if (jsonObject[\"key\"] != undefined) {\r\n\t\t// \tif (typeof (jsonObject[\"key\"]) == \"number\") {\r\n\t\t// \t\tthis.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\r\n\t\t// \t} else if (typeof (jsonObject[\"key\"]) == \"string\") {\r\n\t\t// \t\tconst key: string = jsonObject[\"key\"];\r\n\t\t// \t\tconst letter: string = key.charAt(0).toUpperCase();\r\n\t\t// \t\tconst symbol: string = key.charAt(1).toLowerCase();\r\n\t\t// \t\tconst letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\r\n\t\t// \t\tconst accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\r\n\t\t// \t\tlet index: number | undefined = letterMap[letter];\r\n\t\t// \t\tconst offset: number | undefined = accidentalMap[symbol];\r\n\t\t// \t\tif (index != undefined) {\r\n\t\t// \t\t\tif (offset != undefined) index += offset;\r\n\t\t// \t\t\tif (index < 0) index += 12;\r\n\t\t// \t\t\tindex = index % 12;\r\n\t\t// \t\t\tthis.key = index;\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\t\tthis.key = 0; // key relic (TODO)\r\n\r\n\t\tif (jsonObject[\"centerFrequency\"] != undefined) {\r\n\t\t\tthis.centerFrequency = jsonObject[\"centerFrequency\"];\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"edo\"] != undefined) {\r\n\t\t\tthis.edo = jsonObject[\"edo\"];\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"beatsPerMinute\"] != undefined) {\r\n\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"reverb\"] != undefined) {\r\n\t\t\tthis.reverb = clamp(0, Config.reverbRange, jsonObject[\"reverb\"] | 0);\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"beatsPerBar\"] != undefined) {\r\n\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\r\n\t\t}\r\n\r\n\t\tlet importedPartsPerBeat: number = 4;\r\n\t\tif (jsonObject[\"ticksPerBeat\"] != undefined) {\r\n\t\t\timportedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\r\n\t\t\tthis.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\r\n\t\t\tif (this.rhythm == -1) {\r\n\t\t\t\tthis.rhythm = 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet maxInstruments: number = 1;\r\n\t\tlet maxPatterns: number = 1;\r\n\t\tlet maxBars: number = 1;\r\n\t\tif (jsonObject[\"channels\"]) {\r\n\t\t\tfor (const channelObject of jsonObject[\"channels\"]) {\r\n\t\t\t\tif (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\r\n\t\t\t\tif (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\r\n\t\t\t\tif (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.instrumentsPerChannel = Math.min(maxInstruments, Config.instrumentsPerChannelMax);\r\n\t\tthis.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\r\n\t\tthis.barCount = Math.min(maxBars, Config.barCountMax);\r\n\r\n\t\tif (jsonObject[\"introBars\"] != undefined) {\r\n\t\t\tthis.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\r\n\t\t}\r\n\t\tif (jsonObject[\"loopBars\"] != undefined) {\r\n\t\t\tthis.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\r\n\t\t}\r\n\r\n\t\tconst newPitchChannels: Channel[] = [];\r\n\t\tconst newNoiseChannels: Channel[] = [];\r\n\t\tconst newModChannels: Channel[] = [];\r\n\t\tif (jsonObject[\"channels\"]) {\r\n\t\t\tfor (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n\t\t\t\tlet channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n\r\n\t\t\t\tconst channel: Channel = new Channel();\r\n\r\n\t\t\t\tlet isNoiseChannel: boolean = false;\r\n\t\t\t\tlet isModChannel: boolean = false;\r\n\t\t\t\tif (channelObject[\"type\"] != undefined) {\r\n\t\t\t\t\tisNoiseChannel = (channelObject[\"type\"] == \"drum\");\r\n\t\t\t\t\tisModChannel = (channelObject[\"type\"] == \"mod\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// for older files, assume drums are channel 3.\r\n\t\t\t\t\tisNoiseChannel = (channelIndex >= 3);\r\n\t\t\t\t}\r\n\t\t\t\tif (isNoiseChannel) {\r\n\t\t\t\t\tnewNoiseChannels.push(channel);\r\n\t\t\t\t} else if (isModChannel) {\r\n\t\t\t\t\tnewModChannels.push(channel);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnewPitchChannels.push(channel);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (channelObject[\"octaveScrollBar\"] != undefined) {\r\n\t\t\t\t\tchannel.octave = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, channelObject[\"octaveScrollBar\"] | 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = channel.instruments.length; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tchannel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t}\r\n\t\t\t\tchannel.instruments.length = this.instrumentsPerChannel;\r\n\r\n\t\t\t\tfor (let i: number = channel.patterns.length; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\tchannel.patterns[i] = new Pattern();\r\n\t\t\t\t}\r\n\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\tchannel.bars[i] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tchannel.bars.length = this.barCount;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tconst instrument: Instrument = channel.instruments[i];\r\n\t\t\t\t\tinstrument.fromJsonObject(channelObject[\"instruments\"][i], isNoiseChannel, isModChannel, this.rhythm == 0 || this.rhythm == 2, this.rhythm >= 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\tconst pattern: Pattern = channel.patterns[i];\r\n\r\n\t\t\t\t\tlet patternObject: any = undefined;\r\n\t\t\t\t\tif (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\r\n\t\t\t\t\tif (patternObject == undefined) continue;\r\n\r\n\t\t\t\t\tpattern.instrument = clamp(0, this.instrumentsPerChannel, (patternObject[\"instrument\"] | 0) - 1);\r\n\r\n\t\t\t\t\tif (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\r\n\t\t\t\t\t\tconst maxNoteCount: number = Math.min(this.beatsPerBar * Config.partsPerBeat, patternObject[\"notes\"].length >>> 0);\r\n\r\n\t\t\t\t\t\t//let tickClock: number = 0;\r\n\t\t\t\t\t\tfor (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\r\n\t\t\t\t\t\t\tif (j >= maxNoteCount) break;\r\n\r\n\t\t\t\t\t\t\tconst noteObject = patternObject[\"notes\"][j];\r\n\t\t\t\t\t\t\tif (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tconst note: Note = new Note(0, 0, 0, 0);\r\n\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\tnote.pins = [];\r\n\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\r\n\t\t\t\t\t\t\t\tconst pitch: number = noteObject[\"pitches\"][k] | 0;\r\n\t\t\t\t\t\t\t\tif (note.pitches.indexOf(pitch) != -1) continue;\r\n\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\tif (note.pitches.length >= Config.maxChordSize) break;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\r\n\t\t\t\t\t\t\t//let noteClock: number = tickClock;\r\n\t\t\t\t\t\t\tlet startInterval: number = 0;\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject[\"points\"].length; k++) {\r\n\t\t\t\t\t\t\t\tconst pointObject: any = noteObject[\"points\"][k];\r\n\t\t\t\t\t\t\t\tif (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\r\n\t\t\t\t\t\t\t\tconst interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\r\n\r\n\t\t\t\t\t\t\t\tconst time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\r\n\r\n\t\t\t\t\t\t\t\tlet volumeCap: number = this.getVolumeCapForSetting(isModChannel, channel.instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\r\n\t\t\t\t\t\t\t\t// The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\r\n\t\t\t\t\t\t\t\t// A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\r\n\t\t\t\t\t\t\t\tlet volume: number;\r\n\t\t\t\t\t\t\t\tif (pointObject[\"volume\"] == undefined) {\r\n\t\t\t\t\t\t\t\t\tvolume = volumeCap;\r\n\t\t\t\t\t\t\t\t} else if (pointObject[\"forMod\"] == undefined) {\r\n\t\t\t\t\t\t\t\t\tvolume = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvolume = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (time > this.beatsPerBar * Config.partsPerBeat) continue;\r\n\t\t\t\t\t\t\t\tif (note.pins.length == 0) {\r\n\t\t\t\t\t\t\t\t\t//if (time < noteClock) continue;\r\n\t\t\t\t\t\t\t\t\tnote.start = time;\r\n\t\t\t\t\t\t\t\t\tstartInterval = interval;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t//if (time <= noteClock) continue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//noteClock = time;\r\n\r\n\t\t\t\t\t\t\t\tnote.pins.push(makeNotePin(interval - startInterval, time - note.start, volume));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pins.length < 2) continue;\r\n\r\n\t\t\t\t\t\t\tnote.end = note.pins[note.pins.length - 1].time + note.start;\r\n\r\n\t\t\t\t\t\t\t// const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : this.maxPitch;\r\n\t\t\t\t\t\t\tconst maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\r\n\t\t\t\t\t\t\tlet lowestPitch: number = maxPitch;\r\n\t\t\t\t\t\t\tlet highestPitch: number = 0;\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pitches.length; k++) {\r\n\t\t\t\t\t\t\t\tnote.pitches[k] += startInterval;\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n\t\t\t\t\t\t\t\t\tnote.pitches.splice(k, 1);\r\n\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pins.length; k++) {\r\n\t\t\t\t\t\t\t\tconst pin: NotePin = note.pins[k];\r\n\t\t\t\t\t\t\t\tif (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n\t\t\t\t\t\t\t\tif (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n\t\t\t\t\t\t\t\tif (k >= 2) {\r\n\t\t\t\t\t\t\t\t\tif (pin.interval == note.pins[k - 1].interval &&\r\n\t\t\t\t\t\t\t\t\t\tpin.interval == note.pins[k - 2].interval &&\r\n\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k - 1].volume &&\r\n\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k - 2].volume) {\r\n\t\t\t\t\t\t\t\t\t\tnote.pins.splice(k - 1, 1);\r\n\t\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tpattern.notes.push(note);\r\n\t\t\t\t\t\t\t//tickClock = note.end;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\tchannel.bars[i] = channelObject[\"sequence\"] ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\r\n\t\tif (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\r\n\t\tif (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\r\n\t\tthis.pitchChannelCount = newPitchChannels.length;\r\n\t\tthis.noiseChannelCount = newNoiseChannels.length;\r\n\t\tthis.modChannelCount = newModChannels.length;\r\n\t\tthis.channels.length = 0;\r\n\t\tArray.prototype.push.apply(this.channels, newPitchChannels);\r\n\t\tArray.prototype.push.apply(this.channels, newNoiseChannels);\r\n\t\tArray.prototype.push.apply(this.channels, newModChannels);\r\n\t}\r\n\r\n\tpublic getPattern(channel: number, bar: number): Pattern | null {\r\n\t\tif (bar < 0 || bar >= this.barCount) return null;\r\n\t\tconst patternIndex: number = this.channels[channel].bars[bar];\r\n\t\tif (patternIndex == 0) return null;\r\n\t\treturn this.channels[channel].patterns[patternIndex - 1];\r\n\t}\r\n\r\n\tpublic getPatternInstrument(channel: number, bar: number): number {\r\n\t\tconst pattern: Pattern | null = this.getPattern(channel, bar);\r\n\t\treturn pattern == null ? 0 : pattern.instrument;\r\n\t}\r\n\r\n\tpublic getBeatsPerMinute(): number {\r\n\t\treturn this.tempo;\r\n\t}\r\n\r\n}\r\n\r\nclass Tone {\r\n\tpublic instrument: Instrument;\r\n\tpublic readonly pitches: number[] = [0, 0, 0, 0];\r\n\tpublic pitchCount: number = 0;\r\n\tpublic chordSize: number = 0;\r\n\tpublic drumsetPitch: number = 0;\r\n\tpublic note: Note | null = null;\r\n\tpublic prevNote: Note | null = null;\r\n\tpublic nextNote: Note | null = null;\r\n\tpublic prevNotePitchIndex: number = 0;\r\n\tpublic nextNotePitchIndex: number = 0;\r\n\tpublic active: boolean = false;\r\n\tpublic noteStart: number = 0;\r\n\tpublic noteEnd: number = 0;\r\n\tpublic noteLengthTicks: number = 0;\r\n\tpublic ticksSinceReleased: number = 0;\r\n\tpublic liveInputSamplesHeld: number = 0;\r\n\tpublic lastInterval: number = 0;\r\n\tpublic lastVolume: number = 0;\r\n\tpublic stereoVolume1: number = 0.0;\r\n\tpublic stereoVolume2: number = 0.0;\r\n\tpublic stereoOffset: number = 0.0;\r\n\tpublic stereoDelay: number = 0.0;\r\n\tpublic sample: number = 0.0;\r\n\tpublic readonly phases: number[] = [];\r\n\tpublic readonly phaseDeltas: number[] = [];\r\n\tpublic readonly volumeStarts: number[] = [];\r\n\tpublic readonly volumeDeltas: number[] = [];\r\n\tpublic volumeStart: number = 0.0;\r\n\tpublic volumeDelta: number = 0.0;\r\n\tpublic phaseDeltaScale: number = 0.0;\r\n\tpublic pulseWidth: number = 0.0;\r\n\tpublic pulseWidthDelta: number = 0.0;\r\n\tpublic filter: number = 0.0;\r\n\tpublic filterScale: number = 0.0;\r\n\tpublic filterSample0: number = 0.0;\r\n\tpublic filterSample1: number = 0.0;\r\n\tpublic vibratoScale: number = 0.0;\r\n\tpublic intervalMult: number = 0.0;\r\n\tpublic intervalVolumeMult: number = 1.0;\r\n\tpublic feedbackOutputs: number[] = [];\r\n\tpublic feedbackMult: number = 0.0;\r\n\tpublic feedbackDelta: number = 0.0;\r\n\tpublic stereoVolumeLStart: number = 0.0;\r\n\tpublic stereoVolumeRStart: number = 0.0;\r\n\tpublic stereoVolumeLDelta: number = 0.0;\r\n\tpublic stereoVolumeRDelta: number = 0.0;\r\n\tpublic stereoDelayStart: number = 0.0;\r\n\tpublic stereoDelayEnd: number = 0.0;\r\n\tpublic stereoDelayDelta: number = 0.0;\r\n\tpublic customVolumeStart: number = 0.0;\r\n\tpublic customVolumeEnd: number = 0.0;\r\n\tpublic filterResonanceStart: number = 0.0;\r\n\tpublic filterResonanceDelta: number = 0.0;\r\n\tpublic isFirstOrder: boolean = false;\r\n\r\n\tconstructor() {\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\tthis.phases[i] = 0.0;\r\n\t\t\tthis.feedbackOutputs[i] = 0.0;\r\n\t\t}\r\n\t\tthis.sample = 0.0;\r\n\t\tthis.filterSample0 = 0.0;\r\n\t\tthis.filterSample1 = 0.0;\r\n\t\tthis.liveInputSamplesHeld = 0.0;\r\n\t}\r\n\r\n}\r\n\r\nexport class Synth {\r\n\r\n\tpublic warmUpSynthesizer(song: Song | null): void {\r\n\t\t// Don't bother to generate the drum waves unless the song actually\r\n\t\t// uses them, since they may require a lot of computation.\r\n\t\tif (song != null) {\r\n\t\t\tfor (let channel: number = 0; channel < song.getChannelCount(); channel++) {\r\n\t\t\t\tfor (let instrument: number = 0; instrument < song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tSynth.getInstrumentSynthFunction(song.channels[channel].instruments[instrument]);\r\n\t\t\t\t\tsong.channels[channel].instruments[instrument].warmUp();\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic computeLatestModValues(): void {\r\n\r\n\t\tif (this.song != null && this.song.modChannelCount > 0) {\r\n\r\n\t\t\t// Clear all mod values, and set up temp variables for the time a mod would be set at.\r\n\t\t\tlet latestModTimes: (number | null)[] = [];\r\n\t\t\tlet latestModInsTimes: (number | null)[][][] = [];\r\n\t\t\tthis.modValues = [];\r\n\t\t\tthis.nextModValues = [];\r\n\t\t\tthis.modInsValues = [];\r\n\t\t\tthis.nextModInsValues = [];\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\tlatestModInsTimes[channel] = [];\r\n\t\t\t\tthis.modInsValues[channel] = [];\r\n\t\t\t\tthis.nextModInsValues[channel] = [];\r\n\t\t\t\tfor (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tthis.modInsValues[channel][instrument] = [];\r\n\t\t\t\t\tthis.nextModInsValues[channel][instrument] = [];\r\n\t\t\t\t\tlatestModInsTimes[channel][instrument] = [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Find out where we're at in the fraction of the current bar.\r\n\t\t\tlet currentPart: number = this.beat * Config.partsPerBeat + this.part;\r\n\r\n\t\t\t// For mod channels, calculate last set value for each mod\r\n\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\tif (!(this.song.channels[channel].muted)) {\r\n\r\n\t\t\t\t\tlet pattern: Pattern | null;\r\n\r\n\t\t\t\t\tfor (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\r\n\t\t\t\t\t\tpattern = this.song.getPattern(channel, currentBar);\r\n\r\n\t\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\t\tlet instrumentIdx: number = this.song.getPatternInstrument(channel, currentBar);\r\n\t\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\t\t\tlet latestPinParts: number[] = [];\r\n\t\t\t\t\t\t\tlet latestPinValues: number[] = [];\r\n\r\n\t\t\t\t\t\t\tlet partsInBar: number = (currentBar == this.bar)\r\n\t\t\t\t\t\t\t\t? currentPart\r\n\t\t\t\t\t\t\t\t: this.findPartsInBar(currentBar);\r\n\r\n\t\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\t\tif (note.start < partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\r\n\t\t\t\t\t\t\t\t\tif (note.end <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\tlatestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\r\n\t\t\t\t\t\t\t\t\t\tlatestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].volume;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tlatestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\r\n\t\t\t\t\t\t\t\t\t\t// Find the pin where bar change happens, and compute where pin volume would be at that time\r\n\t\t\t\t\t\t\t\t\t\tfor (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tlatestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n\t\t\t\t\t\t\t\t\t\t\t\tpinIdx = note.pins.length;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Set modulator value, if it wasn't set in another pattern already scanned\r\n\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\tif (latestPinParts[mod] != null) {\r\n\t\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\t\t\t\tif (latestModTimes[instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modSettings[mod]] as number)) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n\t\t\t\t\t\t\t\t\t\t\tlatestModTimes[instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] as number)) {\r\n\t\t\t\t\t\t\t\t\t\tthis.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n\t\t\t\t\t\t\t\t\t\tlatestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static operatorAmplitudeCurve(amplitude: number): number {\r\n\t\treturn (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n\t}\r\n\r\n\tpublic samplesPerSecond: number = 44100;\r\n\r\n\tpublic song: Song | null = null;\r\n\tpublic liveInputDuration: number = 0;\r\n\tpublic liveInputStarted: boolean = false;\r\n\tpublic liveInputPitches: number[] = [];\r\n\tpublic liveInputChannel: number = 0;\r\n\tpublic loopRepeatCount: number = -1;\r\n\tpublic volume: number = 1.0;\r\n\r\n\tprivate wantToSkip: boolean = false;\r\n\tprivate playheadInternal: number = 0.0;\r\n\tprivate bar: number = 0;\r\n\tprivate beat: number = 0;\r\n\tprivate part: number = 0;\r\n\tprivate tick: number = 0;\r\n\tprivate tickSampleCountdown: number = 0;\r\n\tprivate modValues: (number | null)[];\r\n\tprivate modInsValues: (number | null)[][][];\r\n\tprivate nextModValues: (number | null)[];\r\n\tprivate nextModInsValues: (number | null)[][][];\r\n\tprivate isPlayingSong: boolean = false;\r\n\tprivate liveInputEndTime: number = 0.0;\r\n\tprivate readonly tonePool: Deque<Tone> = new Deque<Tone>();\r\n\tprivate readonly activeTones: Array<Deque<Tone>> = [];\r\n\tprivate tyingOver: number[] = [];\r\n\tprivate readonly activeModTones: Array<Array<Deque<Tone>>> = [];\r\n\t//private readonly releasedModTones: Array<Array<Deque<Tone>>> = [];\r\n\tprivate readonly releasedTones: Array<Deque<Tone>> = [];\r\n\tprivate readonly liveInputTones: Deque<Tone> = new Deque<Tone>();\r\n\r\n\t//private highpassInput: number = 0.0;\r\n\t//private highpassOutput: number = 0.0;\r\n\tprivate limit: number = 0.0;\r\n\r\n\tprivate stereoBufferIndex: number = 0;\r\n\tprivate samplesForNone: Float32Array | null = null;\r\n\tprivate samplesForReverb: Float32Array | null = null;\r\n\tprivate samplesForChorus: Float32Array | null = null;\r\n\tprivate samplesForChorusReverb: Float32Array | null = null;\r\n\r\n\tprivate chorusDelayLine: Float32Array = new Float32Array(2048);\r\n\tprivate chorusDelayPos: number = 0;\r\n\tprivate chorusPhase: number = 0;\r\n\r\n\tprivate reverbDelayLine: Float32Array = new Float32Array(16384);\r\n\tprivate reverbDelayPos: number = 0;\r\n\tprivate reverbFeedback0: number = 0.0;\r\n\tprivate reverbFeedback1: number = 0.0;\r\n\tprivate reverbFeedback2: number = 0.0;\r\n\tprivate reverbFeedback3: number = 0.0;\r\n\r\n\tprivate audioCtx: any | null = null;\r\n\tprivate scriptNode: any | null = null;\r\n\r\n\tpublic get playing(): boolean {\r\n\t\treturn this.isPlayingSong;\r\n\t}\r\n\r\n\tpublic get playhead(): number {\r\n\t\treturn this.playheadInternal;\r\n\t}\r\n\r\n\tpublic set playhead(value: number) {\r\n\t\tif (this.song != null) {\r\n\t\t\tthis.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n\t\t\tlet remainder: number = this.playheadInternal;\r\n\t\t\tthis.bar = Math.floor(remainder);\r\n\t\t\tremainder = this.song.beatsPerBar * (remainder - this.bar);\r\n\t\t\tthis.beat = Math.floor(remainder);\r\n\t\t\tremainder = Config.partsPerBeat * (remainder - this.beat);\r\n\t\t\tthis.part = Math.floor(remainder);\r\n\t\t\tremainder = Config.ticksPerPart * (remainder - this.part);\r\n\t\t\tthis.tick = Math.floor(remainder);\r\n\t\t\tconst samplesPerTick: number = this.getSamplesPerTick();\r\n\t\t\tremainder = samplesPerTick * (remainder - this.tick);\r\n\t\t\tthis.tickSampleCountdown = samplesPerTick - remainder;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getSamplesPerBar(): number {\r\n\t\tif (this.song == null) throw new Error();\r\n\t\treturn this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\r\n\t}\r\n\r\n\t// Calculate the total number of parts that will be played in the current bar before any next bar mods trigger.\r\n\tprivate findPartsInBar(bar: number): number {\r\n\t\tif (this.song == null) return 0;\r\n\t\tlet partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\tif (pattern != null) {\r\n\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\tif (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n\t\t\t\t\t\t\t\t// Find the earliest next bar note.\r\n\t\t\t\t\t\t\t\tif (partsInBar > note.start)\r\n\t\t\t\t\t\t\t\t\tpartsInBar = note.start;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn partsInBar;\r\n\t}\r\n\r\n\t// Returns the total samples in the song\r\n\tpublic getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\r\n\t\tif (this.song == null)\r\n\t\t\treturn -1;\r\n\r\n\t\t// Compute the window to be checked (start bar to end bar)\r\n\t\tlet startBar: number = enableIntro ? 0 : this.song.loopStart;\r\n\t\tlet endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\r\n\t\tlet hasTempoMods: boolean = false;\r\n\t\tlet hasNextBarMods: boolean = false;\r\n\t\tlet prevTempo: number = this.song.tempo;\r\n\r\n\t\t// Determine if any tempo or next bar mods happen anywhere in the window\r\n\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\tfor (let bar: number = startBar; bar < endBar; bar++) {\r\n\t\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\thasTempoMods = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\thasNextBarMods = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\r\n\t\tif (startBar > 0) {\r\n\t\t\tlet latestTempoPin: number | null = null;\r\n\t\t\tlet latestTempoValue: number = 0;\r\n\r\n\t\t\tfor (let bar: number = startBar - 1; bar >= 0; bar--) {\r\n\t\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\t\tlet pattern = this.song.getPattern(channel, bar);\r\n\r\n\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\tlet instrumentIdx: number = this.song.getPatternInstrument(channel, bar);\r\n\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\r\n\t\t\t\t\t\tlet partsInBar: number = this.findPartsInBar(bar);\r\n\r\n\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\tif (instrument.modSettings[Config.modCount - 1 - note.pitches[0]] == ModSetting.mstTempo && instrument.modStatuses[Config.modCount - 1 - note.pitches[0]] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\t\tif (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\r\n\t\t\t\t\t\t\t\t\tif (note.end <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoPin = note.end;\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoValue = note.pins[note.pins.length - 1].volume;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoPin = partsInBar;\r\n\t\t\t\t\t\t\t\t\t\t// Find the pin where bar change happens, and compute where pin volume would be at that time\r\n\t\t\t\t\t\t\t\t\t\tfor (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tlatestTempoValue = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n\t\t\t\t\t\t\t\t\t\t\t\tpinIdx = note.pins.length;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Done once you process a pattern where tempo mods happened, since the search happens backward\r\n\t\t\t\tif (latestTempoPin != null) {\r\n\t\t\t\t\tprevTempo = this.song.modValueToReal(latestTempoValue, ModSetting.mstTempo);\r\n\t\t\t\t\tbar = -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (hasTempoMods || hasNextBarMods) {\r\n\t\t\t// Run from start bar to end bar and observe looping, computing average tempo across each bar\r\n\t\t\tlet bar: number = startBar;\r\n\t\t\tlet ended: boolean = false;\r\n\t\t\tlet totalSamples: number = 0;\r\n\r\n\t\t\twhile (!ended) {\r\n\t\t\t\t// Compute the subsection of the pattern that will play\r\n\t\t\t\tlet partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n\t\t\t\tlet currentPart: number = 0;\r\n\r\n\t\t\t\tif (hasNextBarMods) {\r\n\t\t\t\t\tpartsInBar = this.findPartsInBar(bar);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Compute average tempo in this tick window, or use last tempo if nothing happened\r\n\t\t\t\tif (hasTempoMods) {\r\n\t\t\t\t\tlet foundMod: boolean = false;\r\n\t\t\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tif (foundMod == false) {\r\n\t\t\t\t\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\t\tif (foundMod == false && instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong\r\n\t\t\t\t\t\t\t\t\t\t&& pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\r\n\t\t\t\t\t\t\t\t\t\t// Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\r\n\t\t\t\t\t\t\t\t\t\tfoundMod = true;\r\n\t\t\t\t\t\t\t\t\t\t// Need to re-sort the notes by start time to make the next part much less painful.\r\n\t\t\t\t\t\t\t\t\t\tpattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\r\n\t\t\t\t\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// Compute samples up to this note\r\n\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (note.start < partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Compute samples up to this pin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst prevPinTempo: number = this.song.modValueToReal(note.pins[pinIdx - 1].volume, ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet currPinTempo: number = this.song.modValueToReal(note.pins[pinIdx].volume, ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrPinTempo = this.song.modValueToReal(note.pins[pinIdx - 1].volume + (note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time), ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (currPinTempo != prevPinTempo) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The starting formula is\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Substituting BPM for a step variable that moves with respect to the current tick, we get\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// No tempo change between the two pins.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprevTempo = currPinTempo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Compute samples for the rest of the bar\r\n\t\t\t\ttotalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n\t\t\t\tbar++;\r\n\t\t\t\tif (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\tbar = this.song.loopStart;\r\n\t\t\t\t\tif (loop > 0) loop--;\r\n\t\t\t\t}\r\n\t\t\t\tif (bar >= endBar) {\r\n\t\t\t\t\tended = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn Math.ceil(totalSamples);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// No tempo or next bar mods... phew! Just calculate normally.\r\n\t\t\treturn this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\r\n\t\tif (this.song == null) throw new Error();\r\n\t\tlet bars: number = this.song.loopLength * (useLoopCount + 1);\r\n\t\tif (enableIntro) bars += this.song.loopStart;\r\n\t\tif (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n\t\treturn bars;\r\n\t}\r\n\r\n\tconstructor(song: Song | string | null = null) {\r\n\t\tif (song != null) this.setSong(song);\r\n\t}\r\n\r\n\tpublic setSong(song: Song | string): void {\r\n\t\tif (typeof (song) == \"string\") {\r\n\t\t\tthis.song = new Song(song);\r\n\t\t} else if (song instanceof Song) {\r\n\t\t\tthis.song = song;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic setModValue(volumeStart: number, volumeEnd: number, mod: number, instrument: Instrument, setting: ModSetting): number {\r\n\t\tlet val: number;\r\n\t\tlet nextVal: number;\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tval = (this.song as Song).modValueToReal(volumeStart, setting);\r\n\t\t\t\tnextVal = (this.song as Song).modValueToReal(volumeEnd, setting);\r\n\t\t\t\tif (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\r\n\t\t\t\t\tthis.modValues[setting] = val;\r\n\t\t\t\t\tthis.nextModValues[setting] = nextVal;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tval = this.song!.modValueToReal(volumeStart, setting);\r\n\t\t\t\tnextVal = this.song!.modValueToReal(volumeEnd, setting);\r\n\t\t\t\tlet channelAdjust: number = instrument.modChannels[mod] + ((instrument.modStatuses[mod] == ModStatus.msForNoise) ? this.song!.pitchChannelCount : 0);\r\n\r\n\t\t\t\tif (this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] == null\r\n\t\t\t\t\t|| this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != val\r\n\t\t\t\t\t|| this.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != nextVal) {\r\n\t\t\t\t\tthis.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = val;\r\n\t\t\t\t\tthis.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = nextVal;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\t\tval = (this.song as Song).modValueToReal(volumeStart, setting);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tval = -1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn val;\r\n\t}\r\n\r\n\tpublic getModValue(setting: ModSetting, forSong: boolean, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\r\n\t\tif (forSong) {\r\n\t\t\tif (this.modValues[setting] != null && this.nextModValues[setting] != null) {\r\n\t\t\t\treturn nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\r\n\t\t\t}\r\n\t\t} else if (channel != undefined && instrument != undefined) {\r\n\t\t\tif (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n\t\t\t\treturn nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t// Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\r\n\tpublic isAnyModActive(channel: number, instrument: number): boolean {\r\n\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\tif ((this.modValues != undefined && this.modValues[setting] != null)\r\n\t\t\t\t|| (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic unsetMod(setting: ModSetting, channel?: number, instrument?: number) {\r\n\t\tif (this.isModActive(setting, true) || (channel != undefined && instrument != undefined && this.isModActive(setting, false, channel, instrument))) {\r\n\t\t\tthis.modValues[setting] = null;\r\n\t\t\tthis.nextModValues[setting] = null;\r\n\t\t\tif (channel != undefined && instrument != undefined) {\r\n\t\t\t\tthis.modInsValues[channel][instrument][setting] = null;\r\n\t\t\t\tthis.nextModInsValues[channel][instrument][setting] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isModActive(setting: ModSetting, forSong: boolean, channel?: number, instrument?: number): boolean {\r\n\t\tif (forSong) {\r\n\t\t\treturn (this.modValues != undefined && this.modValues[setting] != null);\r\n\t\t} else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null && this.modInsValues[channel][instrument][setting] != null) {\r\n\t\t\treturn (this.modInsValues[channel][instrument][setting] != null);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate activateAudio(): void {\r\n\t\tif (this.audioCtx == null || this.scriptNode == null) {\r\n\t\t\tthis.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)();\r\n\t\t\tthis.samplesPerSecond = this.audioCtx.sampleRate;\r\n\t\t\tthis.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(2048, 0, 2) : this.audioCtx.createJavaScriptNode(2048, 0, 2); // 2048, 0 input channels, 2 output channels\r\n\t\t\tthis.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n\t\t\tthis.scriptNode.channelCountMode = 'explicit';\r\n\t\t\tthis.scriptNode.channelInterpretation = 'speakers';\r\n\t\t\tthis.scriptNode.connect(this.audioCtx.destination);\r\n\t\t}\r\n\t\tthis.audioCtx.resume();\r\n\t}\r\n\r\n\tprivate deactivateAudio(): void {\r\n\t\tif (this.audioCtx != null && this.scriptNode != null) {\r\n\t\t\tthis.scriptNode.disconnect(this.audioCtx.destination);\r\n\t\t\tthis.scriptNode = null;\r\n\t\t\tif (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n\t\t\tthis.audioCtx = null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic maintainLiveInput(): void {\r\n\t\tthis.activateAudio();\r\n\t\tthis.liveInputEndTime = performance.now() + 10000.0;\r\n\t}\r\n\r\n\tpublic play(): void {\r\n\t\tif (this.isPlayingSong) return;\r\n\t\tthis.isPlayingSong = true;\r\n\t\tthis.warmUpSynthesizer(this.song);\r\n\t\tthis.computeLatestModValues();\r\n\t\tthis.activateAudio();\r\n\t}\r\n\r\n\tpublic pause(): void {\r\n\t\tif (!this.isPlayingSong) return;\r\n\t\tthis.isPlayingSong = false;\r\n\t\tif (this.song != null) {\r\n\t\t\tthis.song.inVolumeCap = 0.0;\r\n\t\t\tthis.song.outVolumeCap = 0.0;\r\n\t\t}\r\n\t\tthis.modValues = [];\r\n\t\tthis.modInsValues = [];\r\n\t\tthis.nextModValues = [];\r\n\t\tthis.nextModInsValues = [];\r\n\t\tthis.tyingOver = [];\r\n\t}\r\n\r\n\tpublic snapToStart(): void {\r\n\t\tthis.bar = 0;\r\n\t\tthis.snapToBar();\r\n\t}\r\n\r\n\tpublic goToBar(bar: number): void {\r\n\t\tthis.bar = bar;\r\n\t\tthis.playheadInternal = this.bar;\r\n\t}\r\n\r\n\tpublic snapToBar(): void {\r\n\t\tthis.playheadInternal = this.bar;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\t\tthis.tick = 0;\r\n\t\tthis.tickSampleCountdown = 0;\r\n\t}\r\n\r\n\tpublic resetEffects(): void {\r\n\t\tthis.reverbDelayPos = 0;\r\n\t\tthis.reverbFeedback0 = 0.0;\r\n\t\tthis.reverbFeedback1 = 0.0;\r\n\t\tthis.reverbFeedback2 = 0.0;\r\n\t\tthis.reverbFeedback3 = 0.0;\r\n\t\t//this.highpassInput = 0.0;\r\n\t\t//this.highpassOutput = 0.0;\r\n\t\tthis.freeAllTones();\r\n\t\tfor (let i: number = 0; i < this.reverbDelayLine.length; i++) this.reverbDelayLine[i] = 0.0;\r\n\t\tfor (let i: number = 0; i < this.chorusDelayLine.length; i++) this.chorusDelayLine[i] = 0.0;\r\n\t\tif (this.samplesForNone != null) for (let i: number = 0; i < this.samplesForNone.length; i++) this.samplesForNone[i] = 0.0;\r\n\t\tif (this.samplesForReverb != null) for (let i: number = 0; i < this.samplesForReverb.length; i++) this.samplesForReverb[i] = 0.0;\r\n\t\tif (this.samplesForChorus != null) for (let i: number = 0; i < this.samplesForChorus.length; i++) this.samplesForChorus[i] = 0.0;\r\n\t\tif (this.samplesForChorusReverb != null) for (let i: number = 0; i < this.samplesForChorusReverb.length; i++) this.samplesForChorusReverb[i] = 0.0;\r\n\t}\r\n\r\n\tpublic jumpIntoLoop(): void {\r\n\t\tif (!this.song) return;\r\n\t\tif (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\r\n\t\t\tconst oldBar: number = this.bar;\r\n\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t\tif (this.playing)\r\n\t\t\t\tthis.computeLatestModValues();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic nextBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst oldBar: number = this.bar;\r\n\t\tthis.bar++;\r\n\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\tthis.bar = 0;\r\n\t\t}\r\n\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic skipBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst samplesPerTick: number = this.getSamplesPerTick();\r\n\t\tthis.bar++;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\t\tthis.tick = 0;\r\n\t\tthis.tickSampleCountdown = samplesPerTick;\r\n\r\n\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic firstBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tthis.bar = 0;\r\n\t\tthis.playheadInternal = 0;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic jumpToEditingBar(bar: number): void {\r\n\t\tif (!this.song) return;\r\n\r\n\t\tthis.bar = bar;\r\n\r\n\t\tthis.playheadInternal = bar;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic prevBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst oldBar: number = this.bar;\r\n\t\tthis.bar--;\r\n\t\tif (this.bar < 0 || this.bar >= this.song.barCount) {\r\n\t\t\tthis.bar = this.song.barCount - 1;\r\n\t\t}\r\n\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tprivate audioProcessCallback = (audioProcessingEvent: any): void => {\r\n\t\tconst outputBuffer = audioProcessingEvent.outputBuffer;\r\n\t\tconst outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n\t\tconst outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n\t\tconst isPlayingLiveTones = performance.now() < this.liveInputEndTime;\r\n\t\tif (!isPlayingLiveTones && !this.isPlayingSong) {\r\n\t\t\tfor (let i: number = 0; i < outputBuffer.length; i++) {\r\n\t\t\t\toutputDataL[i] = 0.0;\r\n\t\t\t\toutputDataR[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.deactivateAudio();\r\n\t\t} else {\r\n\t\t\tthis.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\r\n\t\tif (this.song == null) {\r\n\t\t\tfor (let i: number = 0; i < outputBufferLength; i++) {\r\n\t\t\t\toutputDataL[i] = 0.0;\r\n\t\t\t\toutputDataR[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.deactivateAudio();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.song.inVolumeCap = 0.0; // Reset volume cap for this run\r\n\t\tthis.song.outVolumeCap = 0.0;\r\n\r\n\t\tconst channelCount: number = this.song.pitchChannelCount + this.song.noiseChannelCount;\r\n\r\n\t\tfor (let i: number = this.activeTones.length; i < channelCount; i++) {\r\n\t\t\tthis.activeTones[i] = new Deque<Tone>();\r\n\t\t\tthis.releasedTones[i] = new Deque<Tone>();\r\n\t\t}\r\n\t\tthis.activeTones.length = channelCount;\r\n\t\tthis.releasedTones.length = channelCount;\r\n\t\tif (channelCount != this.tyingOver.length) {\r\n\t\t\tlet idx: number = this.tyingOver.length;\r\n\t\t\tthis.tyingOver.length = channelCount;\r\n\t\t\twhile (idx < this.tyingOver.length) {\r\n\t\t\t\tthis.tyingOver[idx++] = -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i: number = this.activeModTones.length; i < this.song.modChannelCount; i++) {\r\n\t\t\tthis.activeModTones[i] = [];\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tthis.activeModTones[i][mod] = new Deque<Tone>();\r\n\t\t\t}\r\n\t\t\tthis.activeModTones[i].length = Config.modCount;\r\n\t\t}\r\n\t\tthis.activeModTones.length = this.song.modChannelCount;\r\n\r\n\t\tlet samplesPerTick: number = this.getSamplesPerTick();\r\n\t\tlet bufferIndex: number = 0;\r\n\t\tlet ended: boolean = false;\r\n\r\n\t\t// Check the bounds of the playhead:\r\n\t\twhile (this.tickSampleCountdown <= 0) this.tickSampleCountdown += samplesPerTick;\r\n\t\tif (this.tickSampleCountdown > samplesPerTick) this.tickSampleCountdown = samplesPerTick;\r\n\t\tif (playSong) {\r\n\t\t\tif (this.beat >= this.song.beatsPerBar) {\r\n\t\t\t\tthis.bar++;\r\n\t\t\t\tthis.beat = 0;\r\n\t\t\t\tthis.part = 0;\r\n\t\t\t\tthis.tick = 0;\r\n\t\t\t\tthis.tickSampleCountdown = samplesPerTick;\r\n\r\n\t\t\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\tthis.bar = 0;\r\n\t\t\t\tif (this.loopRepeatCount != -1) {\r\n\t\t\t\t\tended = true;\r\n\t\t\t\t\tthis.pause();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//const synthStartTime: number = performance.now();\r\n\r\n\t\tconst stereoBufferLength: number = outputBufferLength * 4;\r\n\t\tif (this.samplesForNone == null || this.samplesForNone.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForReverb == null || this.samplesForReverb.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForChorus == null || this.samplesForChorus.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForChorusReverb == null || this.samplesForChorusReverb.length != stereoBufferLength) {\r\n\t\t\tthis.samplesForNone = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForReverb = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForChorus = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForChorusReverb = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.stereoBufferIndex = 0;\r\n\t\t}\r\n\t\tlet stereoBufferIndex: number = this.stereoBufferIndex;\r\n\t\tconst samplesForNone: Float32Array = this.samplesForNone;\r\n\t\tconst samplesForReverb: Float32Array = this.samplesForReverb;\r\n\t\tconst samplesForChorus: Float32Array = this.samplesForChorus;\r\n\t\tconst samplesForChorusReverb: Float32Array = this.samplesForChorusReverb;\r\n\r\n\t\t// Post processing parameters:\r\n\t\tconst volume: number = +this.volume;\r\n\t\tconst chorusDelayLine: Float32Array = this.chorusDelayLine;\r\n\t\tconst reverbDelayLine: Float32Array = this.reverbDelayLine;\r\n\t\tconst chorusDuration: number = 2.0;\r\n\t\tconst chorusAngle: number = Math.PI * 2.0 / (chorusDuration * this.samplesPerSecond);\r\n\t\tconst chorusRange: number = 150 * this.samplesPerSecond / 44100;\r\n\t\tconst chorusOffset0: number = 0x800 - 1.51 * chorusRange;\r\n\t\tconst chorusOffset1: number = 0x800 - 2.10 * chorusRange;\r\n\t\tconst chorusOffset2: number = 0x800 - 3.35 * chorusRange;\r\n\t\tconst chorusOffset3: number = 0x800 - 1.47 * chorusRange;\r\n\t\tconst chorusOffset4: number = 0x800 - 2.15 * chorusRange;\r\n\t\tconst chorusOffset5: number = 0x800 - 3.25 * chorusRange;\r\n\t\tlet chorusPhase: number = this.chorusPhase % (Math.PI * 2.0);\r\n\t\tlet chorusDelayPos: number = this.chorusDelayPos & 0x7FF;\r\n\t\tlet reverbDelayPos: number = this.reverbDelayPos & 0x3FFF;\r\n\t\tlet reverbFeedback0: number = +this.reverbFeedback0;\r\n\t\tlet reverbFeedback1: number = +this.reverbFeedback1;\r\n\t\tlet reverbFeedback2: number = +this.reverbFeedback2;\r\n\t\tlet reverbFeedback3: number = +this.reverbFeedback3;\r\n\t\tlet useReverb: number = this.song.reverb;\r\n\t\tif (this.isModActive(ModSetting.mstReverb, true)) {\r\n\t\t\tuseReverb = this.getModValue(ModSetting.mstReverb, true);\r\n\t\t}\r\n\t\tlet reverb: number = Math.pow(useReverb / Config.reverbRange, 0.667) * 0.425;\r\n\t\t//const highpassFilter: number = Math.pow(0.5, 400 / this.samplesPerSecond);\r\n\t\tconst limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond); // Default 4.0\r\n\t\tconst limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond); // Default 4000.0;\r\n\t\tconst compressionThreshold: number = this.song.compressionThreshold; // Default 1\r\n\t\tconst limitThreshold: number = this.song.limitThreshold; // Default 1\r\n\t\tconst compressionRatio: number = this.song.compressionRatio; // Default 1\r\n\t\tconst limitRatio: number = this.song.limitRatio; // Default 1\r\n\t\tconst masterGain: number = this.song.masterGain; // Default 1\r\n\t\t//let highpassInput: number = +this.highpassInput;\r\n\t\t//let highpassOutput: number = +this.highpassOutput;\r\n\t\tlet limit: number = +this.limit;\r\n\r\n\t\twhile (bufferIndex < outputBufferLength && !ended) {\r\n\r\n\t\t\tconst samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\r\n\t\t\tconst runLength: number = Math.min(Math.ceil(this.tickSampleCountdown), samplesLeftInBuffer);\r\n\r\n\t\t\tfor (let modChannel: number = 0, channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; modChannel < this.song.modChannelCount; modChannel++, channel++) {\r\n\t\t\t\t// Also determines mod tones.\r\n\t\t\t\tthis.determineCurrentActiveTones(this.song, channel, playSong);\r\n\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tfor (let i: number = 0; i < this.activeModTones[modChannel][mod].count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.activeModTones[modChannel][mod].get(i);\r\n\r\n\t\t\t\t\t\tif (this.song.channels[channel].muted == false)\r\n\t\t\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Handle next bar mods if they were set\r\n\t\t\tif (this.wantToSkip) {\r\n\t\t\t\tthis.wantToSkip = false;\r\n\t\t\t\tthis.skipBar();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.isModActive(ModSetting.mstReverb, true)) {\r\n\t\t\t\treverb = Math.pow(this.getModValue(ModSetting.mstReverb, true) / Config.reverbRange, 0.667) * 0.425;\r\n\t\t\t}\r\n\r\n\t\t\t// Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\r\n\r\n\t\t\tconst tickSampleCountdown: number = this.tickSampleCountdown;\r\n\t\t\tconst startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n\t\t\tconst endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n\t\t\tconst ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n\t\t\tconst partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n\t\t\tconst partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n\t\t\tconst partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n\t\t\tconst partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\tfor (let instrumentIdx: number = 0; instrumentIdx < this.song.instrumentsPerChannel; instrumentIdx++) {\r\n\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\tlet useVibratoSpeed: number = instrument.vibratoSpeed;\r\n\r\n\t\t\t\t\tinstrument.LFOtime = instrument.nextLFOtime;\r\n\r\n\t\t\t\t\tif (this.isModActive(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t\tuseVibratoSpeed = this.getModValue(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx, false);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (useVibratoSpeed == 0) {\r\n\t\t\t\t\t\tinstrument.LFOtime = 0;\r\n\t\t\t\t\t\tinstrument.nextLFOtime = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinstrument.nextLFOtime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\r\n\t\t\t\tif (channel == this.liveInputChannel) {\r\n\t\t\t\t\tthis.determineLiveInputTones(this.song);\r\n\r\n\t\t\t\t\tfor (let i: number = 0; i < this.liveInputTones.count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.liveInputTones.get(i);\r\n\t\t\t\t\t\t// Hmm. Will allow active input from a muted channel for now.\r\n\t\t\t\t\t\t//if (this.song.channels[channel].muted == false)\r\n\t\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.determineCurrentActiveTones(this.song, channel, playSong);\r\n\t\t\t\tfor (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n\t\t\t\t\tconst tone: Tone = this.activeTones[channel].get(i);\r\n\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n\t\t\t\t\tconst tone: Tone = this.releasedTones[channel].get(i);\r\n\t\t\t\t\tif (tone.ticksSinceReleased >= tone.instrument.getTransition().releaseTicks) {\r\n\t\t\t\t\t\tthis.freeReleasedTone(channel, i);\r\n\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\r\n\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, true, shouldFadeOutFast);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Post processing:\r\n\t\t\tlet chorusTap0Index: number = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n\t\t\tlet chorusTap1Index: number = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n\t\t\tlet chorusTap2Index: number = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n\t\t\tlet chorusTap3Index: number = chorusDelayPos + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n\t\t\tlet chorusTap4Index: number = chorusDelayPos + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n\t\t\tlet chorusTap5Index: number = chorusDelayPos + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n\t\t\tchorusPhase += chorusAngle * runLength;\r\n\t\t\tconst chorusTap0End: number = chorusDelayPos + runLength + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n\t\t\tconst chorusTap1End: number = chorusDelayPos + runLength + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n\t\t\tconst chorusTap2End: number = chorusDelayPos + runLength + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n\t\t\tconst chorusTap3End: number = chorusDelayPos + runLength + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n\t\t\tconst chorusTap4End: number = chorusDelayPos + runLength + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n\t\t\tconst chorusTap5End: number = chorusDelayPos + runLength + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n\t\t\tconst chorusTap0Delta: number = (chorusTap0End - chorusTap0Index) / runLength;\r\n\t\t\tconst chorusTap1Delta: number = (chorusTap1End - chorusTap1Index) / runLength;\r\n\t\t\tconst chorusTap2Delta: number = (chorusTap2End - chorusTap2Index) / runLength;\r\n\t\t\tconst chorusTap3Delta: number = (chorusTap3End - chorusTap3Index) / runLength;\r\n\t\t\tconst chorusTap4Delta: number = (chorusTap4End - chorusTap4Index) / runLength;\r\n\t\t\tconst chorusTap5Delta: number = (chorusTap5End - chorusTap5Index) / runLength;\r\n\t\t\tconst runEnd: number = bufferIndex + runLength;\r\n\t\t\tfor (let i: number = bufferIndex; i < runEnd; i++) {\r\n\t\t\t\tconst bufferIndexL: number = stereoBufferIndex;\r\n\t\t\t\tconst bufferIndexR: number = stereoBufferIndex + 1;\r\n\t\t\t\tconst sampleForNoneL: number = samplesForNone[bufferIndexL]; samplesForNone[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForNoneR: number = samplesForNone[bufferIndexR]; samplesForNone[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForReverbL: number = samplesForReverb[bufferIndexL]; samplesForReverb[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForReverbR: number = samplesForReverb[bufferIndexR]; samplesForReverb[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForChorusL: number = samplesForChorus[bufferIndexL]; samplesForChorus[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForChorusR: number = samplesForChorus[bufferIndexR]; samplesForChorus[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForChorusReverbL: number = samplesForChorusReverb[bufferIndexL]; samplesForChorusReverb[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForChorusReverbR: number = samplesForChorusReverb[bufferIndexR]; samplesForChorusReverb[bufferIndexR] = 0.0;\r\n\t\t\t\tstereoBufferIndex += 2;\r\n\r\n\t\t\t\tconst combinedChorusL: number = sampleForChorusL + sampleForChorusReverbL;\r\n\t\t\t\tconst combinedChorusR: number = sampleForChorusR + sampleForChorusReverbR;\r\n\r\n\t\t\t\tconst chorusTap0Ratio: number = chorusTap0Index % 1;\r\n\t\t\t\tconst chorusTap1Ratio: number = chorusTap1Index % 1;\r\n\t\t\t\tconst chorusTap2Ratio: number = chorusTap2Index % 1;\r\n\t\t\t\tconst chorusTap3Ratio: number = chorusTap3Index % 1;\r\n\t\t\t\tconst chorusTap4Ratio: number = chorusTap4Index % 1;\r\n\t\t\t\tconst chorusTap5Ratio: number = chorusTap5Index % 1;\r\n\t\t\t\tconst chorusTap0A: number = chorusDelayLine[(chorusTap0Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap0B: number = chorusDelayLine[(chorusTap0Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap1A: number = chorusDelayLine[(chorusTap1Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap1B: number = chorusDelayLine[(chorusTap1Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap2A: number = chorusDelayLine[(chorusTap2Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap2B: number = chorusDelayLine[(chorusTap2Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap3A: number = chorusDelayLine[(chorusTap3Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap3B: number = chorusDelayLine[(chorusTap3Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap4A: number = chorusDelayLine[(chorusTap4Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap4B: number = chorusDelayLine[(chorusTap4Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap5A: number = chorusDelayLine[(chorusTap5Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap5B: number = chorusDelayLine[(chorusTap5Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap0: number = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n\t\t\t\tconst chorusTap1: number = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n\t\t\t\tconst chorusTap2: number = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n\t\t\t\tconst chorusTap3: number = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n\t\t\t\tconst chorusTap4: number = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n\t\t\t\tconst chorusTap5: number = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n\t\t\t\tconst chorusSampleL = 0.5 * (combinedChorusL - chorusTap0 + chorusTap1 - chorusTap2);\r\n\t\t\t\tconst chorusSampleR = 0.5 * (combinedChorusR - chorusTap3 + chorusTap4 - chorusTap5);\r\n\t\t\t\tchorusDelayLine[chorusDelayPos] = combinedChorusL;\r\n\t\t\t\tchorusDelayLine[(chorusDelayPos + 0x400) & 0x7FF] = combinedChorusR;\r\n\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & 0x7FF;\r\n\t\t\t\tchorusTap0Index += chorusTap0Delta;\r\n\t\t\t\tchorusTap1Index += chorusTap1Delta;\r\n\t\t\t\tchorusTap2Index += chorusTap2Delta;\r\n\t\t\t\tchorusTap3Index += chorusTap3Delta;\r\n\t\t\t\tchorusTap4Index += chorusTap4Delta;\r\n\t\t\t\tchorusTap5Index += chorusTap5Delta;\r\n\r\n\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n\t\t\t\t// good ratios:\t\t0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n\t\t\t\t// Delay lengths:\t3041\t + 3385\t\t+ 4481\t+  5477 = 16384 = 2^14\r\n\t\t\t\t// Buffer offsets:\t3041\t-> 6426\t   -> 10907 -> 16384\r\n\t\t\t\tconst reverbDelayPos1: number = (reverbDelayPos + 3041) & 0x3FFF;\r\n\t\t\t\tconst reverbDelayPos2: number = (reverbDelayPos + 6426) & 0x3FFF;\r\n\t\t\t\tconst reverbDelayPos3: number = (reverbDelayPos + 10907) & 0x3FFF;\r\n\t\t\t\tconst reverbSample0: number = (reverbDelayLine[reverbDelayPos]);\r\n\t\t\t\tconst reverbSample1: number = reverbDelayLine[reverbDelayPos1];\r\n\t\t\t\tconst reverbSample2: number = reverbDelayLine[reverbDelayPos2];\r\n\t\t\t\tconst reverbSample3: number = reverbDelayLine[reverbDelayPos3];\r\n\t\t\t\tconst reverbTemp0: number = -(reverbSample0 + sampleForChorusReverbL + sampleForReverbL) + reverbSample1;\r\n\t\t\t\tconst reverbTemp1: number = -(reverbSample0 + sampleForChorusReverbR + sampleForReverbR) - reverbSample1;\r\n\t\t\t\tconst reverbTemp2: number = -reverbSample2 + reverbSample3;\r\n\t\t\t\tconst reverbTemp3: number = -reverbSample2 - reverbSample3;\r\n\t\t\t\treverbFeedback0 += ((reverbTemp0 + reverbTemp2) * reverb - reverbFeedback0) * 0.5;\r\n\t\t\t\treverbFeedback1 += ((reverbTemp1 + reverbTemp3) * reverb - reverbFeedback1) * 0.5;\r\n\t\t\t\treverbFeedback2 += ((reverbTemp0 - reverbTemp2) * reverb - reverbFeedback2) * 0.5;\r\n\t\t\t\treverbFeedback3 += ((reverbTemp1 - reverbTemp3) * reverb - reverbFeedback3) * 0.5;\r\n\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbFeedback0;\r\n\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbFeedback1;\r\n\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbFeedback2;\r\n\t\t\t\treverbDelayLine[reverbDelayPos] = reverbFeedback3;\r\n\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & 0x3FFF;\r\n\r\n\t\t\t\t// Apply master pre-gain to the sound, before limiting. Master gain slider is 0-5, but it's squared for more range (0-25).\r\n\t\t\t\tconst sampleL = masterGain * masterGain * (sampleForNoneL + chorusSampleL + sampleForReverbL + reverbSample1 + reverbSample2 + reverbSample3);\r\n\t\t\t\tconst sampleR = masterGain * masterGain * (sampleForNoneR + chorusSampleR + sampleForReverbR + reverbSample0 + reverbSample2 - reverbSample3);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\thighpassOutput = highpassOutput * highpassFilter + sample - highpassInput;\r\n\t\t\t\thighpassInput = sample;\r\n\t\t\t\t// use highpassOutput instead of sample below?\r\n\t\t\t\t*/\r\n\r\n\t\t\t\t// A compressor/limiter.\r\n\t\t\t\tconst absL: number = sampleL < 0.0 ? -sampleL : sampleL;\r\n\t\t\t\tconst absR: number = sampleR < 0.0 ? -sampleR : sampleR;\r\n\t\t\t\tconst abs: number = absL > absR ? absL : absR;\r\n\t\t\t\tthis.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\r\n\t\t\t\t// Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\r\n\t\t\t\tconst limitRange: number = (+(abs > compressionThreshold)) + (+(abs > limitThreshold));\r\n\t\t\t\t// Determine the target amplification based on the range of the curve\r\n\t\t\t\tconst limitTarget: number =\r\n\t\t\t\t\t(+(limitRange == 0)) * (((abs + 1 - compressionThreshold) * 0.8 + 0.25) * compressionRatio + 1.05 * (1 - compressionRatio))\r\n\t\t\t\t\t+ (+(limitRange == 1)) * (1.05)\r\n\t\t\t\t\t+ (+(limitRange == 2)) * (1.05 * ((abs + 1 - limitThreshold) * limitRatio + (1 - limitThreshold)));\r\n\t\t\t\t// Move the limit towards the target\r\n\t\t\t\tlimit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\r\n\t\t\t\tconst limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\r\n\t\t\t\toutputDataL[i] = sampleL * limitedVolume;\r\n\t\t\t\toutputDataR[i] = sampleR * limitedVolume;\r\n\r\n\t\t\t\tthis.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\r\n\t\t\t}\r\n\r\n\t\t\tbufferIndex += runLength;\r\n\r\n\t\t\tthis.tickSampleCountdown -= runLength;\r\n\t\t\tif (this.tickSampleCountdown <= 0) {\r\n\r\n\t\t\t\t// Track how long tones have been released, and free them if there are too many.\r\n\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\tfor (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.releasedTones[channel].get(i);\r\n\t\t\t\t\t\ttone.ticksSinceReleased++;\r\n\r\n\t\t\t\t\t\tconst shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\t\t\t\t\t\tif (shouldFadeOutFast) {\r\n\t\t\t\t\t\t\tthis.freeReleasedTone(channel, i);\r\n\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Update arpeggio time, which is used to calculate arpeggio position\r\n\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\tfor (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\t\tlet useArpeggioSpeed: number = instrument.arpeggioSpeed;\r\n\t\t\t\t\t\tif (this.isModActive(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t\t\tuseArpeggioSpeed = this.getModValue(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx, false);\r\n\t\t\t\t\t\t\tif (Number.isInteger(useArpeggioSpeed)) {\r\n\t\t\t\t\t\t\t\tinstrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// Linear interpolate arpeggio values\r\n\t\t\t\t\t\t\t\tinstrument.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinstrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tick++;\r\n\t\t\t\tthis.tickSampleCountdown += samplesPerTick;\r\n\t\t\t\tif (this.tick == Config.ticksPerPart) {\r\n\t\t\t\t\tthis.tick = 0;\r\n\t\t\t\t\tthis.part++;\r\n\t\t\t\t\tthis.liveInputDuration--;\r\n\t\t\t\t\tvar atEnd = this.part + this.beat * Config.partsPerBeat >= this.findPartsInBar(this.bar) - 1;\r\n\t\t\t\t\t// Check if any active tones should be released.\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\t\t// Check if we're at the end of the bar and have a tie-over transition. If so, do not free tone\r\n\t\t\t\t\t\tvar carryOver = false;\r\n\t\t\t\t\t\tvar toneCount = this.activeTones[channel].count();\r\n\t\t\t\t\t\tvar pattern = this.song.getPattern(channel, this.bar);\r\n\t\t\t\t\t\tif (pattern != null && atEnd) {\r\n\t\t\t\t\t\t\tvar instrument = pattern.instrument;\r\n\t\t\t\t\t\t\tif (this.song.channels[channel].instruments[instrument].tieNoteTransition && toneCount > 0) {\r\n\t\t\t\t\t\t\t\t// Verify that all tie conditions are met\r\n\t\t\t\t\t\t\t\t// 1. Check for a note in this channel at the start of the next bar\r\n\t\t\t\t\t\t\t\t// 2. Check that the note's volume start matches the current volume\r\n\t\t\t\t\t\t\t\t// 3. Check that the shape (pitches, chord size) is a match\r\n\t\t\t\t\t\t\t\t// 4. Check that the instruments are the same\r\n\t\t\t\t\t\t\t\tvar targetBar = this.bar + 1;\r\n\t\t\t\t\t\t\t\tif (targetBar >= this.song.barCount || (targetBar >= this.song.loopStart + this.song.loopLength && this.loopRepeatCount != 0)) {\r\n\t\t\t\t\t\t\t\t\ttargetBar = this.song.loopStart;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvar nextPattern = this.song.getPattern(channel, targetBar);\r\n\t\t\t\t\t\t\t\tvar currNote = this.activeTones[channel].get(0).note;\r\n\t\t\t\t\t\t\t\tif (currNote != null) {\r\n\t\t\t\t\t\t\t\t\tvar pin = 0;\r\n\t\t\t\t\t\t\t\t\twhile (currNote.pins[pin].time + currNote.start < this.part + this.beat * Config.partsPerBeat && pin < currNote.pins.length - 1)\r\n\t\t\t\t\t\t\t\t\t\tpin++;\r\n\t\t\t\t\t\t\t\t\tvar currVolume = currNote.pins[pin].volume;\r\n\t\t\t\t\t\t\t\t\tvar lastInterval = currNote.pins[pin].interval;\r\n\r\n\t\t\t\t\t\t\t\t\tif (nextPattern != null && nextPattern.instrument == instrument) {\r\n\t\t\t\t\t\t\t\t\t\tfor (let i: number = 0; i < nextPattern.notes.length; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (nextPattern.notes[i].start == 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t&& nextPattern.notes[i].pins[0].volume == currVolume\r\n\t\t\t\t\t\t\t\t\t\t\t\t&& nextPattern.notes[i].pitches.length == currNote.pitches.length) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tcarryOver = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < currNote.pitches.length; j++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Allow any pitch order\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (nextPattern.notes[i].pitches.findIndex((p) => p == currNote!.pitches[j] + lastInterval) == -1) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcarryOver = false;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tj = currNote.pitches.length;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\ti = nextPattern.notes.length;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (carryOver) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Prior to an actual tie, all releasing for hard transitions also needs to be\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// cancelled. So, this check is ran a few parts before the end of a bar too.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// In those cases, just set tyingOver to 0 for that duration to cancel release\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// handling, but not affect note start time calculations.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.part + this.beat * Config.partsPerBeat < this.findPartsInBar(this.bar)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Only does this if it is needed, so if we're long tying (next else-if below) then don't ruin the math.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.tyingOver[channel] < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Special case: tying over a whole bar, just add the length.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (currNote.start == 0 && this.tyingOver[channel] >= 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] += this.part + this.beat * Config.partsPerBeat;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Set tyingOver to a number >= 0 representing how many parts back the tie note started.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = this.part + this.beat * Config.partsPerBeat - currNote.start;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n\t\t\t\t\t\t\tconst tone: Tone = this.activeTones[channel].get(i);\r\n\t\t\t\t\t\t\tconst transition: Transition = tone.instrument.getTransition();\r\n\r\n\t\t\t\t\t\t\tif (tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n\t\t\t\t\t\t\t\t// Free tone if the transition allows\r\n\t\t\t\t\t\t\t\tif (!(transition.isSeamless || tone.instrument.clicklessTransition || this.tyingOver[channel] >= 0)) {\r\n\t\t\t\t\t\t\t\t\tif (transition.releases) {\r\n\t\t\t\t\t\t\t\t\t\tthis.releaseTone(channel, tone);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tthis.freeTone(tone);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.activeTones[channel].remove(i);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// End of note: if not actively trying to carry over, kill note tie\r\n\t\t\t\t\t\t\t\tif (!carryOver) {\r\n\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.song.modChannelCount; channel++) {\r\n\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.activeModTones[channel][mod].count(); i++) {\r\n\t\t\t\t\t\t\t\tconst tone: Tone = this.activeModTones[channel][mod].get(i);\r\n\t\t\t\t\t\t\t\tconst transition: Transition = tone.instrument.getTransition();\r\n\t\t\t\t\t\t\t\tif (!transition.isSeamless && tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n\t\t\t\t\t\t\t\t\tthis.freeTone(tone);\r\n\t\t\t\t\t\t\t\t\tthis.activeModTones[channel][mod].remove(i);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.part == Config.partsPerBeat) {\r\n\t\t\t\t\t\tthis.part = 0;\r\n\r\n\t\t\t\t\t\tif (playSong) {\r\n\t\t\t\t\t\t\tthis.beat++;\r\n\t\t\t\t\t\t\tif (this.beat == this.song.beatsPerBar) {\r\n\t\t\t\t\t\t\t\t// bar changed, reset for next bar:\r\n\t\t\t\t\t\t\t\tthis.beat = 0;\r\n\t\t\t\t\t\t\t\tthis.bar++;\r\n\t\t\t\t\t\t\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\t\t\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\t\t\t\t\t\tthis.bar = 0;\r\n\t\t\t\t\t\t\t\t\tif (this.loopRepeatCount != -1) {\r\n\t\t\t\t\t\t\t\t\t\tended = true;\r\n\t\t\t\t\t\t\t\t\t\tthis.resetEffects();\r\n\t\t\t\t\t\t\t\t\t\tthis.pause();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Update mod values so that next values copy to current values\r\n\t\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\t\tif (this.nextModValues != null && this.nextModValues[setting] != null)\r\n\t\t\t\t\tthis.modValues[setting] = this.nextModValues[setting];\r\n\t\t\t}\r\n\r\n\t\t\t// Set samples per tick if song tempo mods changed it\r\n\t\t\tif (this.isModActive(ModSetting.mstTempo, true)) {\r\n\t\t\t\tsamplesPerTick = this.getSamplesPerTick();\r\n\t\t\t\tthis.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\r\n\t\t\t}\r\n\r\n\t\t\t// Bound LFO times to be within their period (to keep values from getting large)\r\n\t\t\t// I figured this modulo math probably doesn't have to happen every LFO tick.\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount; channel++) {\r\n\t\t\t\tfor (let instrument of this.song.channels[channel].instruments) {\r\n\t\t\t\t\tinstrument.nextLFOtime = (instrument.nextLFOtime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\r\n\t\t\t\t\tinstrument.arpTime = (instrument.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\t\tfor (let channel: number = 0; channel < channelCount; channel++) {\r\n\t\t\t\t\tfor (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\t\tif (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n\t\t\t\t\t\t\tthis.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Optimization: Avoid persistent reverb values in the float denormal range.\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < reverbFeedback0 && reverbFeedback0 < epsilon) reverbFeedback0 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback1 && reverbFeedback1 < epsilon) reverbFeedback1 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback2 && reverbFeedback2 < epsilon) reverbFeedback2 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback3 && reverbFeedback3 < epsilon) reverbFeedback3 = 0.0;\r\n\t\t//if (-epsilon < highpassInput && highpassInput < epsilon) highpassInput = 0.0;\r\n\t\t//if (-epsilon < highpassOutput && highpassOutput < epsilon) highpassOutput = 0.0;\r\n\t\tif (-epsilon < limit && limit < epsilon) limit = 0.0;\r\n\r\n\t\tthis.stereoBufferIndex = (this.stereoBufferIndex + outputBufferLength * 2) % stereoBufferLength;\r\n\t\tthis.chorusPhase = chorusPhase;\r\n\t\tthis.chorusDelayPos = chorusDelayPos;\r\n\t\tthis.reverbDelayPos = reverbDelayPos;\r\n\t\tthis.reverbFeedback0 = reverbFeedback0;\r\n\t\tthis.reverbFeedback1 = reverbFeedback1;\r\n\t\tthis.reverbFeedback2 = reverbFeedback2;\r\n\t\tthis.reverbFeedback3 = reverbFeedback3;\r\n\t\t//this.highpassInput = highpassInput;\r\n\t\t//this.highpassOutput = highpassOutput;\r\n\t\tthis.limit = limit;\r\n\r\n\t\tif (playSong) {\r\n\t\t\tthis.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / this.song.beatsPerBar + this.bar;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tconst synthDuration: number = performance.now() - synthStartTime;\r\n\t\t// Performance measurements:\r\n\t\tsamplesAccumulated += outputBufferLength;\r\n\t\tsamplePerformance += synthDuration;\r\n\t\t\r\n\t\tif (samplesAccumulated >= 44100 * 4) {\r\n\t\tconst secondsGenerated = samplesAccumulated / 44100;\r\n\t\tconst secondsRequired = samplePerformance / 1000;\r\n\t\tconst ratio = secondsRequired / secondsGenerated;\r\n\t\tconsole.log(ratio);\r\n\t\tsamplePerformance = 0;\r\n\t\tsamplesAccumulated = 0;\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tprivate freeTone(tone: Tone): void {\r\n\t\tthis.tonePool.pushBack(tone);\r\n\t}\r\n\r\n\tprivate newTone(): Tone {\r\n\t\tif (this.tonePool.count() > 0) {\r\n\t\t\tconst tone: Tone = this.tonePool.popBack();\r\n\t\t\ttone.reset();\r\n\t\t\ttone.active = false;\r\n\t\t\treturn tone;\r\n\t\t}\r\n\t\treturn new Tone();\r\n\t}\r\n\r\n\tprivate releaseTone(channel: number, tone: Tone): void {\r\n\t\tif (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n\t\t\tthis.releasedTones[channel].pushFront(tone);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t/*\r\n\t\t\tfor (let mod = 0; mod < Config.modCount; mod++) {\r\n\t\t\tthis.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].pushFront(tone);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t}\r\n\r\n\tprivate freeReleasedTone(channel: number, toneIndex: number): void {\r\n\t\tif (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n\t\t\tthis.freeTone(this.releasedTones[channel].get(toneIndex));\r\n\t\t\tthis.releasedTones[channel].remove(toneIndex);\r\n\t\t} else {\r\n\t\t\t/*\r\n\t\t\tfor (let mod = 0; mod < Config.modCount; mod++) {\r\n\t\t\tthis.freeTone(this.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].get(toneIndex));\r\n\t\t\tthis.releasedModTones[channel][mod].remove(toneIndex);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t}\r\n\r\n\tpublic freeAllTones(): void {\r\n\t\twhile (this.liveInputTones.count() > 0) {\r\n\t\t\tthis.freeTone(this.liveInputTones.popBack());\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < this.activeTones.length; i++) {\r\n\t\t\twhile (this.activeTones[i].count() > 0) {\r\n\t\t\t\tthis.freeTone(this.activeTones[i].popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < this.releasedTones.length; i++) {\r\n\t\t\twhile (this.releasedTones[i].count() > 0) {\r\n\t\t\t\tthis.freeTone(this.releasedTones[i].popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = 0; i < this.activeModTones.length; i++) {\r\n\t\t\tfor (let mod = 0; mod < this.activeModTones[i].length; mod++) {\r\n\t\t\t\twhile (this.activeModTones[i][mod].count() > 0) {\r\n\t\t\t\t\tthis.freeTone(this.activeModTones[i][mod].popBack());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*\r\n\t\tfor (let i = 0; i < this.releasedModTones.length; i++) {\r\n\t\tfor (let mod = 0; mod < this.releasedModTones[i].length; mod++) {\r\n\t\twhile (this.releasedModTones[i][mod].count() > 0) {\r\n\t\tthis.freeTone(this.releasedModTones[i][mod].popBack());\r\n\t\t}\r\n\t\t}\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tprivate determineLiveInputTones(song: Song): void {\r\n\t\tconst toneList: Deque<Tone> = this.liveInputTones;\r\n\t\tconst pitches: number[] = this.liveInputPitches;\r\n\t\tlet toneCount: number = 0;\r\n\t\tif (this.liveInputDuration > 0) {\r\n\t\t\tconst instrument: Instrument = song.channels[this.liveInputChannel].instruments[song.getPatternInstrument(this.liveInputChannel, this.bar)];\r\n\r\n\t\t\tif (instrument.getChord().arpeggiates) {\r\n\t\t\t\tlet tone: Tone;\r\n\t\t\t\tif (toneList.count() == 0) {\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popFront());\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttone = toneList.get(0);\r\n\t\t\t\t}\r\n\t\t\t\ttoneCount = 1;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\ttone.pitches[i] = pitches[i];\r\n\t\t\t\t}\r\n\t\t\t\ttone.pitchCount = pitches.length;\r\n\t\t\t\ttone.chordSize = 1;\r\n\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t} else {\r\n\t\t\t\t//const transition: Transition = instrument.getTransition();\r\n\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\t//const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n\t\t\t\t\tlet tone: Tone;\r\n\t\t\t\t\tif (toneList.count() <= i) {\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.get(i));\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.set(i, tone);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttone = toneList.get(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoneCount++;\r\n\r\n\t\t\t\t\ttone.pitches[0] = pitches[i];\r\n\t\t\t\t\ttone.pitchCount = 1;\r\n\t\t\t\t\ttone.chordSize = pitches.length;\r\n\t\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (toneList.count() > toneCount) {\r\n\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popBack());\r\n\t\t}\r\n\r\n\t\tthis.liveInputStarted = false;\r\n\t}\r\n\r\n\tprivate determineCurrentActiveTones(song: Song, channel: number, playSong: boolean): void {\r\n\t\tconst instrument: Instrument = song.channels[channel].instruments[song.getPatternInstrument(channel, this.bar)];\r\n\t\tconst pattern: Pattern | null = song.getPattern(channel, this.bar);\r\n\t\tconst time: number = this.part + this.beat * Config.partsPerBeat;\r\n\r\n\t\tif (playSong && song.getChannelIsMod(channel) && !song.channels[channel].muted) {\r\n\t\t\t// Offset channel (first mod channel is 0 index in mod tone array)\r\n\t\t\tlet modChannelIdx = channel - (song.pitchChannelCount + song.noiseChannelCount);\r\n\r\n\t\t\t// For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\r\n\t\t\t// The same transition logic should apply though, even though it isn't really used by mod channels.\r\n\t\t\tlet notes: (Note | null)[] = [];\r\n\t\t\tlet prevNotes: (Note | null)[] = [];\r\n\t\t\tlet nextNotes: (Note | null)[] = [];\r\n\t\t\tlet fillCount: number = Config.modCount;\r\n\t\t\twhile (fillCount--) {\r\n\t\t\t\tnotes.push(null);\r\n\t\t\t\tprevNotes.push(null);\r\n\t\t\t\tnextNotes.push(null);\r\n\t\t\t}\r\n\r\n\t\t\tif (pattern != null) {\r\n\t\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\t\tif (pattern.notes[i].end <= time) {\r\n\t\t\t\t\t\t// Actually need to check which note starts closer to the start of this note.\r\n\t\t\t\t\t\tif (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n\t\t\t\t\t\t\tprevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n\t\t\t\t\t\tnotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (pattern.notes[i].start > time) {\r\n\t\t\t\t\t\t// Actually need to check which note starts closer to the end of this note.\r\n\t\t\t\t\t\tif (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n\t\t\t\t\t\t\tnextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tconst toneList: Deque<Tone> = this.activeModTones[modChannelIdx][mod];\r\n\t\t\t\tif (notes[mod] != null) {\r\n\t\t\t\t\tif (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\r\n\t\t\t\t\tif (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\r\n\t\t\t\t\tthis.syncTones(channel, toneList, instrument, (notes[mod] as Note).pitches, (notes[mod] as Note), (prevNotes[mod] as Note), (nextNotes[mod] as Note), time);\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhile (toneList.count() > 0) {\r\n\t\t\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!song.getChannelIsMod(channel)) {\r\n\r\n\t\t\tlet note: Note | null = null;\r\n\t\t\tlet prevNote: Note | null = null;\r\n\t\t\tlet nextNote: Note | null = null;\r\n\r\n\t\t\tif (playSong && pattern != null && !song.channels[channel].muted) {\r\n\t\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\t\tif (pattern.notes[i].end <= time) {\r\n\t\t\t\t\t\tprevNote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n\t\t\t\t\t\tnote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start > time) {\r\n\t\t\t\t\t\tnextNote = pattern.notes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst toneList: Deque<Tone> = this.activeTones[channel];\r\n\t\t\tif (note != null) {\r\n\t\t\t\tif (prevNote != null && prevNote.end != note.start) prevNote = null;\r\n\t\t\t\tif (nextNote != null && nextNote.start != note.end) nextNote = null;\r\n\t\t\t\tthis.syncTones(channel, toneList, instrument, note.pitches, note, prevNote, nextNote, time);\r\n\t\t\t} else {\r\n\t\t\t\twhile (toneList.count() > 0) {\r\n\t\t\t\t\t// Automatically free or release seamless tones if there's no new note to take over.\r\n\t\t\t\t\tif (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n\t\t\t\t\t\tthis.releaseTone(channel, toneList.popBack());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate syncTones(channel: number, toneList: Deque<Tone>, instrument: Instrument, pitches: number[], note: Note, prevNote: Note | null, nextNote: Note | null, currentPart: number): void {\r\n\t\tlet toneCount: number = 0;\r\n\t\t// Mod channels don't ever tie over, so the real start point is always simply the note's start.\r\n\t\tlet noteStartAdjust = (channel < this.song!.pitchChannelCount + this.song!.noiseChannelCount)\r\n\t\t\t? Math.max(0, this.tyingOver[channel])\r\n\t\t\t: 0;\r\n\t\tif (instrument.getChord().arpeggiates) {\r\n\t\t\tlet tone: Tone;\r\n\t\t\tif (toneList.count() == 0) {\r\n\t\t\t\ttone = this.newTone();\r\n\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t} else {\r\n\t\t\t\ttone = toneList.get(0);\r\n\t\t\t}\r\n\t\t\ttoneCount = 1;\r\n\r\n\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\ttone.pitches[i] = pitches[i];\r\n\t\t\t}\r\n\t\t\ttone.pitchCount = pitches.length;\r\n\t\t\ttone.chordSize = 1;\r\n\t\t\ttone.instrument = instrument;\r\n\t\t\ttone.note = note;\r\n\t\t\ttone.noteStart = note.start - noteStartAdjust;\r\n\t\t\ttone.noteEnd = note.end;\r\n\t\t\ttone.prevNote = prevNote;\r\n\t\t\ttone.nextNote = nextNote;\r\n\t\t\ttone.prevNotePitchIndex = 0;\r\n\t\t\ttone.nextNotePitchIndex = 0;\r\n\t\t} else {\r\n\t\t\tconst transition: Transition = instrument.getTransition();\r\n\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\r\n\t\t\t\tconst strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\t\t\t\tlet prevNoteForThisTone: Note | null = (prevNote && prevNote.pitches.length > i) ? prevNote : null;\r\n\t\t\t\tlet noteForThisTone: Note = note;\r\n\t\t\t\tlet nextNoteForThisTone: Note | null = (nextNote && nextNote.pitches.length > i) ? nextNote : null;\r\n\t\t\t\tlet noteStart: number = noteForThisTone.start + strumOffsetParts - noteStartAdjust;\r\n\r\n\t\t\t\tif (noteStart > currentPart) {\r\n\t\t\t\t\tif (toneList.count() > i && (transition.isSeamless || this.tyingOver[channel] >= 0) && prevNoteForThisTone != null) {\r\n\t\t\t\t\t\tnextNoteForThisTone = noteForThisTone;\r\n\t\t\t\t\t\tnoteForThisTone = prevNoteForThisTone;\r\n\t\t\t\t\t\tprevNoteForThisTone = null;\r\n\t\t\t\t\t\tnoteStart = noteForThisTone.start + strumOffsetParts - noteStartAdjust;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet noteEnd: number = noteForThisTone.end;\r\n\t\t\t\tif ((transition.isSeamless || this.tyingOver[channel] >= 0) && nextNoteForThisTone != null) {\r\n\t\t\t\t\tnoteEnd = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEnd + strumOffsetParts);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet tone: Tone;\r\n\t\t\t\tif (toneList.count() <= i) {\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttone = toneList.get(i);\r\n\t\t\t\t}\r\n\t\t\t\ttoneCount++;\r\n\r\n\t\t\t\ttone.pitches[0] = noteForThisTone.pitches[i];\r\n\t\t\t\ttone.pitchCount = 1;\r\n\t\t\t\ttone.chordSize = noteForThisTone.pitches.length;\r\n\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\ttone.note = noteForThisTone;\r\n\t\t\t\ttone.noteStart = noteStart;\r\n\t\t\t\ttone.noteEnd = noteEnd;\r\n\t\t\t\ttone.prevNote = prevNoteForThisTone;\r\n\t\t\t\ttone.nextNote = nextNoteForThisTone;\r\n\t\t\t\ttone.prevNotePitchIndex = i;\r\n\t\t\t\ttone.nextNotePitchIndex = i;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (toneList.count() > toneCount) {\r\n\t\t\t// Automatically free or release seamless tones if there's no new note to take over.\r\n\t\t\tif (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n\t\t\t\tthis.releaseTone(channel, toneList.popBack());\r\n\t\t\t} else {\r\n\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate playTone(song: Song, stereoBufferIndex: number, stereoBufferLength: number, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n\t\tSynth.computeTone(this, song, channel, samplesPerTick, runLength, tone, released, shouldFadeOutFast);\r\n\t\tlet synthBuffer: Float32Array;\r\n\t\tswitch (tone.instrument.effects) {\r\n\t\t\tcase 0: synthBuffer = this.samplesForNone!; break;\r\n\t\t\tcase 1: synthBuffer = this.samplesForReverb!; break;\r\n\t\t\tcase 2: synthBuffer = this.samplesForChorus!; break;\r\n\t\t\tcase 3: synthBuffer = this.samplesForChorusReverb!; break;\r\n\t\t\tdefault: throw new Error();\r\n\t\t}\r\n\t\tconst synthesizer: Function = Synth.getInstrumentSynthFunction(tone.instrument);\r\n\t\tsynthesizer(this, synthBuffer, stereoBufferIndex, stereoBufferLength, runLength * 2, tone, tone.instrument);\r\n\t}\r\n\r\n\tprivate static computeEnvelope(envelope: Envelope, time: number, beats: number, customVolume: number): number {\r\n\t\tswitch (envelope.type) {\r\n\t\t\tcase EnvelopeType.custom: return customVolume;\r\n\t\t\tcase EnvelopeType.steady: return 1.0;\r\n\t\t\tcase EnvelopeType.twang:\r\n\t\t\t\treturn 1.0 / (1.0 + time * envelope.speed);\r\n\t\t\tcase EnvelopeType.swell:\r\n\t\t\t\treturn 1.0 - 1.0 / (1.0 + time * envelope.speed);\r\n\t\t\tcase EnvelopeType.tremolo:\r\n\t\t\t\treturn 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\r\n\t\t\tcase EnvelopeType.tremolo2:\r\n\t\t\t\treturn 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\r\n\t\t\tcase EnvelopeType.punch:\r\n\t\t\t\treturn Math.max(1.0, 2.0 - time * 10.0);\r\n\t\t\tcase EnvelopeType.flare:\r\n\t\t\t\tconst speed: number = envelope.speed;\r\n\t\t\t\tconst attack: number = 0.25 / Math.sqrt(speed);\r\n\t\t\t\treturn time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * speed);\r\n\t\t\tcase EnvelopeType.decay:\r\n\t\t\t\treturn Math.pow(2, -envelope.speed * time);\r\n\t\t\tdefault: throw new Error(\"Unrecognized operator envelope type.\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static computeChordVolume(chordSize: number): number {\r\n\t\treturn 1.0 / ((chordSize - 1) * 0.25 + 1.0);\r\n\t}\r\n\r\n\tprivate static computeTone(synth: Synth, song: Song, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n\t\tconst instrument: Instrument = tone.instrument;\r\n\t\tconst transition: Transition = instrument.getTransition();\r\n\t\tconst chord: Chord = instrument.getChord();\r\n\t\tconst chordVolume: number = chord.arpeggiates ? 1 : Synth.computeChordVolume(tone.chordSize);\r\n\t\tconst isNoiseChannel: boolean = song.getChannelIsNoise(channel);\r\n\t\tconst intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\r\n\t\tconst secondsPerPart: number = Config.ticksPerPart * samplesPerTick / synth.samplesPerSecond;\r\n\t\tconst beatsPerPart: number = 1.0 / Config.partsPerBeat;\r\n\t\tconst toneWasActive: boolean = tone.active;\r\n\t\tconst tickSampleCountdown: number = synth.tickSampleCountdown;\r\n\t\tconst startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n\t\tconst endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n\t\tconst ticksIntoBar: number = (synth.beat * Config.partsPerBeat + synth.part) * Config.ticksPerPart + synth.tick;\r\n\t\tconst partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n\t\tconst partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n\t\tconst partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n\t\tconst partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\t\tconst instrumentIdx: number = (synth.song as Song).channels[channel].instruments.findIndex(i => i == instrument);\r\n\t\tconst treatAsSeamless: boolean = transition.isSeamless || synth.tyingOver[channel] >= 0;\r\n\r\n\t\ttone.phaseDeltaScale = 0.0;\r\n\t\ttone.filter = 1.0;\r\n\t\ttone.filterScale = 1.0;\r\n\t\ttone.vibratoScale = 0.0;\r\n\t\ttone.intervalMult = 1.0;\r\n\t\ttone.intervalVolumeMult = 1.0;\r\n\t\ttone.active = false;\r\n\r\n\t\tlet startPan: number = instrument.pan;\r\n\t\tlet endPan: number = instrument.pan;\r\n\t\tif (synth.isModActive(ModSetting.mstPan, false, channel, instrumentIdx)) {\r\n\t\t\tstartPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\r\n\t\t\tendPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\r\n\t\t}\r\n\r\n\t\tlet startPanDelay: number = instrument.panDelay;\r\n\t\tlet endPanDelay: number = instrument.panDelay;\r\n\t\tif (synth.isModActive(ModSetting.mstPanDelay, false, channel, instrumentIdx)) {\r\n\t\t\tstartPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, false);\r\n\t\t\tendPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, true);\r\n\t\t}\r\n\r\n\t\tconst useStartPan: number = (startPan - Config.panCenter) / Config.panCenter;\r\n\t\tconst useEndPan: number = (endPan - Config.panCenter) / Config.panCenter;\r\n\t\t// 10 pan delay is the same amount as vanilla beepbox.\r\n\t\tconst maxDelayStart: number = startPanDelay * 0.00013 * synth.samplesPerSecond;\r\n\t\tconst maxDelayEnd: number = endPanDelay * 0.00013 * synth.samplesPerSecond;\r\n\t\ttone.stereoDelayStart = -useStartPan * maxDelayStart;\r\n\t\tconst delayEnd: number = -useEndPan * maxDelayEnd;\r\n\t\ttone.stereoDelayDelta = (delayEnd - tone.stereoDelayStart) / runLength;\r\n\t\ttone.stereoVolumeLStart = Math.cos((1 + useStartPan) * Math.PI * 0.25) * 1.414;\r\n\t\ttone.stereoVolumeRStart = Math.cos((1 - useStartPan) * Math.PI * 0.25) * 1.414;\r\n\t\tconst stereoVolumeLEnd: number = Math.cos((1 + useEndPan) * Math.PI * 0.25) * 1.414;\r\n\t\tconst stereoVolumeREnd: number = Math.cos((1 - useEndPan) * Math.PI * 0.25) * 1.414;\r\n\t\ttone.stereoVolumeLDelta = (stereoVolumeLEnd - tone.stereoVolumeLStart) / runLength;\r\n\t\ttone.stereoVolumeRDelta = (stereoVolumeREnd - tone.stereoVolumeRStart) / runLength;\r\n\r\n\t\tlet resetPhases: boolean = true;\r\n\t\tlet partsSinceStart: number = 0.0;\r\n\t\tlet intervalStart: number = 0.0;\r\n\t\tlet intervalEnd: number = 0.0;\r\n\t\tlet transitionVolumeStart: number = 1.0;\r\n\t\tlet transitionVolumeEnd: number = 1.0;\r\n\t\tlet chordVolumeStart: number = chordVolume;\r\n\t\tlet chordVolumeEnd: number = chordVolume;\r\n\t\tlet customVolumeStart: number = 0.0;\r\n\t\tlet customVolumeEnd: number = 0.0;\r\n\t\tlet decayTimeStart: number = 0.0;\r\n\t\tlet decayTimeEnd: number = 0.0;\r\n\r\n\t\tlet volumeReferencePitch: number;\r\n\t\tlet basePitch: number;\r\n\t\tlet baseVolume: number;\r\n\t\tlet pitchDamping: number;\r\n\t\tif (instrument.type == InstrumentType.spectrum) {\r\n\t\t\tif (isNoiseChannel) {\r\n\t\t\t\tbasePitch = Config.spectrumBasePitch;\r\n\t\t\t\tbaseVolume = 0.6; // Note: spectrum is louder for drum channels than pitch channels!\r\n\t\t\t} else {\r\n\t\t\t\t// basePitch = Config.keys[song.key].basePitch; // key relic (TODO), more following\r\n\t\t\t\tbasePitch = 0;\r\n\t\t\t\tbaseVolume = 0.3;\r\n\t\t\t}\r\n\t\t\tvolumeReferencePitch = Config.spectrumBasePitch;\r\n\t\t\tpitchDamping = 28;\r\n\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\tbasePitch = Config.spectrumBasePitch;\r\n\t\t\tbaseVolume = 0.45;\r\n\t\t\tvolumeReferencePitch = basePitch;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\tbasePitch = Config.chipNoises[instrument.chipNoise].basePitch;\r\n\t\t\tbaseVolume = 0.19;\r\n\t\t\tvolumeReferencePitch = basePitch;\r\n\t\t\tpitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\r\n\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.03;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.03375; // looks low compared to drums, but it's doubled for chorus and drums tend to be loud anyway.\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.025;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.04725;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\tbaseVolume = 1.0;\r\n\t\t\tvolumeReferencePitch = 0;\r\n\t\t\tpitchDamping = 1.0;\r\n\t\t\tbasePitch = 0;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unknown instrument type in computeTone.\");\r\n\t\t}\r\n\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\ttone.phaseDeltas[i] = 0.0;\r\n\t\t\ttone.volumeStarts[i] = 0.0;\r\n\t\t\ttone.volumeDeltas[i] = 0.0;\r\n\t\t}\r\n\r\n\t\tif (released) {\r\n\t\t\tconst ticksSoFar: number = tone.noteLengthTicks + tone.ticksSinceReleased;\r\n\t\t\tconst startTicksSinceReleased: number = tone.ticksSinceReleased + startRatio;\r\n\t\t\tconst endTicksSinceReleased: number = tone.ticksSinceReleased + endRatio;\r\n\t\t\tconst startTick: number = tone.noteLengthTicks + startTicksSinceReleased;\r\n\t\t\tconst endTick: number = tone.noteLengthTicks + endTicksSinceReleased;\r\n\t\t\tconst toneTransition: Transition = tone.instrument.getTransition();\r\n\t\t\tresetPhases = false;\r\n\t\t\tpartsSinceStart = Math.floor(ticksSoFar / Config.ticksPerPart);\r\n\t\t\tintervalStart = intervalEnd = tone.lastInterval;\r\n\t\t\tcustomVolumeStart = customVolumeEnd = Synth.expressionToVolumeMult(tone.lastVolume);\r\n\t\t\ttransitionVolumeStart = Synth.expressionToVolumeMult((1.0 - startTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n\t\t\ttransitionVolumeEnd = Synth.expressionToVolumeMult((1.0 - endTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n\t\t\tdecayTimeStart = startTick / Config.ticksPerPart;\r\n\t\t\tdecayTimeEnd = endTick / Config.ticksPerPart;\r\n\r\n\t\t\tif (shouldFadeOutFast) {\r\n\t\t\t\ttransitionVolumeStart *= 1.0 - startRatio;\r\n\t\t\t\ttransitionVolumeEnd *= 1.0 - endRatio;\r\n\t\t\t}\r\n\t\t} else if (tone.note == null) {\r\n\t\t\ttransitionVolumeStart = transitionVolumeEnd = 1;\r\n\t\t\tcustomVolumeStart = customVolumeEnd = 1;\r\n\t\t\ttone.lastInterval = 0;\r\n\t\t\ttone.lastVolume = 6;\r\n\t\t\ttone.ticksSinceReleased = 0;\r\n\t\t\tresetPhases = false;\r\n\r\n\t\t\tconst heldTicksStart: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n\t\t\ttone.liveInputSamplesHeld += runLength;\r\n\t\t\tconst heldTicksEnd: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n\t\t\ttone.noteLengthTicks = heldTicksEnd;\r\n\t\t\tconst heldPartsStart: number = heldTicksStart / Config.ticksPerPart;\r\n\t\t\tconst heldPartsEnd: number = heldTicksEnd / Config.ticksPerPart;\r\n\t\t\tpartsSinceStart = Math.floor(heldPartsStart);\r\n\t\t\tdecayTimeStart = heldPartsStart;\r\n\t\t\tdecayTimeEnd = heldPartsEnd;\r\n\t\t} else {\r\n\t\t\tconst note: Note = tone.note;\r\n\t\t\tconst prevNote: Note | null = tone.prevNote;\r\n\t\t\tconst nextNote: Note | null = tone.nextNote;\r\n\r\n\t\t\tconst time: number = synth.part + synth.beat * Config.partsPerBeat;\r\n\t\t\tconst partsPerBar: number = Config.partsPerBeat * song.beatsPerBar;\r\n\t\t\tconst noteStart: number = tone.noteStart;// - Math.max(0, synth.tyingOver[channel] || 0);\r\n\t\t\tconst noteEnd: number = tone.noteEnd;\r\n\r\n\t\t\tpartsSinceStart = time - noteStart;\r\n\r\n\t\t\tlet endPinIndex: number;\r\n\t\t\tfor (endPinIndex = 1; endPinIndex < note.pins.length - 1; endPinIndex++) {\r\n\t\t\t\tif (note.pins[endPinIndex].time + note.start > time) break;\r\n\t\t\t}\r\n\t\t\tconst startPin: NotePin = note.pins[endPinIndex - 1];\r\n\t\t\tconst endPin: NotePin = note.pins[endPinIndex];\r\n\t\t\tconst noteStartTick: number = noteStart * Config.ticksPerPart;\r\n\t\t\tconst noteEndTick: number = noteEnd * Config.ticksPerPart;\r\n\t\t\tconst noteLengthTicks: number = noteEndTick - noteStartTick;\r\n\t\t\tconst pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\r\n\t\t\tconst pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\r\n\r\n\t\t\ttone.lastInterval = note.pins[note.pins.length - 1].interval;\r\n\t\t\ttone.lastVolume = note.pins[note.pins.length - 1].volume;\r\n\t\t\ttone.ticksSinceReleased = 0;\r\n\t\t\ttone.noteLengthTicks = noteLengthTicks;\r\n\r\n\t\t\tconst tickTimeStart: number = time * Config.ticksPerPart + synth.tick;\r\n\t\t\tconst tickTimeEnd: number = time * Config.ticksPerPart + synth.tick + 1;\r\n\t\t\tconst noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\r\n\t\t\tconst noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\r\n\t\t\tconst pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\r\n\t\t\tconst pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\r\n\t\t\tlet customVolumeTickStart: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioStart;\r\n\t\t\tlet customVolumeTickEnd: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioEnd;\r\n\t\t\tlet transitionVolumeTickStart: number = 1.0;\r\n\t\t\tlet transitionVolumeTickEnd: number = 1.0;\r\n\t\t\tlet chordVolumeTickStart: number = chordVolume;\r\n\t\t\tlet chordVolumeTickEnd: number = chordVolume;\r\n\t\t\tlet intervalTickStart: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n\t\t\tlet intervalTickEnd: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n\t\t\tlet decayTimeTickStart: number = partTimeTickStart - noteStart;\r\n\t\t\tlet decayTimeTickEnd: number = partTimeTickEnd - noteStart;\r\n\t\t\tresetPhases = (tickTimeStart + startRatio - noteStartTick == 0.0) || !toneWasActive;\r\n\r\n\t\t\t// if seamless, don't reset phases at start. (it's probably not necessary to constantly reset phases if there are no notes? Just do it once when note starts? But make sure that reset phases doesn't also reset stuff that this function did to set up the tone. Remember when the first run length was lost!\r\n\t\t\t// if slide, average the interval, decayTime, and custom volume at the endpoints and interpolate between over slide duration.\r\n\t\t\t// note that currently seamless and slide make different assumptions about whether a note at the end of a bar will connect with the next bar!\r\n\t\t\tconst maximumSlideTicks: number = noteLengthTicks * 0.5;\r\n\t\t\tif (treatAsSeamless && !transition.slides && note.start == 0) {\r\n\t\t\t\t// Special case for seamless, no-slide transition: assume the previous bar ends with another seamless note, don't reset tone history.\r\n\t\t\t\tresetPhases = !toneWasActive;\r\n\t\t\t} else if (treatAsSeamless && prevNote != null) {\r\n\t\t\t\tresetPhases = !toneWasActive;\r\n\t\t\t\tif (transition.slides) {\r\n\t\t\t\t\tconst slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n\t\t\t\t\tconst slideRatioStartTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickStart / slideTicks);\r\n\t\t\t\t\tconst slideRatioEndTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickEnd / slideTicks);\r\n\t\t\t\t\tconst intervalDiff: number = ((prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval) - tone.pitches[0]) * 0.5;\r\n\t\t\t\t\tconst volumeDiff: number = (prevNote.pins[prevNote.pins.length - 1].volume - note.pins[0].volume) * 0.5;\r\n\t\t\t\t\tconst decayTimeDiff: number = (prevNote.end - prevNote.start) * 0.5;\r\n\t\t\t\t\tintervalTickStart += slideRatioStartTick * intervalDiff;\r\n\t\t\t\t\tintervalTickEnd += slideRatioEndTick * intervalDiff;\r\n\t\t\t\t\tcustomVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n\t\t\t\t\tcustomVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n\t\t\t\t\tdecayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n\t\t\t\t\tdecayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n\t\t\t\t\tif (!chord.arpeggiates) {\r\n\t\t\t\t\t\tconst chordSizeDiff: number = (prevNote.pitches.length - tone.chordSize) * 0.5;\r\n\t\t\t\t\t\tchordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n\t\t\t\t\t\tchordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (treatAsSeamless && !transition.slides && note.end == partsPerBar) {\r\n\t\t\t\t// Special case for seamless, no-slide transition: assume the next bar starts with another seamless note, don't fade out.\r\n\t\t\t} else if (treatAsSeamless && nextNote != null) {\r\n\t\t\t\tif (transition.slides) {\r\n\t\t\t\t\tconst slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n\t\t\t\t\tconst slideRatioStartTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickStart) / slideTicks);\r\n\t\t\t\t\tconst slideRatioEndTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickEnd) / slideTicks);\r\n\t\t\t\t\tconst intervalDiff: number = (nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + note.pins[note.pins.length - 1].interval)) * 0.5;\r\n\t\t\t\t\tconst volumeDiff: number = (nextNote.pins[0].volume - note.pins[note.pins.length - 1].volume) * 0.5;\r\n\t\t\t\t\tconst decayTimeDiff: number = -(noteEnd - noteStart) * 0.5;\r\n\t\t\t\t\tintervalTickStart += slideRatioStartTick * intervalDiff;\r\n\t\t\t\t\tintervalTickEnd += slideRatioEndTick * intervalDiff;\r\n\t\t\t\t\tcustomVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n\t\t\t\t\tcustomVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n\t\t\t\t\tdecayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n\t\t\t\t\tdecayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n\t\t\t\t\tif (!chord.arpeggiates) {\r\n\t\t\t\t\t\tconst chordSizeDiff: number = (nextNote.pitches.length - tone.chordSize) * 0.5;\r\n\t\t\t\t\t\tchordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n\t\t\t\t\t\tchordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (!(transition.releases && synth.tyingOver[channel] < 0)) {\r\n\t\t\t\tconst releaseTicks: number = transition.releaseTicks;\r\n\t\t\t\tif (releaseTicks > 0.0) {\r\n\t\t\t\t\ttransitionVolumeTickStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / releaseTicks);\r\n\t\t\t\t\ttransitionVolumeTickEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / releaseTicks);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tintervalStart = intervalTickStart + (intervalTickEnd - intervalTickStart) * startRatio;\r\n\t\t\tintervalEnd = intervalTickStart + (intervalTickEnd - intervalTickStart) * endRatio;\r\n\t\t\tif (instrument.type != InstrumentType.mod) {\r\n\t\t\t\tcustomVolumeStart = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * startRatio);\r\n\t\t\t\tcustomVolumeEnd = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * endRatio);\r\n\t\t\t} else {\r\n\t\t\t\tcustomVolumeStart = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.max(0.0, startRatio);\r\n\t\t\t\tcustomVolumeEnd = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.min(1.0, endRatio);\r\n\t\t\t\ttone.customVolumeStart = customVolumeStart;\r\n\t\t\t\ttone.customVolumeEnd = customVolumeEnd;\r\n\t\t\t}\r\n\t\t\ttransitionVolumeStart = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * startRatio;\r\n\t\t\ttransitionVolumeEnd = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * endRatio;\r\n\t\t\tchordVolumeStart = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * startRatio;\r\n\t\t\tchordVolumeEnd = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * endRatio;\r\n\t\t\tdecayTimeStart = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * startRatio;\r\n\t\t\tdecayTimeEnd = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * endRatio;\r\n\t\t}\r\n\r\n\t\tconst sampleTime: number = 1.0 / synth.samplesPerSecond;\r\n\t\ttone.active = true;\r\n\r\n\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.fm || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.spectrum) {\r\n\r\n\t\t\tconst lfoEffectStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.LFOtime);\r\n\t\t\tconst lfoEffectEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.nextLFOtime);\r\n\r\n\t\t\tlet useVibratoStart: number = instrument.vibratoDepth;\r\n\t\t\tlet useVibratoEnd: number = instrument.vibratoDepth;\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstVibratoDepth, false, channel, instrumentIdx)) {\r\n\t\t\t\tuseVibratoStart = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tuseVibratoEnd = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\t// Only use vibrato properties if the instrument's vibrato is custom or mods are applied to it\r\n\t\t\tlet partsStart: number;\r\n\t\t\tlet partsEnd: number;\r\n\t\t\tconst activeVibratoDelayMods: boolean = synth.isModActive(ModSetting.mstVibratoDelay, false, channel, instrumentIdx);\r\n\t\t\tif (instrument.vibrato != Config.vibratos.length && !activeVibratoDelayMods) {\r\n\t\t\t\tpartsStart = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t\tpartsEnd = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet vibratoDelayStart: number = instrument.vibratoDelay;\r\n\t\t\t\tlet vibratoDelayEnd: number = instrument.vibratoDelay;\r\n\r\n\t\t\t\tif (activeVibratoDelayMods) {\r\n\t\t\t\t\tvibratoDelayStart = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, false);\r\n\t\t\t\t\tvibratoDelayEnd = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, true);\r\n\r\n\t\t\t\t\t// Special case - max vibrato delay means neeeeeever vibrato.\r\n\t\t\t\t\tif (vibratoDelayStart == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n\t\t\t\t\t\tvibratoDelayStart = Number.MAX_VALUE;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (vibratoDelayEnd == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n\t\t\t\t\t\tvibratoDelayEnd = Number.MAX_VALUE;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpartsStart = vibratoDelayStart;\r\n\t\t\t\tpartsEnd = vibratoDelayEnd;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst vibratoScaleStart: number = (partsSinceStart < partsStart) ? 0.0 : useVibratoStart;\r\n\t\t\tconst vibratoScaleEnd: number = (partsSinceStart < partsEnd) ? 0.0 : useVibratoEnd;\r\n\r\n\t\t\tconst vibratoStart: number = vibratoScaleStart * lfoEffectStart;\r\n\t\t\tconst vibratoEnd: number = vibratoScaleEnd * lfoEffectEnd;\r\n\t\t\tintervalStart += vibratoStart;\r\n\t\t\tintervalEnd += vibratoEnd;\r\n\t\t}\r\n\r\n\t\tif (!treatAsSeamless || (!(!transition.slides && tone.note != null && tone.note.start == 0) && !(tone.prevNote != null))) {\r\n\t\t\tconst attackSeconds: number = transition.attackSeconds;\r\n\t\t\tif (attackSeconds > 0.0) {\r\n\t\t\t\ttransitionVolumeStart *= Math.min(1.0, secondsPerPart * decayTimeStart / attackSeconds);\r\n\t\t\t\ttransitionVolumeEnd *= Math.min(1.0, secondsPerPart * decayTimeEnd / attackSeconds);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst instrumentVolumeMult: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\r\n\r\n\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\t// It's possible that the note will change while the user is editing it,\r\n\t\t\t// but the tone's pitches don't get updated because the tone has already\r\n\t\t\t// ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\r\n\t\t\ttone.drumsetPitch = tone.pitches[0];\r\n\t\t\tif (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\r\n\t\t\ttone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\r\n\t\t}\r\n\r\n\t\tlet filterCutModStart: number = instrument.filterCutoff;\r\n\t\tlet filterCutModEnd: number = instrument.filterCutoff;\r\n\t\tif (synth.isModActive(ModSetting.mstFilterCut, false, channel, instrumentIdx)) {\r\n\t\t\tfilterCutModStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, false), ModSetting.mstFilterCut);\r\n\t\t\tfilterCutModEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, true), ModSetting.mstFilterCut);\r\n\t\t}\r\n\r\n\t\tlet cutoffOctavesModStart: number;\r\n\t\tlet cutoffOctavesModEnd: number;\r\n\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\tcutoffOctavesModStart = 0;\r\n\t\t\tcutoffOctavesModEnd = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcutoffOctavesModStart = (filterCutModStart - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t\t\tcutoffOctavesModEnd = (filterCutModEnd - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t\t}\r\n\r\n\t\tconst filterEnvelope: Envelope = (instrument.type == InstrumentType.drumset) ? instrument.getDrumsetEnvelope(tone.drumsetPitch) : instrument.getFilterEnvelope();\r\n\t\tconst filterCutoffHzStart: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModStart);\r\n\t\tconst filterCutoffHzEnd: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModEnd);\r\n\t\tconst filterBaseStart: number = 2.0 * Math.sin(Math.PI * filterCutoffHzStart / synth.samplesPerSecond);\r\n\t\tconst filterBaseEnd: number = 2.0 * Math.sin(Math.PI * filterCutoffHzEnd / synth.samplesPerSecond);\r\n\t\tconst filterMin: number = 2.0 * Math.sin(Math.PI * Config.filterCutoffMinHz / synth.samplesPerSecond);\r\n\t\ttone.filter = filterBaseStart * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\tlet endFilter: number = filterBaseEnd * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\t\ttone.filter = Math.min(Config.filterMax, Math.max(filterMin, tone.filter));\r\n\t\tendFilter = Math.min(Config.filterMax, Math.max(filterMin, endFilter));\r\n\t\ttone.filterScale = Math.pow(endFilter / tone.filter, 1.0 / runLength);\r\n\r\n\t\tlet filterVolumeStart: number = Math.pow(0.5, cutoffOctavesModStart * 0.35);\r\n\t\tlet filterVolumeEnd: number = Math.pow(0.5, cutoffOctavesModEnd * 0.35);\r\n\r\n\t\ttone.filterResonanceStart = instrument.getFilterResonance();\r\n\t\ttone.filterResonanceDelta = 0.0;\r\n\r\n\t\tlet useFilterResonanceStart: number = instrument.filterResonance;\r\n\t\tlet useFilterResonanceEnd: number = instrument.filterResonance;\r\n\r\n\t\ttone.isFirstOrder = (instrument.type == InstrumentType.drumset) ? false : (useFilterResonanceStart == 0);\r\n\r\n\t\tif (synth.isModActive(ModSetting.mstFilterPeak, false, channel, instrumentIdx)) {\r\n\t\t\t// This flag is used to avoid the special casing when filter resonance == 0 without mods. So, it will sound a bit different,\r\n\t\t\t// but the effect and ability to smoothly modulate will be preserved.\r\n\t\t\ttone.isFirstOrder = false;\r\n\r\n\t\t\tuseFilterResonanceStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, false), ModSetting.mstFilterPeak);\r\n\t\t\tuseFilterResonanceEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, true), ModSetting.mstFilterPeak);\r\n\r\n\t\t\t// Also set cut in the tone.\r\n\t\t\ttone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\t\t\tconst filterResonanceEnd: number = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceEnd - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\r\n\t\t\t// Just a linear delta. Could get messy since it's not an amazing approximation of sqrt?\r\n\t\t\ttone.filterResonanceDelta = (filterResonanceEnd - tone.filterResonanceStart) / runLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Still need to compute this, mods or no. This calc is delegated to the tone level instead of the synth level, a notable difference from beepbox.\r\n\t\t\t// No functional difference though.\r\n\t\t\ttone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\t\t}\r\n\r\n\t\tif (tone.isFirstOrder == false) {\r\n\t\t\tfilterVolumeStart = Math.pow(filterVolumeStart, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceStart - 1));\r\n\t\t\tfilterVolumeEnd = Math.pow(filterVolumeEnd, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceEnd - 1));\r\n\t\t}\r\n\t\tif (filterEnvelope.type == EnvelopeType.decay) {\r\n\t\t\tfilterVolumeStart *= (1.25 + .025 * filterEnvelope.speed);\r\n\t\t\tfilterVolumeEnd *= (1.25 + .025 * filterEnvelope.speed);\r\n\t\t} else if (filterEnvelope.type == EnvelopeType.twang) {\r\n\t\t\tfilterVolumeStart *= (1 + .02 * filterEnvelope.speed);\r\n\t\t\tfilterVolumeEnd *= (1 + .02 * filterEnvelope.speed);\r\n\t\t}\r\n\r\n\t\tif (resetPhases) {\r\n\t\t\ttone.reset();\r\n\t\t}\r\n\r\n\t\tif (instrument.type == InstrumentType.fm) {\r\n\t\t\t// phase modulation!\r\n\r\n\t\t\tlet sineVolumeBoostStart: number = 1.0;\r\n\t\t\tlet sineVolumeBoostEnd: number = 1.0;\r\n\t\t\tlet totalCarrierVolumeStart: number = 0.0;\r\n\t\t\tlet totalCarrierVolumeEnd: number = 0.0;\r\n\r\n\t\t\tlet arpeggioInterval: number = 0;\r\n\t\t\tif (tone.pitchCount > 1 && !chord.harmonizes) {\r\n\t\t\t\tconst arpeggio: number = Math.floor((instrument.arpTime) / Config.ticksPerArpeggio);\r\n\t\t\t\tarpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n\t\t\t}\r\n\r\n\t\t\tlet detuneStart: number = instrument.detune / 25;\r\n\t\t\tlet detuneEnd: number = instrument.detune / 25;\r\n\t\t\tif (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n\t\t\t\tdetuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tdetuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n\t\t\t\tdetuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n\t\t\t\tdetuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tconst carrierCount: number = Config.algorithms[instrument.algorithm].carrierCount;\r\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\r\n\t\t\t\tconst associatedCarrierIndex: number = Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1;\r\n\t\t\t\tconst pitch: number = tone.pitches[!chord.harmonizes ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\r\n\t\t\t\tconst freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\r\n\t\t\t\tconst interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\r\n\t\t\t\tconst startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale + interval;\r\n\t\t\t\t// const startFreq: number = freqMult * (Instrument.frequencyFromPitch(startPitch, song.centerFrequency, song.edo)) + Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n\t\t\t\tconst startFreq: number = freqMult * (Instrument.frequencyFromPitch(startPitch)) + Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n\r\n\t\t\t\ttone.phaseDeltas[i] = startFreq * sampleTime * Config.sineWaveLength;\r\n\r\n\t\t\t\tlet amplitudeStart: number = instrument.operators[i].amplitude;\r\n\t\t\t\tlet amplitudeEnd: number = instrument.operators[i].amplitude;\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx)) {\r\n\t\t\t\t\tamplitudeStart *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, false) / 15.0;\r\n\t\t\t\t\tamplitudeEnd *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, true) / 15.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\r\n\t\t\t\tconst amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\r\n\t\t\t\tconst amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\t\t\t\tconst amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\t\t\t\tlet volumeStart: number = amplitudeMultStart;\r\n\t\t\t\tlet volumeEnd: number = amplitudeMultEnd;\r\n\r\n\t\t\t\t// Check for mod-related volume delta\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t// Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n\t\t\t\t\tconst startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n\t\t\t\t\tconst endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n\t\t\t\t\tvolumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n\t\t\t\t\tvolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check for SONG mod-related volume delta\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n\t\t\t\t\tvolumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n\t\t\t\t\tvolumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (i < carrierCount) {\r\n\t\t\t\t\t// carrier\r\n\t\t\t\t\tconst endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale + interval;\r\n\t\t\t\t\tconst pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\t\t\tconst pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\t\t\tvolumeStart *= pitchVolumeStart;\r\n\t\t\t\t\tvolumeEnd *= pitchVolumeEnd;\r\n\r\n\t\t\t\t\ttotalCarrierVolumeStart += amplitudeCurveStart;\r\n\t\t\t\t\ttotalCarrierVolumeEnd += amplitudeCurveEnd;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// modulator\r\n\t\t\t\t\tvolumeStart *= Config.sineWaveLength * 1.5;\r\n\t\t\t\t\tvolumeEnd *= Config.sineWaveLength * 1.5;\r\n\r\n\t\t\t\t\tsineVolumeBoostStart *= 1.0 - Math.min(1.0, amplitudeStart / 15);\r\n\t\t\t\t\tsineVolumeBoostEnd *= 1.0 - Math.min(1.0, amplitudeEnd / 15);\r\n\t\t\t\t}\r\n\t\t\t\tconst operatorEnvelope: Envelope = Config.envelopes[instrument.operators[i].envelope];\r\n\r\n\t\t\t\tvolumeStart *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\t\tvolumeEnd *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n\t\t\t\ttone.volumeStarts[i] = volumeStart;\r\n\t\t\t\ttone.volumeDeltas[i] = (volumeEnd - volumeStart) / runLength;\r\n\t\t\t}\r\n\r\n\t\t\tlet useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\r\n\t\t\tlet useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\r\n\t\t\tif (synth.isModActive(ModSetting.mstFMFeedback, false, channel, instrumentIdx)) {\r\n\t\t\t\tuseFeedbackAmplitudeStart *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, false) / 15.0;\r\n\t\t\t\tuseFeedbackAmplitudeEnd *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, true) / 15.0;\r\n\t\t\t}\r\n\r\n\t\t\tconst feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\r\n\t\t\tconst feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\r\n\t\t\tconst feedbackEnvelope: Envelope = Config.envelopes[instrument.feedbackEnvelope];\r\n\t\t\tlet feedbackStart: number = feedbackAmplitudeStart * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\tlet feedbackEnd: number = feedbackAmplitudeEnd * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\t\t\ttone.feedbackMult = feedbackStart;\r\n\t\t\ttone.feedbackDelta = (feedbackEnd - tone.feedbackMult) / runLength;\r\n\r\n\t\t\tconst volumeMult: number = baseVolume * instrumentVolumeMult;\r\n\t\t\ttone.volumeStart = filterVolumeStart * volumeMult * transitionVolumeStart * chordVolumeStart;\r\n\t\t\tconst volumeEnd: number = filterVolumeEnd * volumeMult * transitionVolumeEnd * chordVolumeEnd;\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n\t\t\tsineVolumeBoostStart *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeStart / 15.0)) - 1.0) / 3.0;\r\n\t\t\tsineVolumeBoostEnd *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeEnd / 15.0)) - 1.0) / 3.0;\r\n\t\t\tsineVolumeBoostStart *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeStart - 1) / 2.0);\r\n\t\t\tsineVolumeBoostEnd *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeEnd - 1) / 2.0);\r\n\t\t\ttone.volumeStart *= 1.0 + sineVolumeBoostStart * 3.0;\r\n\t\t\ttone.volumeDelta *= 1.0 + (sineVolumeBoostStart + sineVolumeBoostEnd) * 1.5; // Volume boosts are averaged such that delta brings you to next target start boost.\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\t// Modulator value is used for data, so don't actually compute audio nonsense for it.\r\n\t\t\ttone.volumeStart = transitionVolumeStart;\r\n\t\t\tlet volumeEnd: number = transitionVolumeEnd;\r\n\r\n\t\t\ttone.volumeStart *= customVolumeStart;\r\n\t\t\tvolumeEnd *= customVolumeEnd;\r\n\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n\t\t} else {\r\n\t\t\tlet detuneStart: number = instrument.detune / 25;\r\n\t\t\tlet detuneEnd: number = instrument.detune / 25;\r\n\t\t\tif (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n\t\t\t\tdetuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tdetuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n\t\t\t\tdetuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n\t\t\t\tdetuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tlet pitch: number = tone.pitches[0];\r\n\r\n\t\t\tif (tone.pitchCount > 1) {\r\n\t\t\t\tconst arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\r\n\t\t\t\tif (chord.harmonizes) {\r\n\t\t\t\t\tconst intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n\t\t\t\t\t// tone.intervalMult = Math.pow(2.0, intervalOffset / song.edo);\r\n\t\t\t\t\ttone.intervalMult = Math.pow(2.0, intervalOffset / Config.pitchesPerOctave);\r\n\t\t\t\t\ttone.intervalVolumeMult = Math.pow(2.0, -intervalOffset / pitchDamping);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale;\r\n\t\t\tconst endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale;\r\n\t\t\t// const startFreq: number = Instrument.frequencyFromPitch(startPitch, song.centerFrequency, song.edo);\r\n\t\t\tconst startFreq: number = Instrument.frequencyFromPitch(startPitch);\r\n\t\t\tconst pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\tconst pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\tlet settingsVolumeMultStart: number = baseVolume * filterVolumeStart;\r\n\t\t\tlet settingsVolumeMultEnd: number = baseVolume * filterVolumeEnd;\r\n\t\t\tif (instrument.type == InstrumentType.noise) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.chipNoises[instrument.chipNoise].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.chipNoises[instrument.chipNoise].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.chipWaves[instrument.chipWave].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.chipWaves[instrument.chipWave].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.intervals[instrument.interval].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.intervals[instrument.interval].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.pwm) {\r\n\r\n\t\t\t\t// Check for PWM mods to this instrument\r\n\t\t\t\tlet pulseWidthModStart: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n\t\t\t\tlet pulseWidthModEnd: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstPulseWidth, false, channel, instrumentIdx)) {\r\n\t\t\t\t\tpulseWidthModStart = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, false)) / (Config.pulseWidthRange * 2);\r\n\t\t\t\t\tpulseWidthModEnd = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, true)) / (Config.pulseWidthRange * 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst pulseEnvelope: Envelope = Config.envelopes[instrument.pulseEnvelope];\r\n\t\t\t\tconst pulseWidthStart: number = pulseWidthModStart * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\t\tconst pulseWidthEnd: number = pulseWidthModEnd * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n\t\t\t\ttone.pulseWidth = pulseWidthStart;\r\n\t\t\t\ttone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / runLength;\r\n\t\t\t}\r\n\r\n\t\t\ttone.phaseDeltas[0] = startFreq * sampleTime;\r\n\r\n\t\t\ttone.volumeStart = transitionVolumeStart * chordVolumeStart * pitchVolumeStart * settingsVolumeMultStart * instrumentVolumeMult;\r\n\t\t\tlet volumeEnd: number = transitionVolumeEnd * chordVolumeEnd * pitchVolumeEnd * settingsVolumeMultEnd * instrumentVolumeMult;\r\n\r\n\t\t\tif (filterEnvelope.type != EnvelopeType.custom && (instrument.type != InstrumentType.pwm || Config.envelopes[instrument.pulseEnvelope].type != EnvelopeType.custom)) {\r\n\t\t\t\ttone.volumeStart *= customVolumeStart;\r\n\t\t\t\tvolumeEnd *= customVolumeEnd;\r\n\t\t\t}\r\n\r\n\t\t\t// Check for mod-related volume delta\r\n\t\t\tif (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n\t\t\t\t// Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n\t\t\t\tconst startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n\t\t\t\tconst endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n\t\t\t\ttone.volumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n\t\t\t\tvolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n\t\t\t}\r\n\t\t\t// Check for SONG mod-related volume delta\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n\t\t\t\ttone.volumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n\t\t\t\tvolumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n\t\t\t}\r\n\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\t\t}\r\n\r\n\t\t// tone.phaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / song.edo) / runLength);\r\n\t\ttone.phaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / Config.pitchesPerOctave) / runLength);\r\n\t}\r\n\r\n\tpublic static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\r\n\t\tlet effect: number = 0;\r\n\t\tfor (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\r\n\t\t\teffect += Math.sin(Math.PI * 2 * secondsIntoBar / vibratoPeriodSeconds);\r\n\t\t}\r\n\t\treturn effect;\r\n\t}\r\n\r\n\tprivate static readonly fmSynthFunctionCache: Dictionary<Function> = {};\r\n\r\n\tprivate static getInstrumentSynthFunction(instrument: Instrument): Function {\r\n\t\tif (instrument.type == InstrumentType.fm) {\r\n\t\t\tconst fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\r\n\t\t\tif (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\r\n\t\t\t\tconst synthSource: string[] = [];\r\n\r\n\t\t\t\tfor (const line of Synth.fmSourceTemplate) {\r\n\t\t\t\t\tif (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n\t\t\t\t\t\tconst outputs: string[] = [];\r\n\t\t\t\t\t\tfor (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\r\n\t\t\t\t\t\t\toutputs.push(\"operator\" + j + \"Scaled\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsynthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n\t\t\t\t\t} else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n\t\t\t\t\t\tfor (let j: number = Config.operatorCount - 1; j >= 0; j--) {\r\n\t\t\t\t\t\t\tfor (const operatorLine of Synth.operatorSourceTemplate) {\r\n\t\t\t\t\t\t\t\tif (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n\t\t\t\t\t\t\t\t\tlet modulators = \"\";\r\n\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\r\n\t\t\t\t\t\t\t\t\t\tmodulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tconst feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\r\n\t\t\t\t\t\t\t\t\tif (feedbackIndices.length > 0) {\r\n\t\t\t\t\t\t\t\t\t\tmodulators += \" + feedbackMult * (\";\r\n\t\t\t\t\t\t\t\t\t\tconst feedbacks: string[] = [];\r\n\t\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of feedbackIndices) {\r\n\t\t\t\t\t\t\t\t\t\t\tfeedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tmodulators += feedbacks.join(\" + \") + \")\";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (line.indexOf(\"#\") != -1) {\r\n\t\t\t\t\t\tfor (let j = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\t\t\t\tsynthSource.push(line.replace(/\\#/g, j + \"\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsynthSource.push(line);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//console.log(synthSource.join(\"\\n\"));\r\n\r\n\t\t\t\tSynth.fmSynthFunctionCache[fingerprint] = new Function(\"synth\", \"data\", \"stereoBufferIndex\", \"stereoBufferLength\", \"runLength\", \"tone\", \"instrument\", synthSource.join(\"\\n\"));\r\n\t\t\t}\r\n\t\t\treturn Synth.fmSynthFunctionCache[fingerprint];\r\n\t\t} else if (instrument.type == InstrumentType.chip) {\r\n\t\t\treturn Synth.chipSynth;\r\n\t\t} else if (instrument.type == InstrumentType.customChipWave) {\r\n\t\t\treturn Synth.chipSynth;\r\n\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\treturn Synth.harmonicsSynth;\r\n\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\treturn Synth.pulseWidthSynth;\r\n\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\treturn Synth.noiseSynth;\r\n\t\t} else if (instrument.type == InstrumentType.spectrum) {\r\n\t\t\treturn Synth.spectrumSynth;\r\n\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\treturn Synth.drumsetSynth;\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\treturn Synth.modSynth;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type: \" + instrument.type);\r\n\t\t}\r\n\t}\r\n\r\n\t// private static chipSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument, edo: number): void {\r\n\tprivate static chipSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tvar wave: Float64Array;\r\n\t\tvar volumeScale: number;\r\n\r\n\t\tconst isCustomWave: boolean = (instrument.type == InstrumentType.customChipWave);\r\n\r\n\t\tif (!isCustomWave) {\r\n\t\t\twave = Config.chipWaves[instrument.chipWave].samples;\r\n\t\t\tvolumeScale = 1.0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\twave = instrument.customChipWaveIntegral;\r\n\t\t\t// Integrals for custom chip wave can get rather big. This \"zero point\" can be config'ed later.\r\n\t\t\tvolumeScale = 0.1;\r\n\t\t}\r\n\r\n\t\tconst waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n\t\t// const intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / edo);\r\n\t\t// const intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / edo) * tone.intervalMult;\r\n\t\tconst intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / Config.pitchesPerOctave);\r\n\t\tconst intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / Config.pitchesPerOctave) * tone.intervalMult;\r\n\t\tconst intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n\t\tif (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n\t\tconst deltaRatio: number = intervalB / intervalA;\r\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n\t\tlet phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\tlet prevWaveIntegralA: number = wave[indexA];\r\n\t\tlet prevWaveIntegralB: number = wave[indexB];\r\n\t\tprevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n\t\tprevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\t//console.log(\"S: \" + stereoBufferIndex + \" P: \" + stopIndex);\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tphaseA += phaseDeltaA;\r\n\t\t\tphaseB += phaseDeltaB;\r\n\r\n\t\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\r\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\r\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\t\tnextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n\t\t\tnextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n\t\t\tlet waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n\t\t\tlet waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\r\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\r\n\r\n\t\t\tconst combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDeltaA *= phaseDeltaScale;\r\n\t\t\tphaseDeltaB *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume * volumeScale;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\t//debugString += \",\" + data.subarray(stereoBufferIndex - runLength, stereoBufferIndex).toString();\r\n\t\t//console.log(stereoBufferIndex);\r\n\r\n\t\ttone.phases[0] = phaseA / waveLength;\r\n\t\ttone.phases[1] = phaseB / waveLength;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\r\n\t}\r\n\r\n\t// private static harmonicsSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument, edo: number): void {\r\n\tprivate static harmonicsSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tconst wave: Float32Array = instrument.harmonicsWave.getCustomWave();\r\n\t\tconst waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n\t\t// const intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / edo);\r\n\t\t// const intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / edo) * tone.intervalMult;\r\n\t\tconst intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / Config.pitchesPerOctave);\r\n\t\tconst intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / Config.pitchesPerOctave) * tone.intervalMult;\r\n\t\tconst intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n\t\tif (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n\t\tconst deltaRatio: number = intervalB / intervalA;\r\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n\t\tlet phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\tlet prevWaveIntegralA: number = wave[indexA];\r\n\t\tlet prevWaveIntegralB: number = wave[indexB];\r\n\t\tprevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n\t\tprevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tphaseA += phaseDeltaA;\r\n\t\t\tphaseB += phaseDeltaB;\r\n\r\n\t\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\r\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\r\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\t\tnextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n\t\t\tnextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n\t\t\tlet waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n\t\t\tlet waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\r\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\r\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\r\n\r\n\t\t\tconst combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDeltaA *= phaseDeltaScale;\r\n\t\t\tphaseDeltaB *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phaseA / waveLength;\r\n\t\ttone.phases[1] = phaseB / waveLength;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static pulseWidthSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phase: number = (tone.phases[0] % 1);\r\n\r\n\t\tlet pulseWidth: number = tone.pulseWidth;\r\n\t\tconst pulseWidthDelta: number = tone.pulseWidthDelta;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tconst sawPhaseA: number = phase % 1;\r\n\t\t\tconst sawPhaseB: number = (phase + pulseWidth) % 1;\r\n\r\n\t\t\tlet pulseWave: number = sawPhaseB - sawPhaseA;\r\n\r\n\t\t\t// This a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing.\r\n\t\t\tif (sawPhaseA < phaseDelta) {\r\n\t\t\t\tvar t = sawPhaseA / phaseDelta;\r\n\t\t\t\tpulseWave += (t + t - t * t - 1) * 0.5;\r\n\t\t\t} else if (sawPhaseA > 1.0 - phaseDelta) {\r\n\t\t\t\tvar t = (sawPhaseA - 1.0) / phaseDelta;\r\n\t\t\t\tpulseWave += (t + t + t * t + 1) * 0.5;\r\n\t\t\t}\r\n\t\t\tif (sawPhaseB < phaseDelta) {\r\n\t\t\t\tvar t = sawPhaseB / phaseDelta;\r\n\t\t\t\tpulseWave -= (t + t - t * t - 1) * 0.5;\r\n\t\t\t} else if (sawPhaseB > 1.0 - phaseDelta) {\r\n\t\t\t\tvar t = (sawPhaseB - 1.0) / phaseDelta;\r\n\t\t\t\tpulseWave -= (t + t + t * t + 1) * 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (pulseWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tpulseWidth += pulseWidthDelta;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static fmSourceTemplate: string[] = (`\r\nconst sineWave = beepbox.Config.sineWave;\r\n\r\nlet phaseDeltaScale = +tone.phaseDeltaScale;\r\n// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\nlet operator#Phase\t   = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\r\nlet operator#PhaseDelta  = +tone.phaseDeltas[#];\r\nlet operator#OutputMult  = +tone.volumeStarts[#];\r\nconst operator#OutputDelta = +tone.volumeDeltas[#];\r\nlet operator#Output\t  = +tone.feedbackOutputs[#];\r\nlet feedbackMult\t\t = +tone.feedbackMult;\r\nconst feedbackDelta\t\t= +tone.feedbackDelta;\r\nlet volume = +tone.volumeStart;\r\nconst volumeDelta = +tone.volumeDelta;\r\n\r\nconst isFirstOrder = tone.isFirstOrder;\r\nlet filter1 = +tone.filter;\r\nlet filter2 = isFirstOrder ? 1.0 : filter1;\r\nconst filterScale1 = +tone.filterScale;\r\nconst filterScale2 = isFirstOrder ? 1.0 : filterScale1;\r\nlet filterResonance = tone.filterResonanceStart;\r\nlet filterResonanceDelta = tone.filterResonanceDelta;\r\nlet filterSample0 = +tone.filterSample0;\r\nlet filterSample1 = +tone.filterSample1;\r\n\r\nconst stopIndex = stereoBufferIndex + runLength;\r\nstereoBufferIndex += tone.stereoOffset;\r\nlet stereoVolumeL = tone.stereoVolumeLStart;\r\nlet stereoVolumeLDelta = tone.stereoVolumeLDelta;\r\nlet stereoVolumeR = tone.stereoVolumeRStart;\r\nlet stereoVolumeRDelta = tone.stereoVolumeRDelta;\r\nlet stereoDelay = tone.stereoDelayStart;\r\nlet stereoDelayDelta = tone.stereoDelayDelta;\r\nlet delays = [];\r\nwhile (stereoBufferIndex < stopIndex) {\r\n// INSERT OPERATOR COMPUTATION HERE\r\nconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\r\nconst feedback = filterResonance + filterResonance / (1.0 - filter1);\r\nfilterSample0 += filter1 * (fmOutput - filterSample0 + feedback * (filterSample0 - filterSample1));\r\nfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\nfeedbackMult += feedbackDelta;\r\noperator#OutputMult += operator#OutputDelta;\r\noperator#Phase += operator#PhaseDelta;\r\noperator#PhaseDelta *= phaseDeltaScale;\r\nfilter1 *= filterScale1;\r\nfilter2 *= filterScale2;\r\nfilterResonance += filterResonanceDelta;\r\n\r\nconst output = filterSample1 * volume;\r\nvolume += volumeDelta;\r\n\r\n//const absStereoDelay: number = Math.abs(stereoDelay);\r\n//const fracStereoDelay: number = absStereoDelay % 1;\r\n//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\ndelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\ndata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\ndata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\ndata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\ndata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\nstereoVolumeL += stereoVolumeLDelta;\r\nstereoVolumeR += stereoVolumeRDelta;\r\nstereoDelay += stereoDelayDelta;\r\n\r\nstereoBufferIndex += 2;\r\n}\r\n\r\ntone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\ntone.feedbackOutputs[#] = operator#Output;\r\n\r\nconst epsilon = (1.0e-24);\r\nif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\nif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\ntone.filterSample0 = filterSample0;\r\ntone.filterSample1 = filterSample1;\r\n`).split(\"\\n\");\r\n\r\n\tprivate static operatorSourceTemplate: string[] = (`\r\nconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\nconst operator#PhaseInt = operator#PhaseMix|0;\r\nconst operator#Index\t= operator#PhaseInt & ` + Config.sineWaveMask + `;\r\nconst operator#Sample   = sineWave[operator#Index];\r\noperator#Output\t   = operator#Sample + (sineWave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\nconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n`).split(\"\\n\");\r\n\r\n\tprivate static noiseSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumWave();\r\n\t\tlet phaseDelta: number = +tone.phaseDeltas[0];\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\tif (tone.phases[0] == 0) {\r\n\t\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\t\tphase = Math.random() * Config.chipNoiseLength;\r\n\t\t}\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst pitchRelativefilter: number = Math.min(1.0, tone.phaseDeltas[0] * Config.chipNoises[instrument.chipNoise].pitchFilterMult);\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst waveSample: number = wave[phase & 0x7fff];\r\n\r\n\t\t\tsample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static spectrumSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumWave();\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] * (1 << 7);\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\tif (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n\t\tconst pitchRelativefilter: number = Math.min(1.0, phaseDelta);\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst phaseInt: number = phase | 0;\r\n\t\t\tconst index: number = phaseInt & 0x7fff;\r\n\t\t\tlet waveSample: number = wave[index];\r\n\t\t\tconst phaseRatio: number = phase - phaseInt;\r\n\t\t\twaveSample += (wave[index + 1] - waveSample) * phaseRatio;\r\n\r\n\t\t\tsample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\t// private static drumsetSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument, edo: number): void {\r\n\t// \tlet wave: Float32Array = instrument.getDrumsetWave(tone.drumsetPitch, edo);\r\n\tprivate static drumsetSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumsetWave(tone.drumsetPitch);\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] / Instrument.drumsetIndexReferenceDelta(tone.drumsetPitch);\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\tif (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst phaseInt: number = phase | 0;\r\n\t\t\tconst index: number = phaseInt & 0x7fff;\r\n\t\t\tsample = wave[index];\r\n\t\t\tconst phaseRatio: number = phase - phaseInt;\r\n\t\t\tsample += (wave[index + 1] - sample) * phaseRatio;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static modSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\t// Note: present modulator value is tone.volumeStart.\r\n\r\n\t\tif (!synth.song) return;\r\n\r\n\t\tlet mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\t\tlet setting: ModSetting = instrument.modSettings[mod];\r\n\r\n\t\tsynth.setModValue(tone.customVolumeStart, tone.customVolumeEnd, mod, instrument, setting);\r\n\r\n\t\t// Reset arps, but only at the start of the note\r\n\t\tif (setting == ModSetting.mstResetArpeggio && synth.tick == 0 && tone.noteStart == synth.beat * Config.partsPerBeat + synth.part) {\r\n\t\t\tsynth.song.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].arpTime = 0;\r\n\t\t}\r\n\t\telse if (setting == ModSetting.mstNextBar) {\r\n\t\t\tsynth.wantToSkip = true;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static findRandomZeroCrossing(wave: Float32Array): number {\r\n\t\tlet phase: number = Math.random() * Config.chipNoiseLength;\r\n\r\n\t\t// Spectrum and drumset waves sounds best when they start at a zero crossing,\r\n\t\t// otherwise they pop. Try to find a zero crossing.\r\n\t\tlet indexPrev: number = phase & 0x7fff;\r\n\t\tlet wavePrev: number = wave[indexPrev];\r\n\t\tconst stride: number = 16;\r\n\t\tfor (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\r\n\t\t\tconst indexNext: number = (indexPrev + stride) & 0x7fff;\r\n\t\t\tconst waveNext: number = wave[indexNext];\r\n\t\t\tif (wavePrev * waveNext <= 0.0) {\r\n\t\t\t\t// Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\r\n\t\t\t\tfor (let i: number = 0; i < 16; i++) {\r\n\t\t\t\t\tconst innerIndexNext: number = (indexPrev + 1) & 0x7fff;\r\n\t\t\t\t\tconst innerWaveNext: number = wave[innerIndexNext];\r\n\t\t\t\t\tif (wavePrev * innerWaveNext <= 0.0) {\r\n\t\t\t\t\t\t// Found the zero crossing again! Now let's find the exact intersection.\r\n\t\t\t\t\t\tconst slope: number = innerWaveNext - wavePrev;\r\n\t\t\t\t\t\tphase = indexPrev;\r\n\t\t\t\t\t\tif (Math.abs(slope) > 0.00000001) {\r\n\t\t\t\t\t\t\tphase += -wavePrev / slope;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tphase = Math.max(0, phase) % Config.chipNoiseLength;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tindexPrev = innerIndexNext;\r\n\t\t\t\t\t\twavePrev = innerWaveNext;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tindexPrev = indexNext;\r\n\t\t\t\twavePrev = waveNext;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn phase;\r\n\t}\r\n\r\n\tpublic static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\r\n\t\treturn (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\r\n\t}\r\n\tpublic static volumeMultToInstrumentVolume(volumeMult: number): number {\r\n\t\treturn (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\r\n\t}\r\n\tpublic static expressionToVolumeMult(expression: number): number {\r\n\t\treturn Math.pow(Math.max(0.0, expression) / 6.0, 1.5);\r\n\t}\r\n\tpublic static volumeMultToExpression(volumeMult: number): number {\r\n\t\treturn Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * 6.0;\r\n\t}\r\n\r\n\tprivate getSamplesPerTick(): number {\r\n\t\tif (this.song == null) return 0;\r\n\t\tlet beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n\t\tif (this.isModActive(ModSetting.mstTempo, true)) {\r\n\t\t\tbeatsPerMinute = this.getModValue(ModSetting.mstTempo, true);\r\n\t\t}\r\n\t\treturn this.getSamplesPerTickSpecificBPM(beatsPerMinute);\r\n\t}\r\n\r\n\tprivate getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\r\n\t\tconst beatsPerSecond: number = beatsPerMinute / 60.0;\r\n\t\tconst partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\r\n\t\tconst tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\r\n\t\treturn this.samplesPerSecond / tickPerSecond;\r\n\t}\r\n}\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\r\n//}\r\n"]}