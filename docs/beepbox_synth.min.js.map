{"version":3,"sources":["../src/synth/SynthConfig.ts","../src/editor/EditorConfig.ts","../src/synth/FFT.ts","../src/synth/Deque.ts","../src/synth/synth.ts"],"names":["Config","centerWave","wave","sum","i","length","average","cumulative","wavePrev","push","Float64Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","getDrumWave","index","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","samples","Float32Array","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","Error","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","pow","highIndex","min","retroWave","combinedAmplitude","lerped","log","LN2","amplitude","spectrumMax","radians","PI","cos","sin","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","dictionary","value","name","result","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","reverbRange","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","edoMin","edoMax","instrumentsPerChannelMin","instrumentsPerChannelMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipWaves","volume","pitchFilterMult","isSoft","filterCutoffMaxHz","filterCutoffMinHz","filterMax","filterMaxResonance","filterCutoffRange","filterResonanceRange","transitions","isSeamless","attackSeconds","releases","releaseTicks","slides","slideTicks","vibratos","type","delayParts","vibratoTypes","periodsSeconds","period","arpSpeedScale","intervals","spread","offset","sign","effectsNames","volumeRange","volumeLogScale","panCenter","panMax","detuneMin","detuneMax","songDetuneMin","songDetuneMax","chords","harmonizes","customInterval","arpeggiates","isCustomInterval","strumParts","maxChordSize","operatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","harmonicsControlPoints","harmonicsRendered","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthRange","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","drumCount","modCount","pitchOctaves","maxScrollableOctaves","maximumTonesPerChannel","sineWaveLength","sineWaveMask","sineWave","generateSineWave","barEditorHeight","test","navigator","userAgent","EditorConfig","[object Object]","presetValue","categoryIndex","presetIndex","presetCategories","presets","program","category","preset","generalMidi","midiProgram","presetName","factor","countBits","n","isPowerOf2","round","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","customType","settings","transition","effects","chord","filterCutoffHz","filterResonance","filterEnvelope","interval","vibrato","isNoise","algorithm","feedbackType","feedbackAmplitude","feedbackEnvelope","operators","frequency","envelope","customChipWave","harmonics","midiSubharmonicOctaves","pulseWidth","pulseEnvelope","spectrum","drums","Deque","this","_capacity","_buffer","undefined","_mask","_offset","_count","element","_expandCapacity","set","get","popFront","popBack","oldBuffer","Array","size","base64IntToCharCode","base64CharCodeToInt","BitFieldReader","source","_bits","_readIndex","charCodeAt","minValue","minBits","numBits","readLongTail","read","BitFieldWriter","_index","writeLongTail","write","other","buffer","ceil","makeNotePin","time","clamp","max","val","validateRange","Note","pitch","start","end","fadeout","pitches","pins","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestVolume","pin","newNote","concat","Pattern","notes","instrument","note","clone","Operator","reset","SpectrumWave","isNoiseChannel","_wave","_waveIsReady","isHarmonic","lowestOctave","waveLength","highestOctave","falloffRatio","pitchTweak","controlPointToOctave","point","floor","value1","value2","octave1","octave2","HarmonicsWave","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","Instrument","isModChannel","chipWave","chipNoise","filterCutoff","vibratoDepth","vibratoSpeed","vibratoDelay","vibratoType","pan","panDelay","arpeggioSpeed","fastTwoNoteArp","tieNoteTransition","clicklessTransition","detune","LFOtime","nextLFOtime","arpTime","customChipWaveIntegral","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modChannels","modStatuses","modInstruments","modSettings","mod","ModStatus","msNone","ModSetting","mstNone","spectrumWave","instrumentObject","getChord","getFilterCutoffOctaves","getFilterEnvelope","getDrumsetEnvelope","operatorArray","operator","useSlowerRhythm","indexOf","valueOf","setTypeAndReset","oldTransitionNames","binary","sudden","smooth","transitionObject","findIndex","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","sustain sharp","sustain medium","sustain soft","decay sharp","legacyFilter","legacyEffectNames","drum","legacyWaveNames","triangle","square","pulse wide","pulse narrow","sawtooth","double saw","double pulse","spiky","plateau","legacyChorusNames","fifths","octaves","feedback","legacyEnvelopeNames","pluck 1","pluck 2","pluck 3","operatorObject","freq","_centerFeq","_edo","frequencyFromPitch","drumsetIndexReferenceDelta","getCustomWave","_drumsetIndexToSpectrumOctave","edo","Channel","octave","instruments","patterns","bars","muted","Song","string","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","mstMaxVols","Map","mstSongVolume","mstTempo","mstReverb","mstNextBar","mstInsVolume","mstPan","mstFilterCut","mstFilterPeak","mstFMSlider1","mstFMSlider2","mstFMSlider3","mstFMSlider4","mstFMFeedback","mstPulseWidth","mstDetune","mstVibratoDepth","mstSongDetune","mstVibratoSpeed","mstVibratoDelay","mstArpeggioSpeed","mstPanDelay","mstResetArpeggio","mstMaxValue","mstNewNoteVols","getNewNoteVolume","isMod","modChannel","modInstrument","cap","realToModValue","tempo","getVolumeCap","getVolumeCapForSetting","modSetting","fromBase64String","initToDefault","setting","pitchChannelCount","noiseChannelCount","modChannelCount","channel","andResetChannels","scale","key","loopStart","loopLength","reverb","centerFrequency","maxPitch","beatsPerBar","barCount","patternsPerChannel","rhythm","instrumentsPerChannel","title","document","channelIndex","getChannelCount","pattern","bar","bits","_variant","_latestJummBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","o","spectrumBits","encodeBase64","harmonicsBits","neededBits","shapeBits","neededInstrumentBits","getChannelIsNoise","getChannelIsMod","instrumentIndex","modStatus","msForPitch","msForNoise","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","writePartDuration","clear","writePinCount","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","splice","unshift","pop","allPitches","pitchIndex","pitchIter","writePitchInterval","stringLength","lengthBase64","digits","prototype","maxApplyArgs","slice","compressed","charIndex","fromJsonObject","JSON","parse","substring","variant","_latestBeepboxVersion","_oldestBeepboxVersion","_oldestJummBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","command","instrumentChannelIterator","instrumentIndexIterator","toSetOctaves","useSlowerArpSpeed","songNameLength","decodeURIComponent","window","localStorage","getItem","instrumentType","legacyWaves","legacyEffects","legacyEnvelopes","effect","originalValue","nextValue","channelNameLength","byteCount","markCustomWaveDirty","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","newPattern","newNotes","useOldShape","shape","pinObj","pinCount","readPinCount","initialVolume","bendCount","pitchBend","readLegacyPartDuration","readPartDuration","readPitchInterval","intervalIter","shift","isBackwards","restLength","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","toJsonObject","patternArray","noteArray","volumeCap","pointArray","useVol","tick","forMod","points","sequenceArray","l","octaveScrollBar","sequence","format","_format","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","oldScaleNames","romani :)","romani :(","enigma","scaleName","importedPartsPerBeat","maxInstruments","maxPatterns","maxBars","channelObject","newPitchChannels","newNoiseChannels","newModChannels","patternObject","maxNoteCount","noteObject","k","startInterval","pointObject","lowestPitch","highestPitch","patternIndex","getPattern","Tone","chordSize","drumsetPitch","prevNote","nextNote","prevNotePitchIndex","nextNotePitchIndex","active","noteStart","noteEnd","noteLengthTicks","ticksSinceReleased","liveInputSamplesHeld","lastInterval","lastVolume","stereoVolume1","stereoVolume2","stereoOffset","stereoDelay","sample","phases","phaseDeltas","volumeStarts","volumeDeltas","volumeStart","volumeDelta","phaseDeltaScale","pulseWidthDelta","filter","filterScale","filterSample0","filterSample1","vibratoScale","intervalMult","intervalVolumeMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","Synth","song","samplesPerSecond","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","loopRepeatCount","wantToSkip","playheadInternal","beat","part","tickSampleCountdown","isPlayingSong","liveInputEndTime","tonePool","activeTones","tyingOver","activeModTones","releasedTones","liveInputTones","limit","stereoBufferIndex","samplesForNone","samplesForReverb","samplesForChorus","samplesForChorusReverb","chorusDelayLine","chorusDelayPos","chorusPhase","reverbDelayLine","reverbDelayPos","reverbFeedback0","reverbFeedback1","reverbFeedback2","reverbFeedback3","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","synthesize","deactivateAudio","setSong","getInstrumentSynthFunction","warmUp","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","currentPart","currentBar","instrumentIdx","getPatternInstrument","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","msForSong","setModValue","playing","playhead","remainder","samplesPerTick","getSamplesPerTick","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","modValueToReal","ended","totalSamples","foundMod","find","sort","a","b","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getSamplesPerBar","getTotalBars","useLoopCount","volumeEnd","nextVal","channelAdjust","forSong","isModActive","AudioContext","webkitAudioContext","sampleRate","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","activateAudio","warmUpSynthesizer","computeLatestModValues","snapToBar","freeAllTones","oldBar","outputBufferLength","playSong","channelCount","idx","bufferIndex","pause","stereoBufferLength","chorusAngle","chorusRange","chorusOffset0","chorusOffset1","chorusOffset2","chorusOffset3","chorusOffset4","chorusOffset5","useReverb","getModValue","samplesLeftInBuffer","runLength","determineCurrentActiveTones","count","tone","playTone","skipBar","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","determineLiveInputTones","getTransition","freeReleasedTone","shouldFadeOutFast","chorusTap0Index","chorusTap1Index","chorusTap2Index","chorusTap3Index","chorusTap4Index","chorusTap5Index","chorusTap0Delta","chorusTap1Delta","chorusTap2Delta","chorusTap3Delta","chorusTap4Delta","chorusTap5Delta","runEnd","bufferIndexL","bufferIndexR","sampleForNoneL","sampleForNoneR","sampleForReverbL","sampleForReverbR","sampleForChorusL","sampleForChorusR","sampleForChorusReverbL","sampleForChorusReverbR","combinedChorusL","combinedChorusR","chorusTap0Ratio","chorusTap1Ratio","chorusTap2Ratio","chorusTap3Ratio","chorusTap4Ratio","chorusTap5Ratio","chorusTap0A","chorusTap0B","chorusTap1A","chorusTap1B","chorusTap2A","chorusTap2B","chorusTap3A","chorusTap3B","chorusTap4A","chorusTap4B","chorusTap5A","chorusSampleL","chorusSampleR","reverbDelayPos1","reverbDelayPos2","reverbDelayPos3","reverbSample0","reverbSample1","reverbSample2","reverbSample3","reverbTemp0","reverbTemp1","reverbTemp2","reverbTemp3","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","Number","isInteger","atEnd","carryOver","toneCount","targetBar","nextPattern","currNote","currVolume","p","releaseTone","freeTone","remove","resetEffects","epsilon","pushBack","pushFront","toneIndex","toneList","newTone","modChannelIdx","prevNotes","nextNotes","fillCount","syncTones","peakBack","noteStartAdjust","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","synthBuffer","computeTone","synthesizer","beats","customVolume","attack","synth","chordVolume","computeChordVolume","intervalScale","secondsPerPart","beatsPerPart","toneWasActive","treatAsSeamless","startPan","endPan","startPanDelay","endPanDelay","useStartPan","useEndPan","maxDelayStart","maxDelayEnd","delayEnd","stereoVolumeLEnd","stereoVolumeREnd","volumeReferencePitch","baseVolume","pitchDamping","resetPhases","partsSinceStart","intervalStart","intervalEnd","transitionVolumeStart","transitionVolumeEnd","chordVolumeStart","chordVolumeEnd","decayTimeStart","decayTimeEnd","ticksSoFar","startTicksSinceReleased","endTicksSinceReleased","startTick","endTick","toneTransition","expressionToVolumeMult","heldTicksStart","heldTicksEnd","heldPartsStart","heldPartsEnd","partsPerBar","endPinIndex","startPin","endPin","noteStartTick","pinStart","pinEnd","tickTimeStart","tickTimeEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","customVolumeTickStart","customVolumeTickEnd","transitionVolumeTickStart","transitionVolumeTickEnd","chordVolumeTickStart","chordVolumeTickEnd","intervalTickStart","intervalTickEnd","decayTimeTickStart","decayTimeTickEnd","maximumSlideTicks","slideRatioStartTick","slideRatioEndTick","intervalDiff","volumeDiff","decayTimeDiff","chordSizeDiff","sampleTime","lfoEffectStart","getLFOAmplitude","lfoEffectEnd","partsStart","partsEnd","useVibratoStart","useVibratoEnd","activeVibratoDelayMods","vibratoDelayStart","vibratoDelayEnd","MAX_VALUE","instrumentVolumeMult","instrumentVolumeToVolumeMult","pickMainInterval","cutoffOctavesModStart","cutoffOctavesModEnd","filterCutModStart","filterCutModEnd","filterCutoffHzStart","filterCutoffHzEnd","filterBaseStart","filterBaseEnd","filterMin","computeEnvelope","endFilter","filterVolumeStart","filterVolumeEnd","getFilterResonance","useFilterResonanceStart","useFilterResonanceEnd","filterResonanceEnd","sineVolumeBoostStart","sineVolumeBoostEnd","totalCarrierVolumeStart","totalCarrierVolumeEnd","arpeggioInterval","detuneStart","detuneEnd","associatedCarrierIndex","freqMult","startFreq","amplitudeStart","amplitudeEnd","amplitudeCurveStart","operatorAmplitudeCurve","amplitudeCurveEnd","startVal","endVal","endPitch","pitchVolumeStart","pitchVolumeEnd","operatorEnvelope","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","volumeMult","intervalOffset","settingsVolumeMultStart","settingsVolumeMultEnd","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","replace","join","operatorLine","operatorSourceTemplate","modulators","modulatorNumber","feedbackIndices","Function","chipSynth","harmonicsSynth","pulseWidthSynth","noiseSynth","spectrumSynth","drumsetSynth","modSynth","data","volumeScale","intervalA","intervalB","intervalSign","deltaRatio","phaseDeltaA","phaseDeltaB","phaseA","phaseB","filter1","filter2","filterScale1","filterScale2","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","prevWaveIntegralA","prevWaveIntegralB","delays","stereoVolumeL","stereoVolumeR","nextWaveIntegralA","nextWaveIntegralB","waveA","waveB","output","phaseDelta","phase","sawPhaseA","sawPhaseB","pulseWave","t","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","phaseRatio","getDrumsetWave","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","slope","instrumentVolume","expression","getBeatsPerMinute","beatsPerSecond","partsPerSecond","tickPerSecond","split"],"mappings":"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AI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KA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","sourcesContent":["/*!\r\nCopyright (C) 2020 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\n//namespace beepbox {\r\nexport interface Dictionary<T> {\r\n\t[K: string]: T;\r\n}\r\n\r\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\r\n\tdictionary: Dictionary<T>;\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tcustom,\r\n\tsteady,\r\n\tpunch,\r\n\tflare,\r\n\ttwang,\r\n\tswell,\r\n\ttremolo,\r\n\ttremolo2,\r\n\tdecay,\r\n}\r\n\r\nexport const enum InstrumentType {\r\n\tchip = 0,\r\n\tfm = 1,\r\n\tnoise = 2,\r\n\tspectrum = 3,\r\n\tdrumset = 4,\r\n\tharmonics = 5,\r\n\tpwm = 6,\r\n\tcustomChipWave = 7,\r\n\tmod = 8,\r\n\tlength,\r\n}\r\n\r\nexport interface BeepBoxOption {\r\n\treadonly index: number;\r\n\treadonly name: string;\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n\treadonly flags: ReadonlyArray<boolean>;\r\n\treadonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n\treadonly isWhiteKey: boolean;\r\n\treadonly basePitch: number;\r\n}\r\n\r\nexport interface Rhythm extends BeepBoxOption {\r\n\treadonly stepsPerBeat: number;\r\n\t//readonly ticksPerArpeggio: number;\r\n\t//readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>>;\r\n\treadonly roundUpThresholds: number[] | null;\r\n}\r\n\r\nexport interface ChipWave extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly samples: Float64Array;\r\n}\r\n\r\nexport interface ChipNoise extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly basePitch: number;\r\n\treadonly pitchFilterMult: number;\r\n\treadonly isSoft: boolean;\r\n\tsamples: Float32Array | null;\r\n}\r\n\r\nexport interface Transition extends BeepBoxOption {\r\n\treadonly isSeamless: boolean;\r\n\treadonly attackSeconds: number;\r\n\treadonly releases: boolean;\r\n\treadonly releaseTicks: number;\r\n\treadonly slides: boolean;\r\n\treadonly slideTicks: number;\r\n}\r\n\r\nexport interface Vibrato extends BeepBoxOption {\r\n\treadonly amplitude: number;\r\n\treadonly type: number;\r\n\treadonly delayParts: number;\r\n}\r\n\r\nexport interface VibratoType extends BeepBoxOption {\r\n\treadonly periodsSeconds: number[];\r\n\treadonly period: number;\r\n}\r\n\r\nexport interface Interval extends BeepBoxOption {\r\n\treadonly spread: number;\r\n\treadonly offset: number;\r\n\treadonly volume: number;\r\n\treadonly sign: number;\r\n}\r\n\r\nexport interface Chord extends BeepBoxOption {\r\n\treadonly harmonizes: boolean;\r\n\treadonly customInterval: boolean;\r\n\treadonly arpeggiates: boolean;\r\n\treadonly isCustomInterval: boolean;\r\n\treadonly strumParts: number;\r\n}\r\n\r\nexport interface Algorithm extends BeepBoxOption {\r\n\treadonly carrierCount: number;\r\n\treadonly associatedCarrier: ReadonlyArray<number>;\r\n\treadonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface OperatorFrequency extends BeepBoxOption {\r\n\treadonly mult: number;\r\n\treadonly hzOffset: number;\r\n\treadonly amplitudeSign: number;\r\n}\r\n\r\nexport interface Envelope extends BeepBoxOption {\r\n\treadonly type: EnvelopeType;\r\n\treadonly speed: number;\r\n}\r\n\r\nexport interface Feedback extends BeepBoxOption {\r\n\treadonly indices: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport class Config {\r\n\t// Params for post-processing compressor\r\n\tpublic static thresholdVal: number = -10;\r\n\tpublic static kneeVal: number = 40;\r\n\tpublic static ratioVal: number = 12;\r\n\tpublic static attackVal: number = 0;\r\n\tpublic static releaseVal: number = 0.25;\r\n\r\n\tpublic static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\r\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\r\n\t\t{ name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\r\n\t\t{ name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\r\n\t\t{ name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\r\n\t\t{ name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\r\n\t\t{ name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\r\n\t\t{ name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\r\n\t\t{ name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\r\n\t\t{ name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\r\n\t\t{ name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\r\n\t\t{ name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\r\n\t\t{ name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\r\n\t\t{ name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\r\n\t\t{ name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\r\n\t\t{ name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\r\n\t\t{ name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\r\n\t\t{ name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\r\n\t\t{ name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\r\n\t\t{ name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\r\n\t\t{ name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\r\n\t\t{ name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\r\n\r\n\r\n\t]);\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{ name: \"0\", isWhiteKey: true, basePitch: 0 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{ name: \"1\", isWhiteKey: false, basePitch: 1 }, // TODO: I lowered these by 12, idk if I still want to have midi import so I might have to adjust if I don't.\r\n\t\t{ name: \"2\", isWhiteKey: true, basePitch: 2 },\r\n\t\t{ name: \"3\", isWhiteKey: false, basePitch: 3 },\r\n\t\t{ name: \"4\", isWhiteKey: true, basePitch: 4 },\r\n\t\t{ name: \"5\", isWhiteKey: true, basePitch: 5 },\r\n\t\t{ name: \"6\", isWhiteKey: false, basePitch: 6 },\r\n\t\t{ name: \"7\", isWhiteKey: true, basePitch: 7 },\r\n\t\t{ name: \"8\", isWhiteKey: false, basePitch: 8 },\r\n\t\t{ name: \"9\", isWhiteKey: true, basePitch: 9 },\r\n\t\t{ name: \"A\", isWhiteKey: false, basePitch: 10 },\r\n\t\t{ name: \"B\", isWhiteKey: true, basePitch: 11 },\r\n\t]);\r\n\t// public static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1]; // key relic (TODO)\r\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\r\n\tpublic static readonly tempoMin: number = 16;\r\n\tpublic static readonly tempoMax: number = 512;\r\n\tpublic static readonly reverbRange: number = 32;\r\n\tpublic static readonly beatsPerBarMin: number = 1;\r\n\tpublic static readonly beatsPerBarMax: number = 32;\r\n\tpublic static readonly barCountMin: number = 1;\r\n\tpublic static readonly barCountMax: number = 512;\r\n\tpublic static readonly edoMin: number = 1;\r\n\tpublic static readonly edoMax: number = 72;\r\n\tpublic static readonly instrumentsPerChannelMin: number = 1;\r\n\tpublic static readonly instrumentsPerChannelMax: number = 16;\r\n\tpublic static readonly partsPerBeat: number = 48;\r\n\tpublic static readonly ticksPerPart: number = 2;\r\n\tpublic static readonly ticksPerArpeggio: number = 3;\r\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];\r\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\r\n\t\t{ name: \"÷1 (singlets '_')\", stepsPerBeat: 1, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷2 (duplets)\", stepsPerBeat: 2, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\r\n\t\t// { name: \"÷5\", stepsPerBeat: 5, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷6\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷8\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t// { name: \"÷9\", stepsPerBeat: 9, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷12\", stepsPerBeat: 12, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷16\", stepsPerBeat: 16, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷24 (freehand)\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t]);\r\n\r\n\tpublic static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"custom chip\", \"mod\"];\r\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, true];\r\n\tpublic static readonly chipWaves: DictionaryArray<ChipWave> = toNameMap([\r\n\t\t{ name: \"rounded\", volume: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\r\n\t\t{ name: \"triangle\", volume: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\r\n\t\t{ name: \"square\", volume: 0.5, samples: centerWave([1.0, -1.0]) },\r\n\t\t{ name: \"1/4 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"1/8 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"sawtooth\", volume: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n\t\t{ name: \"double saw\", volume: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n\t\t{ name: \"double pulse\", volume: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"spiky\", volume: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\r\n\t\t{ name: \"sine\", volume: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\r\n\t\t{ name: \"flute\", volume: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\r\n\t\t{ name: \"harp\", volume: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\r\n\t\t{ name: \"sharp clarinet\", volume: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\r\n\t\t{ name: \"soft clarinet\", volume: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n\t\t{ name: \"alto sax\", volume: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\r\n\t\t{ name: \"bassoon\", volume: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\r\n\t\t{ name: \"trumpet\", volume: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\r\n\t\t{ name: \"electric guitar\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\r\n\t\t{ name: \"organ\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\r\n\t\t{ name: \"pan flute\", volume: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\r\n\t\t{ name: \"glitch\", volume: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n\t]);\r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\r\n\t\t{ name: \"retro\", volume: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"white\", volume: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\r\n\t\t{ name: \"clang\", volume: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"buzz\", volume: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"hollow\", volume: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\r\n\t\t{ name: \"shine\", volume: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"deep\", volume: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\r\n\t\t{ name: \"cutter\", volume: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"metallic\", volume: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t]);\r\n\tpublic static readonly filterCutoffMaxHz: number = 8000; // This is carefully calculated to correspond to no change when filtering at 48000 samples per second.\r\n\tpublic static readonly filterCutoffMinHz: number = 1;\r\n\tpublic static readonly filterMax: number = 0.95;\r\n\tpublic static readonly filterMaxResonance: number = 0.95;\r\n\tpublic static readonly filterCutoffRange: number = 11;\r\n\tpublic static readonly filterResonanceRange: number = 8;\r\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\r\n\t\t{ name: \"seamless\", isSeamless: true, attackSeconds: 0.0, releases: false, releaseTicks: 1, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard\", isSeamless: false, attackSeconds: 0.0, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft\", isSeamless: false, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"slide\", isSeamless: true, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: true, slideTicks: 3 },\r\n\t\t{ name: \"cross fade\", isSeamless: false, attackSeconds: 0.04, releases: true, releaseTicks: 6, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard fade\", isSeamless: false, attackSeconds: 0.0, releases: true, releaseTicks: 48, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"medium fade\", isSeamless: false, attackSeconds: 0.0125, releases: true, releaseTicks: 72, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft fade\", isSeamless: false, attackSeconds: 0.06, releases: true, releaseTicks: 96, slides: false, slideTicks: 6 },\r\n\t]);\r\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\r\n\t\t{ name: \"none\", amplitude: 0.0, type: 0, delayParts: 0 },\r\n\t\t{ name: \"light\", amplitude: 0.15, type: 0, delayParts: 0 },\r\n\t\t{ name: \"delayed\", amplitude: 0.3, type: 0, delayParts: 18 },\r\n\t\t{ name: \"heavy\", amplitude: 0.45, type: 0, delayParts: 0 },\r\n\t\t{ name: \"shaky\", amplitude: 0.1, type: 1, delayParts: 0 },\r\n\t]);\r\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\r\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\r\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\r\n\t]);\r\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\r\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\r\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\r\n\tpublic static readonly intervals: DictionaryArray<Interval> = toNameMap([\r\n\t\t{ name: \"union\", spread: 0.0, offset: 0.0, volume: 0.7, sign: 1.0 },\r\n\t\t{ name: \"shimmer\", spread: 0.018, offset: 0.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"hum\", spread: 0.045, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"honky tonk\", spread: 0.09, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"dissonant\", spread: 0.25, offset: 0.0, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"fifth\", spread: 3.5, offset: 3.5, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"octave\", spread: 6.0, offset: 6.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"bowed\", spread: 0.02, offset: 0.0, volume: 1.0, sign: -1.0 },\r\n\t\t{ name: \"piano\", spread: 0.01, offset: 0.0, volume: 1.0, sign: 0.7 },\r\n\t]);\r\n\tpublic static readonly effectsNames: ReadonlyArray<string> = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\r\n\tpublic static readonly volumeRange: number = 50;\r\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\r\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\r\n\tpublic static readonly volumeLogScale: number = 0.1428;\r\n\tpublic static readonly panCenter: number = 50;\r\n\tpublic static readonly panMax: number = Config.panCenter * 2;\r\n\tpublic static readonly detuneMin: number = -50;\r\n\tpublic static readonly detuneMax: number = 50;\r\n\tpublic static readonly songDetuneMin: number = -250;\r\n\tpublic static readonly songDetuneMax: number = 250;\r\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\r\n\t\t{ name: \"harmony\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"strum\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 1 },\r\n\t\t{ name: \"arpeggio\", harmonizes: false, customInterval: false, arpeggiates: true, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"custom interval\", harmonizes: true, customInterval: true, arpeggiates: true, isCustomInterval: true, strumParts: 0 },\r\n\t]);\r\n\tpublic static readonly maxChordSize: number = 9; // Pandora's box... ?0_0\r\n\tpublic static readonly operatorCount: number = 4;\r\n\tpublic static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\r\n\t\t{ name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\r\n\t\t{ name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\r\n\t\t{ name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\r\n\t\t{ name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\r\n\t\t{ name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\r\n\t\t{ name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\r\n\t\t{ name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\r\n\t\t{ name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\r\n\t\t{ name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\r\n\t\t{ name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\r\n\t\t{ name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\r\n\t]);\r\n\tpublic static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091];\r\n\tpublic static readonly operatorAmplitudeMax: number = 15;\r\n\tpublic static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\r\n\t\t{ name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\r\n\t\t{ name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\r\n\t\t{ name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t]);\r\n\tpublic static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\r\n\t\t{ name: \"custom\", type: EnvelopeType.custom, speed: 0.0 },\r\n\t\t{ name: \"steady\", type: EnvelopeType.steady, speed: 0.0 },\r\n\t\t{ name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\r\n\t\t{ name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\r\n\t\t{ name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\r\n\t\t{ name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\r\n\t\t{ name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\r\n\t\t{ name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\r\n\t\t{ name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\r\n\t\t{ name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\r\n\t\t{ name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\r\n\t\t{ name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\r\n\t\t{ name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\r\n\t\t{ name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\r\n\t\t{ name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\r\n\t\t{ name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\r\n\t\t{ name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\r\n\t\t{ name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\r\n\t\t{ name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\r\n\t\t{ name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\r\n\t\t{ name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\r\n\t]);\r\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\r\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\r\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\r\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\r\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\r\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\r\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\r\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\r\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\r\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\r\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\r\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\r\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\r\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\r\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\r\n\t\t{ name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\r\n\t]);\r\n\tpublic static readonly chipNoiseLength: number = 1 << 15; // 32768\r\n\tpublic static readonly spectrumBasePitch: number = 24;\r\n\tpublic static readonly spectrumControlPoints: number = 30;\r\n\tpublic static readonly spectrumControlPointsPerOctave: number = 7;\r\n\tpublic static readonly spectrumControlPointBits: number = 3;\r\n\tpublic static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\r\n\tpublic static readonly harmonicsControlPoints: number = 28;\r\n\tpublic static readonly harmonicsRendered: number = 64;\r\n\tpublic static readonly harmonicsControlPointBits: number = 3;\r\n\tpublic static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\r\n\tpublic static readonly harmonicsWavelength: number = 1 << 11; // 2048\r\n\tpublic static readonly pulseWidthRange: number = 50;\r\n\tpublic static readonly pitchChannelCountMin: number = 1;\r\n\tpublic static readonly pitchChannelCountMax: number = 32;\r\n\tpublic static readonly noiseChannelCountMin: number = 0;\r\n\tpublic static readonly noiseChannelCountMax: number = 8;\r\n\tpublic static readonly modChannelCountMin: number = 0;\r\n\tpublic static readonly modChannelCountMax: number = 8;\r\n\tpublic static readonly noiseInterval: number = 6;\r\n\t// public static readonly centerFrequency = 425.85465642512778279\r\n\t// public static readonly pitchesPerOctave: number = 19;\r\n\tpublic static readonly drumCount: number = 12;\r\n\tpublic static readonly modCount: number = 6;\r\n\tpublic static readonly pitchOctaves: number = 9; // prev 8\r\n\tpublic static readonly maxScrollableOctaves: number = 5; // Largest number possible with any config setting\r\n\t// public static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\r\n\tpublic static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\r\n\tpublic static readonly sineWaveLength: number = 1 << 8; // 256\r\n\tpublic static readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n\tpublic static readonly sineWave: Float64Array = generateSineWave();\r\n\r\n\t// Height of the small editor column for inserting/deleting rows, in pixels.\r\n\tpublic static readonly barEditorHeight: number = 10;\r\n\r\n}\r\n\r\nfunction centerWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = wave[i] - average;\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\nfunction centerAndNormalizeWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tlet magn: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t\tmagn += Math.abs(wave[i]);\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\tconst magnAvg: number = magn / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = (wave[i] - average) / (magnAvg);\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\n\r\n// The function arguments will be defined in FFT.ts, but I want\r\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\r\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\r\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\r\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\r\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null = null, scaleElementsByFactor: Function | null = null): Float32Array {\r\n\tlet wave: Float32Array | null = Config.chipNoises[index].samples;\r\n\tif (wave == null) {\r\n\t\twave = new Float32Array(Config.chipNoiseLength + 1);\r\n\t\tConfig.chipNoises[index].samples = wave;\r\n\r\n\t\tif (index == 0) {\r\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 1) {\r\n\t\t\t// White noise is just random values for each sample.\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t}\r\n\t\t} else if (index == 2) {\r\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 3) {\r\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 4) {\r\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\tdrawNoiseSpectrum(wave, 10, 11, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 11, 14, .6578, .6578, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 5) {\r\n\t\t\t// \"Shine\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 6) {\r\n\t\t\t// \"Deep\" drums from modbox!\r\n\t\t\tdrawNoiseSpectrum(wave, 1, 10, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 20, 14, -2, -2, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 7) {\r\n\t\t\t// \"Cutter\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1);\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 8) {\r\n\t\t\t// \"Metallic\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < 32768; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 + 0.5;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t}\r\n\r\n\t\twave[Config.chipNoiseLength] = wave[0];\r\n\t}\r\n\r\n\treturn wave;\r\n}\r\n\r\nexport function drawNoiseSpectrum(wave: Float32Array, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\r\n\tconst referenceOctave: number = 11;\r\n\tconst referenceIndex: number = 1 << referenceOctave;\r\n\tconst lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n\tconst highIndex: number = Math.min(Config.chipNoiseLength >> 1, Math.pow(2, highOctave) | 0);\r\n\tconst retroWave: Float32Array = getDrumWave(0);\r\n\tlet combinedAmplitude: number = 0.0;\r\n\tfor (let i: number = lowIndex; i < highIndex; i++) {\r\n\r\n\t\tlet lerped: number = lowPower + (highPower - lowPower) * (Math.log(i) / Math.LN2 - lowOctave) / (highOctave - lowOctave);\r\n\t\t//let amplitude: number = Math.pow(2, lerped);\r\n\t\t//let amplitude: number = Math.pow((lerped + 5) / 7, 4);\r\n\t\tlet amplitude: number = Math.pow(2, (lerped - 1) * Config.spectrumMax + 1) * lerped;\r\n\r\n\t\tamplitude *= Math.pow(i / referenceIndex, overallSlope);\r\n\r\n\t\tcombinedAmplitude += amplitude;\r\n\r\n\t\t// Add two different sources of psuedo-randomness to the noise\r\n\t\t// (individually they aren't random enough) but in a deterministic\r\n\t\t// way so that live spectrum editing doesn't result in audible pops.\r\n\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the \r\n\t\t// LFSR retro wave (effectively random), and also rotate the phase\r\n\t\t// of each sine wave based on the golden angle to disrupt the symmetry.\r\n\t\tamplitude *= retroWave[i];\r\n\t\tconst radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\r\n\r\n\t\twave[i] = Math.cos(radians) * amplitude;\r\n\t\twave[Config.chipNoiseLength - i] = Math.sin(radians) * amplitude;\r\n\t}\r\n\r\n\treturn combinedAmplitude;\r\n}\r\n\r\nfunction generateSineWave(): Float64Array {\r\n\tconst wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n\tfor (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n\t\twave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n\t}\r\n\treturn wave;\r\n}\r\n\r\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\r\n\tlet arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\r\n\tif (arpeggioPattern != null) {\r\n\t\tif (pitchCount == 2 && useFastTwoNoteArp == false) {\r\n\t\t\tarpeggioPattern = [0, 0, 1, 1];\r\n\t\t}\r\n\t\treturn arpeggioPattern[arpeggio % arpeggioPattern.length];\r\n\t} else {\r\n\t\treturn arpeggio % pitchCount;\r\n\t}\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n\tconst dictionary: Dictionary<T> = {};\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tconst value: any = array[i];\r\n\t\tvalue.index = i;\r\n\t\tdictionary[value.name] = <T>value;\r\n\t}\r\n\tconst result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\r\n\tresult.dictionary = dictionary;\r\n\treturn result;\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap } from \"../synth/SynthConfig\";\r\n\r\n//namespace beepbox {\r\nexport interface PresetCategory extends BeepBoxOption {\r\n\treadonly presets: DictionaryArray<Preset>;\r\n}\r\n\r\nexport interface Preset extends BeepBoxOption {\r\n\treadonly isNoise?: boolean;\r\n\treadonly isMod?: boolean;\r\n\treadonly generalMidi?: boolean;\r\n\treadonly midiProgram?: number;\r\n\treadonly midiSubharmonicOctaves?: number;\r\n\treadonly customType?: InstrumentType;\r\n\treadonly settings?: any;\r\n}\r\n\r\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\nexport function prettyNumber(value: number): string {\r\n\treturn value.toFixed(2).replace(/\\.?0*$/, \"\");\r\n}\r\n\r\nexport class EditorConfig {\r\n\tpublic static readonly version: string = \"2.3\"; // Not using patch versions in display right now, maybe someday.\r\n\tpublic static readonly versionDisplayName: string = \"MicroBox Alpha \" + EditorConfig.version;\r\n\r\n\tpublic static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"chip wave\", customType: InstrumentType.chip },\r\n\t\t\t\t{ name: \"FM (expert)\", customType: InstrumentType.fm },\r\n\t\t\t\t{ name: \"basic noise\", customType: InstrumentType.noise },\r\n\t\t\t\t{ name: \"spectrum\", customType: InstrumentType.spectrum },\r\n\t\t\t\t{ name: \"drumset\", customType: InstrumentType.drumset },\r\n\t\t\t\t{ name: \"harmonics\", customType: InstrumentType.harmonics },\r\n\t\t\t\t{ name: \"pulse width\", customType: InstrumentType.pwm },\r\n\t\t\t\t{ name: \"custom chip\", customType: InstrumentType.customChipWave },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"triangle\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\r\n\t\t\t\t{ name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\r\n\t\t\t\t{ name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\r\n\t\t\t\t{ name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\r\n\t\t\t\t{ name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\r\n\t\t\t\t{ name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57] } },\r\n\t\t\t\t{ name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 86, 86, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"wave\": \"1/8 pulse\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"interval\": \"honky tonk\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 43, 43, 43, 43, 43, 29, 43, 43, 43, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"interval\": \"shimmer\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0] } },\r\n\t\t\t\t{ name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 14, 14, 14, 14, 14, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14] } },\r\n\t\t\t\t{ name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\r\n\t\t\t\t{ name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }, { \"frequency\": \"~2×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 2, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 1\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"pulseWidth\": 18, \"pulseEnvelope\": \"punch\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"distorted synth 2\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 3\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 4\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 50, \"pulseEnvelope\": \"swell 1\", \"vibrato\": \"delayed\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"transition\": \"slide\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t\t{ name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14] } },\r\n\t\t\t\t{ name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0] } },\r\n\t\t\t\t{ name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"flare 3\" }] } },\r\n\t\t\t\t{ name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"swell 2\" }, { \"frequency\": \"11×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 3\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"octave\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"tremolo1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 5, \"envelope\": \"twang 3\" }, { \"frequency\": \"11×\", \"amplitude\": 8, \"envelope\": \"tremolo5\" }] } },\r\n\t\t\t\t{ name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"tremolo1\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\r\n\t\t\t\t{ name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"flare 1\" }, { \"frequency\": \"3×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }] } },\r\n\t\t\t\t{ name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 3, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [0, 0, 0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0] } },\r\n\t\t\t\t{ name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 57, \"filterEnvelope\": \"swell 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\r\n\t\t\t\t{ name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"interval\": \"hum\", \"vibrato\": \"heavy\", \"harmonics\": [0, 0, 14, 100, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"tremolo1\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\r\n\t\t\t\t{ name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 4, \"pulseEnvelope\": \"tremolo6\", \"vibrato\": \"shaky\" } },\r\n\t\t\t\t{ name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\r\n\t\t\t\t{ name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\r\n\t\t\t\t{ name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"heavy\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t]);\r\n\r\n\tpublic static valueToPreset(presetValue: number): Preset | null {\r\n\t\tconst categoryIndex: number = presetValue >> 6;\r\n\t\tconst presetIndex: number = presetValue & 0x3F;\r\n\t\treturn EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\r\n\t}\r\n\tpublic static midiProgramToPresetValue(program: number): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic static nameToPresetValue(presetName: string): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\ninterface NumberArray {\r\n\tlength: number;\r\n\t[index: number]: number;\r\n}\r\n\r\n// A basic FFT operation scales the overall magnitude of elements by the\r\n// square root of the length of the array, √N. Performing a forward FFT and\r\n// then an inverse FFT results in the original array, but multiplied by N.\r\n// This helper function can be used to compensate for that. \r\nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tarray[i] *= factor;\r\n\t}\r\n}\r\n\r\nfunction isPowerOf2(n: number): boolean {\r\n\treturn !!n && !(n & (n - 1));\r\n}\r\n\r\nfunction countBits(n: number): number {\r\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\treturn Math.round(Math.log(n) / Math.log(2));\r\n}\r\n\r\n// Rearranges the elements of the array, swapping the element at an index\r\n// with an element at an index that is the bitwise reverse of the first\r\n// index in base 2. Useful for computing the FFT.\r\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\r\n\tconst bitCount: number = countBits(fullArrayLength);\r\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\tconst finalShift: number = 16 - bitCount;\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\tlet j: number;\r\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\tj = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;\r\n\t\tif (j > i) {\r\n\t\t\tlet temp: number = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Provided for educational purposes. Easier to read than\r\n// fastFourierTransform(), but computes the same result.\r\n// Takes two parallel arrays representing the real and imaginary elements,\r\n// respectively, and returns an array containing two new arrays, which\r\n// contain the complex result of the transform.\r\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\tconst realOut: number[] = [];\r\n\tconst imagOut: number[] = [];\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\trealOut[i] = 0.0;\r\n\t\timagOut[i] = 0.0;\r\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t}\r\n\t}\r\n\treturn [realOut, imagOut];\r\n}\r\n\r\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n// input real and imaginary arrays. Can be used for both forward and inverse\r\n// transforms: swap the order of the arguments for the inverse.\r\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\r\n\treverseIndexBits(realArray, fullArrayLength);\r\n\treverseIndexBits(imagArray, fullArrayLength);\r\n\r\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\tconst startIndex1: number = startIndex + 1;\r\n\t\tconst startIndex2: number = startIndex + 2;\r\n\t\tconst startIndex3: number = startIndex + 3;\r\n\t\tconst real0: number = realArray[startIndex];\r\n\t\tconst real1: number = realArray[startIndex1];\r\n\t\tconst real2: number = realArray[startIndex2];\r\n\t\tconst real3: number = realArray[startIndex3];\r\n\t\tconst imag0: number = imagArray[startIndex];\r\n\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\tconst realTemp0: number = real0 + real1;\r\n\t\tconst realTemp1: number = real0 - real1;\r\n\t\tconst realTemp2: number = real2 + real3;\r\n\t\tconst realTemp3: number = real2 - real3;\r\n\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\trealArray[startIndex] = realTemp0 + realTemp2;\r\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\timagArray[startIndex] = imagTemp0 + imagTemp2;\r\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t}\r\n\r\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\tconst halfLength: number = stride >>> 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tlet c: number = 1.0;\r\n\t\t\tlet s: number = 0.0;\r\n\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the Fourier transform from an array of real-valued time-domain\r\n// samples. The output is specially formatted for space efficieny: elements\r\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n// descending frequency. Overwrites the input array.\r\nexport function forwardRealFourierTransform(array: NumberArray): void {\r\n\tconst fullArrayLength: number = array.length;\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n\r\n\t// First and second pass.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\t// no imaginary elements yet since the input is fully real.\r\n\t\tconst tempA: number = real0 + real1;\r\n\t\tconst tempB: number = real2 + real3;\r\n\t\tarray[index] = tempA + tempB;\r\n\t\tarray[index1] = real0 - real1;\r\n\t\tarray[index2] = tempA - tempB;\r\n\t\tarray[index3] = real2 - real3;\r\n\t}\r\n\r\n\t// Third pass.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst imag3: number = array[index3];\r\n\t\tconst real4: number = array[index4];\r\n\t\tconst real5: number = array[index5];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\tarray[index] = real0 + real4;\r\n\t\tarray[index1] = real1 + tempA;\r\n\t\tarray[index3] = real1 - tempA;\r\n\t\tarray[index4] = real0 - real4;\r\n\t\tarray[index5] = tempB - imag3;\r\n\t\tarray[index7] = tempB + imag3;\r\n\t}\r\n\r\n\t// Handle remaining passes.\r\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\tarray[indexB0] = -imag0 - tempB;\r\n\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the inverse Fourier transform from a specially formatted array of\r\n// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n// the corresponding complex elements, representing cosine wave amplitudes in\r\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n// imaginary values, representing sine wave amplitudes in descending frequency.\r\n// Generates real-valued time-domain samples. Overwrites the input array.\r\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\t// Perform all but the last few passes in reverse.\r\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\tarray[midIndexA] *= 2;\r\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\tarray[midIndexB] *= 2;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// Commented out this block (and compensated with an extra pass above)\r\n\t// because it's slower in my testing so far.\r\n\t// Pass with stride 8.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index6: number = index + 6;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\tconst imag4: number = array[index4];\r\n\t\tconst imag5: number = array[index5];\r\n\t\tconst imag6: number = array[index6];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = real1 - real3;\r\n\t\tconst tempB: number = imag5 + imag7;\r\n\t\tarray[index ] = real0 + imag4;\r\n\t\tarray[index1] = real1 + real3;\r\n\t\tarray[index2] = real2 * 2;\r\n\t\tarray[index3] = imag7 - imag5;\r\n\t\tarray[index4] = real0 - imag4;\r\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\tarray[index6] = imag6 * 2;\r\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t}\r\n\t*/\r\n\t// The final passes with strides 4 and 2, combined into one loop.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1] * 2;\r\n\t\tconst imag2: number = array[index2];\r\n\t\tconst imag3: number = array[index3] * 2;\r\n\t\tconst tempA: number = real0 + imag2;\r\n\t\tconst tempB: number = real0 - imag2;\r\n\t\tarray[index] = tempA + real1;\r\n\t\tarray[index1] = tempA - real1;\r\n\t\tarray[index2] = tempB + imag3;\r\n\t\tarray[index3] = tempB - imag3;\r\n\t}\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}\r\n//}\r\n\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex } from \"./SynthConfig\";\r\nimport { EditorConfig } from \"../editor/EditorConfig\";\r\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\r\nimport { Deque } from \"./Deque\";\r\n\r\ndeclare global {\r\n\tinterface Window {\r\n\t\tAudioContext: any;\r\n\t\twebkitAudioContext: any;\r\n\t}\r\n}\r\n\r\n//namespace beepbox {\r\n// For performance debugging:\r\n//let samplesAccumulated: number = 0;\r\n//let samplePerformance: number = 0;\r\n\r\nconst enum CharCode {\r\n\tSPACE = 32,\r\n\tHASH = 35,\r\n\tPERCENT = 37,\r\n\tAMPERSAND = 38,\r\n\tPLUS = 43,\r\n\tDASH = 45,\r\n\tDOT = 46,\r\n\tNUM_0 = 48,\r\n\tNUM_1 = 49,\r\n\tNUM_2 = 50,\r\n\tNUM_3 = 51,\r\n\tNUM_4 = 52,\r\n\tNUM_5 = 53,\r\n\tNUM_6 = 54,\r\n\tNUM_7 = 55,\r\n\tNUM_8 = 56,\r\n\tNUM_9 = 57,\r\n\tEQUALS = 61,\r\n\tA = 65,\r\n\tB = 66,\r\n\tC = 67,\r\n\tD = 68,\r\n\tE = 69,\r\n\tF = 70,\r\n\tG = 71,\r\n\tH = 72,\r\n\tI = 73,\r\n\tJ = 74,\r\n\tK = 75,\r\n\tL = 76,\r\n\tM = 77,\r\n\tN = 78,\r\n\tO = 79,\r\n\tP = 80,\r\n\tQ = 81,\r\n\tR = 82,\r\n\tS = 83,\r\n\tT = 84,\r\n\tU = 85,\r\n\tV = 86,\r\n\tW = 87,\r\n\tX = 88,\r\n\tY = 89,\r\n\tZ = 90,\r\n\tUNDERSCORE = 95,\r\n\ta = 97,\r\n\tb = 98,\r\n\tc = 99,\r\n\td = 100,\r\n\te = 101,\r\n\tf = 102,\r\n\tg = 103,\r\n\th = 104,\r\n\ti = 105,\r\n\tj = 106,\r\n\tk = 107,\r\n\tl = 108,\r\n\tm = 109,\r\n\tn = 110,\r\n\to = 111,\r\n\tp = 112,\r\n\tq = 113,\r\n\tr = 114,\r\n\ts = 115,\r\n\tt = 116,\r\n\tu = 117,\r\n\tv = 118,\r\n\tw = 119,\r\n\tx = 120,\r\n\ty = 121,\r\n\tz = 122,\r\n\tLEFT_CURLY_BRACE = 123,\r\n\tRIGHT_CURLY_BRACE = 125,\r\n}\r\n\r\nconst enum SongTagCode {\r\n\tbeatCount = CharCode.a,\r\n\tbars = CharCode.b,\r\n\tvibrato = CharCode.c,\r\n\ttransition = CharCode.d,\r\n\tloopEnd = CharCode.e,\r\n\tfilterCutoff = CharCode.f,\r\n\tbarCount = CharCode.g,\r\n\tinterval = CharCode.h,\r\n\tinstrumentCount = CharCode.i,\r\n\tpatternCount = CharCode.j,\r\n\tkey = CharCode.k,\r\n\tloopStart = CharCode.l,\r\n\treverb = CharCode.m,\r\n\tchannelCount = CharCode.n,\r\n\tchannelOctave = CharCode.o,\r\n\tpatterns = CharCode.p,\r\n\teffects = CharCode.q,\r\n\trhythm = CharCode.r,\r\n\tscale = CharCode.s,\r\n\ttempo = CharCode.t,\r\n\tpreset = CharCode.u,\r\n\tvolume = CharCode.v,\r\n\twave = CharCode.w,\r\n\r\n\tfilterResonance = CharCode.y,\r\n\tfilterEnvelope = CharCode.z,\r\n\talgorithm = CharCode.A,\r\n\tfeedbackAmplitude = CharCode.B,\r\n\tchord = CharCode.C,\r\n\tdetune = CharCode.D,\r\n\toperatorEnvelopes = CharCode.E,\r\n\tfeedbackType = CharCode.F,\r\n\tarpeggioSpeed = CharCode.G,\r\n\tharmonics = CharCode.H,\r\n\r\n\tsquareDuty = CharCode.K,\r\n\tpanning = CharCode.L,\r\n\tcustomChipWave = CharCode.M,\r\n\tsongTitle = CharCode.N,\r\n\tlimiterSettings = CharCode.O,\r\n\toperatorAmplitudes = CharCode.P,\r\n\toperatorFrequencies = CharCode.Q,\r\n\r\n\tspectrum = CharCode.S,\r\n\tstartInstrument = CharCode.T,\r\n\tchannelNames = CharCode.U,\r\n\tfeedbackEnvelope = CharCode.V,\r\n\tpulseWidth = CharCode.W,\r\n\tedo = CharCode.X,\r\n}\r\n\r\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\r\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\r\nclass BitFieldReader {\r\n\tprivate _bits: number[] = [];\r\n\tprivate _readIndex: number = 0;\r\n\r\n\tconstructor(source: string, startIndex: number, stopIndex: number) {\r\n\t\tfor (let i: number = startIndex; i < stopIndex; i++) {\r\n\t\t\tconst value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n\t\t\tthis._bits.push((value >> 5) & 0x1);\r\n\t\t\tthis._bits.push((value >> 4) & 0x1);\r\n\t\t\tthis._bits.push((value >> 3) & 0x1);\r\n\t\t\tthis._bits.push((value >> 2) & 0x1);\r\n\t\t\tthis._bits.push((value >> 1) & 0x1);\r\n\t\t\tthis._bits.push(value & 0x1);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic read(bitCount: number): number {\r\n\t\tlet result: number = 0;\r\n\t\twhile (bitCount > 0) {\r\n\t\t\tresult = result << 1;\r\n\t\t\tresult += this._bits[this._readIndex++];\r\n\t\t\tbitCount--;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic readLongTail(minValue: number, minBits: number): number {\r\n\t\tlet result: number = minValue;\r\n\t\tlet numBits: number = minBits;\r\n\t\twhile (this._bits[this._readIndex++]) {\r\n\t\t\tresult += 1 << numBits;\r\n\t\t\tnumBits++;\r\n\t\t}\r\n\t\twhile (numBits > 0) {\r\n\t\t\tnumBits--;\r\n\t\t\tif (this._bits[this._readIndex++]) {\r\n\t\t\t\tresult += 1 << numBits;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic readPartDuration(): number {\r\n\t\treturn this.readLongTail(1, 3);\r\n\t}\r\n\r\n\tpublic readLegacyPartDuration(): number {\r\n\t\treturn this.readLongTail(1, 2);\r\n\t}\r\n\r\n\tpublic readPinCount(): number {\r\n\t\treturn this.readLongTail(1, 0);\r\n\t}\r\n\r\n\tpublic readPitchInterval(): number {\r\n\t\tif (this.read(1)) {\r\n\t\t\treturn -this.readLongTail(1, 3);\r\n\t\t} else {\r\n\t\t\treturn this.readLongTail(1, 3);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass BitFieldWriter {\r\n\tprivate _index: number = 0;\r\n\tprivate _bits: number[] = [];\r\n\r\n\tpublic clear() {\r\n\t\tthis._index = 0;\r\n\t}\r\n\r\n\tpublic write(bitCount: number, value: number): void {\r\n\t\tbitCount--;\r\n\t\twhile (bitCount >= 0) {\r\n\t\t\tthis._bits[this._index++] = (value >>> bitCount) & 1;\r\n\t\t\tbitCount--;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writeLongTail(minValue: number, minBits: number, value: number): void {\r\n\t\tif (value < minValue) throw new Error(\"value out of bounds\");\r\n\t\tvalue -= minValue;\r\n\t\tlet numBits: number = minBits;\r\n\t\twhile (value >= (1 << numBits)) {\r\n\t\t\tthis._bits[this._index++] = 1;\r\n\t\t\tvalue -= 1 << numBits;\r\n\t\t\tnumBits++;\r\n\t\t}\r\n\t\tthis._bits[this._index++] = 0;\r\n\t\twhile (numBits > 0) {\r\n\t\t\tnumBits--;\r\n\t\t\tthis._bits[this._index++] = (value >>> numBits) & 1;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writePartDuration(value: number): void {\r\n\t\tthis.writeLongTail(1, 3, value);\r\n\t}\r\n\r\n\tpublic writePinCount(value: number): void {\r\n\t\tthis.writeLongTail(1, 0, value);\r\n\t}\r\n\r\n\tpublic writePitchInterval(value: number): void {\r\n\t\tif (value < 0) {\r\n\t\t\tthis.write(1, 1); // sign\r\n\t\t\tthis.writeLongTail(1, 3, -value);\r\n\t\t} else {\r\n\t\t\tthis.write(1, 0); // sign\r\n\t\t\tthis.writeLongTail(1, 3, value);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic concat(other: BitFieldWriter): void {\r\n\t\tfor (let i: number = 0; i < other._index; i++) {\r\n\t\t\tthis._bits[this._index++] = other._bits[i];\r\n\t\t}\r\n\t}\r\n\r\n\tpublic encodeBase64(buffer: number[]): number[] {\r\n\r\n\t\tfor (let i: number = 0; i < this._index; i += 6) {\r\n\t\t\tconst value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\r\n\t\t\tbuffer.push(base64IntToCharCode[value]);\r\n\t\t}\r\n\t\treturn buffer;\r\n\t}\r\n\r\n\tpublic lengthBase64(): number {\r\n\t\treturn Math.ceil(this._index / 6);\r\n\t}\r\n}\r\n\r\nexport interface NotePin {\r\n\tinterval: number;\r\n\ttime: number;\r\n\tvolume: number;\r\n}\r\n\r\nexport function makeNotePin(interval: number, time: number, volume: number): NotePin {\r\n\treturn { interval: interval, time: time, volume: volume };\r\n}\r\n\r\nfunction clamp(min: number, max: number, val: number): number {\r\n\tmax = max - 1;\r\n\tif (val <= max) {\r\n\t\tif (val >= min) return val;\r\n\t\telse return min;\r\n\t} else {\r\n\t\treturn max;\r\n\t}\r\n}\r\n\r\nfunction validateRange(min: number, max: number, val: number): number {\r\n\tif (min <= val && val <= max) return val;\r\n\tthrow new Error(`Value ${val} not in range [${min}, ${max}]`);\r\n}\r\n\r\nexport class Note {\r\n\tpublic pitches: number[];\r\n\tpublic pins: NotePin[];\r\n\tpublic start: number;\r\n\tpublic end: number;\r\n\r\n\tpublic constructor(pitch: number, start: number, end: number, volume: number, fadeout: boolean = false) {\r\n\t\tthis.pitches = [pitch];\r\n\t\tthis.pins = [makeNotePin(0, 0, volume), makeNotePin(0, end - start, fadeout ? 0 : volume)];\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\t}\r\n\r\n\tpublic pickMainInterval(): number {\r\n\t\tlet longestFlatIntervalDuration: number = 0;\r\n\t\tlet mainInterval: number = 0;\r\n\t\tfor (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\r\n\t\t\tconst pinA: NotePin = this.pins[pinIndex - 1];\r\n\t\t\tconst pinB: NotePin = this.pins[pinIndex];\r\n\t\t\tif (pinA.interval == pinB.interval) {\r\n\t\t\t\tconst duration: number = pinB.time - pinA.time;\r\n\t\t\t\tif (longestFlatIntervalDuration < duration) {\r\n\t\t\t\t\tlongestFlatIntervalDuration = duration;\r\n\t\t\t\t\tmainInterval = pinA.interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (longestFlatIntervalDuration == 0) {\r\n\t\t\tlet loudestVolume: number = 0;\r\n\t\t\tfor (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\r\n\t\t\t\tconst pin: NotePin = this.pins[pinIndex];\r\n\t\t\t\tif (loudestVolume < pin.volume) {\r\n\t\t\t\t\tloudestVolume = pin.volume;\r\n\t\t\t\t\tmainInterval = pin.interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn mainInterval;\r\n\t}\r\n\r\n\tpublic clone(): Note {\r\n\t\tconst newNote: Note = new Note(-1, this.start, this.end, 6);\r\n\t\tnewNote.pitches = this.pitches.concat();\r\n\t\tnewNote.pins = [];\r\n\t\tfor (const pin of this.pins) {\r\n\t\t\tnewNote.pins.push(makeNotePin(pin.interval, pin.time, pin.volume));\r\n\t\t}\r\n\t\treturn newNote;\r\n\t}\r\n}\r\n\r\nexport class Pattern {\r\n\tpublic notes: Note[] = [];\r\n\tpublic instrument: number = 0;\r\n\r\n\tpublic cloneNotes(): Note[] {\r\n\t\tconst result: Note[] = [];\r\n\t\tfor (const note of this.notes) {\r\n\t\t\tresult.push(note.clone());\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tthis.notes.length = 0;\r\n\t\tthis.instrument = 0;\r\n\t}\r\n}\r\n\r\nexport class Operator {\r\n\tpublic frequency: number = 0;\r\n\tpublic amplitude: number = 0;\r\n\tpublic envelope: number = 0;\r\n\r\n\tconstructor(index: number) {\r\n\t\tthis.reset(index);\r\n\t}\r\n\r\n\tpublic reset(index: number): void {\r\n\t\tthis.frequency = 0;\r\n\t\tthis.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n\t\tthis.envelope = (index == 0) ? 0 : 1;\r\n\t}\r\n\r\n\tpublic copy(other: Operator): void {\r\n\t\tthis.frequency = other.frequency;\r\n\t\tthis.amplitude = other.amplitude;\r\n\t\tthis.envelope = other.envelope;\r\n\t}\r\n}\r\n\r\nexport class SpectrumWave {\r\n\tpublic spectrum: number[] = [];\r\n\tprivate _wave: Float32Array | null = null;\r\n\tprivate _waveIsReady: boolean = false;\r\n\r\n\tconstructor(isNoiseChannel: boolean) {\r\n\t\tthis.reset(isNoiseChannel);\r\n\t}\r\n\r\n\tpublic reset(isNoiseChannel: boolean): void {\r\n\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\tif (isNoiseChannel) {\r\n\t\t\t\tthis.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\r\n\t\t\t} else {\r\n\t\t\t\tconst isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\r\n\t\t\t\tthis.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic markCustomWaveDirty(): void {\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic getCustomWave(lowestOctave: number): Float32Array {\r\n\t\tif (!this._waveIsReady || this._wave == null) {\r\n\t\t\tlet waveLength: number = Config.chipNoiseLength;\r\n\r\n\t\t\tif (this._wave == null || this._wave.length != waveLength + 1) {\r\n\t\t\t\tthis._wave = new Float32Array(waveLength + 1);\r\n\t\t\t}\r\n\t\t\tconst wave: Float32Array = this._wave;\r\n\r\n\t\t\tfor (let i: number = 0; i < waveLength; i++) {\r\n\t\t\t\twave[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst highestOctave: number = 14;\r\n\t\t\tconst falloffRatio: number = 0.25;\r\n\t\t\t// Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\r\n\t\t\tconst pitchTweak: number[] = [0, 1 / 7, Math.log(5 / 4) / Math.LN2, 3 / 7, Math.log(3 / 2) / Math.LN2, 5 / 7, 6 / 7];\r\n\t\t\tfunction controlPointToOctave(point: number): number {\r\n\t\t\t\treturn lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\r\n\t\t\t}\r\n\r\n\t\t\tlet combinedAmplitude: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\r\n\t\t\t\tconst value1: number = (i <= 0) ? 0 : this.spectrum[i - 1];\r\n\t\t\t\tconst value2: number = (i >= Config.spectrumControlPoints) ? this.spectrum[Config.spectrumControlPoints - 1] : this.spectrum[i];\r\n\t\t\t\tconst octave1: number = controlPointToOctave(i - 1);\r\n\t\t\t\tlet octave2: number = controlPointToOctave(i);\r\n\t\t\t\tif (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\r\n\t\t\t\tif (value1 == 0 && value2 == 0) continue;\r\n\r\n\t\t\t\tcombinedAmplitude += 0.02 * drawNoiseSpectrum(wave, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\r\n\t\t\t}\r\n\t\t\tif (this.spectrum[Config.spectrumControlPoints - 1] > 0) {\r\n\t\t\t\tcombinedAmplitude += 0.02 * drawNoiseSpectrum(wave, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, this.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\r\n\t\t\t}\r\n\r\n\t\t\tinverseRealFourierTransform(wave, waveLength);\r\n\t\t\tscaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\r\n\r\n\t\t\t// Duplicate the first sample at the end for easier wrap-around interpolation.\r\n\t\t\twave[waveLength] = wave[0];\r\n\r\n\t\t\tthis._waveIsReady = true;\r\n\t\t}\r\n\t\treturn this._wave;\r\n\t}\r\n}\r\n\r\nexport class HarmonicsWave {\r\n\tpublic harmonics: number[] = [];\r\n\tprivate _wave: Float32Array | null = null;\r\n\tprivate _waveIsReady: boolean = false;\r\n\r\n\tconstructor() {\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\tthis.harmonics[i] = 0;\r\n\t\t}\r\n\t\tthis.harmonics[0] = Config.harmonicsMax;\r\n\t\tthis.harmonics[3] = Config.harmonicsMax;\r\n\t\tthis.harmonics[6] = Config.harmonicsMax;\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic markCustomWaveDirty(): void {\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic getCustomWave(): Float32Array {\r\n\t\tif (!this._waveIsReady || this._wave == null) {\r\n\t\t\tlet waveLength: number = Config.harmonicsWavelength;\r\n\t\t\tconst retroWave: Float32Array = getDrumWave(0);\r\n\r\n\t\t\tif (this._wave == null || this._wave.length != waveLength + 1) {\r\n\t\t\t\tthis._wave = new Float32Array(waveLength + 1);\r\n\t\t\t}\r\n\t\t\tconst wave: Float32Array = this._wave;\r\n\r\n\t\t\tfor (let i: number = 0; i < waveLength; i++) {\r\n\t\t\t\twave[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst overallSlope: number = -0.25;\r\n\t\t\tlet combinedControlPointAmplitude: number = 1;\r\n\r\n\t\t\tfor (let harmonicIndex: number = 0; harmonicIndex < Config.harmonicsRendered; harmonicIndex++) {\r\n\t\t\t\tconst harmonicFreq: number = harmonicIndex + 1;\r\n\t\t\t\tlet controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? this.harmonics[harmonicIndex] : this.harmonics[Config.harmonicsControlPoints - 1];\r\n\t\t\t\tif (harmonicIndex >= Config.harmonicsControlPoints) {\r\n\t\t\t\t\tcontrolValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (Config.harmonicsRendered - Config.harmonicsControlPoints);\r\n\t\t\t\t}\r\n\t\t\t\tconst normalizedValue: number = controlValue / Config.harmonicsMax;\r\n\t\t\t\tlet amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\r\n\t\t\t\tif (harmonicIndex < Config.harmonicsControlPoints) {\r\n\t\t\t\t\tcombinedControlPointAmplitude += amplitude;\r\n\t\t\t\t}\r\n\t\t\t\tamplitude *= Math.pow(harmonicFreq, overallSlope);\r\n\r\n\t\t\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the LFSR\r\n\t\t\t\t// retro wave (effectively random) to avoid egregiously tall spikes.\r\n\t\t\t\tamplitude *= retroWave[harmonicIndex + 589];\r\n\r\n\t\t\t\twave[waveLength - harmonicFreq] = amplitude;\r\n\t\t\t}\r\n\r\n\t\t\tinverseRealFourierTransform(wave, waveLength);\r\n\r\n\t\t\t// Limit the maximum wave amplitude.\r\n\t\t\tconst mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\r\n\r\n\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\tlet cumulative: number = 0;\r\n\t\t\tlet wavePrev: number = 0;\r\n\t\t\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\twavePrev = wave[i] * mult;\r\n\t\t\t\twave[i] = cumulative;\r\n\t\t\t}\r\n\t\t\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\t\t\twave[waveLength] = wave[0];\r\n\r\n\t\t\tthis._waveIsReady = true;\r\n\t\t}\r\n\t\treturn this._wave;\r\n\t}\r\n}\r\n\r\nexport class Instrument {\r\n\tpublic type: InstrumentType = InstrumentType.chip;\r\n\tpublic preset: number = 0;\r\n\tpublic chipWave: number = 2;\r\n\tpublic chipNoise: number = 1;\r\n\tpublic filterCutoff: number = 12;\r\n\tpublic filterResonance: number = 0;\r\n\tpublic filterEnvelope: number = 1;\r\n\tpublic transition: number = 1;\r\n\tpublic vibrato: number = 0;\r\n\tpublic vibratoDepth: number = 0;\r\n\tpublic vibratoSpeed: number = 10;\r\n\tpublic vibratoDelay: number = 0;\r\n\tpublic vibratoType: number = 0;\r\n\tpublic interval: number = 0;\r\n\tpublic effects: number = 0;\r\n\tpublic chord: number = 1;\r\n\tpublic volume: number = 0;\r\n\tpublic pan: number = Config.panCenter;\r\n\tpublic panDelay: number = 10;\r\n\tpublic arpeggioSpeed: number = 12;\r\n\tpublic fastTwoNoteArp: boolean = false;\r\n\tpublic tieNoteTransition: boolean = false;\r\n\tpublic clicklessTransition: boolean = false;\r\n\tpublic detune: number = 0;\r\n\tpublic pulseWidth: number = Config.pulseWidthRange;\r\n\tpublic pulseEnvelope: number = 1;\r\n\tpublic algorithm: number = 0;\r\n\tpublic feedbackType: number = 0;\r\n\tpublic feedbackAmplitude: number = 0;\r\n\tpublic feedbackEnvelope: number = 1;\r\n\tpublic LFOtime: number = 0;\r\n\tpublic nextLFOtime: number = 0;\r\n\tpublic arpTime: number = 0;\r\n\tpublic customChipWave: Float64Array = new Float64Array(64);\r\n\tpublic customChipWaveIntegral: Float64Array = new Float64Array(65); // One extra element for wrap-around in chipSynth.\r\n\tpublic readonly operators: Operator[] = [];\r\n\tpublic readonly spectrumWave: SpectrumWave;\r\n\tpublic readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\r\n\tpublic readonly drumsetEnvelopes: number[] = [];\r\n\tpublic readonly drumsetSpectrumWaves: SpectrumWave[] = [];\r\n\tpublic modChannels: number[] = [];\r\n\tpublic modStatuses: ModStatus[] = [];\r\n\tpublic modInstruments: number[] = [];\r\n\tpublic modSettings: ModSetting[] = [];\r\n\r\n\tconstructor(isNoiseChannel: boolean, isModChannel: boolean) {\r\n\r\n\t\tif (isModChannel) {\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tthis.modChannels.push(0);\r\n\t\t\t\tthis.modStatuses.push(ModStatus.msNone);\r\n\t\t\t\tthis.modInstruments.push(0);\r\n\t\t\t\tthis.modSettings.push(ModSetting.mstNone);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.spectrumWave = new SpectrumWave(isNoiseChannel);\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\tthis.operators[i] = new Operator(i);\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\tthis.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\tthis.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < 64; i++) {\r\n\t\t\tthis.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\r\n\t\t}\r\n\r\n\t\tlet sum: number = 0.0;\r\n\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\tsum += this.customChipWave[i];\r\n\t\t}\r\n\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\tlet cumulative: number = 0;\r\n\t\tlet wavePrev: number = 0;\r\n\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\tcumulative += wavePrev;\r\n\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t}\r\n\r\n\t\t// 65th, last sample is for anti-aliasing\r\n\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\r\n\t}\r\n\r\n\tpublic setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n\t\t// Mod channels are forced to one type.\r\n\t\tif (isModChannel) type = InstrumentType.mod;\r\n\t\tthis.type = type;\r\n\t\tthis.preset = type;\r\n\t\tthis.volume = 0;\r\n\t\tthis.pan = Config.panCenter;\r\n\t\tthis.panDelay = 10;\r\n\t\tthis.arpeggioSpeed = 12;\r\n\t\tthis.detune = 0;\r\n\t\tthis.tieNoteTransition = false;\r\n\t\tthis.clicklessTransition = false;\r\n\t\tswitch (type) {\r\n\t\t\tcase InstrumentType.chip:\r\n\t\t\t\tthis.chipWave = 2;\r\n\t\t\t\tthis.filterCutoff = 6;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.customChipWave:\r\n\t\t\t\tthis.chipWave = 2;\r\n\t\t\t\tthis.filterCutoff = 6;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tfor (let i: number = 0; i < 64; i++) {\r\n\t\t\t\t\tthis.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += this.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.fm:\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = 1;\r\n\t\t\t\tthis.algorithm = 0;\r\n\t\t\t\tthis.feedbackType = 0;\r\n\t\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\t\tthis.feedbackEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\r\n\t\t\t\t\tthis.operators[i].reset(i);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.noise:\r\n\t\t\t\tthis.chipNoise = 1;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.spectrum:\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.spectrumWave.reset(isNoiseChannel);\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.drumset:\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\t\tthis.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\t\tif (this.drumsetSpectrumWaves[i] == undefined) {\r\n\t\t\t\t\t\tthis.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.drumsetSpectrumWaves[i].reset(isNoiseChannel);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.harmonics:\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.harmonicsWave.reset();\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.pwm:\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange;\r\n\t\t\t\tthis.pulseEnvelope = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.mod:\r\n\t\t\t\tthis.transition = 0;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.modChannels = [];\r\n\t\t\t\tthis.modStatuses = [];\r\n\t\t\t\tthis.modInstruments = [];\r\n\t\t\t\tthis.modSettings = [];\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tthis.modChannels.push(0);\r\n\t\t\t\t\tthis.modStatuses.push(ModStatus.msNone);\r\n\t\t\t\t\tthis.modInstruments.push(0);\r\n\t\t\t\t\tthis.modSettings.push(ModSetting.mstNone);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Unrecognized instrument type: \" + type);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toJsonObject(): Object {\r\n\t\tconst instrumentObject: any = {\r\n\t\t\t\"type\": Config.instrumentTypeNames[this.type],\r\n\t\t\t\"volume\": this.volume,\r\n\t\t\t\"pan\": (this.pan - Config.panCenter) * 100 / Config.panCenter,\r\n\t\t\t\"panDelay\": this.panDelay,\r\n\t\t\t\"arpeggioSpeed\": this.arpeggioSpeed,\r\n\t\t\t\"fastTwoNoteArp\": this.fastTwoNoteArp,\r\n\t\t\t\"tieNoteTransition\": this.tieNoteTransition,\r\n\t\t\t\"clicklessTransition\": this.clicklessTransition,\r\n\t\t\t\"vibrato\": this.vibrato,\r\n\t\t\t\"vibratoDepth\": this.vibratoDepth,\r\n\t\t\t\"vibratoDelay\": this.vibratoDelay,\r\n\t\t\t\"vibratoSpeed\": this.vibratoSpeed,\r\n\t\t\t\"vibratoType\": this.vibratoType,\r\n\t\t\t\"detune\": this.detune,\r\n\t\t\t\"effects\": Config.effectsNames[this.effects],\r\n\t\t};\r\n\r\n\t\tif (this.preset != this.type) {\r\n\t\t\tinstrumentObject[\"preset\"] = this.preset;\r\n\t\t}\r\n\r\n\t\tif (this.type != InstrumentType.drumset) {\r\n\t\t\tinstrumentObject[\"transition\"] = Config.transitions[this.transition].name;\r\n\t\t\tinstrumentObject[\"chord\"] = this.getChord().name;\r\n\t\t\tinstrumentObject[\"filterCutoffHz\"] = Math.round(Config.filterCutoffMaxHz * Math.pow(2.0, this.getFilterCutoffOctaves()));\r\n\t\t\tinstrumentObject[\"filterResonance\"] = Math.round(100 * this.filterResonance / (Config.filterResonanceRange - 1));\r\n\t\t\tinstrumentObject[\"filterEnvelope\"] = this.getFilterEnvelope().name;\r\n\t\t}\r\n\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tinstrumentObject[\"spectrum\"] = [];\r\n\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\tinstrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tinstrumentObject[\"drums\"] = [];\r\n\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\tconst spectrum: number[] = [];\r\n\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\tspectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\r\n\t\t\t\t}\r\n\t\t\t\tinstrumentObject[\"drums\"][j] = {\r\n\t\t\t\t\t\"filterEnvelope\": this.getDrumsetEnvelope(j).name,\r\n\t\t\t\t\t\"spectrum\": spectrum,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.chip) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.customChipWave) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"customChipWave\"] = new Float64Array(64);\r\n\t\t\tinstrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\r\n\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\tinstrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\r\n\t\t\t\t// Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\r\n\t\t\t\t//instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\r\n\t\t\t}\r\n\r\n\t\t\tinstrumentObject[\"customChipWaveIntegral\"][64] = 0;\r\n\t\t} else if (this.type == InstrumentType.pwm) {\r\n\t\t\tinstrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n\t\t\tinstrumentObject[\"pulseEnvelope\"] = Config.envelopes[this.pulseEnvelope].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"harmonics\"] = [];\r\n\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\tinstrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.fm) {\r\n\t\t\tconst operatorArray: Object[] = [];\r\n\t\t\tfor (const operator of this.operators) {\r\n\t\t\t\toperatorArray.push({\r\n\t\t\t\t\t\"frequency\": Config.operatorFrequencies[operator.frequency].name,\r\n\t\t\t\t\t\"amplitude\": operator.amplitude,\r\n\t\t\t\t\t\"envelope\": Config.envelopes[operator.envelope].name,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\r\n\t\t\tinstrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\r\n\t\t\tinstrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n\t\t\tinstrumentObject[\"feedbackEnvelope\"] = Config.envelopes[this.feedbackEnvelope].name;\r\n\t\t\tinstrumentObject[\"operators\"] = operatorArray;\r\n\t\t} else if (this.type == InstrumentType.mod) {\r\n\t\t\tinstrumentObject[\"modChannels\"] = [];\r\n\t\t\tinstrumentObject[\"modInstruments\"] = [];\r\n\t\t\tinstrumentObject[\"modSettings\"] = [];\r\n\t\t\tinstrumentObject[\"modStatuses\"] = [];\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tinstrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\r\n\t\t\t\tinstrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\r\n\t\t\t\tinstrumentObject[\"modSettings\"][mod] = this.modSettings[mod];\r\n\t\t\t\tinstrumentObject[\"modStatuses\"][mod] = this.modStatuses[mod];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type\");\r\n\t\t}\r\n\t\treturn instrumentObject;\r\n\t}\r\n\r\n\tpublic fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean): void {\r\n\t\tif (instrumentObject == undefined) instrumentObject = {};\r\n\r\n\t\tlet type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\r\n\t\tif (type.valueOf() == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\r\n\t\tthis.setTypeAndReset(type, isNoiseChannel, isModChannel);\r\n\r\n\t\tif (instrumentObject[\"preset\"] != undefined) {\r\n\t\t\tthis.preset = instrumentObject[\"preset\"] >>> 0;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"volume\"] != undefined) {\r\n\t\t\tthis.volume = clamp(-Config.volumeRange / 2, Config.volumeRange / 2, instrumentObject[\"volume\"] | 0);\r\n\t\t} else {\r\n\t\t\tthis.volume = 0;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"pan\"] != undefined) {\r\n\t\t\tthis.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\r\n\t\t} else {\r\n\t\t\tthis.pan = Config.panCenter;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"panDelay\"] != undefined) {\r\n\t\t\tthis.panDelay = (instrumentObject[\"panDelay\"] | 0);\r\n\t\t} else {\r\n\t\t\tthis.panDelay = 10;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"detune\"] != undefined) {\r\n\t\t\tthis.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.detune = 0;\r\n\t\t}\r\n\r\n\t\tconst oldTransitionNames: Dictionary<number> = { \"binary\": 0, \"sudden\": 1, \"smooth\": 2 };\r\n\t\tconst transitionObject = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so try that too.\r\n\t\tthis.transition = oldTransitionNames[transitionObject] != undefined ? oldTransitionNames[transitionObject] : Config.transitions.findIndex(transition => transition.name == transitionObject);\r\n\t\tif (this.transition == -1) this.transition = 1;\r\n\r\n\t\tthis.effects = Config.effectsNames.indexOf(instrumentObject[\"effects\"]);\r\n\t\tif (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\r\n\r\n\t\tif (instrumentObject[\"filterCutoffHz\"] != undefined) {\r\n\t\t\tthis.filterCutoff = clamp(0, Config.filterCutoffRange, Math.round((Config.filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / Config.filterCutoffMaxHz) / Math.LN2));\r\n\t\t} else {\r\n\t\t\tthis.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\r\n\t\t}\r\n\t\tif (instrumentObject[\"filterResonance\"] != undefined) {\r\n\t\t\tthis.filterResonance = clamp(0, Config.filterResonanceRange, Math.round((Config.filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\r\n\t\t} else {\r\n\t\t\tthis.filterResonance = 0;\r\n\t\t}\r\n\t\tthis.filterEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"filterEnvelope\"]);\r\n\t\tif (this.filterEnvelope == -1) this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\r\n\t\tif (instrumentObject[\"filter\"] != undefined) {\r\n\t\t\tconst legacyToCutoff: number[] = [20, 12, 6, 0, 16, 10, 4];\r\n\t\t\tconst legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n\t\t\tconst filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\t\t\tconst oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\r\n\t\t\tlet legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\r\n\t\t\tif (legacyFilter == -1) legacyFilter = 0;\r\n\t\t\tthis.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\tthis.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\tthis.filterResonance = 0;\r\n\t\t}\r\n\r\n\t\tconst legacyEffectNames: ReadonlyArray<string> = [\"none\", \"vibrato light\", \"vibrato delayed\", \"vibrato heavy\"];\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tthis.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n\t\t\tif (this.chipNoise == -1) this.chipNoise = 1;\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tif (instrumentObject[\"spectrum\"] != undefined) {\r\n\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\tthis.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tif (instrumentObject[\"drums\"] != undefined) {\r\n\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\tconst drum: any = instrumentObject[\"drums\"][j];\r\n\t\t\t\t\tif (drum == undefined) continue;\r\n\r\n\t\t\t\t\tif (drum[\"filterEnvelope\"] != undefined) {\r\n\t\t\t\t\t\tthis.drumsetEnvelopes[j] = Config.envelopes.findIndex(envelope => envelope.name == drum[\"filterEnvelope\"]);\r\n\t\t\t\t\t\tif (this.drumsetEnvelopes[j] == -1) this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (drum[\"spectrum\"] != undefined) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tthis.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tif (instrumentObject[\"harmonics\"] != undefined) {\r\n\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\tthis.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\t\t} else if (this.type == InstrumentType.pwm) {\r\n\t\t\tif (instrumentObject[\"pulseWidth\"] != undefined) {\r\n\t\t\t\tthis.pulseWidth = clamp(0, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\r\n\t\t\t} else {\r\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"pulseEnvelope\"] != undefined) {\r\n\t\t\t\tthis.pulseEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"pulseEnvelope\"]);\r\n\t\t\t\tif (this.pulseEnvelope == -1) this.pulseEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\t\t} else if (this.type == InstrumentType.chip) {\r\n\t\t\tconst legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\r\n\t\t\tthis.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n\t\t\tif (this.chipWave == -1) this.chipWave = 1;\r\n\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t} else if (instrumentObject[\"chorus\"] != undefined) {\r\n\t\t\t\tconst legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n\t\t\t\tthis.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t\t// The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n\t\t\tif (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n\t\t\t\tthis.interval = 2;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.fm) {\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 3;\r\n\r\n\t\t\tthis.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\r\n\t\t\tif (this.algorithm == -1) this.algorithm = 0;\r\n\t\t\tthis.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\r\n\t\t\tif (this.feedbackType == -1) this.feedbackType = 0;\r\n\t\t\tif (instrumentObject[\"feedbackAmplitude\"] != undefined) {\r\n\t\t\t\tthis.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst legacyEnvelopeNames: Dictionary<number> = { \"pluck 1\": 6, \"pluck 2\": 7, \"pluck 3\": 8 };\r\n\t\t\tthis.feedbackEnvelope = legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] != undefined ? legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"feedbackEnvelope\"]);\r\n\t\t\tif (this.feedbackEnvelope == -1) this.feedbackEnvelope = 0;\r\n\r\n\t\t\tfor (let j: number = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\tconst operator: Operator = this.operators[j];\r\n\t\t\t\tlet operatorObject: any = undefined;\r\n\t\t\t\tif (instrumentObject[\"operators\"]) operatorObject = instrumentObject[\"operators\"][j];\r\n\t\t\t\tif (operatorObject == undefined) operatorObject = {};\r\n\r\n\t\t\t\toperator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\r\n\t\t\t\tif (operator.frequency == -1) operator.frequency = 0;\r\n\t\t\t\tif (operatorObject[\"amplitude\"] != undefined) {\r\n\t\t\t\t\toperator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\r\n\t\t\t\t} else {\r\n\t\t\t\t\toperator.amplitude = 0;\r\n\t\t\t\t}\r\n\t\t\t\toperator.envelope = legacyEnvelopeNames[operatorObject[\"envelope\"]] != undefined ? legacyEnvelopeNames[operatorObject[\"envelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == operatorObject[\"envelope\"]);\r\n\t\t\t\tif (operator.envelope == -1) operator.envelope = 0;\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.customChipWave) {\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t} else if (instrumentObject[\"chorus\"] != undefined) {\r\n\t\t\t\tconst legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n\t\t\t\tthis.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t\t// The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n\t\t\tif (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n\t\t\t\tthis.interval = 2;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"customChipWave\"]) {\r\n\r\n\t\t\t\tfor (let i: number = 0; i < 64; i++) {\r\n\t\t\t\t\tthis.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += this.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 65th, last sample is for anti-aliasing\r\n\t\t\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\t\t\t}\r\n\r\n\t\t} else if (this.type == InstrumentType.mod) {\r\n\t\t\tif (instrumentObject[\"modChannels\"] != undefined) {\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tthis.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\r\n\t\t\t\t\tthis.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\r\n\t\t\t\t\tthis.modSettings[mod] = instrumentObject[\"modSettings\"][mod];\r\n\t\t\t\t\tthis.modStatuses[mod] = instrumentObject[\"modStatuses\"][mod];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type.\");\r\n\t\t}\r\n\r\n\t\tif (this.type != InstrumentType.mod) {\r\n\t\t\t// Arpeggio speed\r\n\t\t\tif (this.chord == 2 && instrumentObject[\"arpeggioSpeed\"] != undefined) {\r\n\t\t\t\tthis.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\r\n\t\t\t\tthis.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fastTwoNoteArp = useFastTwoNoteArp;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"tieNoteTransition\"] != undefined) {\r\n\t\t\t\tthis.tieNoteTransition = instrumentObject[\"tieNoteTransition\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.tieNoteTransition = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"clicklessTransition\"] != undefined) {\r\n\t\t\t\tthis.clicklessTransition = instrumentObject[\"clicklessTransition\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.clicklessTransition = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static frequencyFromPitch(pitch: number, _centerFeq: number, _edo: number): number {\r\n\t\t// the pitch relative to 1, then offset by half number of octaves, so that center frequency is in the center.\r\n\t\treturn _centerFeq * Math.pow(2.0, pitch / _edo - Math.round(Config.pitchOctaves/2) );\r\n\t}\r\n\r\n\tpublic static drumsetIndexReferenceDelta(index: number): number { // this pretends that the song is 440hz 12edo for now\r\n\t\t// 44100 is common sampling frequency, 6 is the drum spacing interval needed to span from the spectrum Base Pitch to the max pitch (I think at least)\r\n\t\t// return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * (Config.pitchOctaves * _edo - Config.spectrumBasePitch) / Config.drumCount, 440, 12) / 44100;\r\n\t\treturn Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * (8 * 12 - Config.spectrumBasePitch) / Config.drumCount, 440, 12) / 44100;\r\n\t}\r\n\r\n\tprivate static _drumsetIndexToSpectrumOctave(index: number) { // this pretends that the song is 440hz 12edo for now\r\n\t\t// 15 + (a negative (drumsetIndexReferenceDelta is less than 2^0)), I have no idea what 15 means here.\r\n\t\treturn 15 + Math.log(Instrument.drumsetIndexReferenceDelta(index)) / Math.LN2;\r\n\t}\r\n\r\n\tpublic warmUp(): void {\r\n\t\tthis.LFOtime = 0;\r\n\t\tthis.nextLFOtime = 0;\r\n\t\tthis.arpTime = 0;\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tgetDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tthis.harmonicsWave.getCustomWave();\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tthis.spectrumWave.getCustomWave(8);\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\tthis.drumsetSpectrumWaves[i].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(i));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getDrumWave(): Float32Array {\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\treturn getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\treturn this.spectrumWave.getCustomWave(8);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unhandled instrument type in getDrumWave\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getDrumsetWave(pitch: number, edo: number): Float32Array {\r\n\t\tif (this.type == InstrumentType.drumset) {\r\n\t\t\treturn this.drumsetSpectrumWaves[pitch].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(pitch));\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unhandled instrument type in getDrumWave\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getTransition(): Transition {\r\n\t\treturn this.type == InstrumentType.drumset ? Config.transitions.dictionary[\"hard fade\"] :\r\n\t\t\tthis.type == InstrumentType.mod ? Config.transitions.dictionary[\"seamless\"] : Config.transitions[this.transition];\r\n\t}\r\n\tpublic getChord(): Chord {\r\n\t\treturn this.type == InstrumentType.drumset ? Config.chords.dictionary[\"harmony\"] : Config.chords[this.chord];\r\n\t}\r\n\tpublic getFilterCutoffOctaves(): number {\r\n\t\treturn this.type == InstrumentType.drumset ? 0 : (this.filterCutoff - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t}\r\n\tpublic getFilterIsFirstOrder(): boolean {\r\n\t\treturn this.type == InstrumentType.drumset ? false : this.filterResonance == 0;\r\n\t}\r\n\tpublic getFilterResonance(): number {\r\n\t\treturn this.type == InstrumentType.drumset ? 1 : this.filterResonance;\r\n\t}\r\n\tpublic getFilterEnvelope(): Envelope {\r\n\t\tif (this.type == InstrumentType.drumset) throw new Error(\"Can't getFilterEnvelope() for drumset.\");\r\n\t\treturn Config.envelopes[this.filterEnvelope];\r\n\t}\r\n\tpublic getDrumsetEnvelope(pitch: number): Envelope {\r\n\t\tif (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\r\n\t\treturn Config.envelopes[this.drumsetEnvelopes[pitch]];\r\n\t}\r\n}\r\n\r\nexport enum ModStatus {\r\n\tmsForPitch = 0,\r\n\tmsForNoise = 1,\r\n\tmsForSong = 2,\r\n\tmsNone = 3,\r\n}\r\n\r\nexport enum ModSetting {\r\n\tmstNone = 0,\r\n\tmstSongVolume = 1,\r\n\tmstTempo = 2,\r\n\tmstReverb = 3,\r\n\tmstNextBar = 4,\r\n\tmstInsVolume = 5,\r\n\tmstPan = 6,\r\n\tmstFilterCut = 7,\r\n\tmstFilterPeak = 8,\r\n\tmstFMSlider1 = 9,\r\n\tmstFMSlider2 = 10,\r\n\tmstFMSlider3 = 11,\r\n\tmstFMSlider4 = 12,\r\n\tmstFMFeedback = 13,\r\n\tmstPulseWidth = 14,\r\n\tmstDetune = 15,\r\n\tmstVibratoDepth = 16,\r\n\tmstSongDetune = 17,\r\n\tmstVibratoSpeed = 18,\r\n\tmstVibratoDelay = 19,\r\n\tmstArpeggioSpeed = 20,\r\n\tmstPanDelay = 21,\r\n\tmstResetArpeggio = 22,\r\n\tmstMaxValue = 23,\r\n}\r\n\r\nexport class Channel {\r\n\tpublic octave: number = 0;\r\n\tpublic readonly instruments: Instrument[] = [];\r\n\tpublic readonly patterns: Pattern[] = [];\r\n\tpublic readonly bars: number[] = [];\r\n\tpublic muted: boolean = false;\r\n\tpublic name: string = \"\";\r\n}\r\n\r\nexport class Song {\r\n\tprivate static readonly _format: string = \"BeepBox\";\r\n\tprivate static readonly _oldestBeepboxVersion: number = 2;\r\n\tprivate static readonly _latestBeepboxVersion: number = 8;\r\n\tprivate static readonly _oldestJummBoxVersion: number = 1;\r\n\tprivate static readonly _latestJummBoxVersion: number = 4;\r\n\t// private static readonly _oldestMicroBoxVersion: number = 0;\r\n\t// private static readonly _latestMicroBoxVersion: number = 0;\r\n\t// One-character variant detection at the start of URL to distinguish variants such as JummBox.\r\n\tprivate static readonly _variant = 0x6A; // \"j\" ~ jummbox\r\n\t// private static readonly _variant = 0x6D; // \"m\" ~ microbox\r\n\r\n\tpublic title: string;\r\n\tpublic scale: number;\r\n\tpublic key: number; // this is fequency offset for different edos\r\n\tpublic tempo: number;\r\n\tpublic reverb: number;\r\n\tpublic centerFrequency: number;\r\n\tpublic edo: number;\r\n\tpublic maxPitch: number;\r\n\tpublic beatsPerBar: number;\r\n\tpublic barCount: number;\r\n\tpublic patternsPerChannel: number;\r\n\tpublic rhythm: number;\r\n\tpublic instrumentsPerChannel: number;\r\n\tpublic loopStart: number;\r\n\tpublic loopLength: number;\r\n\tpublic pitchChannelCount: number;\r\n\tpublic noiseChannelCount: number;\r\n\tpublic modChannelCount: number;\r\n\tpublic readonly channels: Channel[] = [];\r\n\tpublic limitDecay: number = 4.0;\r\n\tpublic limitRise: number = 4000.0;\r\n\tpublic compressionThreshold: number = 1.0;\r\n\tpublic limitThreshold: number = 1.0;\r\n\tpublic compressionRatio: number = 1.0;\r\n\tpublic limitRatio: number = 1.0;\r\n\tpublic masterGain: number = 1.0;\r\n\tpublic inVolumeCap: number = 0.0;\r\n\tpublic outVolumeCap: number = 0.0;\r\n\r\n\t// Maximum value possible for the mod (total number of possible positions)\r\n\tpublic mstMaxVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n\t\t[ModSetting.mstNone, 6],\r\n\t\t[ModSetting.mstSongVolume, 100],\r\n\t\t[ModSetting.mstTempo, Config.tempoMax - Config.tempoMin],\r\n\t\t[ModSetting.mstReverb, Config.reverbRange - 1],\r\n\t\t[ModSetting.mstNextBar, 1],\r\n\t\t[ModSetting.mstInsVolume, Config.volumeRange],\r\n\t\t[ModSetting.mstPan, Config.panMax],\r\n\t\t[ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n\t\t[ModSetting.mstFilterPeak, Config.filterResonanceRange - 1],\r\n\t\t[ModSetting.mstFMSlider1, 15],\r\n\t\t[ModSetting.mstFMSlider2, 15],\r\n\t\t[ModSetting.mstFMSlider3, 15],\r\n\t\t[ModSetting.mstFMSlider4, 15],\r\n\t\t[ModSetting.mstFMFeedback, 15],\r\n\t\t[ModSetting.mstPulseWidth, Config.pulseWidthRange],\r\n\t\t[ModSetting.mstDetune, Config.detuneMax - Config.detuneMin],\r\n\t\t[ModSetting.mstVibratoDepth, 50],\r\n\t\t[ModSetting.mstSongDetune, Config.songDetuneMax - Config.songDetuneMin],\r\n\t\t[ModSetting.mstVibratoSpeed, 30],\r\n\t\t[ModSetting.mstVibratoDelay, 50],\r\n\t\t[ModSetting.mstArpeggioSpeed, 50],\r\n\t\t[ModSetting.mstPanDelay, 20],\r\n\t\t[ModSetting.mstResetArpeggio, 1],\r\n\t\t[ModSetting.mstMaxValue, 6],\r\n\t]\r\n\t);\r\n\r\n\t// When creating a new note, this is the value to set a mod note to (generally the most \"neutral\" value possible)\r\n\tpublic mstNewNoteVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n\t\t[ModSetting.mstNone, 6],\r\n\t\t[ModSetting.mstSongVolume, 100],\r\n\t\t[ModSetting.mstTempo, Math.ceil((Config.tempoMax - Config.tempoMin) / 2)],\r\n\t\t[ModSetting.mstReverb, 0],\r\n\t\t[ModSetting.mstNextBar, 1],\r\n\t\t[ModSetting.mstInsVolume, Math.ceil(Config.volumeRange / 2)],\r\n\t\t[ModSetting.mstPan, Math.ceil(Config.panMax / 2)],\r\n\t\t[ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n\t\t[ModSetting.mstFilterPeak, 0],\r\n\t\t[ModSetting.mstFMSlider1, 15],\r\n\t\t[ModSetting.mstFMSlider2, 15],\r\n\t\t[ModSetting.mstFMSlider3, 15],\r\n\t\t[ModSetting.mstFMSlider4, 15],\r\n\t\t[ModSetting.mstFMFeedback, 15],\r\n\t\t[ModSetting.mstPulseWidth, Math.ceil(Config.pulseWidthRange)],\r\n\t\t[ModSetting.mstDetune, Math.ceil((Config.detuneMax - Config.detuneMin) / 2)],\r\n\t\t[ModSetting.mstVibratoDepth, 0],\r\n\t\t[ModSetting.mstSongDetune, Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2)],\r\n\t\t[ModSetting.mstVibratoSpeed, 0],\r\n\t\t[ModSetting.mstVibratoDelay, 0],\r\n\t\t[ModSetting.mstArpeggioSpeed, 10],\r\n\t\t[ModSetting.mstPanDelay, 10],\r\n\t\t[ModSetting.mstResetArpeggio, 1],\r\n\t\t[ModSetting.mstMaxValue, 6],\r\n\t])\r\n\r\n\tconstructor(string?: string) {\r\n\t\tif (string != undefined) {\r\n\t\t\tthis.fromBase64String(string);\r\n\t\t} else {\r\n\t\t\tthis.initToDefault(true);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic modValueToReal(value: number, setting: ModSetting): number {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\t\tvalue += Config.tempoMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\t\tvalue -= Config.volumeRange / 2.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tvalue += Config.detuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tvalue += Config.songDetuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tpublic isSettingForSong(setting: ModSetting): boolean {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\t\treturn true;\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic realToModValue(value: number, setting: ModSetting): number {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\t\tvalue -= Config.tempoMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\t\tvalue += Config.volumeRange / 2.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tvalue -= Config.detuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tvalue -= Config.songDetuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\r\n\tpublic getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n\t\tif (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\t// Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n\t\t\tmodCount = Config.modCount - modCount - 1;\r\n\r\n\t\t\tlet cap: number | undefined = this.mstNewNoteVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n\r\n\t\t\t// For tempo, actually use user defined tempo\r\n\t\t\tif (this.channels[modChannel].instruments[modInstrument].modSettings[modCount] == ModSetting.mstTempo) {\r\n\t\t\t\tcap = this.realToModValue(this.tempo, ModSetting.mstTempo);\r\n\t\t\t}\r\n\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n\t\tif (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\t// Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n\t\t\tmodCount = Config.modCount - modCount - 1;\r\n\r\n\t\t\tlet cap: number | undefined = this.mstMaxVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getVolumeCapForSetting = (isMod: boolean, modSetting: ModSetting): number => {\r\n\t\tif (!isMod)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\tlet cap: number | undefined = this.mstMaxVols.get(modSetting);\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getChannelCount(): number {\r\n\t\treturn this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\r\n\t}\r\n\r\n\tpublic getChannelIsNoise(channel: number): boolean {\r\n\t\treturn (channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount);\r\n\t}\r\n\r\n\tpublic getChannelIsMod(channel: number): boolean {\r\n\t\treturn (channel >= this.pitchChannelCount + this.noiseChannelCount);\r\n\t}\r\n\r\n\tpublic initToDefault(andResetChannels: boolean = true): void {\r\n\t\tthis.scale = 0;\r\n\t\tthis.key = 0;\r\n\t\tthis.loopStart = 0;\r\n\t\tthis.loopLength = 4;\r\n\t\tthis.tempo = 100;\r\n\t\tthis.reverb = 0;\r\n\t\tthis.centerFrequency = 425.85465642512778279; // very specific :}\r\n\t\tthis.edo = 12;\r\n\t\tthis.maxPitch = this.edo * Config.pitchOctaves;\r\n\t\tthis.beatsPerBar = 6;\r\n\t\tthis.barCount = 16;\r\n\t\tthis.patternsPerChannel = 16;\r\n\t\tthis.rhythm = 3; // div4 standard\r\n\t\tthis.instrumentsPerChannel = 2;\r\n\r\n\t\tthis.title = \"Name Me!\";\r\n\t\tdocument.title = EditorConfig.versionDisplayName;\r\n\r\n\t\tif (andResetChannels) {\r\n\t\t\tthis.pitchChannelCount = 3;\r\n\t\t\tthis.noiseChannelCount = 1;\r\n\t\t\tthis.modChannelCount = 0;\r\n\t\t\tfor (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\tif (this.channels.length <= channelIndex) {\r\n\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t}\r\n\t\t\t\tconst channel: Channel = this.channels[channelIndex];\r\n\t\t\t\tchannel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0, 0, ...]; Descending octaves with drums at zero in last channel and onward.\r\n\r\n\t\t\t\tfor (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\tif (channel.patterns.length <= pattern) {\r\n\t\t\t\t\t\tchannel.patterns[pattern] = new Pattern();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchannel.patterns[pattern].reset();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\r\n\r\n\t\t\t\tconst isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\tconst isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\tfor (let instrument = 0; instrument < this.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tif (channel.instruments.length <= instrument) {\r\n\t\t\t\t\t\tchannel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchannel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\r\n\t\t\t\t}\r\n\t\t\t\tchannel.instruments.length = this.instrumentsPerChannel;\r\n\r\n\t\t\t\tfor (let bar = 0; bar < this.barCount; bar++) {\r\n\t\t\t\t\tchannel.bars[bar] = bar < 4 ? 1 : 0;\r\n\t\t\t\t}\r\n\t\t\t\tchannel.bars.length = this.barCount;\r\n\t\t\t}\r\n\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toBase64String(): string {\r\n\t\tlet bits: BitFieldWriter;\r\n\t\tlet buffer: number[] = [];\r\n\r\n\t\tbuffer.push(Song._variant); // TODO: Replace _variant Jummbox with variant Microbox\r\n\t\tbuffer.push(base64IntToCharCode[Song._latestJummBoxVersion]);\r\n\t\t// buffer.push(base64IntToCharCode[Song._latestMicroBoxVersion]);\r\n\r\n\t\tbuffer.push(SongTagCode.songTitle);\r\n\r\n\t\t// Length of the song name string\r\n\t\tvar encodedSongTitle: string = encodeURIComponent(this.title);\r\n\t\tbuffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\r\n\r\n\t\t// Actual encoded string follows\r\n\t\tfor (let i: number = 0; i < encodedSongTitle.length; i++) {\r\n\t\t\tbuffer.push(encodedSongTitle.charCodeAt(i));\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\r\n\t\tbuffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n\t\t// buffer.push(SongTagCode.key, base64IntToCharCode[this.key]); // key relic (TODO)\r\n\t\tbuffer.push(SongTagCode.key, base64IntToCharCode[0]);\r\n\t\tbuffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\r\n\t\tbuffer.push(SongTagCode.reverb, base64IntToCharCode[this.reverb]);\r\n\t\tbuffer.push(SongTagCode.edo, base64IntToCharCode[this.edo]);\r\n\t\tbuffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n\t\tbuffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.instrumentCount, base64IntToCharCode[this.instrumentsPerChannel - 1]);\r\n\t\tbuffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\r\n\r\n\t\t// Push limiter settings, but only if they aren't the default!\r\n\t\tbuffer.push(SongTagCode.limiterSettings);\r\n\t\tif (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\r\n\t\t\tbuffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbuffer.push(base64IntToCharCode[0x3f]); // Not using limiter\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelNames);\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t// Length of the channel name string\r\n\t\t\tvar encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\r\n\t\t\tbuffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\r\n\r\n\t\t\t// Actual encoded string follows\r\n\t\t\tfor (let i: number = 0; i < encodedChannelName.length; i++) {\r\n\t\t\t\tbuffer.push(encodedChannelName.charCodeAt(i));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelOctave);\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tbuffer.push(base64IntToCharCode[this.channels[channel].octave]);\r\n\t\t}\r\n\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\tbuffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\r\n\t\t\t\tbuffer.push(SongTagCode.panning, base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\r\n\t\t\t\tbuffer.push(base64IntToCharCode[instrument.panDelay]); // Piggybacks after panning to reduce song tag code usage :P\r\n\t\t\t\tbuffer.push(SongTagCode.detune, base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3f]);\r\n\t\t\t\tbuffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\r\n\t\t\t\tbuffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects]);\r\n\r\n\r\n\t\t\t\tif (instrument.type != InstrumentType.drumset) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t// Transition info follows transition song tag\r\n\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.tieNoteTransition]);\r\n\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterCutoff, base64IntToCharCode[instrument.filterCutoff]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterResonance, base64IntToCharCode[instrument.filterResonance]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterEnvelope, base64IntToCharCode[instrument.filterEnvelope]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.chord, base64IntToCharCode[instrument.chord]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackEnvelope, base64IntToCharCode[instrument.feedbackEnvelope]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorFrequencies);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorAmplitudes);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorEnvelopes);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].envelope]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.customChipWave);\r\n\t\t\t\t\t// Push custom wave values\r\n\t\t\t\t\tfor (let j: number = 0; j < 64; j++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.spectrum) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.spectrum);\r\n\t\t\t\t\tconst spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\tspectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspectrumBits.encodeBase64(buffer);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterEnvelope);\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.spectrum);\r\n\t\t\t\t\tconst spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tspectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspectrumBits.encodeBase64(buffer);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.harmonics);\r\n\t\t\t\t\tconst harmonicsBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\t\tharmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tharmonicsBits.encodeBase64(buffer);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth], base64IntToCharCode[instrument.pulseEnvelope]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\t\t\t// Handled down below. Could be moved, but meh.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow new Error(\"Unknown instrument type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.bars);\r\n\t\tbits = new BitFieldWriter();\r\n\t\tlet neededBits: number = 0;\r\n\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) for (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\tbits.write(neededBits, this.channels[channel].bars[i]);\r\n\t\t}\r\n\t\tbits.encodeBase64(buffer);\r\n\r\n\t\tbuffer.push(SongTagCode.patterns);\r\n\t\tbits = new BitFieldWriter();\r\n\t\tconst shapeBits: BitFieldWriter = new BitFieldWriter();\r\n\t\tlet neededInstrumentBits: number = 0;\r\n\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\r\n\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n\t\t\t// Some info about modulator settings immediately follows in mod channels.\r\n\t\t\tif (isModChannel) {\r\n\t\t\t\tfor (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n\t\t\t\t\tlet instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\tconst modStatus: ModStatus = instrument.modStatuses[mod];\r\n\t\t\t\t\t\tconst modChannel: number = instrument.modChannels[mod];\r\n\t\t\t\t\t\tconst modInstrument: number = instrument.modInstruments[mod];\r\n\t\t\t\t\t\tconst modSetting: number = instrument.modSettings[mod];\r\n\r\n\t\t\t\t\t\tbits.write(2, modStatus);\r\n\r\n\t\t\t\t\t\t// Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n\t\t\t\t\t\tif (modStatus == ModStatus.msForPitch || modStatus == ModStatus.msForNoise) {\r\n\t\t\t\t\t\t\tbits.write(8, modChannel);\r\n\t\t\t\t\t\t\tbits.write(neededInstrumentBits, modInstrument);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Mod setting is only used if the status isn't \"none\".\r\n\t\t\t\t\t\tif (modStatus != ModStatus.msNone) {\r\n\t\t\t\t\t\t\tbits.write(6, modSetting);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * this.edo;\r\n\t\t\tlet lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : this.edo) + octaveOffset;\r\n\t\t\tconst recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n\t\t\tconst recentShapes: any[] = [];\r\n\r\n\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t}\r\n\t\t\tfor (const pattern of this.channels[channel].patterns) {\r\n\t\t\t\tbits.write(neededInstrumentBits, pattern.instrument);\r\n\r\n\t\t\t\tif (pattern.notes.length > 0) {\r\n\t\t\t\t\tbits.write(1, 1);\r\n\r\n\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\tfor (const note of pattern.notes) {\r\n\r\n\t\t\t\t\t\t// For mod channels, a negative offset may be necessary.\r\n\t\t\t\t\t\tif (note.start < curPart && isModChannel) {\r\n\t\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\t\tbits.write(1, 1); // negative offset\r\n\t\t\t\t\t\t\tbits.writePartDuration(curPart - note.start);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (note.start > curPart) {\r\n\t\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\t\tif (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\r\n\t\t\t\t\t\t\tbits.writePartDuration(note.start - curPart);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tshapeBits.clear();\r\n\r\n\t\t\t\t\t\t// Old format was:\r\n\t\t\t\t\t\t// 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n\t\t\t\t\t\t// New format is:\r\n\t\t\t\t\t\t//\t  0: 1 pitch\r\n\t\t\t\t\t\t// 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n\t\t\t\t\t\tif (note.pitches.length == 1) {\r\n\t\t\t\t\t\t\tshapeBits.write(1, 0);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tshapeBits.write(1, 1);\r\n\t\t\t\t\t\t\tshapeBits.write(3, note.pitches.length - 2);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tshapeBits.writePinCount(note.pins.length - 1);\r\n\r\n\t\t\t\t\t\tif (!isModChannel) {\r\n\t\t\t\t\t\t\tshapeBits.write(3, note.pins[0].volume); // volume\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tshapeBits.write(9, note.pins[0].volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet shapePart: number = 0;\r\n\t\t\t\t\t\tlet startPitch: number = note.pitches[0];\r\n\t\t\t\t\t\tlet currentPitch: number = startPitch;\r\n\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\tfor (let i: number = 1; i < note.pins.length; i++) {\r\n\t\t\t\t\t\t\tconst pin: NotePin = note.pins[i];\r\n\t\t\t\t\t\t\tconst nextPitch: number = startPitch + pin.interval;\r\n\t\t\t\t\t\t\tif (currentPitch != nextPitch) {\r\n\t\t\t\t\t\t\t\tshapeBits.write(1, 1);\r\n\t\t\t\t\t\t\t\tpitchBends.push(nextPitch);\r\n\t\t\t\t\t\t\t\tcurrentPitch = nextPitch;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tshapeBits.write(1, 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tshapeBits.writePartDuration(pin.time - shapePart);\r\n\t\t\t\t\t\t\tshapePart = pin.time;\r\n\r\n\t\t\t\t\t\t\tif (!isModChannel) {\r\n\t\t\t\t\t\t\t\tshapeBits.write(3, pin.volume); // volume\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tshapeBits.write(9, pin.volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\r\n\t\t\t\t\t\tconst shapeIndex: number = recentShapes.indexOf(shapeString);\r\n\t\t\t\t\t\tif (shapeIndex == -1) {\r\n\t\t\t\t\t\t\tbits.write(2, 1); // new shape\r\n\t\t\t\t\t\t\tbits.concat(shapeBits);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbits.write(1, 1); // old shape\r\n\t\t\t\t\t\t\tbits.writeLongTail(0, 0, shapeIndex);\r\n\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trecentShapes.unshift(shapeString);\r\n\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\r\n\t\t\t\t\t\tconst allPitches: number[] = note.pitches.concat(pitchBends);\r\n\t\t\t\t\t\tfor (let i: number = 0; i < allPitches.length; i++) {\r\n\t\t\t\t\t\t\tconst pitch: number = allPitches[i];\r\n\t\t\t\t\t\t\tconst pitchIndex: number = recentPitches.indexOf(pitch);\r\n\t\t\t\t\t\t\tif (pitchIndex == -1) {\r\n\t\t\t\t\t\t\t\tlet interval: number = 0;\r\n\t\t\t\t\t\t\t\tlet pitchIter: number = lastPitch;\r\n\t\t\t\t\t\t\t\tif (pitchIter < pitch) {\r\n\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\tpitchIter++;\r\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\tpitchIter--;\r\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t\t\t\t\tbits.writePitchInterval(interval);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbits.write(1, 1);\r\n\t\t\t\t\t\t\t\tbits.write(4, pitchIndex);\r\n\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\tif (recentPitches.length > 16) recentPitches.pop();\r\n\r\n\t\t\t\t\t\t\tif (i == note.pitches.length - 1) {\r\n\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurPart = note.end;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\tif (isModChannel) bits.write(1, 0); // positive offset\r\n\t\t\t\t\t\tbits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet stringLength: number = bits.lengthBase64();\r\n\t\tlet digits: number[] = [];\r\n\t\twhile (stringLength > 0) {\r\n\t\t\tdigits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n\t\t\tstringLength = stringLength >> 6;\r\n\t\t}\r\n\t\tbuffer.push(base64IntToCharCode[digits.length]);\r\n\t\tArray.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n\t\tbits.encodeBase64(buffer);\r\n\r\n\t\tconst maxApplyArgs: number = 64000;\r\n\t\tif (buffer.length < maxApplyArgs) {\r\n\t\t\t// Note: Function.apply may break for long argument lists.\r\n\t\t\treturn String.fromCharCode.apply(null, buffer);\r\n\t\t} else {\r\n\t\t\tlet result: string = \"\";\r\n\t\t\tfor (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\r\n\t\t\t\tresult += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic fromBase64String(compressed: string): void {\r\n\t\tif (compressed == null || compressed == \"\") {\r\n\t\t\tthis.initToDefault(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet charIndex: number = 0;\r\n\t\t// skip whitespace.\r\n\t\twhile (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n\t\t// skip hash mark.\r\n\t\tif (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n\t\t// if it starts with curly brace, treat it as JSON.\r\n\t\tif (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n\t\t\tthis.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst variantTest: number = compressed.charCodeAt(charIndex);\r\n\t\tvar variant: string = \"beepbox\";\r\n\r\n\t\t// Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n\t\tif (variantTest == 0x6A) { //\"j\"\r\n\t\t\tvariant = \"jummbox\";\r\n\t\t\tcharIndex++;\r\n\t\t}\r\n\t\t// if (variantTest == 0x6D) { //\"m\"\r\n\t\t// \tvariant = \"microbox\";\r\n\t\t// \tcharIndex++;\r\n\t\t// }\r\n\r\n\t\tconst version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\tif (variant == \"beepbox\" && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n\t\tif (variant == \"jummbox\" && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\r\n\t\t// if (variant == \"microbox\" && (version == -1 || version > Song._latestMicroBoxVersion || version < Song._oldestMicroBoxVersion)) return;\r\n\r\n\r\n\t\tconst beforeTwo: boolean = version < 2;\r\n\t\tconst beforeThree: boolean = version < 3;\r\n\t\tconst beforeFour: boolean = version < 4;\r\n\t\tconst beforeFive: boolean = version < 5;\r\n\t\tconst beforeSix: boolean = version < 6;\r\n\t\tconst beforeSeven: boolean = version < 7;\r\n\t\tconst beforeEight: boolean = version < 8;\r\n\t\tthis.initToDefault(variant == \"beepbox\" && beforeSix);\r\n\r\n\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t// Originally, the only instrument transition was \"seamless\" and the only drum wave was \"retro\".\r\n\t\t\tfor (const channel of this.channels) channel.instruments[0].transition = 0;\r\n\t\t\tthis.channels[3].instruments[0].chipNoise = 0;\r\n\t\t}\r\n\r\n\t\tlet instrumentChannelIterator: number = 0;\r\n\t\tlet instrumentIndexIterator: number = -1;\r\n\t\tlet toSetOctaves: number[] = [];\r\n\t\tlet command: number;\r\n\t\tlet channel: number;\r\n\t\tlet useSlowerArpSpeed: boolean = false;\r\n\t\tlet useFastTwoNoteArp: boolean = false;\r\n\t\twhile (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\r\n\t\t\tcase SongTagCode.songTitle: {\r\n\t\t\t\t// Length of song name string\r\n\t\t\t\tvar songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tthis.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n\t\t\t\tdocument.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n\t\t\t\tcharIndex += songNameLength;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelCount: {\r\n\t\t\t\tthis.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tthis.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tif (variant == \"beepbox\" || beforeTwo) {\r\n\t\t\t\t\t// No mod channel support before jummbox v2\r\n\t\t\t\t\tthis.modChannelCount = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t}\r\n\t\t\t\tthis.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\r\n\t\t\t\tthis.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\r\n\t\t\t\tthis.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\r\n\r\n\t\t\t\tfor (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t}\r\n\t\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.scale: {\r\n\t\t\t\tthis.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t// All the scales were jumbled around by Jummbox. Just convert to free.\r\n\t\t\t\tif (variant == \"beepbox\") this.scale = 0;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.key: {\r\n\t\t\t\t// if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t// \tthis.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t// } else {\r\n\t\t\t\t// \tthis.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t// } // key relic (TODO)\r\n\t\t\t\tcharIndex++;\r\n\t\t\t\tthis.key = 0;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.loopStart: {\r\n\t\t\t\tif (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.loopEnd: {\r\n\t\t\t\tif (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.tempo: {\r\n\t\t\t\tif (beforeFour && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.reverb: {\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\tthis.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 8;\r\n\t\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.edo: {\r\n\t\t\t\tif (beforeEight && ( variant == \"beepbox\" || variant == \"jummbox\")) {\r\n\t\t\t\t\tthis.edo = 12;\r\n\t\t\t\t\tcharIndex++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.edo = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.beatCount: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.barCount: {\r\n\t\t\t\tconst barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\tthis.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tfor (let bar = this.channels[channel].bars.length; bar < this.barCount; bar++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[bar] = (bar < 4) ? 1 : 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].bars.length = this.barCount;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.patternCount: {\r\n\t\t\t\tif (variant == \"beepbox\" && beforeEight) {\r\n\t\t\t\t\tthis.patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t\tthis.patternsPerChannel = validateRange(1, Config.barCountMax, this.patternsPerChannel);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tfor (let pattern = this.channels[channel].patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\t\tthis.channels[channel].patterns[pattern] = new Pattern();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].patterns.length = this.patternsPerChannel;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.instrumentCount: {\r\n\t\t\t\tconst instrumentsPerChannel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\tthis.instrumentsPerChannel = validateRange(Config.instrumentsPerChannelMin, Config.instrumentsPerChannelMax, instrumentsPerChannel);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tconst isNoiseChannel: boolean = channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\t\tconst isModChannel: boolean = channel >= this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\t\tfor (let instrumentIndex = this.channels[channel].instruments.length; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\t\t\t\t\t\tthis.channels[channel].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n\t\t\t\t\tif (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\t\tfor (let instrumentIndex = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.rhythm: {\r\n\t\t\t\tthis.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t// Port all arpeggio speeds over to match what they were, before arpeggio speed was decoupled from rhythm.\r\n\t\t\t\tif (variant == \"jummbox\" && beforeThree || variant == \"beepbox\") {\r\n\t\t\t\t\t// These are all the rhythms that had 4 ticks/arpeggio instead of 3.\r\n\t\t\t\t\tif (this.rhythm == 0 || this.rhythm == 2) {\r\n\t\t\t\t\t\tuseSlowerArpSpeed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Use faster two note arp on these rhythms\r\n\t\t\t\t\tif (this.rhythm >= 2) {\r\n\t\t\t\t\t\tuseFastTwoNoteArp = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelOctave: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t// Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n\t\t\t\t\tthis.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\ttoSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t// Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n\t\t\t\t\t\tthis.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\ttoSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.startInstrument: {\r\n\t\t\t\tinstrumentIndexIterator++;\r\n\t\t\t\tif (instrumentIndexIterator >= this.instrumentsPerChannel) {\r\n\t\t\t\t\tinstrumentChannelIterator++;\r\n\t\t\t\t\tinstrumentIndexIterator = 0;\r\n\t\t\t\t}\r\n\t\t\t\tvalidateRange(0, this.channels.length - 1, instrumentChannelIterator);\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tconst instrumentType: number = clamp(0, InstrumentType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tinstrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\r\n\t\t\t\tif (useSlowerArpSpeed) {\r\n\t\t\t\t\tinstrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\r\n\t\t\t\t}\r\n\t\t\t\tif (useFastTwoNoteArp) {\r\n\t\t\t\t\tinstrument.fastTwoNoteArp = true;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.preset: {\r\n\t\t\t\tconst presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.wave: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tconst channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tif (channel >= this.pitchChannelCount) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tif (instrumentChannelIterator >= this.pitchChannelCount) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (instrumentChannelIterator >= this.pitchChannelCount) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterCutoff: {\r\n\t\t\t\tif (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n\t\t\t\t\tconst legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n\t\t\t\t\tconst filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\r\n\t\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\t\tconst legacyFilter: number = [1, 3, 4, 5][clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\t\tconst legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n\t\t\t\t\t\t\t\tif (channel < this.pitchChannelCount) {\r\n\t\t\t\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tinstrument.filterCutoff = 10;\r\n\t\t\t\t\t\t\t\t\tinstrument.filterEnvelope = 1;\r\n\t\t\t\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.filterCutoff = clamp(0, Config.filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterResonance: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].filterResonance = clamp(0, Config.filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterEnvelope: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\t\t\tinstrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinstrument.filterEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.pulseWidth: {\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t// Convert back from beepbox's weird pulse width storage formula, rounding. The \"7\" in there is the old\r\n\t\t\t\t\t// piece of the formula \"beepbox.Config.pulseWidthRange - 1\".\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.pulseWidth = Math.round(clamp(0, Config.pulseWidthRange + 1, Math.pow(0.5, (7 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 0.5) * 50));\r\n\t\t\t\t\tinstrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.pulseWidth = clamp(0, Config.pulseWidthRange + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tinstrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.transition: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[i].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeFour || variant == \"beepbox\") {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].tieNoteTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.vibrato: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 3, 2, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 13];\r\n\t\t\t\t\tconst channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.vibrato = vibrato;\r\n\t\t\t\t\t// Custom vibrato\r\n\t\t\t\t\tif (vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tinstrument.vibratoDepth = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDepth)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\r\n\t\t\t\t\t\tinstrument.vibratoSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tinstrument.vibratoDelay = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDelay)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tinstrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Enforce standard vibrato settings\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinstrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n\t\t\t\t\t\tinstrument.vibratoSpeed = 10; // Normal speed\r\n\t\t\t\t\t\tinstrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t\t\t\tinstrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.arpeggioSpeed: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tinstrument.arpeggioSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstArpeggioSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tinstrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.interval: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\t\tlet interval: number = clamp(0, Config.intervals.length, originalValue);\r\n\t\t\t\t\t\t\tif (originalValue == 8) {\r\n\t\t\t\t\t\t\t\t// original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n\t\t\t\t\t\t\t\tinterval = 2;\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chord = 3;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[i].interval = interval;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tlet interval: number = clamp(0, Config.intervals.length, originalValue);\r\n\t\t\t\t\tif (originalValue == 8) {\r\n\t\t\t\t\t\t// original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n\t\t\t\t\t\tinterval = 2;\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = interval;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.chord: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.effects: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].effects = clamp(0, Config.effectsNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.volume: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t} else if (variant == \"beepbox\") {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t// Beepbox v7's volume range is 0-7 (0 is max, 7 is mute)\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t// Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.panning: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t// Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n\t\t\t\t\tinstrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tinstrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Now, pan delay follows on new versions of jummbox.\r\n\t\t\t\tif (variant == \"jummbox\" && !beforeThree)\r\n\t\t\t\t\tinstrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.detune: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n\t\t\t\tinstrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) + Config.detuneMin);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.customChipWave: {\r\n\t\t\t\tlet instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t// Pop custom wave values\r\n\t\t\t\tfor (let j: number = 0; j < 64; j++) {\r\n\t\t\t\t\tinstrument.customChipWave[j]\r\n\t\t\t\t\t\t= clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += instrument.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / instrument.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = instrument.customChipWave[i] - average;\r\n\t\t\t\t\tinstrument.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 65th, last sample is for anti-aliasing\r\n\t\t\t\tinstrument.customChipWaveIntegral[64] = 0.0;\r\n\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.limiterSettings: {\r\n\t\t\t\tlet nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t// Check if limiter settings are used... if not, restore to default\r\n\t\t\t\tif (nextValue == 0x3f) {\r\n\t\t\t\t\t// Limiter isn't used\r\n\t\t\t\t\tthis.compressionRatio = 1.0;\r\n\t\t\t\t\tthis.limitRatio = 1.0;\r\n\t\t\t\t\tthis.limitRise = 4000.0;\r\n\t\t\t\t\tthis.limitDecay = 4.0;\r\n\t\t\t\t\tthis.limitThreshold = 1.0;\r\n\t\t\t\t\tthis.compressionThreshold = 1.0;\r\n\t\t\t\t\tthis.masterGain = 1.0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Limiter is used, grab values\r\n\t\t\t\t\tthis.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\r\n\t\t\t\t\tnextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\r\n\t\t\t\t\tthis.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\r\n\t\t\t\t\tthis.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n\t\t\t\t\tthis.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n\t\t\t\t\tthis.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelNames: {\r\n\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t// Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\r\n\t\t\t\t\tvar channelNameLength;\r\n\t\t\t\t\tif (beforeFour)\r\n\t\t\t\t\t\tchannelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tchannelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tthis.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\r\n\r\n\t\t\t\t\tcharIndex += channelNameLength;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.algorithm: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackType: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackAmplitude: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackEnvelope: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorFrequencies: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorAmplitudes: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorEnvelopes: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].envelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.spectrum: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tif (instrument.type == InstrumentType.spectrum) {\r\n\t\t\t\t\tconst byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\tinstrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinstrument.spectrumWave.markCustomWaveDirty();\r\n\t\t\t\t\tcharIndex += byteCount;\r\n\t\t\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tconst byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tinstrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tinstrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcharIndex += byteCount;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Unhandled instrument type for spectrum song tag code.\");\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.harmonics: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tconst byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\r\n\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\tinstrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\r\n\t\t\t\t}\r\n\t\t\t\tinstrument.harmonicsWave.markCustomWaveDirty();\r\n\t\t\t\tcharIndex += byteCount;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.bars: {\r\n\t\t\t\tlet subStringLength: number;\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tsubStringLength = Math.ceil(barCount * 0.5);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let i: number = 0; i < barCount; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(3) + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits) + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcharIndex += subStringLength;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.patterns: {\r\n\t\t\t\tlet bitStringLength: number = 0;\r\n\t\t\t\tlet channel: number;\r\n\t\t\t\tlet largerChords: boolean = !((beforeFour && variant == \"jummbox\") || variant == \"beepbox\");\r\n\t\t\t\tlet recentPitchBitLength: number = (largerChords ? 4 : 3);\r\n\t\t\t\tlet recentPitchLength: number = (largerChords ? 16 : 8);\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t\t// The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default.\r\n\t\t\t\t\tcharIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t\tbitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tchannel = 0;\r\n\t\t\t\t\tlet bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\twhile (bitStringLengthLength > 0) {\r\n\t\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tbitStringLengthLength--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\r\n\t\t\t\tcharIndex += bitStringLength;\r\n\r\n\t\t\t\tlet neededInstrumentBits: number = 0;\r\n\t\t\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n\t\t\t\t\t// Some info about modulator settings immediately follows in mod channels.\r\n\t\t\t\t\tif (isModChannel) {\r\n\t\t\t\t\t\tfor (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n\t\t\t\t\t\t\tlet instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\tinstrument.modStatuses[mod] = bits.read(2);\r\n\r\n\t\t\t\t\t\t\t\t// Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForPitch || instrument.modStatuses[mod] == ModStatus.msForNoise) {\r\n\r\n\t\t\t\t\t\t\t\t\t// Clamp to pitch/noise max\r\n\t\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForPitch) {\r\n\t\t\t\t\t\t\t\t\t\tinstrument.modChannels[mod] = clamp(0, this.pitchChannelCount + 1, bits.read(8));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tinstrument.modChannels[mod] = clamp(0, this.noiseChannelCount + 1, bits.read(8));\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tinstrument.modInstruments[mod] = clamp(0, this.instrumentsPerChannel + 1, bits.read(neededInstrumentBits));\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Mod setting is only used if the status isn't \"none\".\r\n\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] != ModStatus.msNone) {\r\n\t\t\t\t\t\t\t\t\tinstrument.modSettings[mod] = bits.read(6);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * this.edo;\r\n\t\t\t\t\tlet note: Note | null = null;\r\n\t\t\t\t\tlet pin: NotePin | null = null;\r\n\t\t\t\t\tlet lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : this.edo) + octaveOffset;\r\n\t\t\t\t\tconst recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n\t\t\t\t\tconst recentShapes: any[] = [];\r\n\t\t\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\t\tconst newPattern: Pattern = this.channels[channel].patterns[i];\r\n\t\t\t\t\t\tnewPattern.reset();\r\n\t\t\t\t\t\tnewPattern.instrument = bits.read(neededInstrumentBits);\r\n\r\n\t\t\t\t\t\tif (!(variant == \"beepbox\" && beforeThree) && bits.read(1) == 0) continue;\r\n\r\n\t\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\t\tconst newNotes: Note[] = newPattern.notes;\r\n\t\t\t\t\t\t// Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\r\n\t\t\t\t\t\twhile (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\r\n\t\t\t\t\t\t\tconst useOldShape: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\tlet newNote: boolean = false;\r\n\t\t\t\t\t\t\tlet shapeIndex: number = 0;\r\n\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\tshapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tnewNote = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (!useOldShape && !newNote) {\r\n\t\t\t\t\t\t\t\t// For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\r\n\t\t\t\t\t\t\t\tif (isModChannel) {\r\n\t\t\t\t\t\t\t\t\tconst isBackwards: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\tconst restLength: number = bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\tif (isBackwards) {\r\n\t\t\t\t\t\t\t\t\t\tcurPart -= restLength;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tcurPart += restLength;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tconst restLength: number = (beforeSeven && variant == \"beepbox\")\r\n\t\t\t\t\t\t\t\t\t\t? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n\t\t\t\t\t\t\t\t\t\t: bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\tcurPart += restLength;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlet shape: any;\r\n\t\t\t\t\t\t\t\tlet pinObj: any;\r\n\t\t\t\t\t\t\t\tlet pitch: number;\r\n\t\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\t\tshape = recentShapes[shapeIndex];\r\n\t\t\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tshape = {};\r\n\r\n\t\t\t\t\t\t\t\t\tif (!largerChords) {\r\n\t\t\t\t\t\t\t\t\t\t// Old format: X 1's followed by a 0 => X+1 pitches, up to 4\r\n\t\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\r\n\t\t\t\t\t\t\t\t\t\twhile (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t// New format is:\r\n\t\t\t\t\t\t\t\t\t\t//\t  0: 1 pitch\r\n\t\t\t\t\t\t\t\t\t\t// 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n\t\t\t\t\t\t\t\t\t\tif (bits.read(1) == 1) {\r\n\t\t\t\t\t\t\t\t\t\t\tshape.pitchCount = bits.read(3) + 2;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tshape.pinCount = bits.readPinCount();\r\n\r\n\t\t\t\t\t\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(2) * 2;\r\n\t\t\t\t\t\t\t\t\t} else if (!isModChannel) {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(3);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(9);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tshape.pins = [];\r\n\t\t\t\t\t\t\t\t\tshape.length = 0;\r\n\t\t\t\t\t\t\t\t\tshape.bendCount = 0;\r\n\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pinCount; j++) {\r\n\t\t\t\t\t\t\t\t\t\tpinObj = {};\r\n\t\t\t\t\t\t\t\t\t\tpinObj.pitchBend = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) shape.bendCount++;\r\n\t\t\t\t\t\t\t\t\t\tshape.length += (beforeSeven && variant == \"beepbox\")\r\n\t\t\t\t\t\t\t\t\t\t\t? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n\t\t\t\t\t\t\t\t\t\t\t: bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\t\tpinObj.time = shape.length;\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(2) * 2;\r\n\t\t\t\t\t\t\t\t\t\t} else if (!isModChannel) {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(3);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(9);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tshape.pins.push(pinObj);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\trecentShapes.unshift(shape);\r\n\t\t\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\r\n\t\t\t\t\t\t\t\tnote = new Note(0, curPart, curPart + shape.length, shape.initialVolume);\r\n\t\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\t\tnote.pins.length = 1;\r\n\t\t\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n\t\t\t\t\t\t\t\t\tconst useOldPitch: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\tif (!useOldPitch) {\r\n\t\t\t\t\t\t\t\t\t\tconst interval: number = bits.readPitchInterval();\r\n\t\t\t\t\t\t\t\t\t\tpitch = lastPitch;\r\n\t\t\t\t\t\t\t\t\t\tlet intervalIter: number = interval;\r\n\t\t\t\t\t\t\t\t\t\twhile (intervalIter > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitch++;\r\n\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch++;\r\n\t\t\t\t\t\t\t\t\t\t\tintervalIter--;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\twhile (intervalIter < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitch--;\r\n\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch--;\r\n\t\t\t\t\t\t\t\t\t\t\tintervalIter++;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tconst pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\r\n\t\t\t\t\t\t\t\t\t\tpitch = recentPitches[pitchIndex];\r\n\t\t\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\t\t\tif (recentPitches.length > recentPitchLength) recentPitches.pop();\r\n\r\n\t\t\t\t\t\t\t\t\tif (j < shape.pitchCount) {\r\n\t\t\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tpitchBends.push(pitch);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif (j == shape.pitchCount - 1) {\r\n\t\t\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tpitchBends.unshift(note.pitches[0]);\r\n\r\n\t\t\t\t\t\t\t\tfor (const pinObj of shape.pins) {\r\n\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) pitchBends.shift();\r\n\t\t\t\t\t\t\t\t\tpin = makeNotePin(pitchBends[0] - note.pitches[0], pinObj.time, pinObj.volume);\r\n\t\t\t\t\t\t\t\t\tnote.pins.push(pin);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcurPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\r\n\t\t\t\t\t\t\t\tnewNotes.push(note);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchannel++;\r\n\t\t\t\t\t\tif (channel >= this.getChannelCount()) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t} // while (true)\r\n\t\t\t} break;\r\n\t\t\tdefault: {\r\n\t\t\t\tthrow new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1));\r\n\t\t\t} break;\r\n\t\t}\r\n\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tif (toSetOctaves[channel] != null) {\r\n\t\t\t\tthis.channels[channel].octave = toSetOctaves[channel];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n\t\tconst channelArray: Object[] = [];\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tconst instrumentArray: Object[] = [];\r\n\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\tinstrumentArray.push(this.channels[channel].instruments[i].toJsonObject());\r\n\t\t\t}\r\n\r\n\t\t\tconst patternArray: Object[] = [];\r\n\t\t\tfor (const pattern of this.channels[channel].patterns) {\r\n\t\t\t\tconst noteArray: Object[] = [];\r\n\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\tlet volumeCap: number = this.getVolumeCapForSetting(isModChannel, this.channels[channel].instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\t\t\t\t\tconst pointArray: Object[] = [];\r\n\t\t\t\t\tfor (const pin of note.pins) {\r\n\t\t\t\t\t\tlet useVol: number = isModChannel ? Math.round(pin.volume) : Math.round(pin.volume * 100 / volumeCap);\r\n\t\t\t\t\t\tpointArray.push({\r\n\t\t\t\t\t\t\t\"tick\": (pin.time + note.start) * Config.rhythms[this.rhythm].stepsPerBeat / Config.partsPerBeat,\r\n\t\t\t\t\t\t\t\"pitchBend\": pin.interval,\r\n\t\t\t\t\t\t\t\"volume\": useVol,\r\n\t\t\t\t\t\t\t\"forMod\": isModChannel,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnoteArray.push({\r\n\t\t\t\t\t\t\"pitches\": note.pitches,\r\n\t\t\t\t\t\t\"points\": pointArray,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpatternArray.push({\r\n\t\t\t\t\t\"instrument\": pattern.instrument + 1,\r\n\t\t\t\t\t\"notes\": noteArray,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst sequenceArray: number[] = [];\r\n\t\t\tif (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\t\t\tfor (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\t\t\tif (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\r\n\t\t\tchannelArray.push({\r\n\t\t\t\t\"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\r\n\t\t\t\t\"octaveScrollBar\": this.channels[channel].octave,\r\n\t\t\t\t\"instruments\": instrumentArray,\r\n\t\t\t\t\"patterns\": patternArray,\r\n\t\t\t\t\"sequence\": sequenceArray,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t\"name\": this.title,\r\n\t\t\t\"format\": Song._format,\r\n\t\t\t\"version\": Song._latestJummBoxVersion,\r\n\t\t\t\"scale\": Config.scales[this.scale].name,\r\n\t\t\t// \"key\": Config.keys[this.key].name, // key relic (TODO)\r\n\t\t\t\"introBars\": this.loopStart,\r\n\t\t\t\"loopBars\": this.loopLength,\r\n\t\t\t\"beatsPerBar\": this.beatsPerBar,\r\n\t\t\t\"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\r\n\t\t\t\"beatsPerMinute\": this.tempo,\r\n\t\t\t\"reverb\": this.reverb,\r\n\t\t\t//\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n\t\t\t//\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\r\n\t\t\t//\"instrumentsPerChannel\": this.instrumentsPerChannel, //derive this from instrument arrays?\r\n\t\t\t\"channels\": channelArray,\r\n\t\t};\r\n\t}\r\n\r\n\tpublic fromJsonObject(jsonObject: any): void { //TODO: edo decoding\r\n\t\tthis.initToDefault(true);\r\n\t\tif (!jsonObject) return;\r\n\r\n\t\t//const version: number = jsonObject[\"version\"] | 0;\r\n\t\t//if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\r\n\r\n\t\tif (jsonObject[\"name\"] != undefined) {\r\n\t\t\tthis.title = jsonObject[\"name\"];\r\n\t\t}\r\n\r\n\t\tthis.scale = 0; // default to free.\r\n\t\tif (jsonObject[\"scale\"] != undefined) {\r\n\t\t\tconst oldScaleNames: Dictionary<string> = {\r\n\t\t\t\t\"romani :)\": \"dbl harmonic :)\",\r\n\t\t\t\t\"romani :(\": \"dbl harmonic :(\",\r\n\t\t\t\t\"enigma\": \"strange\",\r\n\t\t\t};\r\n\t\t\tconst scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\r\n\t\t\tconst scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\r\n\t\t\tif (scale != -1) this.scale = scale;\r\n\t\t}\r\n\r\n\t\t// if (jsonObject[\"key\"] != undefined) {\r\n\t\t// \tif (typeof (jsonObject[\"key\"]) == \"number\") {\r\n\t\t// \t\tthis.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\r\n\t\t// \t} else if (typeof (jsonObject[\"key\"]) == \"string\") {\r\n\t\t// \t\tconst key: string = jsonObject[\"key\"];\r\n\t\t// \t\tconst letter: string = key.charAt(0).toUpperCase();\r\n\t\t// \t\tconst symbol: string = key.charAt(1).toLowerCase();\r\n\t\t// \t\tconst letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\r\n\t\t// \t\tconst accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\r\n\t\t// \t\tlet index: number | undefined = letterMap[letter];\r\n\t\t// \t\tconst offset: number | undefined = accidentalMap[symbol];\r\n\t\t// \t\tif (index != undefined) {\r\n\t\t// \t\t\tif (offset != undefined) index += offset;\r\n\t\t// \t\t\tif (index < 0) index += 12;\r\n\t\t// \t\t\tindex = index % 12;\r\n\t\t// \t\t\tthis.key = index;\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\t\tthis.key = 0; // key relic (TODO)\r\n\r\n\t\tif (jsonObject[\"beatsPerMinute\"] != undefined) {\r\n\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"reverb\"] != undefined) {\r\n\t\t\tthis.reverb = clamp(0, Config.reverbRange, jsonObject[\"reverb\"] | 0);\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"beatsPerBar\"] != undefined) {\r\n\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\r\n\t\t}\r\n\r\n\t\tlet importedPartsPerBeat: number = 4;\r\n\t\tif (jsonObject[\"ticksPerBeat\"] != undefined) {\r\n\t\t\timportedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\r\n\t\t\tthis.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\r\n\t\t\tif (this.rhythm == -1) {\r\n\t\t\t\tthis.rhythm = 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet maxInstruments: number = 1;\r\n\t\tlet maxPatterns: number = 1;\r\n\t\tlet maxBars: number = 1;\r\n\t\tif (jsonObject[\"channels\"]) {\r\n\t\t\tfor (const channelObject of jsonObject[\"channels\"]) {\r\n\t\t\t\tif (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\r\n\t\t\t\tif (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\r\n\t\t\t\tif (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.instrumentsPerChannel = Math.min(maxInstruments, Config.instrumentsPerChannelMax);\r\n\t\tthis.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\r\n\t\tthis.barCount = Math.min(maxBars, Config.barCountMax);\r\n\r\n\t\tif (jsonObject[\"introBars\"] != undefined) {\r\n\t\t\tthis.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\r\n\t\t}\r\n\t\tif (jsonObject[\"loopBars\"] != undefined) {\r\n\t\t\tthis.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\r\n\t\t}\r\n\r\n\t\tconst newPitchChannels: Channel[] = [];\r\n\t\tconst newNoiseChannels: Channel[] = [];\r\n\t\tconst newModChannels: Channel[] = [];\r\n\t\tif (jsonObject[\"channels\"]) {\r\n\t\t\tfor (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n\t\t\t\tlet channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n\r\n\t\t\t\tconst channel: Channel = new Channel();\r\n\r\n\t\t\t\tlet isNoiseChannel: boolean = false;\r\n\t\t\t\tlet isModChannel: boolean = false;\r\n\t\t\t\tif (channelObject[\"type\"] != undefined) {\r\n\t\t\t\t\tisNoiseChannel = (channelObject[\"type\"] == \"drum\");\r\n\t\t\t\t\tisModChannel = (channelObject[\"type\"] == \"mod\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// for older files, assume drums are channel 3.\r\n\t\t\t\t\tisNoiseChannel = (channelIndex >= 3);\r\n\t\t\t\t}\r\n\t\t\t\tif (isNoiseChannel) {\r\n\t\t\t\t\tnewNoiseChannels.push(channel);\r\n\t\t\t\t} else if (isModChannel) {\r\n\t\t\t\t\tnewModChannels.push(channel);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnewPitchChannels.push(channel);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (channelObject[\"octaveScrollBar\"] != undefined) {\r\n\t\t\t\t\tchannel.octave = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, channelObject[\"octaveScrollBar\"] | 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = channel.instruments.length; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tchannel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t}\r\n\t\t\t\tchannel.instruments.length = this.instrumentsPerChannel;\r\n\r\n\t\t\t\tfor (let i: number = channel.patterns.length; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\tchannel.patterns[i] = new Pattern();\r\n\t\t\t\t}\r\n\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\tchannel.bars[i] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tchannel.bars.length = this.barCount;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tconst instrument: Instrument = channel.instruments[i];\r\n\t\t\t\t\tinstrument.fromJsonObject(channelObject[\"instruments\"][i], isNoiseChannel, isModChannel, this.rhythm == 0 || this.rhythm == 2, this.rhythm >= 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\tconst pattern: Pattern = channel.patterns[i];\r\n\r\n\t\t\t\t\tlet patternObject: any = undefined;\r\n\t\t\t\t\tif (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\r\n\t\t\t\t\tif (patternObject == undefined) continue;\r\n\r\n\t\t\t\t\tpattern.instrument = clamp(0, this.instrumentsPerChannel, (patternObject[\"instrument\"] | 0) - 1);\r\n\r\n\t\t\t\t\tif (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\r\n\t\t\t\t\t\tconst maxNoteCount: number = Math.min(this.beatsPerBar * Config.partsPerBeat, patternObject[\"notes\"].length >>> 0);\r\n\r\n\t\t\t\t\t\t//let tickClock: number = 0;\r\n\t\t\t\t\t\tfor (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\r\n\t\t\t\t\t\t\tif (j >= maxNoteCount) break;\r\n\r\n\t\t\t\t\t\t\tconst noteObject = patternObject[\"notes\"][j];\r\n\t\t\t\t\t\t\tif (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tconst note: Note = new Note(0, 0, 0, 0);\r\n\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\tnote.pins = [];\r\n\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\r\n\t\t\t\t\t\t\t\tconst pitch: number = noteObject[\"pitches\"][k] | 0;\r\n\t\t\t\t\t\t\t\tif (note.pitches.indexOf(pitch) != -1) continue;\r\n\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\tif (note.pitches.length >= Config.maxChordSize) break;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\r\n\t\t\t\t\t\t\t//let noteClock: number = tickClock;\r\n\t\t\t\t\t\t\tlet startInterval: number = 0;\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject[\"points\"].length; k++) {\r\n\t\t\t\t\t\t\t\tconst pointObject: any = noteObject[\"points\"][k];\r\n\t\t\t\t\t\t\t\tif (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\r\n\t\t\t\t\t\t\t\tconst interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\r\n\r\n\t\t\t\t\t\t\t\tconst time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\r\n\r\n\t\t\t\t\t\t\t\tlet volumeCap: number = this.getVolumeCapForSetting(isModChannel, channel.instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\r\n\t\t\t\t\t\t\t\t// The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\r\n\t\t\t\t\t\t\t\t// A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\r\n\t\t\t\t\t\t\t\tlet volume: number;\r\n\t\t\t\t\t\t\t\tif (pointObject[\"volume\"] == undefined) {\r\n\t\t\t\t\t\t\t\t\tvolume = volumeCap;\r\n\t\t\t\t\t\t\t\t} else if (pointObject[\"forMod\"] == undefined) {\r\n\t\t\t\t\t\t\t\t\tvolume = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvolume = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (time > this.beatsPerBar * Config.partsPerBeat) continue;\r\n\t\t\t\t\t\t\t\tif (note.pins.length == 0) {\r\n\t\t\t\t\t\t\t\t\t//if (time < noteClock) continue;\r\n\t\t\t\t\t\t\t\t\tnote.start = time;\r\n\t\t\t\t\t\t\t\t\tstartInterval = interval;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t//if (time <= noteClock) continue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//noteClock = time;\r\n\r\n\t\t\t\t\t\t\t\tnote.pins.push(makeNotePin(interval - startInterval, time - note.start, volume));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pins.length < 2) continue;\r\n\r\n\t\t\t\t\t\t\tnote.end = note.pins[note.pins.length - 1].time + note.start;\r\n\r\n\t\t\t\t\t\t\tconst maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : this.maxPitch;\r\n\t\t\t\t\t\t\tlet lowestPitch: number = maxPitch;\r\n\t\t\t\t\t\t\tlet highestPitch: number = 0;\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pitches.length; k++) {\r\n\t\t\t\t\t\t\t\tnote.pitches[k] += startInterval;\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n\t\t\t\t\t\t\t\t\tnote.pitches.splice(k, 1);\r\n\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pins.length; k++) {\r\n\t\t\t\t\t\t\t\tconst pin: NotePin = note.pins[k];\r\n\t\t\t\t\t\t\t\tif (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n\t\t\t\t\t\t\t\tif (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n\t\t\t\t\t\t\t\tif (k >= 2) {\r\n\t\t\t\t\t\t\t\t\tif (pin.interval == note.pins[k - 1].interval &&\r\n\t\t\t\t\t\t\t\t\t\tpin.interval == note.pins[k - 2].interval &&\r\n\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k - 1].volume &&\r\n\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k - 2].volume) {\r\n\t\t\t\t\t\t\t\t\t\tnote.pins.splice(k - 1, 1);\r\n\t\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tpattern.notes.push(note);\r\n\t\t\t\t\t\t\t//tickClock = note.end;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\tchannel.bars[i] = channelObject[\"sequence\"] ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\r\n\t\tif (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\r\n\t\tif (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\r\n\t\tthis.pitchChannelCount = newPitchChannels.length;\r\n\t\tthis.noiseChannelCount = newNoiseChannels.length;\r\n\t\tthis.modChannelCount = newModChannels.length;\r\n\t\tthis.channels.length = 0;\r\n\t\tArray.prototype.push.apply(this.channels, newPitchChannels);\r\n\t\tArray.prototype.push.apply(this.channels, newNoiseChannels);\r\n\t\tArray.prototype.push.apply(this.channels, newModChannels);\r\n\t}\r\n\r\n\tpublic getPattern(channel: number, bar: number): Pattern | null {\r\n\t\tif (bar < 0 || bar >= this.barCount) return null;\r\n\t\tconst patternIndex: number = this.channels[channel].bars[bar];\r\n\t\tif (patternIndex == 0) return null;\r\n\t\treturn this.channels[channel].patterns[patternIndex - 1];\r\n\t}\r\n\r\n\tpublic getPatternInstrument(channel: number, bar: number): number {\r\n\t\tconst pattern: Pattern | null = this.getPattern(channel, bar);\r\n\t\treturn pattern == null ? 0 : pattern.instrument;\r\n\t}\r\n\r\n\tpublic getBeatsPerMinute(): number {\r\n\t\treturn this.tempo;\r\n\t}\r\n\r\n}\r\n\r\nclass Tone {\r\n\tpublic instrument: Instrument;\r\n\tpublic readonly pitches: number[] = [0, 0, 0, 0];\r\n\tpublic pitchCount: number = 0;\r\n\tpublic chordSize: number = 0;\r\n\tpublic drumsetPitch: number = 0;\r\n\tpublic note: Note | null = null;\r\n\tpublic prevNote: Note | null = null;\r\n\tpublic nextNote: Note | null = null;\r\n\tpublic prevNotePitchIndex: number = 0;\r\n\tpublic nextNotePitchIndex: number = 0;\r\n\tpublic active: boolean = false;\r\n\tpublic noteStart: number = 0;\r\n\tpublic noteEnd: number = 0;\r\n\tpublic noteLengthTicks: number = 0;\r\n\tpublic ticksSinceReleased: number = 0;\r\n\tpublic liveInputSamplesHeld: number = 0;\r\n\tpublic lastInterval: number = 0;\r\n\tpublic lastVolume: number = 0;\r\n\tpublic stereoVolume1: number = 0.0;\r\n\tpublic stereoVolume2: number = 0.0;\r\n\tpublic stereoOffset: number = 0.0;\r\n\tpublic stereoDelay: number = 0.0;\r\n\tpublic sample: number = 0.0;\r\n\tpublic readonly phases: number[] = [];\r\n\tpublic readonly phaseDeltas: number[] = [];\r\n\tpublic readonly volumeStarts: number[] = [];\r\n\tpublic readonly volumeDeltas: number[] = [];\r\n\tpublic volumeStart: number = 0.0;\r\n\tpublic volumeDelta: number = 0.0;\r\n\tpublic phaseDeltaScale: number = 0.0;\r\n\tpublic pulseWidth: number = 0.0;\r\n\tpublic pulseWidthDelta: number = 0.0;\r\n\tpublic filter: number = 0.0;\r\n\tpublic filterScale: number = 0.0;\r\n\tpublic filterSample0: number = 0.0;\r\n\tpublic filterSample1: number = 0.0;\r\n\tpublic vibratoScale: number = 0.0;\r\n\tpublic intervalMult: number = 0.0;\r\n\tpublic intervalVolumeMult: number = 1.0;\r\n\tpublic feedbackOutputs: number[] = [];\r\n\tpublic feedbackMult: number = 0.0;\r\n\tpublic feedbackDelta: number = 0.0;\r\n\tpublic stereoVolumeLStart: number = 0.0;\r\n\tpublic stereoVolumeRStart: number = 0.0;\r\n\tpublic stereoVolumeLDelta: number = 0.0;\r\n\tpublic stereoVolumeRDelta: number = 0.0;\r\n\tpublic stereoDelayStart: number = 0.0;\r\n\tpublic stereoDelayEnd: number = 0.0;\r\n\tpublic stereoDelayDelta: number = 0.0;\r\n\tpublic customVolumeStart: number = 0.0;\r\n\tpublic customVolumeEnd: number = 0.0;\r\n\tpublic filterResonanceStart: number = 0.0;\r\n\tpublic filterResonanceDelta: number = 0.0;\r\n\tpublic isFirstOrder: boolean = false;\r\n\r\n\tconstructor() {\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\tthis.phases[i] = 0.0;\r\n\t\t\tthis.feedbackOutputs[i] = 0.0;\r\n\t\t}\r\n\t\tthis.sample = 0.0;\r\n\t\tthis.filterSample0 = 0.0;\r\n\t\tthis.filterSample1 = 0.0;\r\n\t\tthis.liveInputSamplesHeld = 0.0;\r\n\t}\r\n\r\n}\r\n\r\nexport class Synth {\r\n\r\n\tpublic warmUpSynthesizer(song: Song | null): void {\r\n\t\t// Don't bother to generate the drum waves unless the song actually\r\n\t\t// uses them, since they may require a lot of computation.\r\n\t\tif (song != null) {\r\n\t\t\tfor (let channel: number = 0; channel < song.getChannelCount(); channel++) {\r\n\t\t\t\tfor (let instrument: number = 0; instrument < song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tSynth.getInstrumentSynthFunction(song.channels[channel].instruments[instrument]);\r\n\t\t\t\t\tsong.channels[channel].instruments[instrument].warmUp();\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic computeLatestModValues(): void {\r\n\r\n\t\tif (this.song != null && this.song.modChannelCount > 0) {\r\n\r\n\t\t\t// Clear all mod values, and set up temp variables for the time a mod would be set at.\r\n\t\t\tlet latestModTimes: (number | null)[] = [];\r\n\t\t\tlet latestModInsTimes: (number | null)[][][] = [];\r\n\t\t\tthis.modValues = [];\r\n\t\t\tthis.nextModValues = [];\r\n\t\t\tthis.modInsValues = [];\r\n\t\t\tthis.nextModInsValues = [];\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\tlatestModInsTimes[channel] = [];\r\n\t\t\t\tthis.modInsValues[channel] = [];\r\n\t\t\t\tthis.nextModInsValues[channel] = [];\r\n\t\t\t\tfor (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tthis.modInsValues[channel][instrument] = [];\r\n\t\t\t\t\tthis.nextModInsValues[channel][instrument] = [];\r\n\t\t\t\t\tlatestModInsTimes[channel][instrument] = [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Find out where we're at in the fraction of the current bar.\r\n\t\t\tlet currentPart: number = this.beat * Config.partsPerBeat + this.part;\r\n\r\n\t\t\t// For mod channels, calculate last set value for each mod\r\n\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\tif (!(this.song.channels[channel].muted)) {\r\n\r\n\t\t\t\t\tlet pattern: Pattern | null;\r\n\r\n\t\t\t\t\tfor (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\r\n\t\t\t\t\t\tpattern = this.song.getPattern(channel, currentBar);\r\n\r\n\t\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\t\tlet instrumentIdx: number = this.song.getPatternInstrument(channel, currentBar);\r\n\t\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\t\t\tlet latestPinParts: number[] = [];\r\n\t\t\t\t\t\t\tlet latestPinValues: number[] = [];\r\n\r\n\t\t\t\t\t\t\tlet partsInBar: number = (currentBar == this.bar)\r\n\t\t\t\t\t\t\t\t? currentPart\r\n\t\t\t\t\t\t\t\t: this.findPartsInBar(currentBar);\r\n\r\n\t\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\t\tif (note.start < partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\r\n\t\t\t\t\t\t\t\t\tif (note.end <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\tlatestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\r\n\t\t\t\t\t\t\t\t\t\tlatestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].volume;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tlatestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\r\n\t\t\t\t\t\t\t\t\t\t// Find the pin where bar change happens, and compute where pin volume would be at that time\r\n\t\t\t\t\t\t\t\t\t\tfor (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tlatestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n\t\t\t\t\t\t\t\t\t\t\t\tpinIdx = note.pins.length;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Set modulator value, if it wasn't set in another pattern already scanned\r\n\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\tif (latestPinParts[mod] != null) {\r\n\t\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\t\t\t\tif (latestModTimes[instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modSettings[mod]] as number)) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n\t\t\t\t\t\t\t\t\t\t\tlatestModTimes[instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] as number)) {\r\n\t\t\t\t\t\t\t\t\t\tthis.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n\t\t\t\t\t\t\t\t\t\tlatestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static operatorAmplitudeCurve(amplitude: number): number {\r\n\t\treturn (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n\t}\r\n\r\n\tpublic samplesPerSecond: number = 44100;\r\n\r\n\tpublic song: Song | null = null;\r\n\tpublic liveInputDuration: number = 0;\r\n\tpublic liveInputStarted: boolean = false;\r\n\tpublic liveInputPitches: number[] = [];\r\n\tpublic liveInputChannel: number = 0;\r\n\tpublic loopRepeatCount: number = -1;\r\n\tpublic volume: number = 1.0;\r\n\r\n\tprivate wantToSkip: boolean = false;\r\n\tprivate playheadInternal: number = 0.0;\r\n\tprivate bar: number = 0;\r\n\tprivate beat: number = 0;\r\n\tprivate part: number = 0;\r\n\tprivate tick: number = 0;\r\n\tprivate tickSampleCountdown: number = 0;\r\n\tprivate modValues: (number | null)[];\r\n\tprivate modInsValues: (number | null)[][][];\r\n\tprivate nextModValues: (number | null)[];\r\n\tprivate nextModInsValues: (number | null)[][][];\r\n\tprivate isPlayingSong: boolean = false;\r\n\tprivate liveInputEndTime: number = 0.0;\r\n\tprivate readonly tonePool: Deque<Tone> = new Deque<Tone>();\r\n\tprivate readonly activeTones: Array<Deque<Tone>> = [];\r\n\tprivate tyingOver: number[] = [];\r\n\tprivate readonly activeModTones: Array<Array<Deque<Tone>>> = [];\r\n\t//private readonly releasedModTones: Array<Array<Deque<Tone>>> = [];\r\n\tprivate readonly releasedTones: Array<Deque<Tone>> = [];\r\n\tprivate readonly liveInputTones: Deque<Tone> = new Deque<Tone>();\r\n\r\n\t//private highpassInput: number = 0.0;\r\n\t//private highpassOutput: number = 0.0;\r\n\tprivate limit: number = 0.0;\r\n\r\n\tprivate stereoBufferIndex: number = 0;\r\n\tprivate samplesForNone: Float32Array | null = null;\r\n\tprivate samplesForReverb: Float32Array | null = null;\r\n\tprivate samplesForChorus: Float32Array | null = null;\r\n\tprivate samplesForChorusReverb: Float32Array | null = null;\r\n\r\n\tprivate chorusDelayLine: Float32Array = new Float32Array(2048);\r\n\tprivate chorusDelayPos: number = 0;\r\n\tprivate chorusPhase: number = 0;\r\n\r\n\tprivate reverbDelayLine: Float32Array = new Float32Array(16384);\r\n\tprivate reverbDelayPos: number = 0;\r\n\tprivate reverbFeedback0: number = 0.0;\r\n\tprivate reverbFeedback1: number = 0.0;\r\n\tprivate reverbFeedback2: number = 0.0;\r\n\tprivate reverbFeedback3: number = 0.0;\r\n\r\n\tprivate audioCtx: any | null = null;\r\n\tprivate scriptNode: any | null = null;\r\n\r\n\tpublic get playing(): boolean {\r\n\t\treturn this.isPlayingSong;\r\n\t}\r\n\r\n\tpublic get playhead(): number {\r\n\t\treturn this.playheadInternal;\r\n\t}\r\n\r\n\tpublic set playhead(value: number) {\r\n\t\tif (this.song != null) {\r\n\t\t\tthis.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n\t\t\tlet remainder: number = this.playheadInternal;\r\n\t\t\tthis.bar = Math.floor(remainder);\r\n\t\t\tremainder = this.song.beatsPerBar * (remainder - this.bar);\r\n\t\t\tthis.beat = Math.floor(remainder);\r\n\t\t\tremainder = Config.partsPerBeat * (remainder - this.beat);\r\n\t\t\tthis.part = Math.floor(remainder);\r\n\t\t\tremainder = Config.ticksPerPart * (remainder - this.part);\r\n\t\t\tthis.tick = Math.floor(remainder);\r\n\t\t\tconst samplesPerTick: number = this.getSamplesPerTick();\r\n\t\t\tremainder = samplesPerTick * (remainder - this.tick);\r\n\t\t\tthis.tickSampleCountdown = samplesPerTick - remainder;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getSamplesPerBar(): number {\r\n\t\tif (this.song == null) throw new Error();\r\n\t\treturn this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\r\n\t}\r\n\r\n\t// Calculate the total number of parts that will be played in the current bar before any next bar mods trigger.\r\n\tprivate findPartsInBar(bar: number): number {\r\n\t\tif (this.song == null) return 0;\r\n\t\tlet partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\tif (pattern != null) {\r\n\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\tif (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n\t\t\t\t\t\t\t\t// Find the earliest next bar note.\r\n\t\t\t\t\t\t\t\tif (partsInBar > note.start)\r\n\t\t\t\t\t\t\t\t\tpartsInBar = note.start;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn partsInBar;\r\n\t}\r\n\r\n\t// Returns the total samples in the song\r\n\tpublic getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\r\n\t\tif (this.song == null)\r\n\t\t\treturn -1;\r\n\r\n\t\t// Compute the window to be checked (start bar to end bar)\r\n\t\tlet startBar: number = enableIntro ? 0 : this.song.loopStart;\r\n\t\tlet endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\r\n\t\tlet hasTempoMods: boolean = false;\r\n\t\tlet hasNextBarMods: boolean = false;\r\n\t\tlet prevTempo: number = this.song.tempo;\r\n\r\n\t\t// Determine if any tempo or next bar mods happen anywhere in the window\r\n\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\tfor (let bar: number = startBar; bar < endBar; bar++) {\r\n\t\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\thasTempoMods = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\thasNextBarMods = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\r\n\t\tif (startBar > 0) {\r\n\t\t\tlet latestTempoPin: number | null = null;\r\n\t\t\tlet latestTempoValue: number = 0;\r\n\r\n\t\t\tfor (let bar: number = startBar - 1; bar >= 0; bar--) {\r\n\t\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\t\tlet pattern = this.song.getPattern(channel, bar);\r\n\r\n\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\tlet instrumentIdx: number = this.song.getPatternInstrument(channel, bar);\r\n\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\r\n\t\t\t\t\t\tlet partsInBar: number = this.findPartsInBar(bar);\r\n\r\n\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\tif (instrument.modSettings[Config.modCount - 1 - note.pitches[0]] == ModSetting.mstTempo && instrument.modStatuses[Config.modCount - 1 - note.pitches[0]] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\t\tif (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\r\n\t\t\t\t\t\t\t\t\tif (note.end <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoPin = note.end;\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoValue = note.pins[note.pins.length - 1].volume;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoPin = partsInBar;\r\n\t\t\t\t\t\t\t\t\t\t// Find the pin where bar change happens, and compute where pin volume would be at that time\r\n\t\t\t\t\t\t\t\t\t\tfor (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tlatestTempoValue = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n\t\t\t\t\t\t\t\t\t\t\t\tpinIdx = note.pins.length;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Done once you process a pattern where tempo mods happened, since the search happens backward\r\n\t\t\t\tif (latestTempoPin != null) {\r\n\t\t\t\t\tprevTempo = this.song.modValueToReal(latestTempoValue, ModSetting.mstTempo);\r\n\t\t\t\t\tbar = -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (hasTempoMods || hasNextBarMods) {\r\n\t\t\t// Run from start bar to end bar and observe looping, computing average tempo across each bar\r\n\t\t\tlet bar: number = startBar;\r\n\t\t\tlet ended: boolean = false;\r\n\t\t\tlet totalSamples: number = 0;\r\n\r\n\t\t\twhile (!ended) {\r\n\t\t\t\t// Compute the subsection of the pattern that will play\r\n\t\t\t\tlet partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n\t\t\t\tlet currentPart: number = 0;\r\n\r\n\t\t\t\tif (hasNextBarMods) {\r\n\t\t\t\t\tpartsInBar = this.findPartsInBar(bar);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Compute average tempo in this tick window, or use last tempo if nothing happened\r\n\t\t\t\tif (hasTempoMods) {\r\n\t\t\t\t\tlet foundMod: boolean = false;\r\n\t\t\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tif (foundMod == false) {\r\n\t\t\t\t\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\t\tif (foundMod == false && instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong\r\n\t\t\t\t\t\t\t\t\t\t&& pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\r\n\t\t\t\t\t\t\t\t\t\t// Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\r\n\t\t\t\t\t\t\t\t\t\tfoundMod = true;\r\n\t\t\t\t\t\t\t\t\t\t// Need to re-sort the notes by start time to make the next part much less painful.\r\n\t\t\t\t\t\t\t\t\t\tpattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\r\n\t\t\t\t\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// Compute samples up to this note\r\n\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (note.start < partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Compute samples up to this pin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst prevPinTempo: number = this.song.modValueToReal(note.pins[pinIdx - 1].volume, ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet currPinTempo: number = this.song.modValueToReal(note.pins[pinIdx].volume, ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrPinTempo = this.song.modValueToReal(note.pins[pinIdx - 1].volume + (note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time), ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (currPinTempo != prevPinTempo) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The starting formula is\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Substituting BPM for a step variable that moves with respect to the current tick, we get\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// No tempo change between the two pins.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprevTempo = currPinTempo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Compute samples for the rest of the bar\r\n\t\t\t\ttotalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n\t\t\t\tbar++;\r\n\t\t\t\tif (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\tbar = this.song.loopStart;\r\n\t\t\t\t\tif (loop > 0) loop--;\r\n\t\t\t\t}\r\n\t\t\t\tif (bar >= endBar) {\r\n\t\t\t\t\tended = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn Math.ceil(totalSamples);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// No tempo or next bar mods... phew! Just calculate normally.\r\n\t\t\treturn this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\r\n\t\tif (this.song == null) throw new Error();\r\n\t\tlet bars: number = this.song.loopLength * (useLoopCount + 1);\r\n\t\tif (enableIntro) bars += this.song.loopStart;\r\n\t\tif (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n\t\treturn bars;\r\n\t}\r\n\r\n\tconstructor(song: Song | string | null = null) {\r\n\t\tif (song != null) this.setSong(song);\r\n\t}\r\n\r\n\tpublic setSong(song: Song | string): void {\r\n\t\tif (typeof (song) == \"string\") {\r\n\t\t\tthis.song = new Song(song);\r\n\t\t} else if (song instanceof Song) {\r\n\t\t\tthis.song = song;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic setModValue(volumeStart: number, volumeEnd: number, mod: number, instrument: Instrument, setting: ModSetting): number {\r\n\t\tlet val: number;\r\n\t\tlet nextVal: number;\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tval = (this.song as Song).modValueToReal(volumeStart, setting);\r\n\t\t\t\tnextVal = (this.song as Song).modValueToReal(volumeEnd, setting);\r\n\t\t\t\tif (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\r\n\t\t\t\t\tthis.modValues[setting] = val;\r\n\t\t\t\t\tthis.nextModValues[setting] = nextVal;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tval = this.song!.modValueToReal(volumeStart, setting);\r\n\t\t\t\tnextVal = this.song!.modValueToReal(volumeEnd, setting);\r\n\t\t\t\tlet channelAdjust: number = instrument.modChannels[mod] + ((instrument.modStatuses[mod] == ModStatus.msForNoise) ? this.song!.pitchChannelCount : 0);\r\n\r\n\t\t\t\tif (this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] == null\r\n\t\t\t\t\t|| this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != val\r\n\t\t\t\t\t|| this.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != nextVal) {\r\n\t\t\t\t\tthis.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = val;\r\n\t\t\t\t\tthis.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = nextVal;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\t\tval = (this.song as Song).modValueToReal(volumeStart, setting);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tval = -1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn val;\r\n\t}\r\n\r\n\tpublic getModValue(setting: ModSetting, forSong: boolean, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\r\n\t\tif (forSong) {\r\n\t\t\tif (this.modValues[setting] != null && this.nextModValues[setting] != null) {\r\n\t\t\t\treturn nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\r\n\t\t\t}\r\n\t\t} else if (channel != undefined && instrument != undefined) {\r\n\t\t\tif (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n\t\t\t\treturn nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t// Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\r\n\tpublic isAnyModActive(channel: number, instrument: number): boolean {\r\n\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\tif ((this.modValues != undefined && this.modValues[setting] != null)\r\n\t\t\t\t|| (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic unsetMod(setting: ModSetting, channel?: number, instrument?: number) {\r\n\t\tif (this.isModActive(setting, true) || (channel != undefined && instrument != undefined && this.isModActive(setting, false, channel, instrument))) {\r\n\t\t\tthis.modValues[setting] = null;\r\n\t\t\tthis.nextModValues[setting] = null;\r\n\t\t\tif (channel != undefined && instrument != undefined) {\r\n\t\t\t\tthis.modInsValues[channel][instrument][setting] = null;\r\n\t\t\t\tthis.nextModInsValues[channel][instrument][setting] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isModActive(setting: ModSetting, forSong: boolean, channel?: number, instrument?: number): boolean {\r\n\t\tif (forSong) {\r\n\t\t\treturn (this.modValues != undefined && this.modValues[setting] != null);\r\n\t\t} else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null && this.modInsValues[channel][instrument][setting] != null) {\r\n\t\t\treturn (this.modInsValues[channel][instrument][setting] != null);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate activateAudio(): void {\r\n\t\tif (this.audioCtx == null || this.scriptNode == null) {\r\n\t\t\tthis.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)();\r\n\t\t\tthis.samplesPerSecond = this.audioCtx.sampleRate;\r\n\t\t\tthis.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(2048, 0, 2) : this.audioCtx.createJavaScriptNode(2048, 0, 2); // 2048, 0 input channels, 2 output channels\r\n\t\t\tthis.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n\t\t\tthis.scriptNode.channelCountMode = 'explicit';\r\n\t\t\tthis.scriptNode.channelInterpretation = 'speakers';\r\n\t\t\tthis.scriptNode.connect(this.audioCtx.destination);\r\n\t\t}\r\n\t\tthis.audioCtx.resume();\r\n\t}\r\n\r\n\tprivate deactivateAudio(): void {\r\n\t\tif (this.audioCtx != null && this.scriptNode != null) {\r\n\t\t\tthis.scriptNode.disconnect(this.audioCtx.destination);\r\n\t\t\tthis.scriptNode = null;\r\n\t\t\tif (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n\t\t\tthis.audioCtx = null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic maintainLiveInput(): void {\r\n\t\tthis.activateAudio();\r\n\t\tthis.liveInputEndTime = performance.now() + 10000.0;\r\n\t}\r\n\r\n\tpublic play(): void {\r\n\t\tif (this.isPlayingSong) return;\r\n\t\tthis.isPlayingSong = true;\r\n\t\tthis.warmUpSynthesizer(this.song);\r\n\t\tthis.computeLatestModValues();\r\n\t\tthis.activateAudio();\r\n\t}\r\n\r\n\tpublic pause(): void {\r\n\t\tif (!this.isPlayingSong) return;\r\n\t\tthis.isPlayingSong = false;\r\n\t\tif (this.song != null) {\r\n\t\t\tthis.song.inVolumeCap = 0.0;\r\n\t\t\tthis.song.outVolumeCap = 0.0;\r\n\t\t}\r\n\t\tthis.modValues = [];\r\n\t\tthis.modInsValues = [];\r\n\t\tthis.nextModValues = [];\r\n\t\tthis.nextModInsValues = [];\r\n\t\tthis.tyingOver = [];\r\n\t}\r\n\r\n\tpublic snapToStart(): void {\r\n\t\tthis.bar = 0;\r\n\t\tthis.snapToBar();\r\n\t}\r\n\r\n\tpublic goToBar(bar: number): void {\r\n\t\tthis.bar = bar;\r\n\t\tthis.playheadInternal = this.bar;\r\n\t}\r\n\r\n\tpublic snapToBar(): void {\r\n\t\tthis.playheadInternal = this.bar;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\t\tthis.tick = 0;\r\n\t\tthis.tickSampleCountdown = 0;\r\n\t}\r\n\r\n\tpublic resetEffects(): void {\r\n\t\tthis.reverbDelayPos = 0;\r\n\t\tthis.reverbFeedback0 = 0.0;\r\n\t\tthis.reverbFeedback1 = 0.0;\r\n\t\tthis.reverbFeedback2 = 0.0;\r\n\t\tthis.reverbFeedback3 = 0.0;\r\n\t\t//this.highpassInput = 0.0;\r\n\t\t//this.highpassOutput = 0.0;\r\n\t\tthis.freeAllTones();\r\n\t\tfor (let i: number = 0; i < this.reverbDelayLine.length; i++) this.reverbDelayLine[i] = 0.0;\r\n\t\tfor (let i: number = 0; i < this.chorusDelayLine.length; i++) this.chorusDelayLine[i] = 0.0;\r\n\t\tif (this.samplesForNone != null) for (let i: number = 0; i < this.samplesForNone.length; i++) this.samplesForNone[i] = 0.0;\r\n\t\tif (this.samplesForReverb != null) for (let i: number = 0; i < this.samplesForReverb.length; i++) this.samplesForReverb[i] = 0.0;\r\n\t\tif (this.samplesForChorus != null) for (let i: number = 0; i < this.samplesForChorus.length; i++) this.samplesForChorus[i] = 0.0;\r\n\t\tif (this.samplesForChorusReverb != null) for (let i: number = 0; i < this.samplesForChorusReverb.length; i++) this.samplesForChorusReverb[i] = 0.0;\r\n\t}\r\n\r\n\tpublic jumpIntoLoop(): void {\r\n\t\tif (!this.song) return;\r\n\t\tif (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\r\n\t\t\tconst oldBar: number = this.bar;\r\n\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t\tif (this.playing)\r\n\t\t\t\tthis.computeLatestModValues();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic nextBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst oldBar: number = this.bar;\r\n\t\tthis.bar++;\r\n\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\tthis.bar = 0;\r\n\t\t}\r\n\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic skipBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst samplesPerTick: number = this.getSamplesPerTick();\r\n\t\tthis.bar++;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\t\tthis.tick = 0;\r\n\t\tthis.tickSampleCountdown = samplesPerTick;\r\n\r\n\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic firstBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tthis.bar = 0;\r\n\t\tthis.playheadInternal = 0;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic jumpToEditingBar(bar: number): void {\r\n\t\tif (!this.song) return;\r\n\r\n\t\tthis.bar = bar;\r\n\r\n\t\tthis.playheadInternal = bar;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic prevBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst oldBar: number = this.bar;\r\n\t\tthis.bar--;\r\n\t\tif (this.bar < 0 || this.bar >= this.song.barCount) {\r\n\t\t\tthis.bar = this.song.barCount - 1;\r\n\t\t}\r\n\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tprivate audioProcessCallback = (audioProcessingEvent: any): void => {\r\n\t\tconst outputBuffer = audioProcessingEvent.outputBuffer;\r\n\t\tconst outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n\t\tconst outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n\t\tconst isPlayingLiveTones = performance.now() < this.liveInputEndTime;\r\n\t\tif (!isPlayingLiveTones && !this.isPlayingSong) {\r\n\t\t\tfor (let i: number = 0; i < outputBuffer.length; i++) {\r\n\t\t\t\toutputDataL[i] = 0.0;\r\n\t\t\t\toutputDataR[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.deactivateAudio();\r\n\t\t} else {\r\n\t\t\tthis.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\r\n\t\tif (this.song == null) {\r\n\t\t\tfor (let i: number = 0; i < outputBufferLength; i++) {\r\n\t\t\t\toutputDataL[i] = 0.0;\r\n\t\t\t\toutputDataR[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.deactivateAudio();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.song.inVolumeCap = 0.0; // Reset volume cap for this run\r\n\t\tthis.song.outVolumeCap = 0.0;\r\n\r\n\t\tconst channelCount: number = this.song.pitchChannelCount + this.song.noiseChannelCount;\r\n\r\n\t\tfor (let i: number = this.activeTones.length; i < channelCount; i++) {\r\n\t\t\tthis.activeTones[i] = new Deque<Tone>();\r\n\t\t\tthis.releasedTones[i] = new Deque<Tone>();\r\n\t\t}\r\n\t\tthis.activeTones.length = channelCount;\r\n\t\tthis.releasedTones.length = channelCount;\r\n\t\tif (channelCount != this.tyingOver.length) {\r\n\t\t\tlet idx: number = this.tyingOver.length;\r\n\t\t\tthis.tyingOver.length = channelCount;\r\n\t\t\twhile (idx < this.tyingOver.length) {\r\n\t\t\t\tthis.tyingOver[idx++] = -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i: number = this.activeModTones.length; i < this.song.modChannelCount; i++) {\r\n\t\t\tthis.activeModTones[i] = [];\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tthis.activeModTones[i][mod] = new Deque<Tone>();\r\n\t\t\t}\r\n\t\t\tthis.activeModTones[i].length = Config.modCount;\r\n\t\t}\r\n\t\tthis.activeModTones.length = this.song.modChannelCount;\r\n\r\n\t\tlet samplesPerTick: number = this.getSamplesPerTick();\r\n\t\tlet bufferIndex: number = 0;\r\n\t\tlet ended: boolean = false;\r\n\r\n\t\t// Check the bounds of the playhead:\r\n\t\twhile (this.tickSampleCountdown <= 0) this.tickSampleCountdown += samplesPerTick;\r\n\t\tif (this.tickSampleCountdown > samplesPerTick) this.tickSampleCountdown = samplesPerTick;\r\n\t\tif (playSong) {\r\n\t\t\tif (this.beat >= this.song.beatsPerBar) {\r\n\t\t\t\tthis.bar++;\r\n\t\t\t\tthis.beat = 0;\r\n\t\t\t\tthis.part = 0;\r\n\t\t\t\tthis.tick = 0;\r\n\t\t\t\tthis.tickSampleCountdown = samplesPerTick;\r\n\r\n\t\t\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\tthis.bar = 0;\r\n\t\t\t\tif (this.loopRepeatCount != -1) {\r\n\t\t\t\t\tended = true;\r\n\t\t\t\t\tthis.pause();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//const synthStartTime: number = performance.now();\r\n\r\n\t\tconst stereoBufferLength: number = outputBufferLength * 4;\r\n\t\tif (this.samplesForNone == null || this.samplesForNone.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForReverb == null || this.samplesForReverb.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForChorus == null || this.samplesForChorus.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForChorusReverb == null || this.samplesForChorusReverb.length != stereoBufferLength) {\r\n\t\t\tthis.samplesForNone = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForReverb = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForChorus = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForChorusReverb = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.stereoBufferIndex = 0;\r\n\t\t}\r\n\t\tlet stereoBufferIndex: number = this.stereoBufferIndex;\r\n\t\tconst samplesForNone: Float32Array = this.samplesForNone;\r\n\t\tconst samplesForReverb: Float32Array = this.samplesForReverb;\r\n\t\tconst samplesForChorus: Float32Array = this.samplesForChorus;\r\n\t\tconst samplesForChorusReverb: Float32Array = this.samplesForChorusReverb;\r\n\r\n\t\t// Post processing parameters:\r\n\t\tconst volume: number = +this.volume;\r\n\t\tconst chorusDelayLine: Float32Array = this.chorusDelayLine;\r\n\t\tconst reverbDelayLine: Float32Array = this.reverbDelayLine;\r\n\t\tconst chorusDuration: number = 2.0;\r\n\t\tconst chorusAngle: number = Math.PI * 2.0 / (chorusDuration * this.samplesPerSecond);\r\n\t\tconst chorusRange: number = 150 * this.samplesPerSecond / 44100;\r\n\t\tconst chorusOffset0: number = 0x800 - 1.51 * chorusRange;\r\n\t\tconst chorusOffset1: number = 0x800 - 2.10 * chorusRange;\r\n\t\tconst chorusOffset2: number = 0x800 - 3.35 * chorusRange;\r\n\t\tconst chorusOffset3: number = 0x800 - 1.47 * chorusRange;\r\n\t\tconst chorusOffset4: number = 0x800 - 2.15 * chorusRange;\r\n\t\tconst chorusOffset5: number = 0x800 - 3.25 * chorusRange;\r\n\t\tlet chorusPhase: number = this.chorusPhase % (Math.PI * 2.0);\r\n\t\tlet chorusDelayPos: number = this.chorusDelayPos & 0x7FF;\r\n\t\tlet reverbDelayPos: number = this.reverbDelayPos & 0x3FFF;\r\n\t\tlet reverbFeedback0: number = +this.reverbFeedback0;\r\n\t\tlet reverbFeedback1: number = +this.reverbFeedback1;\r\n\t\tlet reverbFeedback2: number = +this.reverbFeedback2;\r\n\t\tlet reverbFeedback3: number = +this.reverbFeedback3;\r\n\t\tlet useReverb: number = this.song.reverb;\r\n\t\tif (this.isModActive(ModSetting.mstReverb, true)) {\r\n\t\t\tuseReverb = this.getModValue(ModSetting.mstReverb, true);\r\n\t\t}\r\n\t\tlet reverb: number = Math.pow(useReverb / Config.reverbRange, 0.667) * 0.425;\r\n\t\t//const highpassFilter: number = Math.pow(0.5, 400 / this.samplesPerSecond);\r\n\t\tconst limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond); // Default 4.0\r\n\t\tconst limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond); // Default 4000.0;\r\n\t\tconst compressionThreshold: number = this.song.compressionThreshold; // Default 1\r\n\t\tconst limitThreshold: number = this.song.limitThreshold; // Default 1\r\n\t\tconst compressionRatio: number = this.song.compressionRatio; // Default 1\r\n\t\tconst limitRatio: number = this.song.limitRatio; // Default 1\r\n\t\tconst masterGain: number = this.song.masterGain; // Default 1\r\n\t\t//let highpassInput: number = +this.highpassInput;\r\n\t\t//let highpassOutput: number = +this.highpassOutput;\r\n\t\tlet limit: number = +this.limit;\r\n\r\n\t\twhile (bufferIndex < outputBufferLength && !ended) {\r\n\r\n\t\t\tconst samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\r\n\t\t\tconst runLength: number = Math.min(Math.ceil(this.tickSampleCountdown), samplesLeftInBuffer);\r\n\r\n\t\t\tfor (let modChannel: number = 0, channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; modChannel < this.song.modChannelCount; modChannel++, channel++) {\r\n\t\t\t\t// Also determines mod tones.\r\n\t\t\t\tthis.determineCurrentActiveTones(this.song, channel, playSong);\r\n\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tfor (let i: number = 0; i < this.activeModTones[modChannel][mod].count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.activeModTones[modChannel][mod].get(i);\r\n\r\n\t\t\t\t\t\tif (this.song.channels[channel].muted == false)\r\n\t\t\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Handle next bar mods if they were set\r\n\t\t\tif (this.wantToSkip) {\r\n\t\t\t\tthis.wantToSkip = false;\r\n\t\t\t\tthis.skipBar();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.isModActive(ModSetting.mstReverb, true)) {\r\n\t\t\t\treverb = Math.pow(this.getModValue(ModSetting.mstReverb, true) / Config.reverbRange, 0.667) * 0.425;\r\n\t\t\t}\r\n\r\n\t\t\t// Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\r\n\r\n\t\t\tconst tickSampleCountdown: number = this.tickSampleCountdown;\r\n\t\t\tconst startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n\t\t\tconst endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n\t\t\tconst ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n\t\t\tconst partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n\t\t\tconst partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n\t\t\tconst partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n\t\t\tconst partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\tfor (let instrumentIdx: number = 0; instrumentIdx < this.song.instrumentsPerChannel; instrumentIdx++) {\r\n\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\tlet useVibratoSpeed: number = instrument.vibratoSpeed;\r\n\r\n\t\t\t\t\tinstrument.LFOtime = instrument.nextLFOtime;\r\n\r\n\t\t\t\t\tif (this.isModActive(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t\tuseVibratoSpeed = this.getModValue(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx, false);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (useVibratoSpeed == 0) {\r\n\t\t\t\t\t\tinstrument.LFOtime = 0;\r\n\t\t\t\t\t\tinstrument.nextLFOtime = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinstrument.nextLFOtime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\r\n\t\t\t\tif (channel == this.liveInputChannel) {\r\n\t\t\t\t\tthis.determineLiveInputTones(this.song);\r\n\r\n\t\t\t\t\tfor (let i: number = 0; i < this.liveInputTones.count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.liveInputTones.get(i);\r\n\t\t\t\t\t\t// Hmm. Will allow active input from a muted channel for now.\r\n\t\t\t\t\t\t//if (this.song.channels[channel].muted == false)\r\n\t\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.determineCurrentActiveTones(this.song, channel, playSong);\r\n\t\t\t\tfor (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n\t\t\t\t\tconst tone: Tone = this.activeTones[channel].get(i);\r\n\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n\t\t\t\t\tconst tone: Tone = this.releasedTones[channel].get(i);\r\n\t\t\t\t\tif (tone.ticksSinceReleased >= tone.instrument.getTransition().releaseTicks) {\r\n\t\t\t\t\t\tthis.freeReleasedTone(channel, i);\r\n\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\r\n\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, true, shouldFadeOutFast);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Post processing:\r\n\t\t\tlet chorusTap0Index: number = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n\t\t\tlet chorusTap1Index: number = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n\t\t\tlet chorusTap2Index: number = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n\t\t\tlet chorusTap3Index: number = chorusDelayPos + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n\t\t\tlet chorusTap4Index: number = chorusDelayPos + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n\t\t\tlet chorusTap5Index: number = chorusDelayPos + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n\t\t\tchorusPhase += chorusAngle * runLength;\r\n\t\t\tconst chorusTap0End: number = chorusDelayPos + runLength + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n\t\t\tconst chorusTap1End: number = chorusDelayPos + runLength + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n\t\t\tconst chorusTap2End: number = chorusDelayPos + runLength + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n\t\t\tconst chorusTap3End: number = chorusDelayPos + runLength + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n\t\t\tconst chorusTap4End: number = chorusDelayPos + runLength + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n\t\t\tconst chorusTap5End: number = chorusDelayPos + runLength + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n\t\t\tconst chorusTap0Delta: number = (chorusTap0End - chorusTap0Index) / runLength;\r\n\t\t\tconst chorusTap1Delta: number = (chorusTap1End - chorusTap1Index) / runLength;\r\n\t\t\tconst chorusTap2Delta: number = (chorusTap2End - chorusTap2Index) / runLength;\r\n\t\t\tconst chorusTap3Delta: number = (chorusTap3End - chorusTap3Index) / runLength;\r\n\t\t\tconst chorusTap4Delta: number = (chorusTap4End - chorusTap4Index) / runLength;\r\n\t\t\tconst chorusTap5Delta: number = (chorusTap5End - chorusTap5Index) / runLength;\r\n\t\t\tconst runEnd: number = bufferIndex + runLength;\r\n\t\t\tfor (let i: number = bufferIndex; i < runEnd; i++) {\r\n\t\t\t\tconst bufferIndexL: number = stereoBufferIndex;\r\n\t\t\t\tconst bufferIndexR: number = stereoBufferIndex + 1;\r\n\t\t\t\tconst sampleForNoneL: number = samplesForNone[bufferIndexL]; samplesForNone[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForNoneR: number = samplesForNone[bufferIndexR]; samplesForNone[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForReverbL: number = samplesForReverb[bufferIndexL]; samplesForReverb[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForReverbR: number = samplesForReverb[bufferIndexR]; samplesForReverb[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForChorusL: number = samplesForChorus[bufferIndexL]; samplesForChorus[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForChorusR: number = samplesForChorus[bufferIndexR]; samplesForChorus[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForChorusReverbL: number = samplesForChorusReverb[bufferIndexL]; samplesForChorusReverb[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForChorusReverbR: number = samplesForChorusReverb[bufferIndexR]; samplesForChorusReverb[bufferIndexR] = 0.0;\r\n\t\t\t\tstereoBufferIndex += 2;\r\n\r\n\t\t\t\tconst combinedChorusL: number = sampleForChorusL + sampleForChorusReverbL;\r\n\t\t\t\tconst combinedChorusR: number = sampleForChorusR + sampleForChorusReverbR;\r\n\r\n\t\t\t\tconst chorusTap0Ratio: number = chorusTap0Index % 1;\r\n\t\t\t\tconst chorusTap1Ratio: number = chorusTap1Index % 1;\r\n\t\t\t\tconst chorusTap2Ratio: number = chorusTap2Index % 1;\r\n\t\t\t\tconst chorusTap3Ratio: number = chorusTap3Index % 1;\r\n\t\t\t\tconst chorusTap4Ratio: number = chorusTap4Index % 1;\r\n\t\t\t\tconst chorusTap5Ratio: number = chorusTap5Index % 1;\r\n\t\t\t\tconst chorusTap0A: number = chorusDelayLine[(chorusTap0Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap0B: number = chorusDelayLine[(chorusTap0Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap1A: number = chorusDelayLine[(chorusTap1Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap1B: number = chorusDelayLine[(chorusTap1Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap2A: number = chorusDelayLine[(chorusTap2Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap2B: number = chorusDelayLine[(chorusTap2Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap3A: number = chorusDelayLine[(chorusTap3Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap3B: number = chorusDelayLine[(chorusTap3Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap4A: number = chorusDelayLine[(chorusTap4Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap4B: number = chorusDelayLine[(chorusTap4Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap5A: number = chorusDelayLine[(chorusTap5Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap5B: number = chorusDelayLine[(chorusTap5Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap0: number = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n\t\t\t\tconst chorusTap1: number = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n\t\t\t\tconst chorusTap2: number = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n\t\t\t\tconst chorusTap3: number = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n\t\t\t\tconst chorusTap4: number = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n\t\t\t\tconst chorusTap5: number = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n\t\t\t\tconst chorusSampleL = 0.5 * (combinedChorusL - chorusTap0 + chorusTap1 - chorusTap2);\r\n\t\t\t\tconst chorusSampleR = 0.5 * (combinedChorusR - chorusTap3 + chorusTap4 - chorusTap5);\r\n\t\t\t\tchorusDelayLine[chorusDelayPos] = combinedChorusL;\r\n\t\t\t\tchorusDelayLine[(chorusDelayPos + 0x400) & 0x7FF] = combinedChorusR;\r\n\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & 0x7FF;\r\n\t\t\t\tchorusTap0Index += chorusTap0Delta;\r\n\t\t\t\tchorusTap1Index += chorusTap1Delta;\r\n\t\t\t\tchorusTap2Index += chorusTap2Delta;\r\n\t\t\t\tchorusTap3Index += chorusTap3Delta;\r\n\t\t\t\tchorusTap4Index += chorusTap4Delta;\r\n\t\t\t\tchorusTap5Index += chorusTap5Delta;\r\n\r\n\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n\t\t\t\t// good ratios:\t\t0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n\t\t\t\t// Delay lengths:\t3041\t + 3385\t\t+ 4481\t+  5477 = 16384 = 2^14\r\n\t\t\t\t// Buffer offsets:\t3041\t-> 6426\t   -> 10907 -> 16384\r\n\t\t\t\tconst reverbDelayPos1: number = (reverbDelayPos + 3041) & 0x3FFF;\r\n\t\t\t\tconst reverbDelayPos2: number = (reverbDelayPos + 6426) & 0x3FFF;\r\n\t\t\t\tconst reverbDelayPos3: number = (reverbDelayPos + 10907) & 0x3FFF;\r\n\t\t\t\tconst reverbSample0: number = (reverbDelayLine[reverbDelayPos]);\r\n\t\t\t\tconst reverbSample1: number = reverbDelayLine[reverbDelayPos1];\r\n\t\t\t\tconst reverbSample2: number = reverbDelayLine[reverbDelayPos2];\r\n\t\t\t\tconst reverbSample3: number = reverbDelayLine[reverbDelayPos3];\r\n\t\t\t\tconst reverbTemp0: number = -(reverbSample0 + sampleForChorusReverbL + sampleForReverbL) + reverbSample1;\r\n\t\t\t\tconst reverbTemp1: number = -(reverbSample0 + sampleForChorusReverbR + sampleForReverbR) - reverbSample1;\r\n\t\t\t\tconst reverbTemp2: number = -reverbSample2 + reverbSample3;\r\n\t\t\t\tconst reverbTemp3: number = -reverbSample2 - reverbSample3;\r\n\t\t\t\treverbFeedback0 += ((reverbTemp0 + reverbTemp2) * reverb - reverbFeedback0) * 0.5;\r\n\t\t\t\treverbFeedback1 += ((reverbTemp1 + reverbTemp3) * reverb - reverbFeedback1) * 0.5;\r\n\t\t\t\treverbFeedback2 += ((reverbTemp0 - reverbTemp2) * reverb - reverbFeedback2) * 0.5;\r\n\t\t\t\treverbFeedback3 += ((reverbTemp1 - reverbTemp3) * reverb - reverbFeedback3) * 0.5;\r\n\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbFeedback0;\r\n\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbFeedback1;\r\n\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbFeedback2;\r\n\t\t\t\treverbDelayLine[reverbDelayPos] = reverbFeedback3;\r\n\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & 0x3FFF;\r\n\r\n\t\t\t\t// Apply master pre-gain to the sound, before limiting. Master gain slider is 0-5, but it's squared for more range (0-25).\r\n\t\t\t\tconst sampleL = masterGain * masterGain * (sampleForNoneL + chorusSampleL + sampleForReverbL + reverbSample1 + reverbSample2 + reverbSample3);\r\n\t\t\t\tconst sampleR = masterGain * masterGain * (sampleForNoneR + chorusSampleR + sampleForReverbR + reverbSample0 + reverbSample2 - reverbSample3);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\thighpassOutput = highpassOutput * highpassFilter + sample - highpassInput;\r\n\t\t\t\thighpassInput = sample;\r\n\t\t\t\t// use highpassOutput instead of sample below?\r\n\t\t\t\t*/\r\n\r\n\t\t\t\t// A compressor/limiter.\r\n\t\t\t\tconst absL: number = sampleL < 0.0 ? -sampleL : sampleL;\r\n\t\t\t\tconst absR: number = sampleR < 0.0 ? -sampleR : sampleR;\r\n\t\t\t\tconst abs: number = absL > absR ? absL : absR;\r\n\t\t\t\tthis.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\r\n\t\t\t\t// Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\r\n\t\t\t\tconst limitRange: number = (+(abs > compressionThreshold)) + (+(abs > limitThreshold));\r\n\t\t\t\t// Determine the target amplification based on the range of the curve\r\n\t\t\t\tconst limitTarget: number =\r\n\t\t\t\t\t(+(limitRange == 0)) * (((abs + 1 - compressionThreshold) * 0.8 + 0.25) * compressionRatio + 1.05 * (1 - compressionRatio))\r\n\t\t\t\t\t+ (+(limitRange == 1)) * (1.05)\r\n\t\t\t\t\t+ (+(limitRange == 2)) * (1.05 * ((abs + 1 - limitThreshold) * limitRatio + (1 - limitThreshold)));\r\n\t\t\t\t// Move the limit towards the target\r\n\t\t\t\tlimit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\r\n\t\t\t\tconst limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\r\n\t\t\t\toutputDataL[i] = sampleL * limitedVolume;\r\n\t\t\t\toutputDataR[i] = sampleR * limitedVolume;\r\n\r\n\t\t\t\tthis.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\r\n\t\t\t}\r\n\r\n\t\t\tbufferIndex += runLength;\r\n\r\n\t\t\tthis.tickSampleCountdown -= runLength;\r\n\t\t\tif (this.tickSampleCountdown <= 0) {\r\n\r\n\t\t\t\t// Track how long tones have been released, and free them if there are too many.\r\n\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\tfor (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.releasedTones[channel].get(i);\r\n\t\t\t\t\t\ttone.ticksSinceReleased++;\r\n\r\n\t\t\t\t\t\tconst shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\t\t\t\t\t\tif (shouldFadeOutFast) {\r\n\t\t\t\t\t\t\tthis.freeReleasedTone(channel, i);\r\n\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Update arpeggio time, which is used to calculate arpeggio position\r\n\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\tfor (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\t\tlet useArpeggioSpeed: number = instrument.arpeggioSpeed;\r\n\t\t\t\t\t\tif (this.isModActive(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t\t\tuseArpeggioSpeed = this.getModValue(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx, false);\r\n\t\t\t\t\t\t\tif (Number.isInteger(useArpeggioSpeed)) {\r\n\t\t\t\t\t\t\t\tinstrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// Linear interpolate arpeggio values\r\n\t\t\t\t\t\t\t\tinstrument.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinstrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tick++;\r\n\t\t\t\tthis.tickSampleCountdown += samplesPerTick;\r\n\t\t\t\tif (this.tick == Config.ticksPerPart) {\r\n\t\t\t\t\tthis.tick = 0;\r\n\t\t\t\t\tthis.part++;\r\n\t\t\t\t\tthis.liveInputDuration--;\r\n\t\t\t\t\tvar atEnd = this.part + this.beat * Config.partsPerBeat >= this.findPartsInBar(this.bar) - 1;\r\n\t\t\t\t\t// Check if any active tones should be released.\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\t\t// Check if we're at the end of the bar and have a tie-over transition. If so, do not free tone\r\n\t\t\t\t\t\tvar carryOver = false;\r\n\t\t\t\t\t\tvar toneCount = this.activeTones[channel].count();\r\n\t\t\t\t\t\tvar pattern = this.song.getPattern(channel, this.bar);\r\n\t\t\t\t\t\tif (pattern != null && atEnd) {\r\n\t\t\t\t\t\t\tvar instrument = pattern.instrument;\r\n\t\t\t\t\t\t\tif (this.song.channels[channel].instruments[instrument].tieNoteTransition && toneCount > 0) {\r\n\t\t\t\t\t\t\t\t// Verify that all tie conditions are met\r\n\t\t\t\t\t\t\t\t// 1. Check for a note in this channel at the start of the next bar\r\n\t\t\t\t\t\t\t\t// 2. Check that the note's volume start matches the current volume\r\n\t\t\t\t\t\t\t\t// 3. Check that the shape (pitches, chord size) is a match\r\n\t\t\t\t\t\t\t\t// 4. Check that the instruments are the same\r\n\t\t\t\t\t\t\t\tvar targetBar = this.bar + 1;\r\n\t\t\t\t\t\t\t\tif (targetBar >= this.song.barCount || (targetBar >= this.song.loopStart + this.song.loopLength && this.loopRepeatCount != 0)) {\r\n\t\t\t\t\t\t\t\t\ttargetBar = this.song.loopStart;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvar nextPattern = this.song.getPattern(channel, targetBar);\r\n\t\t\t\t\t\t\t\tvar currNote = this.activeTones[channel].get(0).note;\r\n\t\t\t\t\t\t\t\tif (currNote != null) {\r\n\t\t\t\t\t\t\t\t\tvar pin = 0;\r\n\t\t\t\t\t\t\t\t\twhile (currNote.pins[pin].time + currNote.start < this.part + this.beat * Config.partsPerBeat && pin < currNote.pins.length - 1)\r\n\t\t\t\t\t\t\t\t\t\tpin++;\r\n\t\t\t\t\t\t\t\t\tvar currVolume = currNote.pins[pin].volume;\r\n\t\t\t\t\t\t\t\t\tvar lastInterval = currNote.pins[pin].interval;\r\n\r\n\t\t\t\t\t\t\t\t\tif (nextPattern != null && nextPattern.instrument == instrument) {\r\n\t\t\t\t\t\t\t\t\t\tfor (let i: number = 0; i < nextPattern.notes.length; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (nextPattern.notes[i].start == 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t&& nextPattern.notes[i].pins[0].volume == currVolume\r\n\t\t\t\t\t\t\t\t\t\t\t\t&& nextPattern.notes[i].pitches.length == currNote.pitches.length) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tcarryOver = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < currNote.pitches.length; j++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Allow any pitch order\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (nextPattern.notes[i].pitches.findIndex((p) => p == currNote!.pitches[j] + lastInterval) == -1) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcarryOver = false;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tj = currNote.pitches.length;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\ti = nextPattern.notes.length;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (carryOver) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Prior to an actual tie, all releasing for hard transitions also needs to be\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// cancelled. So, this check is ran a few parts before the end of a bar too.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// In those cases, just set tyingOver to 0 for that duration to cancel release\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// handling, but not affect note start time calculations.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.part + this.beat * Config.partsPerBeat < this.findPartsInBar(this.bar)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Only does this if it is needed, so if we're long tying (next else-if below) then don't ruin the math.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.tyingOver[channel] < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Special case: tying over a whole bar, just add the length.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (currNote.start == 0 && this.tyingOver[channel] >= 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] += this.part + this.beat * Config.partsPerBeat;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Set tyingOver to a number >= 0 representing how many parts back the tie note started.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = this.part + this.beat * Config.partsPerBeat - currNote.start;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n\t\t\t\t\t\t\tconst tone: Tone = this.activeTones[channel].get(i);\r\n\t\t\t\t\t\t\tconst transition: Transition = tone.instrument.getTransition();\r\n\r\n\t\t\t\t\t\t\tif (tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n\t\t\t\t\t\t\t\t// Free tone if the transition allows\r\n\t\t\t\t\t\t\t\tif (!(transition.isSeamless || tone.instrument.clicklessTransition || this.tyingOver[channel] >= 0)) {\r\n\t\t\t\t\t\t\t\t\tif (transition.releases) {\r\n\t\t\t\t\t\t\t\t\t\tthis.releaseTone(channel, tone);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tthis.freeTone(tone);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.activeTones[channel].remove(i);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// End of note: if not actively trying to carry over, kill note tie\r\n\t\t\t\t\t\t\t\tif (!carryOver) {\r\n\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.song.modChannelCount; channel++) {\r\n\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.activeModTones[channel][mod].count(); i++) {\r\n\t\t\t\t\t\t\t\tconst tone: Tone = this.activeModTones[channel][mod].get(i);\r\n\t\t\t\t\t\t\t\tconst transition: Transition = tone.instrument.getTransition();\r\n\t\t\t\t\t\t\t\tif (!transition.isSeamless && tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n\t\t\t\t\t\t\t\t\tthis.freeTone(tone);\r\n\t\t\t\t\t\t\t\t\tthis.activeModTones[channel][mod].remove(i);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.part == Config.partsPerBeat) {\r\n\t\t\t\t\t\tthis.part = 0;\r\n\r\n\t\t\t\t\t\tif (playSong) {\r\n\t\t\t\t\t\t\tthis.beat++;\r\n\t\t\t\t\t\t\tif (this.beat == this.song.beatsPerBar) {\r\n\t\t\t\t\t\t\t\t// bar changed, reset for next bar:\r\n\t\t\t\t\t\t\t\tthis.beat = 0;\r\n\t\t\t\t\t\t\t\tthis.bar++;\r\n\t\t\t\t\t\t\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\t\t\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\t\t\t\t\t\tthis.bar = 0;\r\n\t\t\t\t\t\t\t\t\tif (this.loopRepeatCount != -1) {\r\n\t\t\t\t\t\t\t\t\t\tended = true;\r\n\t\t\t\t\t\t\t\t\t\tthis.resetEffects();\r\n\t\t\t\t\t\t\t\t\t\tthis.pause();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Update mod values so that next values copy to current values\r\n\t\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\t\tif (this.nextModValues != null && this.nextModValues[setting] != null)\r\n\t\t\t\t\tthis.modValues[setting] = this.nextModValues[setting];\r\n\t\t\t}\r\n\r\n\t\t\t// Set samples per tick if song tempo mods changed it\r\n\t\t\tif (this.isModActive(ModSetting.mstTempo, true)) {\r\n\t\t\t\tsamplesPerTick = this.getSamplesPerTick();\r\n\t\t\t\tthis.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\r\n\t\t\t}\r\n\r\n\t\t\t// Bound LFO times to be within their period (to keep values from getting large)\r\n\t\t\t// I figured this modulo math probably doesn't have to happen every LFO tick.\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount; channel++) {\r\n\t\t\t\tfor (let instrument of this.song.channels[channel].instruments) {\r\n\t\t\t\t\tinstrument.nextLFOtime = (instrument.nextLFOtime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\r\n\t\t\t\t\tinstrument.arpTime = (instrument.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\t\tfor (let channel: number = 0; channel < channelCount; channel++) {\r\n\t\t\t\t\tfor (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\t\tif (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n\t\t\t\t\t\t\tthis.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Optimization: Avoid persistent reverb values in the float denormal range.\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < reverbFeedback0 && reverbFeedback0 < epsilon) reverbFeedback0 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback1 && reverbFeedback1 < epsilon) reverbFeedback1 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback2 && reverbFeedback2 < epsilon) reverbFeedback2 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback3 && reverbFeedback3 < epsilon) reverbFeedback3 = 0.0;\r\n\t\t//if (-epsilon < highpassInput && highpassInput < epsilon) highpassInput = 0.0;\r\n\t\t//if (-epsilon < highpassOutput && highpassOutput < epsilon) highpassOutput = 0.0;\r\n\t\tif (-epsilon < limit && limit < epsilon) limit = 0.0;\r\n\r\n\t\tthis.stereoBufferIndex = (this.stereoBufferIndex + outputBufferLength * 2) % stereoBufferLength;\r\n\t\tthis.chorusPhase = chorusPhase;\r\n\t\tthis.chorusDelayPos = chorusDelayPos;\r\n\t\tthis.reverbDelayPos = reverbDelayPos;\r\n\t\tthis.reverbFeedback0 = reverbFeedback0;\r\n\t\tthis.reverbFeedback1 = reverbFeedback1;\r\n\t\tthis.reverbFeedback2 = reverbFeedback2;\r\n\t\tthis.reverbFeedback3 = reverbFeedback3;\r\n\t\t//this.highpassInput = highpassInput;\r\n\t\t//this.highpassOutput = highpassOutput;\r\n\t\tthis.limit = limit;\r\n\r\n\t\tif (playSong) {\r\n\t\t\tthis.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / this.song.beatsPerBar + this.bar;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tconst synthDuration: number = performance.now() - synthStartTime;\r\n\t\t// Performance measurements:\r\n\t\tsamplesAccumulated += outputBufferLength;\r\n\t\tsamplePerformance += synthDuration;\r\n\t\t\r\n\t\tif (samplesAccumulated >= 44100 * 4) {\r\n\t\tconst secondsGenerated = samplesAccumulated / 44100;\r\n\t\tconst secondsRequired = samplePerformance / 1000;\r\n\t\tconst ratio = secondsRequired / secondsGenerated;\r\n\t\tconsole.log(ratio);\r\n\t\tsamplePerformance = 0;\r\n\t\tsamplesAccumulated = 0;\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tprivate freeTone(tone: Tone): void {\r\n\t\tthis.tonePool.pushBack(tone);\r\n\t}\r\n\r\n\tprivate newTone(): Tone {\r\n\t\tif (this.tonePool.count() > 0) {\r\n\t\t\tconst tone: Tone = this.tonePool.popBack();\r\n\t\t\ttone.reset();\r\n\t\t\ttone.active = false;\r\n\t\t\treturn tone;\r\n\t\t}\r\n\t\treturn new Tone();\r\n\t}\r\n\r\n\tprivate releaseTone(channel: number, tone: Tone): void {\r\n\t\tif (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n\t\t\tthis.releasedTones[channel].pushFront(tone);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t/*\r\n\t\t\tfor (let mod = 0; mod < Config.modCount; mod++) {\r\n\t\t\tthis.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].pushFront(tone);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t}\r\n\r\n\tprivate freeReleasedTone(channel: number, toneIndex: number): void {\r\n\t\tif (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n\t\t\tthis.freeTone(this.releasedTones[channel].get(toneIndex));\r\n\t\t\tthis.releasedTones[channel].remove(toneIndex);\r\n\t\t} else {\r\n\t\t\t/*\r\n\t\t\tfor (let mod = 0; mod < Config.modCount; mod++) {\r\n\t\t\tthis.freeTone(this.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].get(toneIndex));\r\n\t\t\tthis.releasedModTones[channel][mod].remove(toneIndex);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t}\r\n\r\n\tpublic freeAllTones(): void {\r\n\t\twhile (this.liveInputTones.count() > 0) {\r\n\t\t\tthis.freeTone(this.liveInputTones.popBack());\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < this.activeTones.length; i++) {\r\n\t\t\twhile (this.activeTones[i].count() > 0) {\r\n\t\t\t\tthis.freeTone(this.activeTones[i].popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < this.releasedTones.length; i++) {\r\n\t\t\twhile (this.releasedTones[i].count() > 0) {\r\n\t\t\t\tthis.freeTone(this.releasedTones[i].popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = 0; i < this.activeModTones.length; i++) {\r\n\t\t\tfor (let mod = 0; mod < this.activeModTones[i].length; mod++) {\r\n\t\t\t\twhile (this.activeModTones[i][mod].count() > 0) {\r\n\t\t\t\t\tthis.freeTone(this.activeModTones[i][mod].popBack());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*\r\n\t\tfor (let i = 0; i < this.releasedModTones.length; i++) {\r\n\t\tfor (let mod = 0; mod < this.releasedModTones[i].length; mod++) {\r\n\t\twhile (this.releasedModTones[i][mod].count() > 0) {\r\n\t\tthis.freeTone(this.releasedModTones[i][mod].popBack());\r\n\t\t}\r\n\t\t}\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tprivate determineLiveInputTones(song: Song): void {\r\n\t\tconst toneList: Deque<Tone> = this.liveInputTones;\r\n\t\tconst pitches: number[] = this.liveInputPitches;\r\n\t\tlet toneCount: number = 0;\r\n\t\tif (this.liveInputDuration > 0) {\r\n\t\t\tconst instrument: Instrument = song.channels[this.liveInputChannel].instruments[song.getPatternInstrument(this.liveInputChannel, this.bar)];\r\n\r\n\t\t\tif (instrument.getChord().arpeggiates) {\r\n\t\t\t\tlet tone: Tone;\r\n\t\t\t\tif (toneList.count() == 0) {\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popFront());\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttone = toneList.get(0);\r\n\t\t\t\t}\r\n\t\t\t\ttoneCount = 1;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\ttone.pitches[i] = pitches[i];\r\n\t\t\t\t}\r\n\t\t\t\ttone.pitchCount = pitches.length;\r\n\t\t\t\ttone.chordSize = 1;\r\n\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t} else {\r\n\t\t\t\t//const transition: Transition = instrument.getTransition();\r\n\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\t//const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n\t\t\t\t\tlet tone: Tone;\r\n\t\t\t\t\tif (toneList.count() <= i) {\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.get(i));\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.set(i, tone);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttone = toneList.get(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoneCount++;\r\n\r\n\t\t\t\t\ttone.pitches[0] = pitches[i];\r\n\t\t\t\t\ttone.pitchCount = 1;\r\n\t\t\t\t\ttone.chordSize = pitches.length;\r\n\t\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (toneList.count() > toneCount) {\r\n\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popBack());\r\n\t\t}\r\n\r\n\t\tthis.liveInputStarted = false;\r\n\t}\r\n\r\n\tprivate determineCurrentActiveTones(song: Song, channel: number, playSong: boolean): void {\r\n\t\tconst instrument: Instrument = song.channels[channel].instruments[song.getPatternInstrument(channel, this.bar)];\r\n\t\tconst pattern: Pattern | null = song.getPattern(channel, this.bar);\r\n\t\tconst time: number = this.part + this.beat * Config.partsPerBeat;\r\n\r\n\t\tif (playSong && song.getChannelIsMod(channel) && !song.channels[channel].muted) {\r\n\t\t\t// Offset channel (first mod channel is 0 index in mod tone array)\r\n\t\t\tlet modChannelIdx = channel - (song.pitchChannelCount + song.noiseChannelCount);\r\n\r\n\t\t\t// For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\r\n\t\t\t// The same transition logic should apply though, even though it isn't really used by mod channels.\r\n\t\t\tlet notes: (Note | null)[] = [];\r\n\t\t\tlet prevNotes: (Note | null)[] = [];\r\n\t\t\tlet nextNotes: (Note | null)[] = [];\r\n\t\t\tlet fillCount: number = Config.modCount;\r\n\t\t\twhile (fillCount--) {\r\n\t\t\t\tnotes.push(null);\r\n\t\t\t\tprevNotes.push(null);\r\n\t\t\t\tnextNotes.push(null);\r\n\t\t\t}\r\n\r\n\t\t\tif (pattern != null) {\r\n\t\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\t\tif (pattern.notes[i].end <= time) {\r\n\t\t\t\t\t\t// Actually need to check which note starts closer to the start of this note.\r\n\t\t\t\t\t\tif (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n\t\t\t\t\t\t\tprevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n\t\t\t\t\t\tnotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (pattern.notes[i].start > time) {\r\n\t\t\t\t\t\t// Actually need to check which note starts closer to the end of this note.\r\n\t\t\t\t\t\tif (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n\t\t\t\t\t\t\tnextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tconst toneList: Deque<Tone> = this.activeModTones[modChannelIdx][mod];\r\n\t\t\t\tif (notes[mod] != null) {\r\n\t\t\t\t\tif (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\r\n\t\t\t\t\tif (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\r\n\t\t\t\t\tthis.syncTones(channel, toneList, instrument, (notes[mod] as Note).pitches, (notes[mod] as Note), (prevNotes[mod] as Note), (nextNotes[mod] as Note), time);\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhile (toneList.count() > 0) {\r\n\t\t\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!song.getChannelIsMod(channel)) {\r\n\r\n\t\t\tlet note: Note | null = null;\r\n\t\t\tlet prevNote: Note | null = null;\r\n\t\t\tlet nextNote: Note | null = null;\r\n\r\n\t\t\tif (playSong && pattern != null && !song.channels[channel].muted) {\r\n\t\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\t\tif (pattern.notes[i].end <= time) {\r\n\t\t\t\t\t\tprevNote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n\t\t\t\t\t\tnote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start > time) {\r\n\t\t\t\t\t\tnextNote = pattern.notes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst toneList: Deque<Tone> = this.activeTones[channel];\r\n\t\t\tif (note != null) {\r\n\t\t\t\tif (prevNote != null && prevNote.end != note.start) prevNote = null;\r\n\t\t\t\tif (nextNote != null && nextNote.start != note.end) nextNote = null;\r\n\t\t\t\tthis.syncTones(channel, toneList, instrument, note.pitches, note, prevNote, nextNote, time);\r\n\t\t\t} else {\r\n\t\t\t\twhile (toneList.count() > 0) {\r\n\t\t\t\t\t// Automatically free or release seamless tones if there's no new note to take over.\r\n\t\t\t\t\tif (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n\t\t\t\t\t\tthis.releaseTone(channel, toneList.popBack());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate syncTones(channel: number, toneList: Deque<Tone>, instrument: Instrument, pitches: number[], note: Note, prevNote: Note | null, nextNote: Note | null, currentPart: number): void {\r\n\t\tlet toneCount: number = 0;\r\n\t\t// Mod channels don't ever tie over, so the real start point is always simply the note's start.\r\n\t\tlet noteStartAdjust = (channel < this.song!.pitchChannelCount + this.song!.noiseChannelCount)\r\n\t\t\t? Math.max(0, this.tyingOver[channel])\r\n\t\t\t: 0;\r\n\t\tif (instrument.getChord().arpeggiates) {\r\n\t\t\tlet tone: Tone;\r\n\t\t\tif (toneList.count() == 0) {\r\n\t\t\t\ttone = this.newTone();\r\n\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t} else {\r\n\t\t\t\ttone = toneList.get(0);\r\n\t\t\t}\r\n\t\t\ttoneCount = 1;\r\n\r\n\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\ttone.pitches[i] = pitches[i];\r\n\t\t\t}\r\n\t\t\ttone.pitchCount = pitches.length;\r\n\t\t\ttone.chordSize = 1;\r\n\t\t\ttone.instrument = instrument;\r\n\t\t\ttone.note = note;\r\n\t\t\ttone.noteStart = note.start - noteStartAdjust;\r\n\t\t\ttone.noteEnd = note.end;\r\n\t\t\ttone.prevNote = prevNote;\r\n\t\t\ttone.nextNote = nextNote;\r\n\t\t\ttone.prevNotePitchIndex = 0;\r\n\t\t\ttone.nextNotePitchIndex = 0;\r\n\t\t} else {\r\n\t\t\tconst transition: Transition = instrument.getTransition();\r\n\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\r\n\t\t\t\tconst strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\t\t\t\tlet prevNoteForThisTone: Note | null = (prevNote && prevNote.pitches.length > i) ? prevNote : null;\r\n\t\t\t\tlet noteForThisTone: Note = note;\r\n\t\t\t\tlet nextNoteForThisTone: Note | null = (nextNote && nextNote.pitches.length > i) ? nextNote : null;\r\n\t\t\t\tlet noteStart: number = noteForThisTone.start + strumOffsetParts - noteStartAdjust;\r\n\r\n\t\t\t\tif (noteStart > currentPart) {\r\n\t\t\t\t\tif (toneList.count() > i && (transition.isSeamless || this.tyingOver[channel] >= 0) && prevNoteForThisTone != null) {\r\n\t\t\t\t\t\tnextNoteForThisTone = noteForThisTone;\r\n\t\t\t\t\t\tnoteForThisTone = prevNoteForThisTone;\r\n\t\t\t\t\t\tprevNoteForThisTone = null;\r\n\t\t\t\t\t\tnoteStart = noteForThisTone.start + strumOffsetParts - noteStartAdjust;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet noteEnd: number = noteForThisTone.end;\r\n\t\t\t\tif ((transition.isSeamless || this.tyingOver[channel] >= 0) && nextNoteForThisTone != null) {\r\n\t\t\t\t\tnoteEnd = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEnd + strumOffsetParts);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet tone: Tone;\r\n\t\t\t\tif (toneList.count() <= i) {\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttone = toneList.get(i);\r\n\t\t\t\t}\r\n\t\t\t\ttoneCount++;\r\n\r\n\t\t\t\ttone.pitches[0] = noteForThisTone.pitches[i];\r\n\t\t\t\ttone.pitchCount = 1;\r\n\t\t\t\ttone.chordSize = noteForThisTone.pitches.length;\r\n\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\ttone.note = noteForThisTone;\r\n\t\t\t\ttone.noteStart = noteStart;\r\n\t\t\t\ttone.noteEnd = noteEnd;\r\n\t\t\t\ttone.prevNote = prevNoteForThisTone;\r\n\t\t\t\ttone.nextNote = nextNoteForThisTone;\r\n\t\t\t\ttone.prevNotePitchIndex = i;\r\n\t\t\t\ttone.nextNotePitchIndex = i;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (toneList.count() > toneCount) {\r\n\t\t\t// Automatically free or release seamless tones if there's no new note to take over.\r\n\t\t\tif (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n\t\t\t\tthis.releaseTone(channel, toneList.popBack());\r\n\t\t\t} else {\r\n\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate playTone(song: Song, stereoBufferIndex: number, stereoBufferLength: number, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n\t\tSynth.computeTone(this, song, channel, samplesPerTick, runLength, tone, released, shouldFadeOutFast);\r\n\t\tlet synthBuffer: Float32Array;\r\n\t\tswitch (tone.instrument.effects) {\r\n\t\t\tcase 0: synthBuffer = this.samplesForNone!; break;\r\n\t\t\tcase 1: synthBuffer = this.samplesForReverb!; break;\r\n\t\t\tcase 2: synthBuffer = this.samplesForChorus!; break;\r\n\t\t\tcase 3: synthBuffer = this.samplesForChorusReverb!; break;\r\n\t\t\tdefault: throw new Error();\r\n\t\t}\r\n\t\tconst synthesizer: Function = Synth.getInstrumentSynthFunction(tone.instrument);\r\n\t\tsynthesizer(this, synthBuffer, stereoBufferIndex, stereoBufferLength, runLength * 2, tone, tone.instrument);\r\n\t}\r\n\r\n\tprivate static computeEnvelope(envelope: Envelope, time: number, beats: number, customVolume: number): number {\r\n\t\tswitch (envelope.type) {\r\n\t\t\tcase EnvelopeType.custom: return customVolume;\r\n\t\t\tcase EnvelopeType.steady: return 1.0;\r\n\t\t\tcase EnvelopeType.twang:\r\n\t\t\t\treturn 1.0 / (1.0 + time * envelope.speed);\r\n\t\t\tcase EnvelopeType.swell:\r\n\t\t\t\treturn 1.0 - 1.0 / (1.0 + time * envelope.speed);\r\n\t\t\tcase EnvelopeType.tremolo:\r\n\t\t\t\treturn 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\r\n\t\t\tcase EnvelopeType.tremolo2:\r\n\t\t\t\treturn 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\r\n\t\t\tcase EnvelopeType.punch:\r\n\t\t\t\treturn Math.max(1.0, 2.0 - time * 10.0);\r\n\t\t\tcase EnvelopeType.flare:\r\n\t\t\t\tconst speed: number = envelope.speed;\r\n\t\t\t\tconst attack: number = 0.25 / Math.sqrt(speed);\r\n\t\t\t\treturn time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * speed);\r\n\t\t\tcase EnvelopeType.decay:\r\n\t\t\t\treturn Math.pow(2, -envelope.speed * time);\r\n\t\t\tdefault: throw new Error(\"Unrecognized operator envelope type.\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static computeChordVolume(chordSize: number): number {\r\n\t\treturn 1.0 / ((chordSize - 1) * 0.25 + 1.0);\r\n\t}\r\n\r\n\tprivate static computeTone(synth: Synth, song: Song, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n\t\tconst instrument: Instrument = tone.instrument;\r\n\t\tconst transition: Transition = instrument.getTransition();\r\n\t\tconst chord: Chord = instrument.getChord();\r\n\t\tconst chordVolume: number = chord.arpeggiates ? 1 : Synth.computeChordVolume(tone.chordSize);\r\n\t\tconst isNoiseChannel: boolean = song.getChannelIsNoise(channel);\r\n\t\tconst intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\r\n\t\tconst secondsPerPart: number = Config.ticksPerPart * samplesPerTick / synth.samplesPerSecond;\r\n\t\tconst beatsPerPart: number = 1.0 / Config.partsPerBeat;\r\n\t\tconst toneWasActive: boolean = tone.active;\r\n\t\tconst tickSampleCountdown: number = synth.tickSampleCountdown;\r\n\t\tconst startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n\t\tconst endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n\t\tconst ticksIntoBar: number = (synth.beat * Config.partsPerBeat + synth.part) * Config.ticksPerPart + synth.tick;\r\n\t\tconst partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n\t\tconst partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n\t\tconst partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n\t\tconst partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\t\tconst instrumentIdx: number = (synth.song as Song).channels[channel].instruments.findIndex(i => i == instrument);\r\n\t\tconst treatAsSeamless: boolean = transition.isSeamless || synth.tyingOver[channel] >= 0;\r\n\r\n\t\ttone.phaseDeltaScale = 0.0;\r\n\t\ttone.filter = 1.0;\r\n\t\ttone.filterScale = 1.0;\r\n\t\ttone.vibratoScale = 0.0;\r\n\t\ttone.intervalMult = 1.0;\r\n\t\ttone.intervalVolumeMult = 1.0;\r\n\t\ttone.active = false;\r\n\r\n\t\tlet startPan: number = instrument.pan;\r\n\t\tlet endPan: number = instrument.pan;\r\n\t\tif (synth.isModActive(ModSetting.mstPan, false, channel, instrumentIdx)) {\r\n\t\t\tstartPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\r\n\t\t\tendPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\r\n\t\t}\r\n\r\n\t\tlet startPanDelay: number = instrument.panDelay;\r\n\t\tlet endPanDelay: number = instrument.panDelay;\r\n\t\tif (synth.isModActive(ModSetting.mstPanDelay, false, channel, instrumentIdx)) {\r\n\t\t\tstartPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, false);\r\n\t\t\tendPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, true);\r\n\t\t}\r\n\r\n\t\tconst useStartPan: number = (startPan - Config.panCenter) / Config.panCenter;\r\n\t\tconst useEndPan: number = (endPan - Config.panCenter) / Config.panCenter;\r\n\t\t// 10 pan delay is the same amount as vanilla beepbox.\r\n\t\tconst maxDelayStart: number = startPanDelay * 0.00013 * synth.samplesPerSecond;\r\n\t\tconst maxDelayEnd: number = endPanDelay * 0.00013 * synth.samplesPerSecond;\r\n\t\ttone.stereoDelayStart = -useStartPan * maxDelayStart;\r\n\t\tconst delayEnd: number = -useEndPan * maxDelayEnd;\r\n\t\ttone.stereoDelayDelta = (delayEnd - tone.stereoDelayStart) / runLength;\r\n\t\ttone.stereoVolumeLStart = Math.cos((1 + useStartPan) * Math.PI * 0.25) * 1.414;\r\n\t\ttone.stereoVolumeRStart = Math.cos((1 - useStartPan) * Math.PI * 0.25) * 1.414;\r\n\t\tconst stereoVolumeLEnd: number = Math.cos((1 + useEndPan) * Math.PI * 0.25) * 1.414;\r\n\t\tconst stereoVolumeREnd: number = Math.cos((1 - useEndPan) * Math.PI * 0.25) * 1.414;\r\n\t\ttone.stereoVolumeLDelta = (stereoVolumeLEnd - tone.stereoVolumeLStart) / runLength;\r\n\t\ttone.stereoVolumeRDelta = (stereoVolumeREnd - tone.stereoVolumeRStart) / runLength;\r\n\r\n\t\tlet resetPhases: boolean = true;\r\n\t\tlet partsSinceStart: number = 0.0;\r\n\t\tlet intervalStart: number = 0.0;\r\n\t\tlet intervalEnd: number = 0.0;\r\n\t\tlet transitionVolumeStart: number = 1.0;\r\n\t\tlet transitionVolumeEnd: number = 1.0;\r\n\t\tlet chordVolumeStart: number = chordVolume;\r\n\t\tlet chordVolumeEnd: number = chordVolume;\r\n\t\tlet customVolumeStart: number = 0.0;\r\n\t\tlet customVolumeEnd: number = 0.0;\r\n\t\tlet decayTimeStart: number = 0.0;\r\n\t\tlet decayTimeEnd: number = 0.0;\r\n\r\n\t\tlet volumeReferencePitch: number;\r\n\t\tlet basePitch: number;\r\n\t\tlet baseVolume: number;\r\n\t\tlet pitchDamping: number;\r\n\t\tif (instrument.type == InstrumentType.spectrum) {\r\n\t\t\tif (isNoiseChannel) {\r\n\t\t\t\tbasePitch = Config.spectrumBasePitch;\r\n\t\t\t\tbaseVolume = 0.6; // Note: spectrum is louder for drum channels than pitch channels!\r\n\t\t\t} else {\r\n\t\t\t\t// basePitch = Config.keys[song.key].basePitch; // key relic (TODO), more following\r\n\t\t\t\tbasePitch = 0;\r\n\t\t\t\tbaseVolume = 0.3;\r\n\t\t\t}\r\n\t\t\tvolumeReferencePitch = Config.spectrumBasePitch;\r\n\t\t\tpitchDamping = 28;\r\n\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\tbasePitch = Config.spectrumBasePitch;\r\n\t\t\tbaseVolume = 0.45;\r\n\t\t\tvolumeReferencePitch = basePitch;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\tbasePitch = Config.chipNoises[instrument.chipNoise].basePitch;\r\n\t\t\tbaseVolume = 0.19;\r\n\t\t\tvolumeReferencePitch = basePitch;\r\n\t\t\tpitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\r\n\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.03;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.03375; // looks low compared to drums, but it's doubled for chorus and drums tend to be loud anyway.\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.025;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t// basePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbasePitch = 0;\r\n\t\t\tbaseVolume = 0.04725;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\tbaseVolume = 1.0;\r\n\t\t\tvolumeReferencePitch = 0;\r\n\t\t\tpitchDamping = 1.0;\r\n\t\t\tbasePitch = 0;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unknown instrument type in computeTone.\");\r\n\t\t}\r\n\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\ttone.phaseDeltas[i] = 0.0;\r\n\t\t\ttone.volumeStarts[i] = 0.0;\r\n\t\t\ttone.volumeDeltas[i] = 0.0;\r\n\t\t}\r\n\r\n\t\tif (released) {\r\n\t\t\tconst ticksSoFar: number = tone.noteLengthTicks + tone.ticksSinceReleased;\r\n\t\t\tconst startTicksSinceReleased: number = tone.ticksSinceReleased + startRatio;\r\n\t\t\tconst endTicksSinceReleased: number = tone.ticksSinceReleased + endRatio;\r\n\t\t\tconst startTick: number = tone.noteLengthTicks + startTicksSinceReleased;\r\n\t\t\tconst endTick: number = tone.noteLengthTicks + endTicksSinceReleased;\r\n\t\t\tconst toneTransition: Transition = tone.instrument.getTransition();\r\n\t\t\tresetPhases = false;\r\n\t\t\tpartsSinceStart = Math.floor(ticksSoFar / Config.ticksPerPart);\r\n\t\t\tintervalStart = intervalEnd = tone.lastInterval;\r\n\t\t\tcustomVolumeStart = customVolumeEnd = Synth.expressionToVolumeMult(tone.lastVolume);\r\n\t\t\ttransitionVolumeStart = Synth.expressionToVolumeMult((1.0 - startTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n\t\t\ttransitionVolumeEnd = Synth.expressionToVolumeMult((1.0 - endTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n\t\t\tdecayTimeStart = startTick / Config.ticksPerPart;\r\n\t\t\tdecayTimeEnd = endTick / Config.ticksPerPart;\r\n\r\n\t\t\tif (shouldFadeOutFast) {\r\n\t\t\t\ttransitionVolumeStart *= 1.0 - startRatio;\r\n\t\t\t\ttransitionVolumeEnd *= 1.0 - endRatio;\r\n\t\t\t}\r\n\t\t} else if (tone.note == null) {\r\n\t\t\ttransitionVolumeStart = transitionVolumeEnd = 1;\r\n\t\t\tcustomVolumeStart = customVolumeEnd = 1;\r\n\t\t\ttone.lastInterval = 0;\r\n\t\t\ttone.lastVolume = 6;\r\n\t\t\ttone.ticksSinceReleased = 0;\r\n\t\t\tresetPhases = false;\r\n\r\n\t\t\tconst heldTicksStart: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n\t\t\ttone.liveInputSamplesHeld += runLength;\r\n\t\t\tconst heldTicksEnd: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n\t\t\ttone.noteLengthTicks = heldTicksEnd;\r\n\t\t\tconst heldPartsStart: number = heldTicksStart / Config.ticksPerPart;\r\n\t\t\tconst heldPartsEnd: number = heldTicksEnd / Config.ticksPerPart;\r\n\t\t\tpartsSinceStart = Math.floor(heldPartsStart);\r\n\t\t\tdecayTimeStart = heldPartsStart;\r\n\t\t\tdecayTimeEnd = heldPartsEnd;\r\n\t\t} else {\r\n\t\t\tconst note: Note = tone.note;\r\n\t\t\tconst prevNote: Note | null = tone.prevNote;\r\n\t\t\tconst nextNote: Note | null = tone.nextNote;\r\n\r\n\t\t\tconst time: number = synth.part + synth.beat * Config.partsPerBeat;\r\n\t\t\tconst partsPerBar: number = Config.partsPerBeat * song.beatsPerBar;\r\n\t\t\tconst noteStart: number = tone.noteStart;// - Math.max(0, synth.tyingOver[channel] || 0);\r\n\t\t\tconst noteEnd: number = tone.noteEnd;\r\n\r\n\t\t\tpartsSinceStart = time - noteStart;\r\n\r\n\t\t\tlet endPinIndex: number;\r\n\t\t\tfor (endPinIndex = 1; endPinIndex < note.pins.length - 1; endPinIndex++) {\r\n\t\t\t\tif (note.pins[endPinIndex].time + note.start > time) break;\r\n\t\t\t}\r\n\t\t\tconst startPin: NotePin = note.pins[endPinIndex - 1];\r\n\t\t\tconst endPin: NotePin = note.pins[endPinIndex];\r\n\t\t\tconst noteStartTick: number = noteStart * Config.ticksPerPart;\r\n\t\t\tconst noteEndTick: number = noteEnd * Config.ticksPerPart;\r\n\t\t\tconst noteLengthTicks: number = noteEndTick - noteStartTick;\r\n\t\t\tconst pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\r\n\t\t\tconst pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\r\n\r\n\t\t\ttone.lastInterval = note.pins[note.pins.length - 1].interval;\r\n\t\t\ttone.lastVolume = note.pins[note.pins.length - 1].volume;\r\n\t\t\ttone.ticksSinceReleased = 0;\r\n\t\t\ttone.noteLengthTicks = noteLengthTicks;\r\n\r\n\t\t\tconst tickTimeStart: number = time * Config.ticksPerPart + synth.tick;\r\n\t\t\tconst tickTimeEnd: number = time * Config.ticksPerPart + synth.tick + 1;\r\n\t\t\tconst noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\r\n\t\t\tconst noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\r\n\t\t\tconst pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\r\n\t\t\tconst pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\r\n\t\t\tlet customVolumeTickStart: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioStart;\r\n\t\t\tlet customVolumeTickEnd: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioEnd;\r\n\t\t\tlet transitionVolumeTickStart: number = 1.0;\r\n\t\t\tlet transitionVolumeTickEnd: number = 1.0;\r\n\t\t\tlet chordVolumeTickStart: number = chordVolume;\r\n\t\t\tlet chordVolumeTickEnd: number = chordVolume;\r\n\t\t\tlet intervalTickStart: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n\t\t\tlet intervalTickEnd: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n\t\t\tlet decayTimeTickStart: number = partTimeTickStart - noteStart;\r\n\t\t\tlet decayTimeTickEnd: number = partTimeTickEnd - noteStart;\r\n\t\t\tresetPhases = (tickTimeStart + startRatio - noteStartTick == 0.0) || !toneWasActive;\r\n\r\n\t\t\t// if seamless, don't reset phases at start. (it's probably not necessary to constantly reset phases if there are no notes? Just do it once when note starts? But make sure that reset phases doesn't also reset stuff that this function did to set up the tone. Remember when the first run length was lost!\r\n\t\t\t// if slide, average the interval, decayTime, and custom volume at the endpoints and interpolate between over slide duration.\r\n\t\t\t// note that currently seamless and slide make different assumptions about whether a note at the end of a bar will connect with the next bar!\r\n\t\t\tconst maximumSlideTicks: number = noteLengthTicks * 0.5;\r\n\t\t\tif (treatAsSeamless && !transition.slides && note.start == 0) {\r\n\t\t\t\t// Special case for seamless, no-slide transition: assume the previous bar ends with another seamless note, don't reset tone history.\r\n\t\t\t\tresetPhases = !toneWasActive;\r\n\t\t\t} else if (treatAsSeamless && prevNote != null) {\r\n\t\t\t\tresetPhases = !toneWasActive;\r\n\t\t\t\tif (transition.slides) {\r\n\t\t\t\t\tconst slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n\t\t\t\t\tconst slideRatioStartTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickStart / slideTicks);\r\n\t\t\t\t\tconst slideRatioEndTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickEnd / slideTicks);\r\n\t\t\t\t\tconst intervalDiff: number = ((prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval) - tone.pitches[0]) * 0.5;\r\n\t\t\t\t\tconst volumeDiff: number = (prevNote.pins[prevNote.pins.length - 1].volume - note.pins[0].volume) * 0.5;\r\n\t\t\t\t\tconst decayTimeDiff: number = (prevNote.end - prevNote.start) * 0.5;\r\n\t\t\t\t\tintervalTickStart += slideRatioStartTick * intervalDiff;\r\n\t\t\t\t\tintervalTickEnd += slideRatioEndTick * intervalDiff;\r\n\t\t\t\t\tcustomVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n\t\t\t\t\tcustomVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n\t\t\t\t\tdecayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n\t\t\t\t\tdecayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n\t\t\t\t\tif (!chord.arpeggiates) {\r\n\t\t\t\t\t\tconst chordSizeDiff: number = (prevNote.pitches.length - tone.chordSize) * 0.5;\r\n\t\t\t\t\t\tchordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n\t\t\t\t\t\tchordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (treatAsSeamless && !transition.slides && note.end == partsPerBar) {\r\n\t\t\t\t// Special case for seamless, no-slide transition: assume the next bar starts with another seamless note, don't fade out.\r\n\t\t\t} else if (treatAsSeamless && nextNote != null) {\r\n\t\t\t\tif (transition.slides) {\r\n\t\t\t\t\tconst slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n\t\t\t\t\tconst slideRatioStartTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickStart) / slideTicks);\r\n\t\t\t\t\tconst slideRatioEndTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickEnd) / slideTicks);\r\n\t\t\t\t\tconst intervalDiff: number = (nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + note.pins[note.pins.length - 1].interval)) * 0.5;\r\n\t\t\t\t\tconst volumeDiff: number = (nextNote.pins[0].volume - note.pins[note.pins.length - 1].volume) * 0.5;\r\n\t\t\t\t\tconst decayTimeDiff: number = -(noteEnd - noteStart) * 0.5;\r\n\t\t\t\t\tintervalTickStart += slideRatioStartTick * intervalDiff;\r\n\t\t\t\t\tintervalTickEnd += slideRatioEndTick * intervalDiff;\r\n\t\t\t\t\tcustomVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n\t\t\t\t\tcustomVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n\t\t\t\t\tdecayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n\t\t\t\t\tdecayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n\t\t\t\t\tif (!chord.arpeggiates) {\r\n\t\t\t\t\t\tconst chordSizeDiff: number = (nextNote.pitches.length - tone.chordSize) * 0.5;\r\n\t\t\t\t\t\tchordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n\t\t\t\t\t\tchordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (!(transition.releases && synth.tyingOver[channel] < 0)) {\r\n\t\t\t\tconst releaseTicks: number = transition.releaseTicks;\r\n\t\t\t\tif (releaseTicks > 0.0) {\r\n\t\t\t\t\ttransitionVolumeTickStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / releaseTicks);\r\n\t\t\t\t\ttransitionVolumeTickEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / releaseTicks);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tintervalStart = intervalTickStart + (intervalTickEnd - intervalTickStart) * startRatio;\r\n\t\t\tintervalEnd = intervalTickStart + (intervalTickEnd - intervalTickStart) * endRatio;\r\n\t\t\tif (instrument.type != InstrumentType.mod) {\r\n\t\t\t\tcustomVolumeStart = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * startRatio);\r\n\t\t\t\tcustomVolumeEnd = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * endRatio);\r\n\t\t\t} else {\r\n\t\t\t\tcustomVolumeStart = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.max(0.0, startRatio);\r\n\t\t\t\tcustomVolumeEnd = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.min(1.0, endRatio);\r\n\t\t\t\ttone.customVolumeStart = customVolumeStart;\r\n\t\t\t\ttone.customVolumeEnd = customVolumeEnd;\r\n\t\t\t}\r\n\t\t\ttransitionVolumeStart = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * startRatio;\r\n\t\t\ttransitionVolumeEnd = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * endRatio;\r\n\t\t\tchordVolumeStart = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * startRatio;\r\n\t\t\tchordVolumeEnd = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * endRatio;\r\n\t\t\tdecayTimeStart = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * startRatio;\r\n\t\t\tdecayTimeEnd = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * endRatio;\r\n\t\t}\r\n\r\n\t\tconst sampleTime: number = 1.0 / synth.samplesPerSecond;\r\n\t\ttone.active = true;\r\n\r\n\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.fm || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.spectrum) {\r\n\r\n\t\t\tconst lfoEffectStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.LFOtime);\r\n\t\t\tconst lfoEffectEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.nextLFOtime);\r\n\r\n\t\t\tlet useVibratoStart: number = instrument.vibratoDepth;\r\n\t\t\tlet useVibratoEnd: number = instrument.vibratoDepth;\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstVibratoDepth, false, channel, instrumentIdx)) {\r\n\t\t\t\tuseVibratoStart = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tuseVibratoEnd = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\t// Only use vibrato properties if the instrument's vibrato is custom or mods are applied to it\r\n\t\t\tlet partsStart: number;\r\n\t\t\tlet partsEnd: number;\r\n\t\t\tconst activeVibratoDelayMods: boolean = synth.isModActive(ModSetting.mstVibratoDelay, false, channel, instrumentIdx);\r\n\t\t\tif (instrument.vibrato != Config.vibratos.length && !activeVibratoDelayMods) {\r\n\t\t\t\tpartsStart = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t\tpartsEnd = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet vibratoDelayStart: number = instrument.vibratoDelay;\r\n\t\t\t\tlet vibratoDelayEnd: number = instrument.vibratoDelay;\r\n\r\n\t\t\t\tif (activeVibratoDelayMods) {\r\n\t\t\t\t\tvibratoDelayStart = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, false);\r\n\t\t\t\t\tvibratoDelayEnd = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, true);\r\n\r\n\t\t\t\t\t// Special case - max vibrato delay means neeeeeever vibrato.\r\n\t\t\t\t\tif (vibratoDelayStart == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n\t\t\t\t\t\tvibratoDelayStart = Number.MAX_VALUE;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (vibratoDelayEnd == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n\t\t\t\t\t\tvibratoDelayEnd = Number.MAX_VALUE;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpartsStart = vibratoDelayStart;\r\n\t\t\t\tpartsEnd = vibratoDelayEnd;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst vibratoScaleStart: number = (partsSinceStart < partsStart) ? 0.0 : useVibratoStart;\r\n\t\t\tconst vibratoScaleEnd: number = (partsSinceStart < partsEnd) ? 0.0 : useVibratoEnd;\r\n\r\n\t\t\tconst vibratoStart: number = vibratoScaleStart * lfoEffectStart;\r\n\t\t\tconst vibratoEnd: number = vibratoScaleEnd * lfoEffectEnd;\r\n\t\t\tintervalStart += vibratoStart;\r\n\t\t\tintervalEnd += vibratoEnd;\r\n\t\t}\r\n\r\n\t\tif (!treatAsSeamless || (!(!transition.slides && tone.note != null && tone.note.start == 0) && !(tone.prevNote != null))) {\r\n\t\t\tconst attackSeconds: number = transition.attackSeconds;\r\n\t\t\tif (attackSeconds > 0.0) {\r\n\t\t\t\ttransitionVolumeStart *= Math.min(1.0, secondsPerPart * decayTimeStart / attackSeconds);\r\n\t\t\t\ttransitionVolumeEnd *= Math.min(1.0, secondsPerPart * decayTimeEnd / attackSeconds);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst instrumentVolumeMult: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\r\n\r\n\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\t// It's possible that the note will change while the user is editing it,\r\n\t\t\t// but the tone's pitches don't get updated because the tone has already\r\n\t\t\t// ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\r\n\t\t\ttone.drumsetPitch = tone.pitches[0];\r\n\t\t\tif (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\r\n\t\t\ttone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\r\n\t\t}\r\n\r\n\t\tlet filterCutModStart: number = instrument.filterCutoff;\r\n\t\tlet filterCutModEnd: number = instrument.filterCutoff;\r\n\t\tif (synth.isModActive(ModSetting.mstFilterCut, false, channel, instrumentIdx)) {\r\n\t\t\tfilterCutModStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, false), ModSetting.mstFilterCut);\r\n\t\t\tfilterCutModEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, true), ModSetting.mstFilterCut);\r\n\t\t}\r\n\r\n\t\tlet cutoffOctavesModStart: number;\r\n\t\tlet cutoffOctavesModEnd: number;\r\n\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\tcutoffOctavesModStart = 0;\r\n\t\t\tcutoffOctavesModEnd = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcutoffOctavesModStart = (filterCutModStart - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t\t\tcutoffOctavesModEnd = (filterCutModEnd - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t\t}\r\n\r\n\t\tconst filterEnvelope: Envelope = (instrument.type == InstrumentType.drumset) ? instrument.getDrumsetEnvelope(tone.drumsetPitch) : instrument.getFilterEnvelope();\r\n\t\tconst filterCutoffHzStart: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModStart);\r\n\t\tconst filterCutoffHzEnd: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModEnd);\r\n\t\tconst filterBaseStart: number = 2.0 * Math.sin(Math.PI * filterCutoffHzStart / synth.samplesPerSecond);\r\n\t\tconst filterBaseEnd: number = 2.0 * Math.sin(Math.PI * filterCutoffHzEnd / synth.samplesPerSecond);\r\n\t\tconst filterMin: number = 2.0 * Math.sin(Math.PI * Config.filterCutoffMinHz / synth.samplesPerSecond);\r\n\t\ttone.filter = filterBaseStart * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\tlet endFilter: number = filterBaseEnd * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\t\ttone.filter = Math.min(Config.filterMax, Math.max(filterMin, tone.filter));\r\n\t\tendFilter = Math.min(Config.filterMax, Math.max(filterMin, endFilter));\r\n\t\ttone.filterScale = Math.pow(endFilter / tone.filter, 1.0 / runLength);\r\n\r\n\t\tlet filterVolumeStart: number = Math.pow(0.5, cutoffOctavesModStart * 0.35);\r\n\t\tlet filterVolumeEnd: number = Math.pow(0.5, cutoffOctavesModEnd * 0.35);\r\n\r\n\t\ttone.filterResonanceStart = instrument.getFilterResonance();\r\n\t\ttone.filterResonanceDelta = 0.0;\r\n\r\n\t\tlet useFilterResonanceStart: number = instrument.filterResonance;\r\n\t\tlet useFilterResonanceEnd: number = instrument.filterResonance;\r\n\r\n\t\ttone.isFirstOrder = (instrument.type == InstrumentType.drumset) ? false : (useFilterResonanceStart == 0);\r\n\r\n\t\tif (synth.isModActive(ModSetting.mstFilterPeak, false, channel, instrumentIdx)) {\r\n\t\t\t// This flag is used to avoid the special casing when filter resonance == 0 without mods. So, it will sound a bit different,\r\n\t\t\t// but the effect and ability to smoothly modulate will be preserved.\r\n\t\t\ttone.isFirstOrder = false;\r\n\r\n\t\t\tuseFilterResonanceStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, false), ModSetting.mstFilterPeak);\r\n\t\t\tuseFilterResonanceEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, true), ModSetting.mstFilterPeak);\r\n\r\n\t\t\t// Also set cut in the tone.\r\n\t\t\ttone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\t\t\tconst filterResonanceEnd: number = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceEnd - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\r\n\t\t\t// Just a linear delta. Could get messy since it's not an amazing approximation of sqrt?\r\n\t\t\ttone.filterResonanceDelta = (filterResonanceEnd - tone.filterResonanceStart) / runLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Still need to compute this, mods or no. This calc is delegated to the tone level instead of the synth level, a notable difference from beepbox.\r\n\t\t\t// No functional difference though.\r\n\t\t\ttone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\t\t}\r\n\r\n\t\tif (tone.isFirstOrder == false) {\r\n\t\t\tfilterVolumeStart = Math.pow(filterVolumeStart, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceStart - 1));\r\n\t\t\tfilterVolumeEnd = Math.pow(filterVolumeEnd, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceEnd - 1));\r\n\t\t}\r\n\t\tif (filterEnvelope.type == EnvelopeType.decay) {\r\n\t\t\tfilterVolumeStart *= (1.25 + .025 * filterEnvelope.speed);\r\n\t\t\tfilterVolumeEnd *= (1.25 + .025 * filterEnvelope.speed);\r\n\t\t} else if (filterEnvelope.type == EnvelopeType.twang) {\r\n\t\t\tfilterVolumeStart *= (1 + .02 * filterEnvelope.speed);\r\n\t\t\tfilterVolumeEnd *= (1 + .02 * filterEnvelope.speed);\r\n\t\t}\r\n\r\n\t\tif (resetPhases) {\r\n\t\t\ttone.reset();\r\n\t\t}\r\n\r\n\t\tif (instrument.type == InstrumentType.fm) {\r\n\t\t\t// phase modulation!\r\n\r\n\t\t\tlet sineVolumeBoostStart: number = 1.0;\r\n\t\t\tlet sineVolumeBoostEnd: number = 1.0;\r\n\t\t\tlet totalCarrierVolumeStart: number = 0.0;\r\n\t\t\tlet totalCarrierVolumeEnd: number = 0.0;\r\n\r\n\t\t\tlet arpeggioInterval: number = 0;\r\n\t\t\tif (tone.pitchCount > 1 && !chord.harmonizes) {\r\n\t\t\t\tconst arpeggio: number = Math.floor((instrument.arpTime) / Config.ticksPerArpeggio);\r\n\t\t\t\tarpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n\t\t\t}\r\n\r\n\t\t\tlet detuneStart: number = instrument.detune / 25;\r\n\t\t\tlet detuneEnd: number = instrument.detune / 25;\r\n\t\t\tif (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n\t\t\t\tdetuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tdetuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n\t\t\t\tdetuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n\t\t\t\tdetuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tconst carrierCount: number = Config.algorithms[instrument.algorithm].carrierCount;\r\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\r\n\t\t\t\tconst associatedCarrierIndex: number = Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1;\r\n\t\t\t\tconst pitch: number = tone.pitches[!chord.harmonizes ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\r\n\t\t\t\tconst freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\r\n\t\t\t\tconst interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\r\n\t\t\t\tconst startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale + interval;\r\n\t\t\t\tconst startFreq: number = freqMult * (Instrument.frequencyFromPitch(startPitch, song.centerFrequency, song.edo)) + Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n\r\n\t\t\t\ttone.phaseDeltas[i] = startFreq * sampleTime * Config.sineWaveLength;\r\n\r\n\t\t\t\tlet amplitudeStart: number = instrument.operators[i].amplitude;\r\n\t\t\t\tlet amplitudeEnd: number = instrument.operators[i].amplitude;\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx)) {\r\n\t\t\t\t\tamplitudeStart *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, false) / 15.0;\r\n\t\t\t\t\tamplitudeEnd *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, true) / 15.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\r\n\t\t\t\tconst amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\r\n\t\t\t\tconst amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\t\t\t\tconst amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\t\t\t\tlet volumeStart: number = amplitudeMultStart;\r\n\t\t\t\tlet volumeEnd: number = amplitudeMultEnd;\r\n\r\n\t\t\t\t// Check for mod-related volume delta\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t// Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n\t\t\t\t\tconst startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n\t\t\t\t\tconst endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n\t\t\t\t\tvolumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n\t\t\t\t\tvolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check for SONG mod-related volume delta\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n\t\t\t\t\tvolumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n\t\t\t\t\tvolumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (i < carrierCount) {\r\n\t\t\t\t\t// carrier\r\n\t\t\t\t\tconst endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale + interval;\r\n\t\t\t\t\tconst pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\t\t\tconst pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\t\t\tvolumeStart *= pitchVolumeStart;\r\n\t\t\t\t\tvolumeEnd *= pitchVolumeEnd;\r\n\r\n\t\t\t\t\ttotalCarrierVolumeStart += amplitudeCurveStart;\r\n\t\t\t\t\ttotalCarrierVolumeEnd += amplitudeCurveEnd;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// modulator\r\n\t\t\t\t\tvolumeStart *= Config.sineWaveLength * 1.5;\r\n\t\t\t\t\tvolumeEnd *= Config.sineWaveLength * 1.5;\r\n\r\n\t\t\t\t\tsineVolumeBoostStart *= 1.0 - Math.min(1.0, amplitudeStart / 15);\r\n\t\t\t\t\tsineVolumeBoostEnd *= 1.0 - Math.min(1.0, amplitudeEnd / 15);\r\n\t\t\t\t}\r\n\t\t\t\tconst operatorEnvelope: Envelope = Config.envelopes[instrument.operators[i].envelope];\r\n\r\n\t\t\t\tvolumeStart *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\t\tvolumeEnd *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n\t\t\t\ttone.volumeStarts[i] = volumeStart;\r\n\t\t\t\ttone.volumeDeltas[i] = (volumeEnd - volumeStart) / runLength;\r\n\t\t\t}\r\n\r\n\t\t\tlet useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\r\n\t\t\tlet useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\r\n\t\t\tif (synth.isModActive(ModSetting.mstFMFeedback, false, channel, instrumentIdx)) {\r\n\t\t\t\tuseFeedbackAmplitudeStart *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, false) / 15.0;\r\n\t\t\t\tuseFeedbackAmplitudeEnd *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, true) / 15.0;\r\n\t\t\t}\r\n\r\n\t\t\tconst feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\r\n\t\t\tconst feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\r\n\t\t\tconst feedbackEnvelope: Envelope = Config.envelopes[instrument.feedbackEnvelope];\r\n\t\t\tlet feedbackStart: number = feedbackAmplitudeStart * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\tlet feedbackEnd: number = feedbackAmplitudeEnd * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\t\t\ttone.feedbackMult = feedbackStart;\r\n\t\t\ttone.feedbackDelta = (feedbackEnd - tone.feedbackMult) / runLength;\r\n\r\n\t\t\tconst volumeMult: number = baseVolume * instrumentVolumeMult;\r\n\t\t\ttone.volumeStart = filterVolumeStart * volumeMult * transitionVolumeStart * chordVolumeStart;\r\n\t\t\tconst volumeEnd: number = filterVolumeEnd * volumeMult * transitionVolumeEnd * chordVolumeEnd;\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n\t\t\tsineVolumeBoostStart *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeStart / 15.0)) - 1.0) / 3.0;\r\n\t\t\tsineVolumeBoostEnd *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeEnd / 15.0)) - 1.0) / 3.0;\r\n\t\t\tsineVolumeBoostStart *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeStart - 1) / 2.0);\r\n\t\t\tsineVolumeBoostEnd *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeEnd - 1) / 2.0);\r\n\t\t\ttone.volumeStart *= 1.0 + sineVolumeBoostStart * 3.0;\r\n\t\t\ttone.volumeDelta *= 1.0 + (sineVolumeBoostStart + sineVolumeBoostEnd) * 1.5; // Volume boosts are averaged such that delta brings you to next target start boost.\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\t// Modulator value is used for data, so don't actually compute audio nonsense for it.\r\n\t\t\ttone.volumeStart = transitionVolumeStart;\r\n\t\t\tlet volumeEnd: number = transitionVolumeEnd;\r\n\r\n\t\t\ttone.volumeStart *= customVolumeStart;\r\n\t\t\tvolumeEnd *= customVolumeEnd;\r\n\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n\t\t} else {\r\n\t\t\tlet detuneStart: number = instrument.detune / 25;\r\n\t\t\tlet detuneEnd: number = instrument.detune / 25;\r\n\t\t\tif (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n\t\t\t\tdetuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tdetuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n\t\t\t\tdetuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n\t\t\t\tdetuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tlet pitch: number = tone.pitches[0];\r\n\r\n\t\t\tif (tone.pitchCount > 1) {\r\n\t\t\t\tconst arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\r\n\t\t\t\tif (chord.harmonizes) {\r\n\t\t\t\t\tconst intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n\t\t\t\t\ttone.intervalMult = Math.pow(2.0, intervalOffset / song.edo);\r\n\t\t\t\t\ttone.intervalVolumeMult = Math.pow(2.0, -intervalOffset / pitchDamping);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale;\r\n\t\t\tconst endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale;\r\n\t\t\tconst startFreq: number = Instrument.frequencyFromPitch(startPitch, song.centerFrequency, song.edo);\r\n\t\t\tconst pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\tconst pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\tlet settingsVolumeMultStart: number = baseVolume * filterVolumeStart;\r\n\t\t\tlet settingsVolumeMultEnd: number = baseVolume * filterVolumeEnd;\r\n\t\t\tif (instrument.type == InstrumentType.noise) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.chipNoises[instrument.chipNoise].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.chipNoises[instrument.chipNoise].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.chipWaves[instrument.chipWave].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.chipWaves[instrument.chipWave].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.intervals[instrument.interval].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.intervals[instrument.interval].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.pwm) {\r\n\r\n\t\t\t\t// Check for PWM mods to this instrument\r\n\t\t\t\tlet pulseWidthModStart: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n\t\t\t\tlet pulseWidthModEnd: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstPulseWidth, false, channel, instrumentIdx)) {\r\n\t\t\t\t\tpulseWidthModStart = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, false)) / (Config.pulseWidthRange * 2);\r\n\t\t\t\t\tpulseWidthModEnd = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, true)) / (Config.pulseWidthRange * 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst pulseEnvelope: Envelope = Config.envelopes[instrument.pulseEnvelope];\r\n\t\t\t\tconst pulseWidthStart: number = pulseWidthModStart * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\t\tconst pulseWidthEnd: number = pulseWidthModEnd * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n\t\t\t\ttone.pulseWidth = pulseWidthStart;\r\n\t\t\t\ttone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / runLength;\r\n\t\t\t}\r\n\r\n\t\t\ttone.phaseDeltas[0] = startFreq * sampleTime;\r\n\r\n\t\t\ttone.volumeStart = transitionVolumeStart * chordVolumeStart * pitchVolumeStart * settingsVolumeMultStart * instrumentVolumeMult;\r\n\t\t\tlet volumeEnd: number = transitionVolumeEnd * chordVolumeEnd * pitchVolumeEnd * settingsVolumeMultEnd * instrumentVolumeMult;\r\n\r\n\t\t\tif (filterEnvelope.type != EnvelopeType.custom && (instrument.type != InstrumentType.pwm || Config.envelopes[instrument.pulseEnvelope].type != EnvelopeType.custom)) {\r\n\t\t\t\ttone.volumeStart *= customVolumeStart;\r\n\t\t\t\tvolumeEnd *= customVolumeEnd;\r\n\t\t\t}\r\n\r\n\t\t\t// Check for mod-related volume delta\r\n\t\t\tif (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n\t\t\t\t// Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n\t\t\t\tconst startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n\t\t\t\tconst endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n\t\t\t\ttone.volumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n\t\t\t\tvolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n\t\t\t}\r\n\t\t\t// Check for SONG mod-related volume delta\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n\t\t\t\ttone.volumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n\t\t\t\tvolumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n\t\t\t}\r\n\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\t\t}\r\n\r\n\t\ttone.phaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / song.edo) / runLength);\r\n\t}\r\n\r\n\tpublic static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\r\n\t\tlet effect: number = 0;\r\n\t\tfor (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\r\n\t\t\teffect += Math.sin(Math.PI * 2 * secondsIntoBar / vibratoPeriodSeconds);\r\n\t\t}\r\n\t\treturn effect;\r\n\t}\r\n\r\n\tprivate static readonly fmSynthFunctionCache: Dictionary<Function> = {};\r\n\r\n\tprivate static getInstrumentSynthFunction(instrument: Instrument): Function {\r\n\t\tif (instrument.type == InstrumentType.fm) {\r\n\t\t\tconst fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\r\n\t\t\tif (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\r\n\t\t\t\tconst synthSource: string[] = [];\r\n\r\n\t\t\t\tfor (const line of Synth.fmSourceTemplate) {\r\n\t\t\t\t\tif (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n\t\t\t\t\t\tconst outputs: string[] = [];\r\n\t\t\t\t\t\tfor (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\r\n\t\t\t\t\t\t\toutputs.push(\"operator\" + j + \"Scaled\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsynthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n\t\t\t\t\t} else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n\t\t\t\t\t\tfor (let j: number = Config.operatorCount - 1; j >= 0; j--) {\r\n\t\t\t\t\t\t\tfor (const operatorLine of Synth.operatorSourceTemplate) {\r\n\t\t\t\t\t\t\t\tif (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n\t\t\t\t\t\t\t\t\tlet modulators = \"\";\r\n\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\r\n\t\t\t\t\t\t\t\t\t\tmodulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tconst feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\r\n\t\t\t\t\t\t\t\t\tif (feedbackIndices.length > 0) {\r\n\t\t\t\t\t\t\t\t\t\tmodulators += \" + feedbackMult * (\";\r\n\t\t\t\t\t\t\t\t\t\tconst feedbacks: string[] = [];\r\n\t\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of feedbackIndices) {\r\n\t\t\t\t\t\t\t\t\t\t\tfeedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tmodulators += feedbacks.join(\" + \") + \")\";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (line.indexOf(\"#\") != -1) {\r\n\t\t\t\t\t\tfor (let j = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\t\t\t\tsynthSource.push(line.replace(/\\#/g, j + \"\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsynthSource.push(line);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//console.log(synthSource.join(\"\\n\"));\r\n\r\n\t\t\t\tSynth.fmSynthFunctionCache[fingerprint] = new Function(\"synth\", \"data\", \"stereoBufferIndex\", \"stereoBufferLength\", \"runLength\", \"tone\", \"instrument\", synthSource.join(\"\\n\"));\r\n\t\t\t}\r\n\t\t\treturn Synth.fmSynthFunctionCache[fingerprint];\r\n\t\t} else if (instrument.type == InstrumentType.chip) {\r\n\t\t\treturn Synth.chipSynth;\r\n\t\t} else if (instrument.type == InstrumentType.customChipWave) {\r\n\t\t\treturn Synth.chipSynth;\r\n\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\treturn Synth.harmonicsSynth;\r\n\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\treturn Synth.pulseWidthSynth;\r\n\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\treturn Synth.noiseSynth;\r\n\t\t} else if (instrument.type == InstrumentType.spectrum) {\r\n\t\t\treturn Synth.spectrumSynth;\r\n\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\treturn Synth.drumsetSynth;\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\treturn Synth.modSynth;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type: \" + instrument.type);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static chipSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument, edo: number): void {\r\n\t\tvar wave: Float64Array;\r\n\t\tvar volumeScale: number;\r\n\r\n\t\tconst isCustomWave: boolean = (instrument.type == InstrumentType.customChipWave);\r\n\r\n\t\tif (!isCustomWave) {\r\n\t\t\twave = Config.chipWaves[instrument.chipWave].samples;\r\n\t\t\tvolumeScale = 1.0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\twave = instrument.customChipWaveIntegral;\r\n\t\t\t// Integrals for custom chip wave can get rather big. This \"zero point\" can be config'ed later.\r\n\t\t\tvolumeScale = 0.1;\r\n\t\t}\r\n\r\n\t\tconst waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n\t\tconst intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / edo);\r\n\t\tconst intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / edo) * tone.intervalMult;\r\n\t\tconst intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n\t\tif (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n\t\tconst deltaRatio: number = intervalB / intervalA;\r\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n\t\tlet phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\tlet prevWaveIntegralA: number = wave[indexA];\r\n\t\tlet prevWaveIntegralB: number = wave[indexB];\r\n\t\tprevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n\t\tprevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\t//console.log(\"S: \" + stereoBufferIndex + \" P: \" + stopIndex);\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tphaseA += phaseDeltaA;\r\n\t\t\tphaseB += phaseDeltaB;\r\n\r\n\t\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\r\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\r\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\t\tnextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n\t\t\tnextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n\t\t\tlet waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n\t\t\tlet waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\r\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\r\n\r\n\t\t\tconst combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDeltaA *= phaseDeltaScale;\r\n\t\t\tphaseDeltaB *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume * volumeScale;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\t//debugString += \",\" + data.subarray(stereoBufferIndex - runLength, stereoBufferIndex).toString();\r\n\t\t//console.log(stereoBufferIndex);\r\n\r\n\t\ttone.phases[0] = phaseA / waveLength;\r\n\t\ttone.phases[1] = phaseB / waveLength;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\r\n\t}\r\n\r\n\r\n\tprivate static harmonicsSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument, edo: number): void {\r\n\t\tconst wave: Float32Array = instrument.harmonicsWave.getCustomWave();\r\n\t\tconst waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n\t\tconst intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / edo);\r\n\t\tconst intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / edo) * tone.intervalMult;\r\n\t\tconst intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n\t\tif (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n\t\tconst deltaRatio: number = intervalB / intervalA;\r\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n\t\tlet phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\tlet prevWaveIntegralA: number = wave[indexA];\r\n\t\tlet prevWaveIntegralB: number = wave[indexB];\r\n\t\tprevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n\t\tprevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tphaseA += phaseDeltaA;\r\n\t\t\tphaseB += phaseDeltaB;\r\n\r\n\t\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\r\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\r\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\t\tnextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n\t\t\tnextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n\t\t\tlet waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n\t\t\tlet waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\r\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\r\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\r\n\r\n\t\t\tconst combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDeltaA *= phaseDeltaScale;\r\n\t\t\tphaseDeltaB *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phaseA / waveLength;\r\n\t\ttone.phases[1] = phaseB / waveLength;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static pulseWidthSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phase: number = (tone.phases[0] % 1);\r\n\r\n\t\tlet pulseWidth: number = tone.pulseWidth;\r\n\t\tconst pulseWidthDelta: number = tone.pulseWidthDelta;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tconst sawPhaseA: number = phase % 1;\r\n\t\t\tconst sawPhaseB: number = (phase + pulseWidth) % 1;\r\n\r\n\t\t\tlet pulseWave: number = sawPhaseB - sawPhaseA;\r\n\r\n\t\t\t// This a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing.\r\n\t\t\tif (sawPhaseA < phaseDelta) {\r\n\t\t\t\tvar t = sawPhaseA / phaseDelta;\r\n\t\t\t\tpulseWave += (t + t - t * t - 1) * 0.5;\r\n\t\t\t} else if (sawPhaseA > 1.0 - phaseDelta) {\r\n\t\t\t\tvar t = (sawPhaseA - 1.0) / phaseDelta;\r\n\t\t\t\tpulseWave += (t + t + t * t + 1) * 0.5;\r\n\t\t\t}\r\n\t\t\tif (sawPhaseB < phaseDelta) {\r\n\t\t\t\tvar t = sawPhaseB / phaseDelta;\r\n\t\t\t\tpulseWave -= (t + t - t * t - 1) * 0.5;\r\n\t\t\t} else if (sawPhaseB > 1.0 - phaseDelta) {\r\n\t\t\t\tvar t = (sawPhaseB - 1.0) / phaseDelta;\r\n\t\t\t\tpulseWave -= (t + t + t * t + 1) * 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (pulseWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tpulseWidth += pulseWidthDelta;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static fmSourceTemplate: string[] = (`\r\nconst sineWave = beepbox.Config.sineWave;\r\n\r\nlet phaseDeltaScale = +tone.phaseDeltaScale;\r\n// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\nlet operator#Phase\t   = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\r\nlet operator#PhaseDelta  = +tone.phaseDeltas[#];\r\nlet operator#OutputMult  = +tone.volumeStarts[#];\r\nconst operator#OutputDelta = +tone.volumeDeltas[#];\r\nlet operator#Output\t  = +tone.feedbackOutputs[#];\r\nlet feedbackMult\t\t = +tone.feedbackMult;\r\nconst feedbackDelta\t\t= +tone.feedbackDelta;\r\nlet volume = +tone.volumeStart;\r\nconst volumeDelta = +tone.volumeDelta;\r\n\r\nconst isFirstOrder = tone.isFirstOrder;\r\nlet filter1 = +tone.filter;\r\nlet filter2 = isFirstOrder ? 1.0 : filter1;\r\nconst filterScale1 = +tone.filterScale;\r\nconst filterScale2 = isFirstOrder ? 1.0 : filterScale1;\r\nlet filterResonance = tone.filterResonanceStart;\r\nlet filterResonanceDelta = tone.filterResonanceDelta;\r\nlet filterSample0 = +tone.filterSample0;\r\nlet filterSample1 = +tone.filterSample1;\r\n\r\nconst stopIndex = stereoBufferIndex + runLength;\r\nstereoBufferIndex += tone.stereoOffset;\r\nlet stereoVolumeL = tone.stereoVolumeLStart;\r\nlet stereoVolumeLDelta = tone.stereoVolumeLDelta;\r\nlet stereoVolumeR = tone.stereoVolumeRStart;\r\nlet stereoVolumeRDelta = tone.stereoVolumeRDelta;\r\nlet stereoDelay = tone.stereoDelayStart;\r\nlet stereoDelayDelta = tone.stereoDelayDelta;\r\nlet delays = [];\r\nwhile (stereoBufferIndex < stopIndex) {\r\n// INSERT OPERATOR COMPUTATION HERE\r\nconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\r\nconst feedback = filterResonance + filterResonance / (1.0 - filter1);\r\nfilterSample0 += filter1 * (fmOutput - filterSample0 + feedback * (filterSample0 - filterSample1));\r\nfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\nfeedbackMult += feedbackDelta;\r\noperator#OutputMult += operator#OutputDelta;\r\noperator#Phase += operator#PhaseDelta;\r\noperator#PhaseDelta *= phaseDeltaScale;\r\nfilter1 *= filterScale1;\r\nfilter2 *= filterScale2;\r\nfilterResonance += filterResonanceDelta;\r\n\r\nconst output = filterSample1 * volume;\r\nvolume += volumeDelta;\r\n\r\n//const absStereoDelay: number = Math.abs(stereoDelay);\r\n//const fracStereoDelay: number = absStereoDelay % 1;\r\n//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\ndelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\ndata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\ndata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\ndata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\ndata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\nstereoVolumeL += stereoVolumeLDelta;\r\nstereoVolumeR += stereoVolumeRDelta;\r\nstereoDelay += stereoDelayDelta;\r\n\r\nstereoBufferIndex += 2;\r\n}\r\n\r\ntone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\ntone.feedbackOutputs[#] = operator#Output;\r\n\r\nconst epsilon = (1.0e-24);\r\nif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\nif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\ntone.filterSample0 = filterSample0;\r\ntone.filterSample1 = filterSample1;\r\n`).split(\"\\n\");\r\n\r\n\tprivate static operatorSourceTemplate: string[] = (`\r\nconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\nconst operator#PhaseInt = operator#PhaseMix|0;\r\nconst operator#Index\t= operator#PhaseInt & ` + Config.sineWaveMask + `;\r\nconst operator#Sample   = sineWave[operator#Index];\r\noperator#Output\t   = operator#Sample + (sineWave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\nconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n`).split(\"\\n\");\r\n\r\n\tprivate static noiseSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumWave();\r\n\t\tlet phaseDelta: number = +tone.phaseDeltas[0];\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\tif (tone.phases[0] == 0) {\r\n\t\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\t\tphase = Math.random() * Config.chipNoiseLength;\r\n\t\t}\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst pitchRelativefilter: number = Math.min(1.0, tone.phaseDeltas[0] * Config.chipNoises[instrument.chipNoise].pitchFilterMult);\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst waveSample: number = wave[phase & 0x7fff];\r\n\r\n\t\t\tsample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static spectrumSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumWave();\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] * (1 << 7);\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\tif (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n\t\tconst pitchRelativefilter: number = Math.min(1.0, phaseDelta);\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst phaseInt: number = phase | 0;\r\n\t\t\tconst index: number = phaseInt & 0x7fff;\r\n\t\t\tlet waveSample: number = wave[index];\r\n\t\t\tconst phaseRatio: number = phase - phaseInt;\r\n\t\t\twaveSample += (wave[index + 1] - waveSample) * phaseRatio;\r\n\r\n\t\t\tsample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static drumsetSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument, edo: number): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumsetWave(tone.drumsetPitch, edo);\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] / Instrument.drumsetIndexReferenceDelta(tone.drumsetPitch);\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\tif (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst phaseInt: number = phase | 0;\r\n\t\t\tconst index: number = phaseInt & 0x7fff;\r\n\t\t\tsample = wave[index];\r\n\t\t\tconst phaseRatio: number = phase - phaseInt;\r\n\t\t\tsample += (wave[index + 1] - sample) * phaseRatio;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static modSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\t// Note: present modulator value is tone.volumeStart.\r\n\r\n\t\tif (!synth.song) return;\r\n\r\n\t\tlet mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\t\tlet setting: ModSetting = instrument.modSettings[mod];\r\n\r\n\t\tsynth.setModValue(tone.customVolumeStart, tone.customVolumeEnd, mod, instrument, setting);\r\n\r\n\t\t// Reset arps, but only at the start of the note\r\n\t\tif (setting == ModSetting.mstResetArpeggio && synth.tick == 0 && tone.noteStart == synth.beat * Config.partsPerBeat + synth.part) {\r\n\t\t\tsynth.song.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].arpTime = 0;\r\n\t\t}\r\n\t\telse if (setting == ModSetting.mstNextBar) {\r\n\t\t\tsynth.wantToSkip = true;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static findRandomZeroCrossing(wave: Float32Array): number {\r\n\t\tlet phase: number = Math.random() * Config.chipNoiseLength;\r\n\r\n\t\t// Spectrum and drumset waves sounds best when they start at a zero crossing,\r\n\t\t// otherwise they pop. Try to find a zero crossing.\r\n\t\tlet indexPrev: number = phase & 0x7fff;\r\n\t\tlet wavePrev: number = wave[indexPrev];\r\n\t\tconst stride: number = 16;\r\n\t\tfor (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\r\n\t\t\tconst indexNext: number = (indexPrev + stride) & 0x7fff;\r\n\t\t\tconst waveNext: number = wave[indexNext];\r\n\t\t\tif (wavePrev * waveNext <= 0.0) {\r\n\t\t\t\t// Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\r\n\t\t\t\tfor (let i: number = 0; i < 16; i++) {\r\n\t\t\t\t\tconst innerIndexNext: number = (indexPrev + 1) & 0x7fff;\r\n\t\t\t\t\tconst innerWaveNext: number = wave[innerIndexNext];\r\n\t\t\t\t\tif (wavePrev * innerWaveNext <= 0.0) {\r\n\t\t\t\t\t\t// Found the zero crossing again! Now let's find the exact intersection.\r\n\t\t\t\t\t\tconst slope: number = innerWaveNext - wavePrev;\r\n\t\t\t\t\t\tphase = indexPrev;\r\n\t\t\t\t\t\tif (Math.abs(slope) > 0.00000001) {\r\n\t\t\t\t\t\t\tphase += -wavePrev / slope;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tphase = Math.max(0, phase) % Config.chipNoiseLength;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tindexPrev = innerIndexNext;\r\n\t\t\t\t\t\twavePrev = innerWaveNext;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tindexPrev = indexNext;\r\n\t\t\t\twavePrev = waveNext;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn phase;\r\n\t}\r\n\r\n\tpublic static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\r\n\t\treturn (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\r\n\t}\r\n\tpublic static volumeMultToInstrumentVolume(volumeMult: number): number {\r\n\t\treturn (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\r\n\t}\r\n\tpublic static expressionToVolumeMult(expression: number): number {\r\n\t\treturn Math.pow(Math.max(0.0, expression) / 6.0, 1.5);\r\n\t}\r\n\tpublic static volumeMultToExpression(volumeMult: number): number {\r\n\t\treturn Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * 6.0;\r\n\t}\r\n\r\n\tprivate getSamplesPerTick(): number {\r\n\t\tif (this.song == null) return 0;\r\n\t\tlet beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n\t\tif (this.isModActive(ModSetting.mstTempo, true)) {\r\n\t\t\tbeatsPerMinute = this.getModValue(ModSetting.mstTempo, true);\r\n\t\t}\r\n\t\treturn this.getSamplesPerTickSpecificBPM(beatsPerMinute);\r\n\t}\r\n\r\n\tprivate getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\r\n\t\tconst beatsPerSecond: number = beatsPerMinute / 60.0;\r\n\t\tconst partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\r\n\t\tconst tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\r\n\t\treturn this.samplesPerSecond / tickPerSecond;\r\n\t}\r\n}\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\r\n//}\r\n"]}