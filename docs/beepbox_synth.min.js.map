{"version":3,"sources":["../src/synth/SynthConfig.ts","../src/editor/EditorConfig.ts","../src/synth/FFT.ts","../src/synth/Deque.ts","../src/synth/synth.ts"],"names":["Config","centerWave","wave","sum","i","length","average","cumulative","wavePrev","push","Float64Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","getDrumWave","index","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","samples","Float32Array","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","Error","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","pow","highIndex","min","retroWave","combinedAmplitude","lerped","log","LN2","amplitude","spectrumMax","radians","PI","cos","sin","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","dictionary","value","name","result","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","reverbRange","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentsPerChannelMin","instrumentsPerChannelMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipWaves","volume","pitchFilterMult","isSoft","filterCutoffMaxHz","filterCutoffMinHz","filterMax","filterMaxResonance","filterCutoffRange","filterResonanceRange","transitions","isSeamless","attackSeconds","releases","releaseTicks","slides","slideTicks","vibratos","type","delayParts","vibratoTypes","periodsSeconds","period","arpSpeedScale","intervals","spread","offset","sign","effectsNames","volumeRange","volumeLogScale","panCenter","panMax","detuneMin","detuneMax","songDetuneMin","songDetuneMax","chords","harmonizes","customInterval","arpeggiates","isCustomInterval","strumParts","maxChordSize","operatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","harmonicsControlPoints","harmonicsRendered","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthRange","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","modCount","pitchOctaves","maxScrollableOctaves","maxPitch","maximumTonesPerChannel","sineWaveLength","sineWaveMask","sineWave","generateSineWave","barEditorHeight","test","navigator","userAgent","EditorConfig","[object Object]","presetValue","categoryIndex","presetIndex","presetCategories","presets","program","category","preset","generalMidi","midiProgram","presetName","factor","countBits","n","isPowerOf2","round","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","customType","settings","transition","effects","chord","filterCutoffHz","filterResonance","filterEnvelope","interval","vibrato","isNoise","algorithm","feedbackType","feedbackAmplitude","feedbackEnvelope","operators","frequency","envelope","customChipWave","harmonics","midiSubharmonicOctaves","pulseWidth","pulseEnvelope","spectrum","drums","Deque","this","_capacity","_buffer","undefined","_mask","_offset","_count","element","_expandCapacity","set","get","popFront","popBack","oldBuffer","Array","size","base64IntToCharCode","base64CharCodeToInt","BitFieldReader","source","_bits","_readIndex","charCodeAt","minValue","minBits","numBits","readLongTail","read","BitFieldWriter","_index","writeLongTail","write","other","buffer","ceil","makeNotePin","time","clamp","max","val","validateRange","Note","pitch","start","end","fadeout","pitches","pins","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestVolume","pin","newNote","concat","Pattern","notes","instrument","note","clone","Operator","reset","SpectrumWave","isNoiseChannel","_wave","_waveIsReady","isHarmonic","lowestOctave","waveLength","highestOctave","falloffRatio","pitchTweak","controlPointToOctave","point","floor","value1","value2","octave1","octave2","HarmonicsWave","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","Instrument","isModChannel","chipWave","chipNoise","filterCutoff","vibratoDepth","vibratoSpeed","vibratoDelay","vibratoType","pan","panDelay","arpeggioSpeed","fastTwoNoteArp","tieNoteTransition","clicklessTransition","detune","LFOtime","nextLFOtime","arpTime","customChipWaveIntegral","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modChannels","modStatuses","modInstruments","modSettings","mod","ModStatus","msNone","ModSetting","mstNone","spectrumWave","instrumentObject","getChord","getFilterCutoffOctaves","getFilterEnvelope","getDrumsetEnvelope","operatorArray","operator","useSlowerRhythm","indexOf","valueOf","setTypeAndReset","oldTransitionNames","binary","sudden","smooth","transitionObject","findIndex","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","sustain sharp","sustain medium","sustain soft","decay sharp","legacyFilter","legacyEffectNames","drum","legacyWaveNames","triangle","square","pulse wide","pulse narrow","sawtooth","double saw","double pulse","spiky","plateau","legacyChorusNames","fifths","octaves","feedback","legacyEnvelopeNames","pluck 1","pluck 2","pluck 3","operatorObject","freq","frequencyFromPitch","drumsetIndexReferenceDelta","getCustomWave","_drumsetIndexToSpectrumOctave","Channel","octave","instruments","patterns","bars","muted","Song","string","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","mstMaxVols","Map","mstSongVolume","mstTempo","mstReverb","mstNextBar","mstInsVolume","mstPan","mstFilterCut","mstFilterPeak","mstFMSlider1","mstFMSlider2","mstFMSlider3","mstFMSlider4","mstFMFeedback","mstPulseWidth","mstDetune","mstVibratoDepth","mstSongDetune","mstVibratoSpeed","mstVibratoDelay","mstArpeggioSpeed","mstPanDelay","mstResetArpeggio","mstMaxValue","mstNewNoteVols","getNewNoteVolume","isMod","modChannel","modInstrument","cap","realToModValue","tempo","getVolumeCap","getVolumeCapForSetting","modSetting","fromBase64String","initToDefault","setting","pitchChannelCount","noiseChannelCount","modChannelCount","channel","andResetChannels","scale","key","loopStart","loopLength","reverb","beatsPerBar","barCount","patternsPerChannel","rhythm","instrumentsPerChannel","title","document","channelIndex","getChannelCount","pattern","bar","bits","_variant","_latestJummBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","o","spectrumBits","encodeBase64","harmonicsBits","neededBits","shapeBits","neededInstrumentBits","getChannelIsNoise","getChannelIsMod","instrumentIndex","modStatus","msForPitch","msForNoise","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","writePartDuration","clear","writePinCount","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","splice","unshift","pop","allPitches","pitchIndex","pitchIter","writePitchInterval","stringLength","lengthBase64","digits","prototype","maxApplyArgs","slice","compressed","charIndex","fromJsonObject","JSON","parse","substring","variant","_latestBeepboxVersion","_oldestBeepboxVersion","_oldestJummBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","command","instrumentChannelIterator","instrumentIndexIterator","toSetOctaves","useSlowerArpSpeed","songNameLength","decodeURIComponent","window","localStorage","getItem","instrumentType","legacyWaves","legacyEffects","legacyEnvelopes","effect","originalValue","nextValue","channelNameLength","byteCount","markCustomWaveDirty","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","newPattern","newNotes","useOldShape","shape","pinObj","pinCount","readPinCount","initialVolume","bendCount","pitchBend","readLegacyPartDuration","readPartDuration","readPitchInterval","intervalIter","shift","isBackwards","restLength","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","toJsonObject","patternArray","noteArray","volumeCap","pointArray","useVol","tick","forMod","points","sequenceArray","l","octaveScrollBar","sequence","format","_format","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","oldScaleNames","romani :)","romani :(","enigma","scaleName","letter","charAt","toUpperCase","symbol","toLowerCase","C","D","E","F","G","A","B","#","♯","b","♭","importedPartsPerBeat","maxInstruments","maxPatterns","maxBars","channelObject","newPitchChannels","newNoiseChannels","newModChannels","patternObject","maxNoteCount","noteObject","k","startInterval","pointObject","lowestPitch","highestPitch","patternIndex","getPattern","Tone","chordSize","drumsetPitch","prevNote","nextNote","prevNotePitchIndex","nextNotePitchIndex","active","noteStart","noteEnd","noteLengthTicks","ticksSinceReleased","liveInputSamplesHeld","lastInterval","lastVolume","stereoVolume1","stereoVolume2","stereoOffset","stereoDelay","sample","phases","phaseDeltas","volumeStarts","volumeDeltas","volumeStart","volumeDelta","phaseDeltaScale","pulseWidthDelta","filter","filterScale","filterSample0","filterSample1","vibratoScale","intervalMult","intervalVolumeMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","Synth","song","samplesPerSecond","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","loopRepeatCount","wantToSkip","playheadInternal","beat","part","tickSampleCountdown","isPlayingSong","liveInputEndTime","tonePool","activeTones","tyingOver","activeModTones","releasedTones","liveInputTones","limit","stereoBufferIndex","samplesForNone","samplesForReverb","samplesForChorus","samplesForChorusReverb","chorusDelayLine","chorusDelayPos","chorusPhase","reverbDelayLine","reverbDelayPos","reverbFeedback0","reverbFeedback1","reverbFeedback2","reverbFeedback3","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","synthesize","deactivateAudio","setSong","getInstrumentSynthFunction","warmUp","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","currentPart","currentBar","instrumentIdx","getPatternInstrument","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","msForSong","setModValue","playing","playhead","remainder","samplesPerTick","getSamplesPerTick","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","modValueToReal","ended","totalSamples","foundMod","find","sort","a","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getSamplesPerBar","getTotalBars","useLoopCount","volumeEnd","nextVal","channelAdjust","forSong","isModActive","AudioContext","webkitAudioContext","sampleRate","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","activateAudio","warmUpSynthesizer","computeLatestModValues","snapToBar","freeAllTones","oldBar","outputBufferLength","playSong","channelCount","idx","bufferIndex","pause","stereoBufferLength","chorusAngle","chorusRange","chorusOffset0","chorusOffset1","chorusOffset2","chorusOffset3","chorusOffset4","chorusOffset5","useReverb","getModValue","samplesLeftInBuffer","runLength","determineCurrentActiveTones","count","tone","playTone","skipBar","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","determineLiveInputTones","getTransition","freeReleasedTone","shouldFadeOutFast","chorusTap0Index","chorusTap1Index","chorusTap2Index","chorusTap3Index","chorusTap4Index","chorusTap5Index","chorusTap0Delta","chorusTap1Delta","chorusTap2Delta","chorusTap3Delta","chorusTap4Delta","chorusTap5Delta","runEnd","bufferIndexL","bufferIndexR","sampleForNoneL","sampleForNoneR","sampleForReverbL","sampleForReverbR","sampleForChorusL","sampleForChorusR","sampleForChorusReverbL","sampleForChorusReverbR","combinedChorusL","combinedChorusR","chorusTap0Ratio","chorusTap1Ratio","chorusTap2Ratio","chorusTap3Ratio","chorusTap4Ratio","chorusTap5Ratio","chorusTap0A","chorusTap0B","chorusTap1A","chorusTap1B","chorusTap2A","chorusTap2B","chorusTap3A","chorusTap3B","chorusTap4A","chorusTap4B","chorusTap5A","chorusSampleL","chorusSampleR","reverbDelayPos1","reverbDelayPos2","reverbDelayPos3","reverbSample0","reverbSample1","reverbSample2","reverbSample3","reverbTemp0","reverbTemp1","reverbTemp2","reverbTemp3","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","Number","isInteger","atEnd","carryOver","toneCount","targetBar","nextPattern","currNote","currVolume","p","releaseTone","freeTone","remove","resetEffects","epsilon","pushBack","pushFront","toneIndex","toneList","newTone","modChannelIdx","prevNotes","nextNotes","fillCount","syncTones","peakBack","noteStartAdjust","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","synthBuffer","computeTone","synthesizer","beats","customVolume","attack","synth","chordVolume","computeChordVolume","intervalScale","secondsPerPart","beatsPerPart","toneWasActive","treatAsSeamless","startPan","endPan","startPanDelay","endPanDelay","useStartPan","useEndPan","maxDelayStart","maxDelayEnd","delayEnd","stereoVolumeLEnd","stereoVolumeREnd","volumeReferencePitch","baseVolume","pitchDamping","resetPhases","partsSinceStart","intervalStart","intervalEnd","transitionVolumeStart","transitionVolumeEnd","chordVolumeStart","chordVolumeEnd","decayTimeStart","decayTimeEnd","ticksSoFar","startTicksSinceReleased","endTicksSinceReleased","startTick","endTick","toneTransition","expressionToVolumeMult","heldTicksStart","heldTicksEnd","heldPartsStart","heldPartsEnd","partsPerBar","endPinIndex","startPin","endPin","noteStartTick","pinStart","pinEnd","tickTimeStart","tickTimeEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","customVolumeTickStart","customVolumeTickEnd","transitionVolumeTickStart","transitionVolumeTickEnd","chordVolumeTickStart","chordVolumeTickEnd","intervalTickStart","intervalTickEnd","decayTimeTickStart","decayTimeTickEnd","maximumSlideTicks","slideRatioStartTick","slideRatioEndTick","intervalDiff","volumeDiff","decayTimeDiff","chordSizeDiff","sampleTime","lfoEffectStart","getLFOAmplitude","lfoEffectEnd","partsStart","partsEnd","useVibratoStart","useVibratoEnd","activeVibratoDelayMods","vibratoDelayStart","vibratoDelayEnd","MAX_VALUE","instrumentVolumeMult","instrumentVolumeToVolumeMult","pickMainInterval","cutoffOctavesModStart","cutoffOctavesModEnd","filterCutModStart","filterCutModEnd","filterCutoffHzStart","filterCutoffHzEnd","filterBaseStart","filterBaseEnd","filterMin","computeEnvelope","endFilter","filterVolumeStart","filterVolumeEnd","getFilterResonance","useFilterResonanceStart","useFilterResonanceEnd","filterResonanceEnd","sineVolumeBoostStart","sineVolumeBoostEnd","totalCarrierVolumeStart","totalCarrierVolumeEnd","arpeggioInterval","detuneStart","detuneEnd","associatedCarrierIndex","freqMult","startFreq","amplitudeStart","amplitudeEnd","amplitudeCurveStart","operatorAmplitudeCurve","amplitudeCurveEnd","startVal","endVal","endPitch","pitchVolumeStart","pitchVolumeEnd","operatorEnvelope","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","volumeMult","intervalOffset","settingsVolumeMultStart","settingsVolumeMultEnd","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","replace","join","operatorLine","operatorSourceTemplate","modulators","modulatorNumber","feedbackIndices","Function","chipSynth","harmonicsSynth","pulseWidthSynth","noiseSynth","spectrumSynth","drumsetSynth","modSynth","data","volumeScale","intervalA","intervalB","intervalSign","deltaRatio","phaseDeltaA","phaseDeltaB","phaseA","phaseB","filter1","filter2","filterScale1","filterScale2","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","prevWaveIntegralA","prevWaveIntegralB","delays","stereoVolumeL","stereoVolumeR","nextWaveIntegralA","nextWaveIntegralB","waveA","waveB","output","phaseDelta","phase","sawPhaseA","sawPhaseB","pulseWave","t","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","phaseRatio","getDrumsetWave","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","slope","instrumentVolume","expression","getBeatsPerMinute","beatsPerSecond","partsPerSecond","tickPerSecond","split"],"mappings":"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GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEh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","sourcesContent":["/*!\r\nCopyright (C) 2020 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\n//namespace beepbox {\r\nexport interface Dictionary<T> {\r\n\t[K: string]: T;\r\n}\r\n\r\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\r\n\tdictionary: Dictionary<T>;\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tcustom,\r\n\tsteady,\r\n\tpunch,\r\n\tflare,\r\n\ttwang,\r\n\tswell,\r\n\ttremolo,\r\n\ttremolo2,\r\n\tdecay,\r\n}\r\n\r\nexport const enum InstrumentType {\r\n\tchip = 0,\r\n\tfm = 1,\r\n\tnoise = 2,\r\n\tspectrum = 3,\r\n\tdrumset = 4,\r\n\tharmonics = 5,\r\n\tpwm = 6,\r\n\tcustomChipWave = 7,\r\n\tmod = 8,\r\n\tlength,\r\n}\r\n\r\nexport interface BeepBoxOption {\r\n\treadonly index: number;\r\n\treadonly name: string;\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n\treadonly flags: ReadonlyArray<boolean>;\r\n\treadonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n\treadonly isWhiteKey: boolean;\r\n\treadonly basePitch: number;\r\n}\r\n\r\nexport interface Rhythm extends BeepBoxOption {\r\n\treadonly stepsPerBeat: number;\r\n\t//readonly ticksPerArpeggio: number;\r\n\t//readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>>;\r\n\treadonly roundUpThresholds: number[] | null;\r\n}\r\n\r\nexport interface ChipWave extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly samples: Float64Array;\r\n}\r\n\r\nexport interface ChipNoise extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly basePitch: number;\r\n\treadonly pitchFilterMult: number;\r\n\treadonly isSoft: boolean;\r\n\tsamples: Float32Array | null;\r\n}\r\n\r\nexport interface Transition extends BeepBoxOption {\r\n\treadonly isSeamless: boolean;\r\n\treadonly attackSeconds: number;\r\n\treadonly releases: boolean;\r\n\treadonly releaseTicks: number;\r\n\treadonly slides: boolean;\r\n\treadonly slideTicks: number;\r\n}\r\n\r\nexport interface Vibrato extends BeepBoxOption {\r\n\treadonly amplitude: number;\r\n\treadonly type: number;\r\n\treadonly delayParts: number;\r\n}\r\n\r\nexport interface VibratoType extends BeepBoxOption {\r\n\treadonly periodsSeconds: number[];\r\n\treadonly period: number;\r\n}\r\n\r\nexport interface Interval extends BeepBoxOption {\r\n\treadonly spread: number;\r\n\treadonly offset: number;\r\n\treadonly volume: number;\r\n\treadonly sign: number;\r\n}\r\n\r\nexport interface Chord extends BeepBoxOption {\r\n\treadonly harmonizes: boolean;\r\n\treadonly customInterval: boolean;\r\n\treadonly arpeggiates: boolean;\r\n\treadonly isCustomInterval: boolean;\r\n\treadonly strumParts: number;\r\n}\r\n\r\nexport interface Algorithm extends BeepBoxOption {\r\n\treadonly carrierCount: number;\r\n\treadonly associatedCarrier: ReadonlyArray<number>;\r\n\treadonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface OperatorFrequency extends BeepBoxOption {\r\n\treadonly mult: number;\r\n\treadonly hzOffset: number;\r\n\treadonly amplitudeSign: number;\r\n}\r\n\r\nexport interface Envelope extends BeepBoxOption {\r\n\treadonly type: EnvelopeType;\r\n\treadonly speed: number;\r\n}\r\n\r\nexport interface Feedback extends BeepBoxOption {\r\n\treadonly indices: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport class Config {\r\n\t// Params for post-processing compressor\r\n\tpublic static thresholdVal: number = -10;\r\n\tpublic static kneeVal: number = 40;\r\n\tpublic static ratioVal: number = 12;\r\n\tpublic static attackVal: number = 0;\r\n\tpublic static releaseVal: number = 0.25;\r\n\r\n\tpublic static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\r\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\r\n\t\t{ name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\r\n\t\t{ name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\r\n\t\t{ name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\r\n\t\t{ name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\r\n\t\t{ name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\r\n\t\t{ name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\r\n\t\t{ name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\r\n\t\t{ name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\r\n\t\t{ name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\r\n\t\t{ name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\r\n\t\t{ name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\r\n\t\t{ name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\r\n\t\t{ name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\r\n\t\t{ name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\r\n\t\t{ name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\r\n\t\t{ name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\r\n\t\t{ name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\r\n\t\t{ name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\r\n\t\t{ name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\r\n\t\t{ name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\r\n\r\n\r\n\t]);\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{ name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{ name: \"C♯\", isWhiteKey: false, basePitch: 13 },\r\n\t\t{ name: \"D\", isWhiteKey: true, basePitch: 14 },\r\n\t\t{ name: \"D♯\", isWhiteKey: false, basePitch: 15 },\r\n\t\t{ name: \"E\", isWhiteKey: true, basePitch: 16 },\r\n\t\t{ name: \"F\", isWhiteKey: true, basePitch: 17 },\r\n\t\t{ name: \"F♯\", isWhiteKey: false, basePitch: 18 },\r\n\t\t{ name: \"G\", isWhiteKey: true, basePitch: 19 },\r\n\t\t{ name: \"G♯\", isWhiteKey: false, basePitch: 20 },\r\n\t\t{ name: \"A\", isWhiteKey: true, basePitch: 21 },\r\n\t\t{ name: \"A♯\", isWhiteKey: false, basePitch: 22 },\r\n\t\t{ name: \"B\", isWhiteKey: true, basePitch: 23 },\r\n\t]);\r\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\r\n\tpublic static readonly tempoMin: number = 30;\r\n\tpublic static readonly tempoMax: number = 320;\r\n\tpublic static readonly reverbRange: number = 32;\r\n\tpublic static readonly beatsPerBarMin: number = 3;\r\n\tpublic static readonly beatsPerBarMax: number = 16;\r\n\tpublic static readonly barCountMin: number = 1;\r\n\tpublic static readonly barCountMax: number = 256;\r\n\tpublic static readonly instrumentsPerChannelMin: number = 1;\r\n\tpublic static readonly instrumentsPerChannelMax: number = 10;\r\n\tpublic static readonly partsPerBeat: number = 24;\r\n\tpublic static readonly ticksPerPart: number = 2;\r\n\tpublic static readonly ticksPerArpeggio: number = 3;\r\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];\r\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\r\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\r\n\t\t{ name: \"÷6\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷8\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t]);\r\n\r\n\tpublic static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"custom chip\", \"mod\"];\r\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, true];\r\n\tpublic static readonly chipWaves: DictionaryArray<ChipWave> = toNameMap([\r\n\t\t{ name: \"rounded\", volume: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\r\n\t\t{ name: \"triangle\", volume: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\r\n\t\t{ name: \"square\", volume: 0.5, samples: centerWave([1.0, -1.0]) },\r\n\t\t{ name: \"1/4 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"1/8 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"sawtooth\", volume: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n\t\t{ name: \"double saw\", volume: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n\t\t{ name: \"double pulse\", volume: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"spiky\", volume: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\r\n\t\t{ name: \"sine\", volume: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\r\n\t\t{ name: \"flute\", volume: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\r\n\t\t{ name: \"harp\", volume: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\r\n\t\t{ name: \"sharp clarinet\", volume: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\r\n\t\t{ name: \"soft clarinet\", volume: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n\t\t{ name: \"alto sax\", volume: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\r\n\t\t{ name: \"bassoon\", volume: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\r\n\t\t{ name: \"trumpet\", volume: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\r\n\t\t{ name: \"electric guitar\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\r\n\t\t{ name: \"organ\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\r\n\t\t{ name: \"pan flute\", volume: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\r\n\t\t{ name: \"glitch\", volume: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n\t]);\r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\r\n\t\t{ name: \"retro\", volume: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"white\", volume: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\r\n\t\t{ name: \"clang\", volume: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"buzz\", volume: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"hollow\", volume: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\r\n\t\t{ name: \"shine\", volume: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"deep\", volume: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\r\n\t\t{ name: \"cutter\", volume: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"metallic\", volume: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t]);\r\n\tpublic static readonly filterCutoffMaxHz: number = 8000; // This is carefully calculated to correspond to no change when filtering at 48000 samples per second.\r\n\tpublic static readonly filterCutoffMinHz: number = 1;\r\n\tpublic static readonly filterMax: number = 0.95;\r\n\tpublic static readonly filterMaxResonance: number = 0.95;\r\n\tpublic static readonly filterCutoffRange: number = 11;\r\n\tpublic static readonly filterResonanceRange: number = 8;\r\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\r\n\t\t{ name: \"seamless\", isSeamless: true, attackSeconds: 0.0, releases: false, releaseTicks: 1, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard\", isSeamless: false, attackSeconds: 0.0, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft\", isSeamless: false, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"slide\", isSeamless: true, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: true, slideTicks: 3 },\r\n\t\t{ name: \"cross fade\", isSeamless: false, attackSeconds: 0.04, releases: true, releaseTicks: 6, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard fade\", isSeamless: false, attackSeconds: 0.0, releases: true, releaseTicks: 48, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"medium fade\", isSeamless: false, attackSeconds: 0.0125, releases: true, releaseTicks: 72, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft fade\", isSeamless: false, attackSeconds: 0.06, releases: true, releaseTicks: 96, slides: false, slideTicks: 6 },\r\n\t]);\r\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\r\n\t\t{ name: \"none\", amplitude: 0.0, type: 0, delayParts: 0 },\r\n\t\t{ name: \"light\", amplitude: 0.15, type: 0, delayParts: 0 },\r\n\t\t{ name: \"delayed\", amplitude: 0.3, type: 0, delayParts: 18 },\r\n\t\t{ name: \"heavy\", amplitude: 0.45, type: 0, delayParts: 0 },\r\n\t\t{ name: \"shaky\", amplitude: 0.1, type: 1, delayParts: 0 },\r\n\t]);\r\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\r\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\r\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\r\n\t]);\r\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\r\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\r\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\r\n\tpublic static readonly intervals: DictionaryArray<Interval> = toNameMap([\r\n\t\t{ name: \"union\", spread: 0.0, offset: 0.0, volume: 0.7, sign: 1.0 },\r\n\t\t{ name: \"shimmer\", spread: 0.018, offset: 0.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"hum\", spread: 0.045, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"honky tonk\", spread: 0.09, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"dissonant\", spread: 0.25, offset: 0.0, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"fifth\", spread: 3.5, offset: 3.5, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"octave\", spread: 6.0, offset: 6.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"bowed\", spread: 0.02, offset: 0.0, volume: 1.0, sign: -1.0 },\r\n\t\t{ name: \"piano\", spread: 0.01, offset: 0.0, volume: 1.0, sign: 0.7 },\r\n\t]);\r\n\tpublic static readonly effectsNames: ReadonlyArray<string> = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\r\n\tpublic static readonly volumeRange: number = 50;\r\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\r\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\r\n\tpublic static readonly volumeLogScale: number = 0.1428;\r\n\tpublic static readonly panCenter: number = 50;\r\n\tpublic static readonly panMax: number = Config.panCenter * 2;\r\n\tpublic static readonly detuneMin: number = -50;\r\n\tpublic static readonly detuneMax: number = 50;\r\n\tpublic static readonly songDetuneMin: number = -250;\r\n\tpublic static readonly songDetuneMax: number = 250;\r\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\r\n\t\t{ name: \"harmony\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"strum\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 1 },\r\n\t\t{ name: \"arpeggio\", harmonizes: false, customInterval: false, arpeggiates: true, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"custom interval\", harmonizes: true, customInterval: true, arpeggiates: true, isCustomInterval: true, strumParts: 0 },\r\n\t]);\r\n\tpublic static readonly maxChordSize: number = 9; // Pandora's box...\r\n\tpublic static readonly operatorCount: number = 4;\r\n\tpublic static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\r\n\t\t{ name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\r\n\t\t{ name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\r\n\t\t{ name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\r\n\t\t{ name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\r\n\t\t{ name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\r\n\t\t{ name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\r\n\t\t{ name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\r\n\t\t{ name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\r\n\t\t{ name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\r\n\t\t{ name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\r\n\t\t{ name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\r\n\t]);\r\n\tpublic static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091];\r\n\tpublic static readonly operatorAmplitudeMax: number = 15;\r\n\tpublic static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\r\n\t\t{ name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\r\n\t\t{ name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\r\n\t\t{ name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t]);\r\n\tpublic static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\r\n\t\t{ name: \"custom\", type: EnvelopeType.custom, speed: 0.0 },\r\n\t\t{ name: \"steady\", type: EnvelopeType.steady, speed: 0.0 },\r\n\t\t{ name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\r\n\t\t{ name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\r\n\t\t{ name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\r\n\t\t{ name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\r\n\t\t{ name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\r\n\t\t{ name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\r\n\t\t{ name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\r\n\t\t{ name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\r\n\t\t{ name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\r\n\t\t{ name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\r\n\t\t{ name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\r\n\t\t{ name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\r\n\t\t{ name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\r\n\t\t{ name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\r\n\t\t{ name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\r\n\t\t{ name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\r\n\t\t{ name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\r\n\t\t{ name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\r\n\t\t{ name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\r\n\t]);\r\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\r\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\r\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\r\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\r\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\r\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\r\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\r\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\r\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\r\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\r\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\r\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\r\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\r\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\r\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\r\n\t\t{ name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\r\n\t]);\r\n\tpublic static readonly chipNoiseLength: number = 1 << 15; // 32768\r\n\tpublic static readonly spectrumBasePitch: number = 24;\r\n\tpublic static readonly spectrumControlPoints: number = 30;\r\n\tpublic static readonly spectrumControlPointsPerOctave: number = 7;\r\n\tpublic static readonly spectrumControlPointBits: number = 3;\r\n\tpublic static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\r\n\tpublic static readonly harmonicsControlPoints: number = 28;\r\n\tpublic static readonly harmonicsRendered: number = 64;\r\n\tpublic static readonly harmonicsControlPointBits: number = 3;\r\n\tpublic static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\r\n\tpublic static readonly harmonicsWavelength: number = 1 << 11; // 2048\r\n\tpublic static readonly pulseWidthRange: number = 50;\r\n\tpublic static readonly pitchChannelCountMin: number = 1;\r\n\tpublic static readonly pitchChannelCountMax: number = 40;\r\n\tpublic static readonly noiseChannelCountMin: number = 0;\r\n\tpublic static readonly noiseChannelCountMax: number = 8;\r\n\tpublic static readonly modChannelCountMin: number = 0;\r\n\tpublic static readonly modChannelCountMax: number = 8;\r\n\tpublic static readonly noiseInterval: number = 6;\r\n\tpublic static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\r\n\tpublic static readonly drumCount: number = 12;\r\n\tpublic static readonly modCount: number = 6;\r\n\tpublic static readonly pitchOctaves: number = 8;\r\n\tpublic static readonly maxScrollableOctaves: number = 5; // Largest number possible with any config setting\r\n\tpublic static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\r\n\tpublic static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\r\n\tpublic static readonly sineWaveLength: number = 1 << 8; // 256\r\n\tpublic static readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n\tpublic static readonly sineWave: Float64Array = generateSineWave();\r\n\r\n\t// Height of the small editor column for inserting/deleting rows, in pixels.\r\n\tpublic static readonly barEditorHeight: number = 10;\r\n\r\n}\r\n\r\nfunction centerWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = wave[i] - average;\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\nfunction centerAndNormalizeWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tlet magn: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t\tmagn += Math.abs(wave[i]);\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\tconst magnAvg: number = magn / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = (wave[i] - average) / (magnAvg);\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\n\r\n// The function arguments will be defined in FFT.ts, but I want\r\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\r\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\r\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\r\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\r\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null = null, scaleElementsByFactor: Function | null = null): Float32Array {\r\n\tlet wave: Float32Array | null = Config.chipNoises[index].samples;\r\n\tif (wave == null) {\r\n\t\twave = new Float32Array(Config.chipNoiseLength + 1);\r\n\t\tConfig.chipNoises[index].samples = wave;\r\n\r\n\t\tif (index == 0) {\r\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 1) {\r\n\t\t\t// White noise is just random values for each sample.\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t}\r\n\t\t} else if (index == 2) {\r\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 3) {\r\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 4) {\r\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\tdrawNoiseSpectrum(wave, 10, 11, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 11, 14, .6578, .6578, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 5) {\r\n\t\t\t// \"Shine\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 6) {\r\n\t\t\t// \"Deep\" drums from modbox!\r\n\t\t\tdrawNoiseSpectrum(wave, 1, 10, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 20, 14, -2, -2, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 7) {\r\n\t\t\t// \"Cutter\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1);\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 8) {\r\n\t\t\t// \"Metallic\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < 32768; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 + 0.5;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t}\r\n\r\n\t\twave[Config.chipNoiseLength] = wave[0];\r\n\t}\r\n\r\n\treturn wave;\r\n}\r\n\r\nexport function drawNoiseSpectrum(wave: Float32Array, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\r\n\tconst referenceOctave: number = 11;\r\n\tconst referenceIndex: number = 1 << referenceOctave;\r\n\tconst lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n\tconst highIndex: number = Math.min(Config.chipNoiseLength >> 1, Math.pow(2, highOctave) | 0);\r\n\tconst retroWave: Float32Array = getDrumWave(0);\r\n\tlet combinedAmplitude: number = 0.0;\r\n\tfor (let i: number = lowIndex; i < highIndex; i++) {\r\n\r\n\t\tlet lerped: number = lowPower + (highPower - lowPower) * (Math.log(i) / Math.LN2 - lowOctave) / (highOctave - lowOctave);\r\n\t\t//let amplitude: number = Math.pow(2, lerped);\r\n\t\t//let amplitude: number = Math.pow((lerped + 5) / 7, 4);\r\n\t\tlet amplitude: number = Math.pow(2, (lerped - 1) * Config.spectrumMax + 1) * lerped;\r\n\r\n\t\tamplitude *= Math.pow(i / referenceIndex, overallSlope);\r\n\r\n\t\tcombinedAmplitude += amplitude;\r\n\r\n\t\t// Add two different sources of psuedo-randomness to the noise\r\n\t\t// (individually they aren't random enough) but in a deterministic\r\n\t\t// way so that live spectrum editing doesn't result in audible pops.\r\n\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the \r\n\t\t// LFSR retro wave (effectively random), and also rotate the phase\r\n\t\t// of each sine wave based on the golden angle to disrupt the symmetry.\r\n\t\tamplitude *= retroWave[i];\r\n\t\tconst radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\r\n\r\n\t\twave[i] = Math.cos(radians) * amplitude;\r\n\t\twave[Config.chipNoiseLength - i] = Math.sin(radians) * amplitude;\r\n\t}\r\n\r\n\treturn combinedAmplitude;\r\n}\r\n\r\nfunction generateSineWave(): Float64Array {\r\n\tconst wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n\tfor (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n\t\twave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n\t}\r\n\treturn wave;\r\n}\r\n\r\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\r\n\tlet arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\r\n\tif (arpeggioPattern != null) {\r\n\t\tif (pitchCount == 2 && useFastTwoNoteArp == false) {\r\n\t\t\tarpeggioPattern = [0, 0, 1, 1];\r\n\t\t}\r\n\t\treturn arpeggioPattern[arpeggio % arpeggioPattern.length];\r\n\t} else {\r\n\t\treturn arpeggio % pitchCount;\r\n\t}\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n\tconst dictionary: Dictionary<T> = {};\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tconst value: any = array[i];\r\n\t\tvalue.index = i;\r\n\t\tdictionary[value.name] = <T>value;\r\n\t}\r\n\tconst result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\r\n\tresult.dictionary = dictionary;\r\n\treturn result;\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap } from \"../synth/SynthConfig\";\r\n\r\n//namespace beepbox {\r\nexport interface PresetCategory extends BeepBoxOption {\r\n\treadonly presets: DictionaryArray<Preset>;\r\n}\r\n\r\nexport interface Preset extends BeepBoxOption {\r\n\treadonly isNoise?: boolean;\r\n\treadonly isMod?: boolean;\r\n\treadonly generalMidi?: boolean;\r\n\treadonly midiProgram?: number;\r\n\treadonly midiSubharmonicOctaves?: number;\r\n\treadonly customType?: InstrumentType;\r\n\treadonly settings?: any;\r\n}\r\n\r\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\nexport function prettyNumber(value: number): string {\r\n\treturn value.toFixed(2).replace(/\\.?0*$/, \"\");\r\n}\r\n\r\nexport class EditorConfig {\r\n\tpublic static readonly version: string = \"2.3\"; // Not using patch versions in display right now, maybe someday.\r\n\tpublic static readonly versionDisplayName: string = \"MicroBox \" + EditorConfig.version;\r\n\r\n\tpublic static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"chip wave\", customType: InstrumentType.chip },\r\n\t\t\t\t{ name: \"FM (expert)\", customType: InstrumentType.fm },\r\n\t\t\t\t{ name: \"basic noise\", customType: InstrumentType.noise },\r\n\t\t\t\t{ name: \"spectrum\", customType: InstrumentType.spectrum },\r\n\t\t\t\t{ name: \"drumset\", customType: InstrumentType.drumset },\r\n\t\t\t\t{ name: \"harmonics\", customType: InstrumentType.harmonics },\r\n\t\t\t\t{ name: \"pulse width\", customType: InstrumentType.pwm },\r\n\t\t\t\t{ name: \"custom chip\", customType: InstrumentType.customChipWave },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"triangle\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\r\n\t\t\t\t{ name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\r\n\t\t\t\t{ name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\r\n\t\t\t\t{ name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\r\n\t\t\t\t{ name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\r\n\t\t\t\t{ name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57] } },\r\n\t\t\t\t{ name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 86, 86, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"wave\": \"1/8 pulse\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"interval\": \"honky tonk\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 43, 43, 43, 43, 43, 29, 43, 43, 43, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"interval\": \"shimmer\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0] } },\r\n\t\t\t\t{ name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 14, 14, 14, 14, 14, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14] } },\r\n\t\t\t\t{ name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\r\n\t\t\t\t{ name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }, { \"frequency\": \"~2×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 2, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 1\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"pulseWidth\": 18, \"pulseEnvelope\": \"punch\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"distorted synth 2\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 3\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 4\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 50, \"pulseEnvelope\": \"swell 1\", \"vibrato\": \"delayed\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"transition\": \"slide\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t\t{ name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14] } },\r\n\t\t\t\t{ name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0] } },\r\n\t\t\t\t{ name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"flare 3\" }] } },\r\n\t\t\t\t{ name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"swell 2\" }, { \"frequency\": \"11×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 3\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"octave\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"tremolo1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 5, \"envelope\": \"twang 3\" }, { \"frequency\": \"11×\", \"amplitude\": 8, \"envelope\": \"tremolo5\" }] } },\r\n\t\t\t\t{ name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"tremolo1\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\r\n\t\t\t\t{ name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"flare 1\" }, { \"frequency\": \"3×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }] } },\r\n\t\t\t\t{ name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 3, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [0, 0, 0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0] } },\r\n\t\t\t\t{ name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 57, \"filterEnvelope\": \"swell 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\r\n\t\t\t\t{ name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"interval\": \"hum\", \"vibrato\": \"heavy\", \"harmonics\": [0, 0, 14, 100, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"tremolo1\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\r\n\t\t\t\t{ name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 4, \"pulseEnvelope\": \"tremolo6\", \"vibrato\": \"shaky\" } },\r\n\t\t\t\t{ name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\r\n\t\t\t\t{ name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\r\n\t\t\t\t{ name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"heavy\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t]);\r\n\r\n\tpublic static valueToPreset(presetValue: number): Preset | null {\r\n\t\tconst categoryIndex: number = presetValue >> 6;\r\n\t\tconst presetIndex: number = presetValue & 0x3F;\r\n\t\treturn EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\r\n\t}\r\n\tpublic static midiProgramToPresetValue(program: number): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic static nameToPresetValue(presetName: string): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\ninterface NumberArray {\r\n\tlength: number;\r\n\t[index: number]: number;\r\n}\r\n\r\n// A basic FFT operation scales the overall magnitude of elements by the\r\n// square root of the length of the array, √N. Performing a forward FFT and\r\n// then an inverse FFT results in the original array, but multiplied by N.\r\n// This helper function can be used to compensate for that. \r\nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tarray[i] *= factor;\r\n\t}\r\n}\r\n\r\nfunction isPowerOf2(n: number): boolean {\r\n\treturn !!n && !(n & (n - 1));\r\n}\r\n\r\nfunction countBits(n: number): number {\r\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\treturn Math.round(Math.log(n) / Math.log(2));\r\n}\r\n\r\n// Rearranges the elements of the array, swapping the element at an index\r\n// with an element at an index that is the bitwise reverse of the first\r\n// index in base 2. Useful for computing the FFT.\r\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\r\n\tconst bitCount: number = countBits(fullArrayLength);\r\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\tconst finalShift: number = 16 - bitCount;\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\tlet j: number;\r\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\tj = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;\r\n\t\tif (j > i) {\r\n\t\t\tlet temp: number = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Provided for educational purposes. Easier to read than\r\n// fastFourierTransform(), but computes the same result.\r\n// Takes two parallel arrays representing the real and imaginary elements,\r\n// respectively, and returns an array containing two new arrays, which\r\n// contain the complex result of the transform.\r\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\tconst realOut: number[] = [];\r\n\tconst imagOut: number[] = [];\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\trealOut[i] = 0.0;\r\n\t\timagOut[i] = 0.0;\r\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t}\r\n\t}\r\n\treturn [realOut, imagOut];\r\n}\r\n\r\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n// input real and imaginary arrays. Can be used for both forward and inverse\r\n// transforms: swap the order of the arguments for the inverse.\r\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\r\n\treverseIndexBits(realArray, fullArrayLength);\r\n\treverseIndexBits(imagArray, fullArrayLength);\r\n\r\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\tconst startIndex1: number = startIndex + 1;\r\n\t\tconst startIndex2: number = startIndex + 2;\r\n\t\tconst startIndex3: number = startIndex + 3;\r\n\t\tconst real0: number = realArray[startIndex];\r\n\t\tconst real1: number = realArray[startIndex1];\r\n\t\tconst real2: number = realArray[startIndex2];\r\n\t\tconst real3: number = realArray[startIndex3];\r\n\t\tconst imag0: number = imagArray[startIndex];\r\n\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\tconst realTemp0: number = real0 + real1;\r\n\t\tconst realTemp1: number = real0 - real1;\r\n\t\tconst realTemp2: number = real2 + real3;\r\n\t\tconst realTemp3: number = real2 - real3;\r\n\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\trealArray[startIndex] = realTemp0 + realTemp2;\r\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\timagArray[startIndex] = imagTemp0 + imagTemp2;\r\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t}\r\n\r\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\tconst halfLength: number = stride >>> 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tlet c: number = 1.0;\r\n\t\t\tlet s: number = 0.0;\r\n\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the Fourier transform from an array of real-valued time-domain\r\n// samples. The output is specially formatted for space efficieny: elements\r\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n// descending frequency. Overwrites the input array.\r\nexport function forwardRealFourierTransform(array: NumberArray): void {\r\n\tconst fullArrayLength: number = array.length;\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n\r\n\t// First and second pass.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\t// no imaginary elements yet since the input is fully real.\r\n\t\tconst tempA: number = real0 + real1;\r\n\t\tconst tempB: number = real2 + real3;\r\n\t\tarray[index] = tempA + tempB;\r\n\t\tarray[index1] = real0 - real1;\r\n\t\tarray[index2] = tempA - tempB;\r\n\t\tarray[index3] = real2 - real3;\r\n\t}\r\n\r\n\t// Third pass.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst imag3: number = array[index3];\r\n\t\tconst real4: number = array[index4];\r\n\t\tconst real5: number = array[index5];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\tarray[index] = real0 + real4;\r\n\t\tarray[index1] = real1 + tempA;\r\n\t\tarray[index3] = real1 - tempA;\r\n\t\tarray[index4] = real0 - real4;\r\n\t\tarray[index5] = tempB - imag3;\r\n\t\tarray[index7] = tempB + imag3;\r\n\t}\r\n\r\n\t// Handle remaining passes.\r\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\tarray[indexB0] = -imag0 - tempB;\r\n\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the inverse Fourier transform from a specially formatted array of\r\n// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n// the corresponding complex elements, representing cosine wave amplitudes in\r\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n// imaginary values, representing sine wave amplitudes in descending frequency.\r\n// Generates real-valued time-domain samples. Overwrites the input array.\r\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\t// Perform all but the last few passes in reverse.\r\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\tarray[midIndexA] *= 2;\r\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\tarray[midIndexB] *= 2;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// Commented out this block (and compensated with an extra pass above)\r\n\t// because it's slower in my testing so far.\r\n\t// Pass with stride 8.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index6: number = index + 6;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\tconst imag4: number = array[index4];\r\n\t\tconst imag5: number = array[index5];\r\n\t\tconst imag6: number = array[index6];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = real1 - real3;\r\n\t\tconst tempB: number = imag5 + imag7;\r\n\t\tarray[index ] = real0 + imag4;\r\n\t\tarray[index1] = real1 + real3;\r\n\t\tarray[index2] = real2 * 2;\r\n\t\tarray[index3] = imag7 - imag5;\r\n\t\tarray[index4] = real0 - imag4;\r\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\tarray[index6] = imag6 * 2;\r\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t}\r\n\t*/\r\n\t// The final passes with strides 4 and 2, combined into one loop.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1] * 2;\r\n\t\tconst imag2: number = array[index2];\r\n\t\tconst imag3: number = array[index3] * 2;\r\n\t\tconst tempA: number = real0 + imag2;\r\n\t\tconst tempB: number = real0 - imag2;\r\n\t\tarray[index] = tempA + real1;\r\n\t\tarray[index1] = tempA - real1;\r\n\t\tarray[index2] = tempB + imag3;\r\n\t\tarray[index3] = tempB - imag3;\r\n\t}\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}\r\n//}\r\n\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex } from \"./SynthConfig\";\r\nimport { EditorConfig } from \"../editor/EditorConfig\";\r\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\r\nimport { Deque } from \"./Deque\";\r\n\r\ndeclare global {\r\n\tinterface Window {\r\n\t\tAudioContext: any;\r\n\t\twebkitAudioContext: any;\r\n\t}\r\n}\r\n\r\n//namespace beepbox {\r\n// For performance debugging:\r\n//let samplesAccumulated: number = 0;\r\n//let samplePerformance: number = 0;\r\n\r\nconst enum CharCode {\r\n\tSPACE = 32,\r\n\tHASH = 35,\r\n\tPERCENT = 37,\r\n\tAMPERSAND = 38,\r\n\tPLUS = 43,\r\n\tDASH = 45,\r\n\tDOT = 46,\r\n\tNUM_0 = 48,\r\n\tNUM_1 = 49,\r\n\tNUM_2 = 50,\r\n\tNUM_3 = 51,\r\n\tNUM_4 = 52,\r\n\tNUM_5 = 53,\r\n\tNUM_6 = 54,\r\n\tNUM_7 = 55,\r\n\tNUM_8 = 56,\r\n\tNUM_9 = 57,\r\n\tEQUALS = 61,\r\n\tA = 65,\r\n\tB = 66,\r\n\tC = 67,\r\n\tD = 68,\r\n\tE = 69,\r\n\tF = 70,\r\n\tG = 71,\r\n\tH = 72,\r\n\tI = 73,\r\n\tJ = 74,\r\n\tK = 75,\r\n\tL = 76,\r\n\tM = 77,\r\n\tN = 78,\r\n\tO = 79,\r\n\tP = 80,\r\n\tQ = 81,\r\n\tR = 82,\r\n\tS = 83,\r\n\tT = 84,\r\n\tU = 85,\r\n\tV = 86,\r\n\tW = 87,\r\n\tX = 88,\r\n\tY = 89,\r\n\tZ = 90,\r\n\tUNDERSCORE = 95,\r\n\ta = 97,\r\n\tb = 98,\r\n\tc = 99,\r\n\td = 100,\r\n\te = 101,\r\n\tf = 102,\r\n\tg = 103,\r\n\th = 104,\r\n\ti = 105,\r\n\tj = 106,\r\n\tk = 107,\r\n\tl = 108,\r\n\tm = 109,\r\n\tn = 110,\r\n\to = 111,\r\n\tp = 112,\r\n\tq = 113,\r\n\tr = 114,\r\n\ts = 115,\r\n\tt = 116,\r\n\tu = 117,\r\n\tv = 118,\r\n\tw = 119,\r\n\tx = 120,\r\n\ty = 121,\r\n\tz = 122,\r\n\tLEFT_CURLY_BRACE = 123,\r\n\tRIGHT_CURLY_BRACE = 125,\r\n}\r\n\r\nconst enum SongTagCode {\r\n\tbeatCount = CharCode.a,\r\n\tbars = CharCode.b,\r\n\tvibrato = CharCode.c,\r\n\ttransition = CharCode.d,\r\n\tloopEnd = CharCode.e,\r\n\tfilterCutoff = CharCode.f,\r\n\tbarCount = CharCode.g,\r\n\tinterval = CharCode.h,\r\n\tinstrumentCount = CharCode.i,\r\n\tpatternCount = CharCode.j,\r\n\tkey = CharCode.k,\r\n\tloopStart = CharCode.l,\r\n\treverb = CharCode.m,\r\n\tchannelCount = CharCode.n,\r\n\tchannelOctave = CharCode.o,\r\n\tpatterns = CharCode.p,\r\n\teffects = CharCode.q,\r\n\trhythm = CharCode.r,\r\n\tscale = CharCode.s,\r\n\ttempo = CharCode.t,\r\n\tpreset = CharCode.u,\r\n\tvolume = CharCode.v,\r\n\twave = CharCode.w,\r\n\r\n\tfilterResonance = CharCode.y,\r\n\tfilterEnvelope = CharCode.z,\r\n\talgorithm = CharCode.A,\r\n\tfeedbackAmplitude = CharCode.B,\r\n\tchord = CharCode.C,\r\n\tdetune = CharCode.D,\r\n\toperatorEnvelopes = CharCode.E,\r\n\tfeedbackType = CharCode.F,\r\n\tarpeggioSpeed = CharCode.G,\r\n\tharmonics = CharCode.H,\r\n\r\n\tsquareDuty = CharCode.K,\r\n\tpanning = CharCode.L,\r\n\tcustomChipWave = CharCode.M,\r\n\tsongTitle = CharCode.N,\r\n\tlimiterSettings = CharCode.O,\r\n\toperatorAmplitudes = CharCode.P,\r\n\toperatorFrequencies = CharCode.Q,\r\n\r\n\tspectrum = CharCode.S,\r\n\tstartInstrument = CharCode.T,\r\n\tchannelNames = CharCode.U,\r\n\tfeedbackEnvelope = CharCode.V,\r\n\tpulseWidth = CharCode.W,\r\n}\r\n\r\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\r\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\r\nclass BitFieldReader {\r\n\tprivate _bits: number[] = [];\r\n\tprivate _readIndex: number = 0;\r\n\r\n\tconstructor(source: string, startIndex: number, stopIndex: number) {\r\n\t\tfor (let i: number = startIndex; i < stopIndex; i++) {\r\n\t\t\tconst value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n\t\t\tthis._bits.push((value >> 5) & 0x1);\r\n\t\t\tthis._bits.push((value >> 4) & 0x1);\r\n\t\t\tthis._bits.push((value >> 3) & 0x1);\r\n\t\t\tthis._bits.push((value >> 2) & 0x1);\r\n\t\t\tthis._bits.push((value >> 1) & 0x1);\r\n\t\t\tthis._bits.push(value & 0x1);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic read(bitCount: number): number {\r\n\t\tlet result: number = 0;\r\n\t\twhile (bitCount > 0) {\r\n\t\t\tresult = result << 1;\r\n\t\t\tresult += this._bits[this._readIndex++];\r\n\t\t\tbitCount--;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic readLongTail(minValue: number, minBits: number): number {\r\n\t\tlet result: number = minValue;\r\n\t\tlet numBits: number = minBits;\r\n\t\twhile (this._bits[this._readIndex++]) {\r\n\t\t\tresult += 1 << numBits;\r\n\t\t\tnumBits++;\r\n\t\t}\r\n\t\twhile (numBits > 0) {\r\n\t\t\tnumBits--;\r\n\t\t\tif (this._bits[this._readIndex++]) {\r\n\t\t\t\tresult += 1 << numBits;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic readPartDuration(): number {\r\n\t\treturn this.readLongTail(1, 3);\r\n\t}\r\n\r\n\tpublic readLegacyPartDuration(): number {\r\n\t\treturn this.readLongTail(1, 2);\r\n\t}\r\n\r\n\tpublic readPinCount(): number {\r\n\t\treturn this.readLongTail(1, 0);\r\n\t}\r\n\r\n\tpublic readPitchInterval(): number {\r\n\t\tif (this.read(1)) {\r\n\t\t\treturn -this.readLongTail(1, 3);\r\n\t\t} else {\r\n\t\t\treturn this.readLongTail(1, 3);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass BitFieldWriter {\r\n\tprivate _index: number = 0;\r\n\tprivate _bits: number[] = [];\r\n\r\n\tpublic clear() {\r\n\t\tthis._index = 0;\r\n\t}\r\n\r\n\tpublic write(bitCount: number, value: number): void {\r\n\t\tbitCount--;\r\n\t\twhile (bitCount >= 0) {\r\n\t\t\tthis._bits[this._index++] = (value >>> bitCount) & 1;\r\n\t\t\tbitCount--;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writeLongTail(minValue: number, minBits: number, value: number): void {\r\n\t\tif (value < minValue) throw new Error(\"value out of bounds\");\r\n\t\tvalue -= minValue;\r\n\t\tlet numBits: number = minBits;\r\n\t\twhile (value >= (1 << numBits)) {\r\n\t\t\tthis._bits[this._index++] = 1;\r\n\t\t\tvalue -= 1 << numBits;\r\n\t\t\tnumBits++;\r\n\t\t}\r\n\t\tthis._bits[this._index++] = 0;\r\n\t\twhile (numBits > 0) {\r\n\t\t\tnumBits--;\r\n\t\t\tthis._bits[this._index++] = (value >>> numBits) & 1;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writePartDuration(value: number): void {\r\n\t\tthis.writeLongTail(1, 3, value);\r\n\t}\r\n\r\n\tpublic writePinCount(value: number): void {\r\n\t\tthis.writeLongTail(1, 0, value);\r\n\t}\r\n\r\n\tpublic writePitchInterval(value: number): void {\r\n\t\tif (value < 0) {\r\n\t\t\tthis.write(1, 1); // sign\r\n\t\t\tthis.writeLongTail(1, 3, -value);\r\n\t\t} else {\r\n\t\t\tthis.write(1, 0); // sign\r\n\t\t\tthis.writeLongTail(1, 3, value);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic concat(other: BitFieldWriter): void {\r\n\t\tfor (let i: number = 0; i < other._index; i++) {\r\n\t\t\tthis._bits[this._index++] = other._bits[i];\r\n\t\t}\r\n\t}\r\n\r\n\tpublic encodeBase64(buffer: number[]): number[] {\r\n\r\n\t\tfor (let i: number = 0; i < this._index; i += 6) {\r\n\t\t\tconst value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\r\n\t\t\tbuffer.push(base64IntToCharCode[value]);\r\n\t\t}\r\n\t\treturn buffer;\r\n\t}\r\n\r\n\tpublic lengthBase64(): number {\r\n\t\treturn Math.ceil(this._index / 6);\r\n\t}\r\n}\r\n\r\nexport interface NotePin {\r\n\tinterval: number;\r\n\ttime: number;\r\n\tvolume: number;\r\n}\r\n\r\nexport function makeNotePin(interval: number, time: number, volume: number): NotePin {\r\n\treturn { interval: interval, time: time, volume: volume };\r\n}\r\n\r\nfunction clamp(min: number, max: number, val: number): number {\r\n\tmax = max - 1;\r\n\tif (val <= max) {\r\n\t\tif (val >= min) return val;\r\n\t\telse return min;\r\n\t} else {\r\n\t\treturn max;\r\n\t}\r\n}\r\n\r\nfunction validateRange(min: number, max: number, val: number): number {\r\n\tif (min <= val && val <= max) return val;\r\n\tthrow new Error(`Value ${val} not in range [${min}, ${max}]`);\r\n}\r\n\r\nexport class Note {\r\n\tpublic pitches: number[];\r\n\tpublic pins: NotePin[];\r\n\tpublic start: number;\r\n\tpublic end: number;\r\n\r\n\tpublic constructor(pitch: number, start: number, end: number, volume: number, fadeout: boolean = false) {\r\n\t\tthis.pitches = [pitch];\r\n\t\tthis.pins = [makeNotePin(0, 0, volume), makeNotePin(0, end - start, fadeout ? 0 : volume)];\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\t}\r\n\r\n\tpublic pickMainInterval(): number {\r\n\t\tlet longestFlatIntervalDuration: number = 0;\r\n\t\tlet mainInterval: number = 0;\r\n\t\tfor (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\r\n\t\t\tconst pinA: NotePin = this.pins[pinIndex - 1];\r\n\t\t\tconst pinB: NotePin = this.pins[pinIndex];\r\n\t\t\tif (pinA.interval == pinB.interval) {\r\n\t\t\t\tconst duration: number = pinB.time - pinA.time;\r\n\t\t\t\tif (longestFlatIntervalDuration < duration) {\r\n\t\t\t\t\tlongestFlatIntervalDuration = duration;\r\n\t\t\t\t\tmainInterval = pinA.interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (longestFlatIntervalDuration == 0) {\r\n\t\t\tlet loudestVolume: number = 0;\r\n\t\t\tfor (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\r\n\t\t\t\tconst pin: NotePin = this.pins[pinIndex];\r\n\t\t\t\tif (loudestVolume < pin.volume) {\r\n\t\t\t\t\tloudestVolume = pin.volume;\r\n\t\t\t\t\tmainInterval = pin.interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn mainInterval;\r\n\t}\r\n\r\n\tpublic clone(): Note {\r\n\t\tconst newNote: Note = new Note(-1, this.start, this.end, 6);\r\n\t\tnewNote.pitches = this.pitches.concat();\r\n\t\tnewNote.pins = [];\r\n\t\tfor (const pin of this.pins) {\r\n\t\t\tnewNote.pins.push(makeNotePin(pin.interval, pin.time, pin.volume));\r\n\t\t}\r\n\t\treturn newNote;\r\n\t}\r\n}\r\n\r\nexport class Pattern {\r\n\tpublic notes: Note[] = [];\r\n\tpublic instrument: number = 0;\r\n\r\n\tpublic cloneNotes(): Note[] {\r\n\t\tconst result: Note[] = [];\r\n\t\tfor (const note of this.notes) {\r\n\t\t\tresult.push(note.clone());\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tthis.notes.length = 0;\r\n\t\tthis.instrument = 0;\r\n\t}\r\n}\r\n\r\nexport class Operator {\r\n\tpublic frequency: number = 0;\r\n\tpublic amplitude: number = 0;\r\n\tpublic envelope: number = 0;\r\n\r\n\tconstructor(index: number) {\r\n\t\tthis.reset(index);\r\n\t}\r\n\r\n\tpublic reset(index: number): void {\r\n\t\tthis.frequency = 0;\r\n\t\tthis.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n\t\tthis.envelope = (index == 0) ? 0 : 1;\r\n\t}\r\n\r\n\tpublic copy(other: Operator): void {\r\n\t\tthis.frequency = other.frequency;\r\n\t\tthis.amplitude = other.amplitude;\r\n\t\tthis.envelope = other.envelope;\r\n\t}\r\n}\r\n\r\nexport class SpectrumWave {\r\n\tpublic spectrum: number[] = [];\r\n\tprivate _wave: Float32Array | null = null;\r\n\tprivate _waveIsReady: boolean = false;\r\n\r\n\tconstructor(isNoiseChannel: boolean) {\r\n\t\tthis.reset(isNoiseChannel);\r\n\t}\r\n\r\n\tpublic reset(isNoiseChannel: boolean): void {\r\n\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\tif (isNoiseChannel) {\r\n\t\t\t\tthis.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\r\n\t\t\t} else {\r\n\t\t\t\tconst isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\r\n\t\t\t\tthis.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic markCustomWaveDirty(): void {\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic getCustomWave(lowestOctave: number): Float32Array {\r\n\t\tif (!this._waveIsReady || this._wave == null) {\r\n\t\t\tlet waveLength: number = Config.chipNoiseLength;\r\n\r\n\t\t\tif (this._wave == null || this._wave.length != waveLength + 1) {\r\n\t\t\t\tthis._wave = new Float32Array(waveLength + 1);\r\n\t\t\t}\r\n\t\t\tconst wave: Float32Array = this._wave;\r\n\r\n\t\t\tfor (let i: number = 0; i < waveLength; i++) {\r\n\t\t\t\twave[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst highestOctave: number = 14;\r\n\t\t\tconst falloffRatio: number = 0.25;\r\n\t\t\t// Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\r\n\t\t\tconst pitchTweak: number[] = [0, 1 / 7, Math.log(5 / 4) / Math.LN2, 3 / 7, Math.log(3 / 2) / Math.LN2, 5 / 7, 6 / 7];\r\n\t\t\tfunction controlPointToOctave(point: number): number {\r\n\t\t\t\treturn lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\r\n\t\t\t}\r\n\r\n\t\t\tlet combinedAmplitude: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\r\n\t\t\t\tconst value1: number = (i <= 0) ? 0 : this.spectrum[i - 1];\r\n\t\t\t\tconst value2: number = (i >= Config.spectrumControlPoints) ? this.spectrum[Config.spectrumControlPoints - 1] : this.spectrum[i];\r\n\t\t\t\tconst octave1: number = controlPointToOctave(i - 1);\r\n\t\t\t\tlet octave2: number = controlPointToOctave(i);\r\n\t\t\t\tif (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\r\n\t\t\t\tif (value1 == 0 && value2 == 0) continue;\r\n\r\n\t\t\t\tcombinedAmplitude += 0.02 * drawNoiseSpectrum(wave, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\r\n\t\t\t}\r\n\t\t\tif (this.spectrum[Config.spectrumControlPoints - 1] > 0) {\r\n\t\t\t\tcombinedAmplitude += 0.02 * drawNoiseSpectrum(wave, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, this.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\r\n\t\t\t}\r\n\r\n\t\t\tinverseRealFourierTransform(wave, waveLength);\r\n\t\t\tscaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\r\n\r\n\t\t\t// Duplicate the first sample at the end for easier wrap-around interpolation.\r\n\t\t\twave[waveLength] = wave[0];\r\n\r\n\t\t\tthis._waveIsReady = true;\r\n\t\t}\r\n\t\treturn this._wave;\r\n\t}\r\n}\r\n\r\nexport class HarmonicsWave {\r\n\tpublic harmonics: number[] = [];\r\n\tprivate _wave: Float32Array | null = null;\r\n\tprivate _waveIsReady: boolean = false;\r\n\r\n\tconstructor() {\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\tthis.harmonics[i] = 0;\r\n\t\t}\r\n\t\tthis.harmonics[0] = Config.harmonicsMax;\r\n\t\tthis.harmonics[3] = Config.harmonicsMax;\r\n\t\tthis.harmonics[6] = Config.harmonicsMax;\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic markCustomWaveDirty(): void {\r\n\t\tthis._waveIsReady = false;\r\n\t}\r\n\r\n\tpublic getCustomWave(): Float32Array {\r\n\t\tif (!this._waveIsReady || this._wave == null) {\r\n\t\t\tlet waveLength: number = Config.harmonicsWavelength;\r\n\t\t\tconst retroWave: Float32Array = getDrumWave(0);\r\n\r\n\t\t\tif (this._wave == null || this._wave.length != waveLength + 1) {\r\n\t\t\t\tthis._wave = new Float32Array(waveLength + 1);\r\n\t\t\t}\r\n\t\t\tconst wave: Float32Array = this._wave;\r\n\r\n\t\t\tfor (let i: number = 0; i < waveLength; i++) {\r\n\t\t\t\twave[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst overallSlope: number = -0.25;\r\n\t\t\tlet combinedControlPointAmplitude: number = 1;\r\n\r\n\t\t\tfor (let harmonicIndex: number = 0; harmonicIndex < Config.harmonicsRendered; harmonicIndex++) {\r\n\t\t\t\tconst harmonicFreq: number = harmonicIndex + 1;\r\n\t\t\t\tlet controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? this.harmonics[harmonicIndex] : this.harmonics[Config.harmonicsControlPoints - 1];\r\n\t\t\t\tif (harmonicIndex >= Config.harmonicsControlPoints) {\r\n\t\t\t\t\tcontrolValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (Config.harmonicsRendered - Config.harmonicsControlPoints);\r\n\t\t\t\t}\r\n\t\t\t\tconst normalizedValue: number = controlValue / Config.harmonicsMax;\r\n\t\t\t\tlet amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\r\n\t\t\t\tif (harmonicIndex < Config.harmonicsControlPoints) {\r\n\t\t\t\t\tcombinedControlPointAmplitude += amplitude;\r\n\t\t\t\t}\r\n\t\t\t\tamplitude *= Math.pow(harmonicFreq, overallSlope);\r\n\r\n\t\t\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the LFSR\r\n\t\t\t\t// retro wave (effectively random) to avoid egregiously tall spikes.\r\n\t\t\t\tamplitude *= retroWave[harmonicIndex + 589];\r\n\r\n\t\t\t\twave[waveLength - harmonicFreq] = amplitude;\r\n\t\t\t}\r\n\r\n\t\t\tinverseRealFourierTransform(wave, waveLength);\r\n\r\n\t\t\t// Limit the maximum wave amplitude.\r\n\t\t\tconst mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\r\n\r\n\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\tlet cumulative: number = 0;\r\n\t\t\tlet wavePrev: number = 0;\r\n\t\t\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\twavePrev = wave[i] * mult;\r\n\t\t\t\twave[i] = cumulative;\r\n\t\t\t}\r\n\t\t\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\t\t\twave[waveLength] = wave[0];\r\n\r\n\t\t\tthis._waveIsReady = true;\r\n\t\t}\r\n\t\treturn this._wave;\r\n\t}\r\n}\r\n\r\nexport class Instrument {\r\n\tpublic type: InstrumentType = InstrumentType.chip;\r\n\tpublic preset: number = 0;\r\n\tpublic chipWave: number = 2;\r\n\tpublic chipNoise: number = 1;\r\n\tpublic filterCutoff: number = 12;\r\n\tpublic filterResonance: number = 0;\r\n\tpublic filterEnvelope: number = 1;\r\n\tpublic transition: number = 1;\r\n\tpublic vibrato: number = 0;\r\n\tpublic vibratoDepth: number = 0;\r\n\tpublic vibratoSpeed: number = 10;\r\n\tpublic vibratoDelay: number = 0;\r\n\tpublic vibratoType: number = 0;\r\n\tpublic interval: number = 0;\r\n\tpublic effects: number = 0;\r\n\tpublic chord: number = 1;\r\n\tpublic volume: number = 0;\r\n\tpublic pan: number = Config.panCenter;\r\n\tpublic panDelay: number = 10;\r\n\tpublic arpeggioSpeed: number = 12;\r\n\tpublic fastTwoNoteArp: boolean = false;\r\n\tpublic tieNoteTransition: boolean = false;\r\n\tpublic clicklessTransition: boolean = false;\r\n\tpublic detune: number = 0;\r\n\tpublic pulseWidth: number = Config.pulseWidthRange;\r\n\tpublic pulseEnvelope: number = 1;\r\n\tpublic algorithm: number = 0;\r\n\tpublic feedbackType: number = 0;\r\n\tpublic feedbackAmplitude: number = 0;\r\n\tpublic feedbackEnvelope: number = 1;\r\n\tpublic LFOtime: number = 0;\r\n\tpublic nextLFOtime: number = 0;\r\n\tpublic arpTime: number = 0;\r\n\tpublic customChipWave: Float64Array = new Float64Array(64);\r\n\tpublic customChipWaveIntegral: Float64Array = new Float64Array(65); // One extra element for wrap-around in chipSynth.\r\n\tpublic readonly operators: Operator[] = [];\r\n\tpublic readonly spectrumWave: SpectrumWave;\r\n\tpublic readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\r\n\tpublic readonly drumsetEnvelopes: number[] = [];\r\n\tpublic readonly drumsetSpectrumWaves: SpectrumWave[] = [];\r\n\tpublic modChannels: number[] = [];\r\n\tpublic modStatuses: ModStatus[] = [];\r\n\tpublic modInstruments: number[] = [];\r\n\tpublic modSettings: ModSetting[] = [];\r\n\r\n\tconstructor(isNoiseChannel: boolean, isModChannel: boolean) {\r\n\r\n\t\tif (isModChannel) {\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tthis.modChannels.push(0);\r\n\t\t\t\tthis.modStatuses.push(ModStatus.msNone);\r\n\t\t\t\tthis.modInstruments.push(0);\r\n\t\t\t\tthis.modSettings.push(ModSetting.mstNone);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.spectrumWave = new SpectrumWave(isNoiseChannel);\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\tthis.operators[i] = new Operator(i);\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\tthis.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\tthis.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < 64; i++) {\r\n\t\t\tthis.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\r\n\t\t}\r\n\r\n\t\tlet sum: number = 0.0;\r\n\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\tsum += this.customChipWave[i];\r\n\t\t}\r\n\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\tlet cumulative: number = 0;\r\n\t\tlet wavePrev: number = 0;\r\n\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\tcumulative += wavePrev;\r\n\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t}\r\n\r\n\t\t// 65th, last sample is for anti-aliasing\r\n\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\r\n\t}\r\n\r\n\tpublic setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n\t\t// Mod channels are forced to one type.\r\n\t\tif (isModChannel) type = InstrumentType.mod;\r\n\t\tthis.type = type;\r\n\t\tthis.preset = type;\r\n\t\tthis.volume = 0;\r\n\t\tthis.pan = Config.panCenter;\r\n\t\tthis.panDelay = 10;\r\n\t\tthis.arpeggioSpeed = 12;\r\n\t\tthis.detune = 0;\r\n\t\tthis.tieNoteTransition = false;\r\n\t\tthis.clicklessTransition = false;\r\n\t\tswitch (type) {\r\n\t\t\tcase InstrumentType.chip:\r\n\t\t\t\tthis.chipWave = 2;\r\n\t\t\t\tthis.filterCutoff = 6;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.customChipWave:\r\n\t\t\t\tthis.chipWave = 2;\r\n\t\t\t\tthis.filterCutoff = 6;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tfor (let i: number = 0; i < 64; i++) {\r\n\t\t\t\t\tthis.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += this.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.fm:\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = 1;\r\n\t\t\t\tthis.algorithm = 0;\r\n\t\t\t\tthis.feedbackType = 0;\r\n\t\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\t\tthis.feedbackEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\r\n\t\t\t\t\tthis.operators[i].reset(i);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.noise:\r\n\t\t\t\tthis.chipNoise = 1;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.spectrum:\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.spectrumWave.reset(isNoiseChannel);\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.drumset:\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\t\tthis.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\t\tif (this.drumsetSpectrumWaves[i] == undefined) {\r\n\t\t\t\t\t\tthis.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.drumsetSpectrumWaves[i].reset(isNoiseChannel);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.harmonics:\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.harmonicsWave.reset();\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.pwm:\r\n\t\t\t\tthis.filterCutoff = 10;\r\n\t\t\t\tthis.filterResonance = 0;\r\n\t\t\t\tthis.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t\tthis.transition = 1;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 1;\r\n\t\t\t\tthis.chord = 2;\r\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange;\r\n\t\t\t\tthis.pulseEnvelope = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\tbreak;\r\n\t\t\tcase InstrumentType.mod:\r\n\t\t\t\tthis.transition = 0;\r\n\t\t\t\tthis.vibrato = 0;\r\n\t\t\t\tthis.interval = 0;\r\n\t\t\t\tthis.effects = 0;\r\n\t\t\t\tthis.chord = 0;\r\n\t\t\t\tthis.modChannels = [];\r\n\t\t\t\tthis.modStatuses = [];\r\n\t\t\t\tthis.modInstruments = [];\r\n\t\t\t\tthis.modSettings = [];\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tthis.modChannels.push(0);\r\n\t\t\t\t\tthis.modStatuses.push(ModStatus.msNone);\r\n\t\t\t\t\tthis.modInstruments.push(0);\r\n\t\t\t\t\tthis.modSettings.push(ModSetting.mstNone);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Unrecognized instrument type: \" + type);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toJsonObject(): Object {\r\n\t\tconst instrumentObject: any = {\r\n\t\t\t\"type\": Config.instrumentTypeNames[this.type],\r\n\t\t\t\"volume\": this.volume,\r\n\t\t\t\"pan\": (this.pan - Config.panCenter) * 100 / Config.panCenter,\r\n\t\t\t\"panDelay\": this.panDelay,\r\n\t\t\t\"arpeggioSpeed\": this.arpeggioSpeed,\r\n\t\t\t\"fastTwoNoteArp\": this.fastTwoNoteArp,\r\n\t\t\t\"tieNoteTransition\": this.tieNoteTransition,\r\n\t\t\t\"clicklessTransition\": this.clicklessTransition,\r\n\t\t\t\"vibrato\": this.vibrato,\r\n\t\t\t\"vibratoDepth\": this.vibratoDepth,\r\n\t\t\t\"vibratoDelay\": this.vibratoDelay,\r\n\t\t\t\"vibratoSpeed\": this.vibratoSpeed,\r\n\t\t\t\"vibratoType\": this.vibratoType,\r\n\t\t\t\"detune\": this.detune,\r\n\t\t\t\"effects\": Config.effectsNames[this.effects],\r\n\t\t};\r\n\r\n\t\tif (this.preset != this.type) {\r\n\t\t\tinstrumentObject[\"preset\"] = this.preset;\r\n\t\t}\r\n\r\n\t\tif (this.type != InstrumentType.drumset) {\r\n\t\t\tinstrumentObject[\"transition\"] = Config.transitions[this.transition].name;\r\n\t\t\tinstrumentObject[\"chord\"] = this.getChord().name;\r\n\t\t\tinstrumentObject[\"filterCutoffHz\"] = Math.round(Config.filterCutoffMaxHz * Math.pow(2.0, this.getFilterCutoffOctaves()));\r\n\t\t\tinstrumentObject[\"filterResonance\"] = Math.round(100 * this.filterResonance / (Config.filterResonanceRange - 1));\r\n\t\t\tinstrumentObject[\"filterEnvelope\"] = this.getFilterEnvelope().name;\r\n\t\t}\r\n\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tinstrumentObject[\"spectrum\"] = [];\r\n\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\tinstrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tinstrumentObject[\"drums\"] = [];\r\n\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\tconst spectrum: number[] = [];\r\n\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\tspectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\r\n\t\t\t\t}\r\n\t\t\t\tinstrumentObject[\"drums\"][j] = {\r\n\t\t\t\t\t\"filterEnvelope\": this.getDrumsetEnvelope(j).name,\r\n\t\t\t\t\t\"spectrum\": spectrum,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.chip) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.customChipWave) {\r\n\t\t\tinstrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"customChipWave\"] = new Float64Array(64);\r\n\t\t\tinstrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\r\n\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\tinstrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\r\n\t\t\t\t// Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\r\n\t\t\t\t//instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\r\n\t\t\t}\r\n\r\n\t\t\tinstrumentObject[\"customChipWaveIntegral\"][64] = 0;\r\n\t\t} else if (this.type == InstrumentType.pwm) {\r\n\t\t\tinstrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n\t\t\tinstrumentObject[\"pulseEnvelope\"] = Config.envelopes[this.pulseEnvelope].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tinstrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"harmonics\"] = [];\r\n\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\tinstrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.fm) {\r\n\t\t\tconst operatorArray: Object[] = [];\r\n\t\t\tfor (const operator of this.operators) {\r\n\t\t\t\toperatorArray.push({\r\n\t\t\t\t\t\"frequency\": Config.operatorFrequencies[operator.frequency].name,\r\n\t\t\t\t\t\"amplitude\": operator.amplitude,\r\n\t\t\t\t\t\"envelope\": Config.envelopes[operator.envelope].name,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (this.vibrato != 5) {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n\t\t\t} else {\r\n\t\t\t\tinstrumentObject[\"vibrato\"] = \"custom\";\r\n\t\t\t}\r\n\t\t\tinstrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\r\n\t\t\tinstrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\r\n\t\t\tinstrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n\t\t\tinstrumentObject[\"feedbackEnvelope\"] = Config.envelopes[this.feedbackEnvelope].name;\r\n\t\t\tinstrumentObject[\"operators\"] = operatorArray;\r\n\t\t} else if (this.type == InstrumentType.mod) {\r\n\t\t\tinstrumentObject[\"modChannels\"] = [];\r\n\t\t\tinstrumentObject[\"modInstruments\"] = [];\r\n\t\t\tinstrumentObject[\"modSettings\"] = [];\r\n\t\t\tinstrumentObject[\"modStatuses\"] = [];\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tinstrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\r\n\t\t\t\tinstrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\r\n\t\t\t\tinstrumentObject[\"modSettings\"][mod] = this.modSettings[mod];\r\n\t\t\t\tinstrumentObject[\"modStatuses\"][mod] = this.modStatuses[mod];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type\");\r\n\t\t}\r\n\t\treturn instrumentObject;\r\n\t}\r\n\r\n\tpublic fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean): void {\r\n\t\tif (instrumentObject == undefined) instrumentObject = {};\r\n\r\n\t\tlet type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\r\n\t\tif (type.valueOf() == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\r\n\t\tthis.setTypeAndReset(type, isNoiseChannel, isModChannel);\r\n\r\n\t\tif (instrumentObject[\"preset\"] != undefined) {\r\n\t\t\tthis.preset = instrumentObject[\"preset\"] >>> 0;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"volume\"] != undefined) {\r\n\t\t\tthis.volume = clamp(-Config.volumeRange / 2, Config.volumeRange / 2, instrumentObject[\"volume\"] | 0);\r\n\t\t} else {\r\n\t\t\tthis.volume = 0;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"pan\"] != undefined) {\r\n\t\t\tthis.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\r\n\t\t} else {\r\n\t\t\tthis.pan = Config.panCenter;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"panDelay\"] != undefined) {\r\n\t\t\tthis.panDelay = (instrumentObject[\"panDelay\"] | 0);\r\n\t\t} else {\r\n\t\t\tthis.panDelay = 10;\r\n\t\t}\r\n\r\n\t\tif (instrumentObject[\"detune\"] != undefined) {\r\n\t\t\tthis.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.detune = 0;\r\n\t\t}\r\n\r\n\t\tconst oldTransitionNames: Dictionary<number> = { \"binary\": 0, \"sudden\": 1, \"smooth\": 2 };\r\n\t\tconst transitionObject = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so try that too.\r\n\t\tthis.transition = oldTransitionNames[transitionObject] != undefined ? oldTransitionNames[transitionObject] : Config.transitions.findIndex(transition => transition.name == transitionObject);\r\n\t\tif (this.transition == -1) this.transition = 1;\r\n\r\n\t\tthis.effects = Config.effectsNames.indexOf(instrumentObject[\"effects\"]);\r\n\t\tif (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\r\n\r\n\t\tif (instrumentObject[\"filterCutoffHz\"] != undefined) {\r\n\t\t\tthis.filterCutoff = clamp(0, Config.filterCutoffRange, Math.round((Config.filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / Config.filterCutoffMaxHz) / Math.LN2));\r\n\t\t} else {\r\n\t\t\tthis.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\r\n\t\t}\r\n\t\tif (instrumentObject[\"filterResonance\"] != undefined) {\r\n\t\t\tthis.filterResonance = clamp(0, Config.filterResonanceRange, Math.round((Config.filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\r\n\t\t} else {\r\n\t\t\tthis.filterResonance = 0;\r\n\t\t}\r\n\t\tthis.filterEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"filterEnvelope\"]);\r\n\t\tif (this.filterEnvelope == -1) this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\r\n\t\tif (instrumentObject[\"filter\"] != undefined) {\r\n\t\t\tconst legacyToCutoff: number[] = [20, 12, 6, 0, 16, 10, 4];\r\n\t\t\tconst legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n\t\t\tconst filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\t\t\tconst oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\r\n\t\t\tlet legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\r\n\t\t\tif (legacyFilter == -1) legacyFilter = 0;\r\n\t\t\tthis.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\tthis.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\tthis.filterResonance = 0;\r\n\t\t}\r\n\r\n\t\tconst legacyEffectNames: ReadonlyArray<string> = [\"none\", \"vibrato light\", \"vibrato delayed\", \"vibrato heavy\"];\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tthis.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n\t\t\tif (this.chipNoise == -1) this.chipNoise = 1;\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tif (instrumentObject[\"spectrum\"] != undefined) {\r\n\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\tthis.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tif (instrumentObject[\"drums\"] != undefined) {\r\n\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\tconst drum: any = instrumentObject[\"drums\"][j];\r\n\t\t\t\t\tif (drum == undefined) continue;\r\n\r\n\t\t\t\t\tif (drum[\"filterEnvelope\"] != undefined) {\r\n\t\t\t\t\t\tthis.drumsetEnvelopes[j] = Config.envelopes.findIndex(envelope => envelope.name == drum[\"filterEnvelope\"]);\r\n\t\t\t\t\t\tif (this.drumsetEnvelopes[j] == -1) this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (drum[\"spectrum\"] != undefined) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tthis.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tif (instrumentObject[\"harmonics\"] != undefined) {\r\n\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\tthis.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\t\t} else if (this.type == InstrumentType.pwm) {\r\n\t\t\tif (instrumentObject[\"pulseWidth\"] != undefined) {\r\n\t\t\t\tthis.pulseWidth = clamp(0, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\r\n\t\t\t} else {\r\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"pulseEnvelope\"] != undefined) {\r\n\t\t\t\tthis.pulseEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"pulseEnvelope\"]);\r\n\t\t\t\tif (this.pulseEnvelope == -1) this.pulseEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 0;\r\n\t\t} else if (this.type == InstrumentType.chip) {\r\n\t\t\tconst legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\r\n\t\t\tthis.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n\t\t\tif (this.chipWave == -1) this.chipWave = 1;\r\n\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t} else if (instrumentObject[\"chorus\"] != undefined) {\r\n\t\t\t\tconst legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n\t\t\t\tthis.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t\t// The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n\t\t\tif (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n\t\t\t\tthis.interval = 2;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.fm) {\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 3;\r\n\r\n\t\t\tthis.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\r\n\t\t\tif (this.algorithm == -1) this.algorithm = 0;\r\n\t\t\tthis.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\r\n\t\t\tif (this.feedbackType == -1) this.feedbackType = 0;\r\n\t\t\tif (instrumentObject[\"feedbackAmplitude\"] != undefined) {\r\n\t\t\t\tthis.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconst legacyEnvelopeNames: Dictionary<number> = { \"pluck 1\": 6, \"pluck 2\": 7, \"pluck 3\": 8 };\r\n\t\t\tthis.feedbackEnvelope = legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] != undefined ? legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"feedbackEnvelope\"]);\r\n\t\t\tif (this.feedbackEnvelope == -1) this.feedbackEnvelope = 0;\r\n\r\n\t\t\tfor (let j: number = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\tconst operator: Operator = this.operators[j];\r\n\t\t\t\tlet operatorObject: any = undefined;\r\n\t\t\t\tif (instrumentObject[\"operators\"]) operatorObject = instrumentObject[\"operators\"][j];\r\n\t\t\t\tif (operatorObject == undefined) operatorObject = {};\r\n\r\n\t\t\t\toperator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\r\n\t\t\t\tif (operator.frequency == -1) operator.frequency = 0;\r\n\t\t\t\tif (operatorObject[\"amplitude\"] != undefined) {\r\n\t\t\t\t\toperator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\r\n\t\t\t\t} else {\r\n\t\t\t\t\toperator.amplitude = 0;\r\n\t\t\t\t}\r\n\t\t\t\toperator.envelope = legacyEnvelopeNames[operatorObject[\"envelope\"]] != undefined ? legacyEnvelopeNames[operatorObject[\"envelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == operatorObject[\"envelope\"]);\r\n\t\t\t\tif (operator.envelope == -1) operator.envelope = 0;\r\n\t\t\t}\r\n\t\t} else if (this.type == InstrumentType.customChipWave) {\r\n\t\t\tif (instrumentObject[\"interval\"] != undefined) {\r\n\t\t\t\tthis.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t} else if (instrumentObject[\"chorus\"] != undefined) {\r\n\t\t\t\tconst legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n\t\t\t\tthis.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n\t\t\t\tif (this.interval == -1) this.interval = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"vibrato\"] != undefined) {\r\n\t\t\t\tthis.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n\t\t\t\tif (this.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\tthis.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n\t\t\t\t\tthis.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n\t\t\t\t\tthis.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n\t\t\t\t\tthis.vibratoType = instrumentObject[\"vibratoType\"];\r\n\t\t\t\t}\r\n\t\t\t\telse { // Set defaults for the vibrato profile\r\n\t\t\t\t\tthis.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n\t\t\t\t\tthis.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n\t\t\t\t\tthis.vibratoSpeed = 10; // default;\r\n\t\t\t\t\tthis.vibratoType = Config.vibratos[this.vibrato].type;\r\n\t\t\t\t}\r\n\t\t\t} else if (instrumentObject[\"effect\"] != undefined) {\r\n\t\t\t\tthis.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n\t\t\t\tif (this.vibrato == -1) this.vibrato = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n\t\t\tif (this.chord == -1) this.chord = 2;\r\n\r\n\t\t\t// The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n\t\t\tif (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n\t\t\t\tthis.interval = 2;\r\n\t\t\t\tthis.chord = 3;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"customChipWave\"]) {\r\n\r\n\t\t\t\tfor (let i: number = 0; i < 64; i++) {\r\n\t\t\t\t\tthis.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += this.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / this.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < this.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = this.customChipWave[i] - average;\r\n\t\t\t\t\tthis.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 65th, last sample is for anti-aliasing\r\n\t\t\t\tthis.customChipWaveIntegral[64] = 0.0;\r\n\t\t\t}\r\n\r\n\t\t} else if (this.type == InstrumentType.mod) {\r\n\t\t\tif (instrumentObject[\"modChannels\"] != undefined) {\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tthis.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\r\n\t\t\t\t\tthis.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\r\n\t\t\t\t\tthis.modSettings[mod] = instrumentObject[\"modSettings\"][mod];\r\n\t\t\t\t\tthis.modStatuses[mod] = instrumentObject[\"modStatuses\"][mod];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type.\");\r\n\t\t}\r\n\r\n\t\tif (this.type != InstrumentType.mod) {\r\n\t\t\t// Arpeggio speed\r\n\t\t\tif (this.chord == 2 && instrumentObject[\"arpeggioSpeed\"] != undefined) {\r\n\t\t\t\tthis.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\r\n\t\t\t\tthis.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fastTwoNoteArp = useFastTwoNoteArp;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"tieNoteTransition\"] != undefined) {\r\n\t\t\t\tthis.tieNoteTransition = instrumentObject[\"tieNoteTransition\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.tieNoteTransition = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (instrumentObject[\"clicklessTransition\"] != undefined) {\r\n\t\t\t\tthis.clicklessTransition = instrumentObject[\"clicklessTransition\"];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.clicklessTransition = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static frequencyFromPitch(pitch: number): number {\r\n\t\treturn 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\r\n\t}\r\n\r\n\tpublic static drumsetIndexReferenceDelta(index: number): number {\r\n\t\treturn Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\r\n\t}\r\n\r\n\tprivate static _drumsetIndexToSpectrumOctave(index: number) {\r\n\t\treturn 15 + Math.log(Instrument.drumsetIndexReferenceDelta(index)) / Math.LN2;\r\n\t}\r\n\r\n\tpublic warmUp(): void {\r\n\t\tthis.LFOtime = 0;\r\n\t\tthis.nextLFOtime = 0;\r\n\t\tthis.arpTime = 0;\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\tgetDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n\t\t} else if (this.type == InstrumentType.harmonics) {\r\n\t\t\tthis.harmonicsWave.getCustomWave();\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\tthis.spectrumWave.getCustomWave(8);\r\n\t\t} else if (this.type == InstrumentType.drumset) {\r\n\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\tthis.drumsetSpectrumWaves[i].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(i));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getDrumWave(): Float32Array {\r\n\t\tif (this.type == InstrumentType.noise) {\r\n\t\t\treturn getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n\t\t} else if (this.type == InstrumentType.spectrum) {\r\n\t\t\treturn this.spectrumWave.getCustomWave(8);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unhandled instrument type in getDrumWave\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getDrumsetWave(pitch: number): Float32Array {\r\n\t\tif (this.type == InstrumentType.drumset) {\r\n\t\t\treturn this.drumsetSpectrumWaves[pitch].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(pitch));\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unhandled instrument type in getDrumWave\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getTransition(): Transition {\r\n\t\treturn this.type == InstrumentType.drumset ? Config.transitions.dictionary[\"hard fade\"] :\r\n\t\t\tthis.type == InstrumentType.mod ? Config.transitions.dictionary[\"seamless\"] : Config.transitions[this.transition];\r\n\t}\r\n\tpublic getChord(): Chord {\r\n\t\treturn this.type == InstrumentType.drumset ? Config.chords.dictionary[\"harmony\"] : Config.chords[this.chord];\r\n\t}\r\n\tpublic getFilterCutoffOctaves(): number {\r\n\t\treturn this.type == InstrumentType.drumset ? 0 : (this.filterCutoff - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t}\r\n\tpublic getFilterIsFirstOrder(): boolean {\r\n\t\treturn this.type == InstrumentType.drumset ? false : this.filterResonance == 0;\r\n\t}\r\n\tpublic getFilterResonance(): number {\r\n\t\treturn this.type == InstrumentType.drumset ? 1 : this.filterResonance;\r\n\t}\r\n\tpublic getFilterEnvelope(): Envelope {\r\n\t\tif (this.type == InstrumentType.drumset) throw new Error(\"Can't getFilterEnvelope() for drumset.\");\r\n\t\treturn Config.envelopes[this.filterEnvelope];\r\n\t}\r\n\tpublic getDrumsetEnvelope(pitch: number): Envelope {\r\n\t\tif (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\r\n\t\treturn Config.envelopes[this.drumsetEnvelopes[pitch]];\r\n\t}\r\n}\r\n\r\nexport enum ModStatus {\r\n\tmsForPitch = 0,\r\n\tmsForNoise = 1,\r\n\tmsForSong = 2,\r\n\tmsNone = 3,\r\n}\r\n\r\nexport enum ModSetting {\r\n\tmstNone = 0,\r\n\tmstSongVolume = 1,\r\n\tmstTempo = 2,\r\n\tmstReverb = 3,\r\n\tmstNextBar = 4,\r\n\tmstInsVolume = 5,\r\n\tmstPan = 6,\r\n\tmstFilterCut = 7,\r\n\tmstFilterPeak = 8,\r\n\tmstFMSlider1 = 9,\r\n\tmstFMSlider2 = 10,\r\n\tmstFMSlider3 = 11,\r\n\tmstFMSlider4 = 12,\r\n\tmstFMFeedback = 13,\r\n\tmstPulseWidth = 14,\r\n\tmstDetune = 15,\r\n\tmstVibratoDepth = 16,\r\n\tmstSongDetune = 17,\r\n\tmstVibratoSpeed = 18,\r\n\tmstVibratoDelay = 19,\r\n\tmstArpeggioSpeed = 20,\r\n\tmstPanDelay = 21,\r\n\tmstResetArpeggio = 22,\r\n\tmstMaxValue = 23,\r\n}\r\n\r\nexport class Channel {\r\n\tpublic octave: number = 0;\r\n\tpublic readonly instruments: Instrument[] = [];\r\n\tpublic readonly patterns: Pattern[] = [];\r\n\tpublic readonly bars: number[] = [];\r\n\tpublic muted: boolean = false;\r\n\tpublic name: string = \"\";\r\n}\r\n\r\nexport class Song {\r\n\tprivate static readonly _format: string = \"BeepBox\";\r\n\tprivate static readonly _oldestBeepboxVersion: number = 2;\r\n\tprivate static readonly _latestBeepboxVersion: number = 8;\r\n\tprivate static readonly _oldestJummBoxVersion: number = 1;\r\n\tprivate static readonly _latestJummBoxVersion: number = 4;\r\n\t// One-character variant detection at the start of URL to distinguish variants such as JummBox.\r\n\tprivate static readonly _variant = 0x6A; //\"j\" ~ jummbox\r\n\r\n\tpublic title: string;\r\n\tpublic scale: number;\r\n\tpublic key: number;\r\n\tpublic tempo: number;\r\n\tpublic reverb: number;\r\n\tpublic beatsPerBar: number;\r\n\tpublic barCount: number;\r\n\tpublic patternsPerChannel: number;\r\n\tpublic rhythm: number;\r\n\tpublic instrumentsPerChannel: number;\r\n\tpublic loopStart: number;\r\n\tpublic loopLength: number;\r\n\tpublic pitchChannelCount: number;\r\n\tpublic noiseChannelCount: number;\r\n\tpublic modChannelCount: number;\r\n\tpublic readonly channels: Channel[] = [];\r\n\tpublic limitDecay: number = 4.0;\r\n\tpublic limitRise: number = 4000.0;\r\n\tpublic compressionThreshold: number = 1.0;\r\n\tpublic limitThreshold: number = 1.0;\r\n\tpublic compressionRatio: number = 1.0;\r\n\tpublic limitRatio: number = 1.0;\r\n\tpublic masterGain: number = 1.0;\r\n\tpublic inVolumeCap: number = 0.0;\r\n\tpublic outVolumeCap: number = 0.0;\r\n\r\n\t// Maximum value possible for the mod (total number of possible positions)\r\n\tpublic mstMaxVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n\t\t[ModSetting.mstNone, 6],\r\n\t\t[ModSetting.mstSongVolume, 100],\r\n\t\t[ModSetting.mstTempo, Config.tempoMax - Config.tempoMin],\r\n\t\t[ModSetting.mstReverb, Config.reverbRange - 1],\r\n\t\t[ModSetting.mstNextBar, 1],\r\n\t\t[ModSetting.mstInsVolume, Config.volumeRange],\r\n\t\t[ModSetting.mstPan, Config.panMax],\r\n\t\t[ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n\t\t[ModSetting.mstFilterPeak, Config.filterResonanceRange - 1],\r\n\t\t[ModSetting.mstFMSlider1, 15],\r\n\t\t[ModSetting.mstFMSlider2, 15],\r\n\t\t[ModSetting.mstFMSlider3, 15],\r\n\t\t[ModSetting.mstFMSlider4, 15],\r\n\t\t[ModSetting.mstFMFeedback, 15],\r\n\t\t[ModSetting.mstPulseWidth, Config.pulseWidthRange],\r\n\t\t[ModSetting.mstDetune, Config.detuneMax - Config.detuneMin],\r\n\t\t[ModSetting.mstVibratoDepth, 50],\r\n\t\t[ModSetting.mstSongDetune, Config.songDetuneMax - Config.songDetuneMin],\r\n\t\t[ModSetting.mstVibratoSpeed, 30],\r\n\t\t[ModSetting.mstVibratoDelay, 50],\r\n\t\t[ModSetting.mstArpeggioSpeed, 50],\r\n\t\t[ModSetting.mstPanDelay, 20],\r\n\t\t[ModSetting.mstResetArpeggio, 1],\r\n\t\t[ModSetting.mstMaxValue, 6],\r\n\t]\r\n\t);\r\n\r\n\t// When creating a new note, this is the value to set a mod note to (generally the most \"neutral\" value possible)\r\n\tpublic mstNewNoteVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n\t\t[ModSetting.mstNone, 6],\r\n\t\t[ModSetting.mstSongVolume, 100],\r\n\t\t[ModSetting.mstTempo, Math.ceil((Config.tempoMax - Config.tempoMin) / 2)],\r\n\t\t[ModSetting.mstReverb, 0],\r\n\t\t[ModSetting.mstNextBar, 1],\r\n\t\t[ModSetting.mstInsVolume, Math.ceil(Config.volumeRange / 2)],\r\n\t\t[ModSetting.mstPan, Math.ceil(Config.panMax / 2)],\r\n\t\t[ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n\t\t[ModSetting.mstFilterPeak, 0],\r\n\t\t[ModSetting.mstFMSlider1, 15],\r\n\t\t[ModSetting.mstFMSlider2, 15],\r\n\t\t[ModSetting.mstFMSlider3, 15],\r\n\t\t[ModSetting.mstFMSlider4, 15],\r\n\t\t[ModSetting.mstFMFeedback, 15],\r\n\t\t[ModSetting.mstPulseWidth, Math.ceil(Config.pulseWidthRange)],\r\n\t\t[ModSetting.mstDetune, Math.ceil((Config.detuneMax - Config.detuneMin) / 2)],\r\n\t\t[ModSetting.mstVibratoDepth, 0],\r\n\t\t[ModSetting.mstSongDetune, Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2)],\r\n\t\t[ModSetting.mstVibratoSpeed, 0],\r\n\t\t[ModSetting.mstVibratoDelay, 0],\r\n\t\t[ModSetting.mstArpeggioSpeed, 10],\r\n\t\t[ModSetting.mstPanDelay, 10],\r\n\t\t[ModSetting.mstResetArpeggio, 1],\r\n\t\t[ModSetting.mstMaxValue, 6],\r\n\t])\r\n\r\n\tconstructor(string?: string) {\r\n\t\tif (string != undefined) {\r\n\t\t\tthis.fromBase64String(string);\r\n\t\t} else {\r\n\t\t\tthis.initToDefault(true);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic modValueToReal(value: number, setting: ModSetting): number {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\t\tvalue += Config.tempoMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\t\tvalue -= Config.volumeRange / 2.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tvalue += Config.detuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tvalue += Config.songDetuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tpublic isSettingForSong(setting: ModSetting): boolean {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\t\treturn true;\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic realToModValue(value: number, setting: ModSetting): number {\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\t\tvalue -= Config.tempoMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\t\tvalue += Config.volumeRange / 2.0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tvalue -= Config.detuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tvalue -= Config.songDetuneMin;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\r\n\tpublic getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n\t\tif (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\t// Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n\t\t\tmodCount = Config.modCount - modCount - 1;\r\n\r\n\t\t\tlet cap: number | undefined = this.mstNewNoteVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n\r\n\t\t\t// For tempo, actually use user defined tempo\r\n\t\t\tif (this.channels[modChannel].instruments[modInstrument].modSettings[modCount] == ModSetting.mstTempo) {\r\n\t\t\t\tcap = this.realToModValue(this.tempo, ModSetting.mstTempo);\r\n\t\t\t}\r\n\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n\t\tif (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\t// Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n\t\t\tmodCount = Config.modCount - modCount - 1;\r\n\r\n\t\t\tlet cap: number | undefined = this.mstMaxVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getVolumeCapForSetting = (isMod: boolean, modSetting: ModSetting): number => {\r\n\t\tif (!isMod)\r\n\t\t\treturn 6;\r\n\t\telse {\r\n\t\t\tlet cap: number | undefined = this.mstMaxVols.get(modSetting);\r\n\t\t\tif (cap != undefined)\r\n\t\t\t\treturn cap;\r\n\t\t\telse\r\n\t\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getChannelCount(): number {\r\n\t\treturn this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\r\n\t}\r\n\r\n\tpublic getChannelIsNoise(channel: number): boolean {\r\n\t\treturn (channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount);\r\n\t}\r\n\r\n\tpublic getChannelIsMod(channel: number): boolean {\r\n\t\treturn (channel >= this.pitchChannelCount + this.noiseChannelCount);\r\n\t}\r\n\r\n\tpublic initToDefault(andResetChannels: boolean = true): void {\r\n\t\tthis.scale = 0;\r\n\t\tthis.key = 0;\r\n\t\tthis.loopStart = 0;\r\n\t\tthis.loopLength = 4;\r\n\t\tthis.tempo = 150;\r\n\t\tthis.reverb = 0;\r\n\t\tthis.beatsPerBar = 8;\r\n\t\tthis.barCount = 16;\r\n\t\tthis.patternsPerChannel = 8;\r\n\t\tthis.rhythm = 1;\r\n\t\tthis.instrumentsPerChannel = 1;\r\n\r\n\t\tthis.title = \"Unnamed\";\r\n\t\tdocument.title = EditorConfig.versionDisplayName;\r\n\r\n\t\tif (andResetChannels) {\r\n\t\t\tthis.pitchChannelCount = 3;\r\n\t\t\tthis.noiseChannelCount = 1;\r\n\t\t\tthis.modChannelCount = 0;\r\n\t\t\tfor (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\tif (this.channels.length <= channelIndex) {\r\n\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t}\r\n\t\t\t\tconst channel: Channel = this.channels[channelIndex];\r\n\t\t\t\tchannel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0, 0, ...]; Descending octaves with drums at zero in last channel and onward.\r\n\r\n\t\t\t\tfor (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\tif (channel.patterns.length <= pattern) {\r\n\t\t\t\t\t\tchannel.patterns[pattern] = new Pattern();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchannel.patterns[pattern].reset();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\r\n\r\n\t\t\t\tconst isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\tconst isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\tfor (let instrument = 0; instrument < this.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tif (channel.instruments.length <= instrument) {\r\n\t\t\t\t\t\tchannel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchannel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\r\n\t\t\t\t}\r\n\t\t\t\tchannel.instruments.length = this.instrumentsPerChannel;\r\n\r\n\t\t\t\tfor (let bar = 0; bar < this.barCount; bar++) {\r\n\t\t\t\t\tchannel.bars[bar] = bar < 4 ? 1 : 0;\r\n\t\t\t\t}\r\n\t\t\t\tchannel.bars.length = this.barCount;\r\n\t\t\t}\r\n\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toBase64String(): string {\r\n\t\tlet bits: BitFieldWriter;\r\n\t\tlet buffer: number[] = [];\r\n\r\n\t\tbuffer.push(Song._variant);\r\n\t\tbuffer.push(base64IntToCharCode[Song._latestJummBoxVersion]);\r\n\r\n\t\tbuffer.push(SongTagCode.songTitle);\r\n\r\n\t\t// Length of the song name string\r\n\t\tvar encodedSongTitle: string = encodeURIComponent(this.title);\r\n\t\tbuffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\r\n\r\n\t\t// Actual encoded string follows\r\n\t\tfor (let i: number = 0; i < encodedSongTitle.length; i++) {\r\n\t\t\tbuffer.push(encodedSongTitle.charCodeAt(i));\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\r\n\t\tbuffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n\t\tbuffer.push(SongTagCode.key, base64IntToCharCode[this.key]);\r\n\t\tbuffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\r\n\t\tbuffer.push(SongTagCode.reverb, base64IntToCharCode[this.reverb]);\r\n\t\tbuffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n\t\tbuffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\r\n\t\tbuffer.push(SongTagCode.instrumentCount, base64IntToCharCode[this.instrumentsPerChannel - 1]);\r\n\t\tbuffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\r\n\r\n\t\t// Push limiter settings, but only if they aren't the default!\r\n\t\tbuffer.push(SongTagCode.limiterSettings);\r\n\t\tif (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\r\n\t\t\tbuffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\r\n\t\t\tbuffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbuffer.push(base64IntToCharCode[0x3f]); // Not using limiter\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelNames);\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t// Length of the channel name string\r\n\t\t\tvar encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\r\n\t\t\tbuffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\r\n\r\n\t\t\t// Actual encoded string follows\r\n\t\t\tfor (let i: number = 0; i < encodedChannelName.length; i++) {\r\n\t\t\t\tbuffer.push(encodedChannelName.charCodeAt(i));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.channelOctave);\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tbuffer.push(base64IntToCharCode[this.channels[channel].octave]);\r\n\t\t}\r\n\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\tbuffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\r\n\t\t\t\tbuffer.push(SongTagCode.panning, base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\r\n\t\t\t\tbuffer.push(base64IntToCharCode[instrument.panDelay]); // Piggybacks after panning to reduce song tag code usage :P\r\n\t\t\t\tbuffer.push(SongTagCode.detune, base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3f]);\r\n\t\t\t\tbuffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\r\n\t\t\t\tbuffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects]);\r\n\r\n\r\n\t\t\t\tif (instrument.type != InstrumentType.drumset) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t// Transition info follows transition song tag\r\n\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.tieNoteTransition]);\r\n\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterCutoff, base64IntToCharCode[instrument.filterCutoff]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterResonance, base64IntToCharCode[instrument.filterResonance]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterEnvelope, base64IntToCharCode[instrument.filterEnvelope]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.chord, base64IntToCharCode[instrument.chord]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackEnvelope, base64IntToCharCode[instrument.feedbackEnvelope]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorFrequencies);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorAmplitudes);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.operatorEnvelopes);\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].envelope]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.customChipWave);\r\n\t\t\t\t\t// Push custom wave values\r\n\t\t\t\t\tfor (let j: number = 0; j < 64; j++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.spectrum) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.spectrum);\r\n\t\t\t\t\tconst spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\tspectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspectrumBits.encodeBase64(buffer);\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.filterEnvelope);\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.spectrum);\r\n\t\t\t\t\tconst spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tspectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tspectrumBits.encodeBase64(buffer);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n\t\t\t\t\tbuffer.push(SongTagCode.harmonics);\r\n\t\t\t\t\tconst harmonicsBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\t\tharmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tharmonicsBits.encodeBase64(buffer);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n\t\t\t\t\t// Custom vibrato settings\r\n\t\t\t\t\tif (instrument.vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Custom arpeggio speed... only if the instrument arpeggiates.\r\n\t\t\t\t\tif (instrument.chord == 2) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth], base64IntToCharCode[instrument.pulseEnvelope]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\t\t\t// Handled down below. Could be moved, but meh.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow new Error(\"Unknown instrument type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbuffer.push(SongTagCode.bars);\r\n\t\tbits = new BitFieldWriter();\r\n\t\tlet neededBits: number = 0;\r\n\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) for (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\tbits.write(neededBits, this.channels[channel].bars[i]);\r\n\t\t}\r\n\t\tbits.encodeBase64(buffer);\r\n\r\n\t\tbuffer.push(SongTagCode.patterns);\r\n\t\tbits = new BitFieldWriter();\r\n\t\tconst shapeBits: BitFieldWriter = new BitFieldWriter();\r\n\t\tlet neededInstrumentBits: number = 0;\r\n\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\r\n\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n\t\t\t// Some info about modulator settings immediately follows in mod channels.\r\n\t\t\tif (isModChannel) {\r\n\t\t\t\tfor (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n\t\t\t\t\tlet instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\tconst modStatus: ModStatus = instrument.modStatuses[mod];\r\n\t\t\t\t\t\tconst modChannel: number = instrument.modChannels[mod];\r\n\t\t\t\t\t\tconst modInstrument: number = instrument.modInstruments[mod];\r\n\t\t\t\t\t\tconst modSetting: number = instrument.modSettings[mod];\r\n\r\n\t\t\t\t\t\tbits.write(2, modStatus);\r\n\r\n\t\t\t\t\t\t// Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n\t\t\t\t\t\tif (modStatus == ModStatus.msForPitch || modStatus == ModStatus.msForNoise) {\r\n\t\t\t\t\t\t\tbits.write(8, modChannel);\r\n\t\t\t\t\t\t\tbits.write(neededInstrumentBits, modInstrument);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Mod setting is only used if the status isn't \"none\".\r\n\t\t\t\t\t\tif (modStatus != ModStatus.msNone) {\r\n\t\t\t\t\t\t\tbits.write(6, modSetting);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * 12;\r\n\t\t\tlet lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : 12) + octaveOffset;\r\n\t\t\tconst recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n\t\t\tconst recentShapes: any[] = [];\r\n\r\n\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t}\r\n\t\t\tfor (const pattern of this.channels[channel].patterns) {\r\n\t\t\t\tbits.write(neededInstrumentBits, pattern.instrument);\r\n\r\n\t\t\t\tif (pattern.notes.length > 0) {\r\n\t\t\t\t\tbits.write(1, 1);\r\n\r\n\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\tfor (const note of pattern.notes) {\r\n\r\n\t\t\t\t\t\t// For mod channels, a negative offset may be necessary.\r\n\t\t\t\t\t\tif (note.start < curPart && isModChannel) {\r\n\t\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\t\tbits.write(1, 1); // negative offset\r\n\t\t\t\t\t\t\tbits.writePartDuration(curPart - note.start);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (note.start > curPart) {\r\n\t\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\t\tif (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\r\n\t\t\t\t\t\t\tbits.writePartDuration(note.start - curPart);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tshapeBits.clear();\r\n\r\n\t\t\t\t\t\t// Old format was:\r\n\t\t\t\t\t\t// 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n\t\t\t\t\t\t// New format is:\r\n\t\t\t\t\t\t//\t  0: 1 pitch\r\n\t\t\t\t\t\t// 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n\t\t\t\t\t\tif (note.pitches.length == 1) {\r\n\t\t\t\t\t\t\tshapeBits.write(1, 0);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tshapeBits.write(1, 1);\r\n\t\t\t\t\t\t\tshapeBits.write(3, note.pitches.length - 2);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tshapeBits.writePinCount(note.pins.length - 1);\r\n\r\n\t\t\t\t\t\tif (!isModChannel) {\r\n\t\t\t\t\t\t\tshapeBits.write(3, note.pins[0].volume); // volume\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tshapeBits.write(9, note.pins[0].volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet shapePart: number = 0;\r\n\t\t\t\t\t\tlet startPitch: number = note.pitches[0];\r\n\t\t\t\t\t\tlet currentPitch: number = startPitch;\r\n\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\tfor (let i: number = 1; i < note.pins.length; i++) {\r\n\t\t\t\t\t\t\tconst pin: NotePin = note.pins[i];\r\n\t\t\t\t\t\t\tconst nextPitch: number = startPitch + pin.interval;\r\n\t\t\t\t\t\t\tif (currentPitch != nextPitch) {\r\n\t\t\t\t\t\t\t\tshapeBits.write(1, 1);\r\n\t\t\t\t\t\t\t\tpitchBends.push(nextPitch);\r\n\t\t\t\t\t\t\t\tcurrentPitch = nextPitch;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tshapeBits.write(1, 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tshapeBits.writePartDuration(pin.time - shapePart);\r\n\t\t\t\t\t\t\tshapePart = pin.time;\r\n\r\n\t\t\t\t\t\t\tif (!isModChannel) {\r\n\t\t\t\t\t\t\t\tshapeBits.write(3, pin.volume); // volume\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tshapeBits.write(9, pin.volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\r\n\t\t\t\t\t\tconst shapeIndex: number = recentShapes.indexOf(shapeString);\r\n\t\t\t\t\t\tif (shapeIndex == -1) {\r\n\t\t\t\t\t\t\tbits.write(2, 1); // new shape\r\n\t\t\t\t\t\t\tbits.concat(shapeBits);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbits.write(1, 1); // old shape\r\n\t\t\t\t\t\t\tbits.writeLongTail(0, 0, shapeIndex);\r\n\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trecentShapes.unshift(shapeString);\r\n\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\r\n\t\t\t\t\t\tconst allPitches: number[] = note.pitches.concat(pitchBends);\r\n\t\t\t\t\t\tfor (let i: number = 0; i < allPitches.length; i++) {\r\n\t\t\t\t\t\t\tconst pitch: number = allPitches[i];\r\n\t\t\t\t\t\t\tconst pitchIndex: number = recentPitches.indexOf(pitch);\r\n\t\t\t\t\t\t\tif (pitchIndex == -1) {\r\n\t\t\t\t\t\t\t\tlet interval: number = 0;\r\n\t\t\t\t\t\t\t\tlet pitchIter: number = lastPitch;\r\n\t\t\t\t\t\t\t\tif (pitchIter < pitch) {\r\n\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\tpitchIter++;\r\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\tpitchIter--;\r\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t\t\t\t\tbits.writePitchInterval(interval);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbits.write(1, 1);\r\n\t\t\t\t\t\t\t\tbits.write(4, pitchIndex);\r\n\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\tif (recentPitches.length > 16) recentPitches.pop();\r\n\r\n\t\t\t\t\t\t\tif (i == note.pitches.length - 1) {\r\n\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurPart = note.end;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\t\t\t\t\t\tbits.write(2, 0); // rest, then...\r\n\t\t\t\t\t\tif (isModChannel) bits.write(1, 0); // positive offset\r\n\t\t\t\t\t\tbits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet stringLength: number = bits.lengthBase64();\r\n\t\tlet digits: number[] = [];\r\n\t\twhile (stringLength > 0) {\r\n\t\t\tdigits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n\t\t\tstringLength = stringLength >> 6;\r\n\t\t}\r\n\t\tbuffer.push(base64IntToCharCode[digits.length]);\r\n\t\tArray.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n\t\tbits.encodeBase64(buffer);\r\n\r\n\t\tconst maxApplyArgs: number = 64000;\r\n\t\tif (buffer.length < maxApplyArgs) {\r\n\t\t\t// Note: Function.apply may break for long argument lists.\r\n\t\t\treturn String.fromCharCode.apply(null, buffer);\r\n\t\t} else {\r\n\t\t\tlet result: string = \"\";\r\n\t\t\tfor (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\r\n\t\t\t\tresult += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic fromBase64String(compressed: string): void {\r\n\t\tif (compressed == null || compressed == \"\") {\r\n\t\t\tthis.initToDefault(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet charIndex: number = 0;\r\n\t\t// skip whitespace.\r\n\t\twhile (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n\t\t// skip hash mark.\r\n\t\tif (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n\t\t// if it starts with curly brace, treat it as JSON.\r\n\t\tif (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n\t\t\tthis.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst variantTest: number = compressed.charCodeAt(charIndex);\r\n\t\tvar variant: string = \"beepbox\";\r\n\r\n\t\t// Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n\t\tif (variantTest == 0x6A) { //\"j\"\r\n\t\t\tvariant = \"jummbox\";\r\n\t\t\tcharIndex++;\r\n\t\t}\r\n\r\n\t\tconst version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\tif (variant == \"beepbox\" && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n\t\tif (variant == \"jummbox\" && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\r\n\r\n\t\tconst beforeTwo: boolean = version < 2;\r\n\t\tconst beforeThree: boolean = version < 3;\r\n\t\tconst beforeFour: boolean = version < 4;\r\n\t\tconst beforeFive: boolean = version < 5;\r\n\t\tconst beforeSix: boolean = version < 6;\r\n\t\tconst beforeSeven: boolean = version < 7;\r\n\t\tconst beforeEight: boolean = version < 8;\r\n\t\tthis.initToDefault(variant == \"beepbox\" && beforeSix);\r\n\r\n\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t// Originally, the only instrument transition was \"seamless\" and the only drum wave was \"retro\".\r\n\t\t\tfor (const channel of this.channels) channel.instruments[0].transition = 0;\r\n\t\t\tthis.channels[3].instruments[0].chipNoise = 0;\r\n\t\t}\r\n\r\n\t\tlet instrumentChannelIterator: number = 0;\r\n\t\tlet instrumentIndexIterator: number = -1;\r\n\t\tlet toSetOctaves: number[] = [];\r\n\t\tlet command: number;\r\n\t\tlet channel: number;\r\n\t\tlet useSlowerArpSpeed: boolean = false;\r\n\t\tlet useFastTwoNoteArp: boolean = false;\r\n\t\twhile (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\r\n\t\t\tcase SongTagCode.songTitle: {\r\n\t\t\t\t// Length of song name string\r\n\t\t\t\tvar songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tthis.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n\t\t\t\tdocument.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n\t\t\t\tcharIndex += songNameLength;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelCount: {\r\n\t\t\t\tthis.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tthis.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tif (variant == \"beepbox\" || beforeTwo) {\r\n\t\t\t\t\t// No mod channel support before jummbox v2\r\n\t\t\t\t\tthis.modChannelCount = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t}\r\n\t\t\t\tthis.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\r\n\t\t\t\tthis.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\r\n\t\t\t\tthis.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\r\n\r\n\t\t\t\tfor (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t}\r\n\t\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.scale: {\r\n\t\t\t\tthis.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t// All the scales were jumbled around by Jummbox. Just convert to free.\r\n\t\t\t\tif (variant == \"beepbox\") this.scale = 0;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.key: {\r\n\t\t\t\tif (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.loopStart: {\r\n\t\t\t\tif (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.loopEnd: {\r\n\t\t\t\tif (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.tempo: {\r\n\t\t\t\tif (beforeFour && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.reverb: {\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\tthis.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 8;\r\n\t\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.beatCount: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tthis.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.barCount: {\r\n\t\t\t\tconst barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\tthis.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tfor (let bar = this.channels[channel].bars.length; bar < this.barCount; bar++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[bar] = (bar < 4) ? 1 : 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].bars.length = this.barCount;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.patternCount: {\r\n\t\t\t\tif (variant == \"beepbox\" && beforeEight) {\r\n\t\t\t\t\tthis.patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t}\r\n\t\t\t\tthis.patternsPerChannel = validateRange(1, Config.barCountMax, this.patternsPerChannel);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tfor (let pattern = this.channels[channel].patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\t\tthis.channels[channel].patterns[pattern] = new Pattern();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].patterns.length = this.patternsPerChannel;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.instrumentCount: {\r\n\t\t\t\tconst instrumentsPerChannel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\tthis.instrumentsPerChannel = validateRange(Config.instrumentsPerChannelMin, Config.instrumentsPerChannelMax, instrumentsPerChannel);\r\n\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\tconst isNoiseChannel: boolean = channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\t\tconst isModChannel: boolean = channel >= this.pitchChannelCount + this.noiseChannelCount;\r\n\t\t\t\t\tfor (let instrumentIndex = this.channels[channel].instruments.length; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\t\t\t\t\t\tthis.channels[channel].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n\t\t\t\t\tif (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\t\tfor (let instrumentIndex = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.rhythm: {\r\n\t\t\t\tthis.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t// Port all arpeggio speeds over to match what they were, before arpeggio speed was decoupled from rhythm.\r\n\t\t\t\tif (variant == \"jummbox\" && beforeThree || variant == \"beepbox\") {\r\n\t\t\t\t\t// These are all the rhythms that had 4 ticks/arpeggio instead of 3.\r\n\t\t\t\t\tif (this.rhythm == 0 || this.rhythm == 2) {\r\n\t\t\t\t\t\tuseSlowerArpSpeed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Use faster two note arp on these rhythms\r\n\t\t\t\t\tif (this.rhythm >= 2) {\r\n\t\t\t\t\t\tuseFastTwoNoteArp = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelOctave: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t// Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n\t\t\t\t\tthis.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\ttoSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t// Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n\t\t\t\t\t\tthis.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\ttoSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.startInstrument: {\r\n\t\t\t\tinstrumentIndexIterator++;\r\n\t\t\t\tif (instrumentIndexIterator >= this.instrumentsPerChannel) {\r\n\t\t\t\t\tinstrumentChannelIterator++;\r\n\t\t\t\t\tinstrumentIndexIterator = 0;\r\n\t\t\t\t}\r\n\t\t\t\tvalidateRange(0, this.channels.length - 1, instrumentChannelIterator);\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tconst instrumentType: number = clamp(0, InstrumentType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tinstrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\r\n\t\t\t\tif (useSlowerArpSpeed) {\r\n\t\t\t\t\tinstrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\r\n\t\t\t\t}\r\n\t\t\t\tif (useFastTwoNoteArp) {\r\n\t\t\t\t\tinstrument.fastTwoNoteArp = true;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.preset: {\r\n\t\t\t\tconst presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.wave: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tconst channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tif (channel >= this.pitchChannelCount) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n\t\t\t\t\tif (instrumentChannelIterator >= this.pitchChannelCount) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (instrumentChannelIterator >= this.pitchChannelCount) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterCutoff: {\r\n\t\t\t\tif (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n\t\t\t\t\tconst legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n\t\t\t\t\tconst filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\r\n\t\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\t\tconst legacyFilter: number = [1, 3, 4, 5][clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\t\tconst legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n\t\t\t\t\t\t\t\tif (channel < this.pitchChannelCount) {\r\n\t\t\t\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tinstrument.filterCutoff = 10;\r\n\t\t\t\t\t\t\t\t\tinstrument.filterEnvelope = 1;\r\n\t\t\t\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t\tinstrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n\t\t\t\t\t\tinstrument.filterResonance = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.filterCutoff = clamp(0, Config.filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterResonance: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].filterResonance = clamp(0, Config.filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.filterEnvelope: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\r\n\t\t\t\t\t\tinstrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinstrument.filterEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.pulseWidth: {\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t// Convert back from beepbox's weird pulse width storage formula, rounding. The \"7\" in there is the old\r\n\t\t\t\t\t// piece of the formula \"beepbox.Config.pulseWidthRange - 1\".\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.pulseWidth = Math.round(clamp(0, Config.pulseWidthRange + 1, Math.pow(0.5, (7 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 0.5) * 50));\r\n\t\t\t\t\tinstrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.pulseWidth = clamp(0, Config.pulseWidthRange + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tinstrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.transition: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[i].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeFour || variant == \"beepbox\") {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].tieNoteTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.vibrato: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 3, 2, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 13];\r\n\t\t\t\t\tconst channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n\t\t\t\t\tconst legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\r\n\t\t\t\t\tinstrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n\t\t\t\t\t\t? legacyEnvelopes[effect]\r\n\t\t\t\t\t\t: instrument.filterEnvelope;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.vibrato = vibrato;\r\n\t\t\t\t\t// Custom vibrato\r\n\t\t\t\t\tif (vibrato == Config.vibratos.length) {\r\n\t\t\t\t\t\tinstrument.vibratoDepth = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDepth)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\r\n\t\t\t\t\t\tinstrument.vibratoSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tinstrument.vibratoDelay = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDelay)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tinstrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Enforce standard vibrato settings\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinstrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n\t\t\t\t\t\tinstrument.vibratoSpeed = 10; // Normal speed\r\n\t\t\t\t\t\tinstrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t\t\t\tinstrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.arpeggioSpeed: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tinstrument.arpeggioSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstArpeggioSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\tinstrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.interval: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.channels[channel].instruments[0].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\t\tlet interval: number = clamp(0, Config.intervals.length, originalValue);\r\n\t\t\t\t\t\t\tif (originalValue == 8) {\r\n\t\t\t\t\t\t\t\t// original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n\t\t\t\t\t\t\t\tinterval = 2;\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chord = 3;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[i].interval = interval;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tlet interval: number = clamp(0, Config.intervals.length, originalValue);\r\n\t\t\t\t\tif (originalValue == 8) {\r\n\t\t\t\t\t\t// original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n\t\t\t\t\t\tinterval = 2;\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = interval;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.chord: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.effects: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].effects = clamp(0, Config.effectsNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.volume: {\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[0];\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t} else if (beforeSix && variant == \"beepbox\") {\r\n\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeSeven && variant == \"beepbox\") {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n\t\t\t\t} else if (variant == \"beepbox\") {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t// Beepbox v7's volume range is 0-7 (0 is max, 7 is mute)\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\t// Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\r\n\t\t\t\t\tinstrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.panning: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t// Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n\t\t\t\t\tinstrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tinstrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Now, pan delay follows on new versions of jummbox.\r\n\t\t\t\tif (variant == \"jummbox\" && !beforeThree)\r\n\t\t\t\t\tinstrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.detune: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n\t\t\t\tinstrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) + Config.detuneMin);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.customChipWave: {\r\n\t\t\t\tlet instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t// Pop custom wave values\r\n\t\t\t\tfor (let j: number = 0; j < 64; j++) {\r\n\t\t\t\t\tinstrument.customChipWave[j]\r\n\t\t\t\t\t\t= clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sum: number = 0.0;\r\n\t\t\t\tfor (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n\t\t\t\t\tsum += instrument.customChipWave[i];\r\n\t\t\t\t}\r\n\t\t\t\tconst average: number = sum / instrument.customChipWave.length;\r\n\r\n\t\t\t\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\t\t\t\tlet cumulative: number = 0;\r\n\t\t\t\tlet wavePrev: number = 0;\r\n\t\t\t\tfor (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n\t\t\t\t\tcumulative += wavePrev;\r\n\t\t\t\t\twavePrev = instrument.customChipWave[i] - average;\r\n\t\t\t\t\tinstrument.customChipWaveIntegral[i] = cumulative;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 65th, last sample is for anti-aliasing\r\n\t\t\t\tinstrument.customChipWaveIntegral[64] = 0.0;\r\n\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.limiterSettings: {\r\n\t\t\t\tlet nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t// Check if limiter settings are used... if not, restore to default\r\n\t\t\t\tif (nextValue == 0x3f) {\r\n\t\t\t\t\t// Limiter isn't used\r\n\t\t\t\t\tthis.compressionRatio = 1.0;\r\n\t\t\t\t\tthis.limitRatio = 1.0;\r\n\t\t\t\t\tthis.limitRise = 4000.0;\r\n\t\t\t\t\tthis.limitDecay = 4.0;\r\n\t\t\t\t\tthis.limitThreshold = 1.0;\r\n\t\t\t\t\tthis.compressionThreshold = 1.0;\r\n\t\t\t\t\tthis.masterGain = 1.0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Limiter is used, grab values\r\n\t\t\t\t\tthis.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\r\n\t\t\t\t\tnextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\r\n\t\t\t\t\tthis.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\r\n\t\t\t\t\tthis.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n\t\t\t\t\tthis.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n\t\t\t\t\tthis.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.channelNames: {\r\n\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t// Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\r\n\t\t\t\t\tvar channelNameLength;\r\n\t\t\t\t\tif (beforeFour)\r\n\t\t\t\t\t\tchannelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tchannelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tthis.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\r\n\r\n\t\t\t\t\tcharIndex += channelNameLength;\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.algorithm: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackType: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackAmplitude: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.feedbackEnvelope: {\r\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorFrequencies: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorAmplitudes: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.operatorEnvelopes: {\r\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].envelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.spectrum: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tif (instrument.type == InstrumentType.spectrum) {\r\n\t\t\t\t\tconst byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\tinstrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinstrument.spectrumWave.markCustomWaveDirty();\r\n\t\t\t\t\tcharIndex += byteCount;\r\n\t\t\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\t\t\tconst byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n\t\t\t\t\t\t\tinstrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tinstrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcharIndex += byteCount;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Unhandled instrument type for spectrum song tag code.\");\r\n\t\t\t\t}\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.harmonics: {\r\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\tconst byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\r\n\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n\t\t\t\t\tinstrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\r\n\t\t\t\t}\r\n\t\t\t\tinstrument.harmonicsWave.markCustomWaveDirty();\r\n\t\t\t\tcharIndex += byteCount;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.bars: {\r\n\t\t\t\tlet subStringLength: number;\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tsubStringLength = Math.ceil(barCount * 0.5);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let i: number = 0; i < barCount; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(3) + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (beforeFive && variant == \"beepbox\") {\r\n\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits) + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcharIndex += subStringLength;\r\n\t\t\t} break;\r\n\t\t\tcase SongTagCode.patterns: {\r\n\t\t\t\tlet bitStringLength: number = 0;\r\n\t\t\t\tlet channel: number;\r\n\t\t\t\tlet largerChords: boolean = !((beforeFour && variant == \"jummbox\") || variant == \"beepbox\");\r\n\t\t\t\tlet recentPitchBitLength: number = (largerChords ? 4 : 3);\r\n\t\t\t\tlet recentPitchLength: number = (largerChords ? 16 : 8);\r\n\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t\t// The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default.\r\n\t\t\t\t\tcharIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n\t\t\t\t\tbitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tchannel = 0;\r\n\t\t\t\t\tlet bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\twhile (bitStringLengthLength > 0) {\r\n\t\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tbitStringLengthLength--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\r\n\t\t\t\tcharIndex += bitStringLength;\r\n\r\n\t\t\t\tlet neededInstrumentBits: number = 0;\r\n\t\t\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n\t\t\t\t\t// Some info about modulator settings immediately follows in mod channels.\r\n\t\t\t\t\tif (isModChannel) {\r\n\t\t\t\t\t\tfor (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n\t\t\t\t\t\t\tlet instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\tinstrument.modStatuses[mod] = bits.read(2);\r\n\r\n\t\t\t\t\t\t\t\t// Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForPitch || instrument.modStatuses[mod] == ModStatus.msForNoise) {\r\n\r\n\t\t\t\t\t\t\t\t\t// Clamp to pitch/noise max\r\n\t\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForPitch) {\r\n\t\t\t\t\t\t\t\t\t\tinstrument.modChannels[mod] = clamp(0, this.pitchChannelCount + 1, bits.read(8));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tinstrument.modChannels[mod] = clamp(0, this.noiseChannelCount + 1, bits.read(8));\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tinstrument.modInstruments[mod] = clamp(0, this.instrumentsPerChannel + 1, bits.read(neededInstrumentBits));\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Mod setting is only used if the status isn't \"none\".\r\n\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] != ModStatus.msNone) {\r\n\t\t\t\t\t\t\t\t\tinstrument.modSettings[mod] = bits.read(6);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * 12;\r\n\t\t\t\t\tlet note: Note | null = null;\r\n\t\t\t\t\tlet pin: NotePin | null = null;\r\n\t\t\t\t\tlet lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : 12) + octaveOffset;\r\n\t\t\t\t\tconst recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n\t\t\t\t\tconst recentShapes: any[] = [];\r\n\t\t\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\t\tconst newPattern: Pattern = this.channels[channel].patterns[i];\r\n\t\t\t\t\t\tnewPattern.reset();\r\n\t\t\t\t\t\tnewPattern.instrument = bits.read(neededInstrumentBits);\r\n\r\n\t\t\t\t\t\tif (!(variant == \"beepbox\" && beforeThree) && bits.read(1) == 0) continue;\r\n\r\n\t\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\t\tconst newNotes: Note[] = newPattern.notes;\r\n\t\t\t\t\t\t// Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\r\n\t\t\t\t\t\twhile (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\r\n\t\t\t\t\t\t\tconst useOldShape: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\tlet newNote: boolean = false;\r\n\t\t\t\t\t\t\tlet shapeIndex: number = 0;\r\n\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\tshapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tnewNote = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (!useOldShape && !newNote) {\r\n\t\t\t\t\t\t\t\t// For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\r\n\t\t\t\t\t\t\t\tif (isModChannel) {\r\n\t\t\t\t\t\t\t\t\tconst isBackwards: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\tconst restLength: number = bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\tif (isBackwards) {\r\n\t\t\t\t\t\t\t\t\t\tcurPart -= restLength;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tcurPart += restLength;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tconst restLength: number = (beforeSeven && variant == \"beepbox\")\r\n\t\t\t\t\t\t\t\t\t\t? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n\t\t\t\t\t\t\t\t\t\t: bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\tcurPart += restLength;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlet shape: any;\r\n\t\t\t\t\t\t\t\tlet pinObj: any;\r\n\t\t\t\t\t\t\t\tlet pitch: number;\r\n\t\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\t\tshape = recentShapes[shapeIndex];\r\n\t\t\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tshape = {};\r\n\r\n\t\t\t\t\t\t\t\t\tif (!largerChords) {\r\n\t\t\t\t\t\t\t\t\t\t// Old format: X 1's followed by a 0 => X+1 pitches, up to 4\r\n\t\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\r\n\t\t\t\t\t\t\t\t\t\twhile (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t// New format is:\r\n\t\t\t\t\t\t\t\t\t\t//\t  0: 1 pitch\r\n\t\t\t\t\t\t\t\t\t\t// 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n\t\t\t\t\t\t\t\t\t\tif (bits.read(1) == 1) {\r\n\t\t\t\t\t\t\t\t\t\t\tshape.pitchCount = bits.read(3) + 2;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tshape.pinCount = bits.readPinCount();\r\n\r\n\t\t\t\t\t\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(2) * 2;\r\n\t\t\t\t\t\t\t\t\t} else if (!isModChannel) {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(3);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(9);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tshape.pins = [];\r\n\t\t\t\t\t\t\t\t\tshape.length = 0;\r\n\t\t\t\t\t\t\t\t\tshape.bendCount = 0;\r\n\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pinCount; j++) {\r\n\t\t\t\t\t\t\t\t\t\tpinObj = {};\r\n\t\t\t\t\t\t\t\t\t\tpinObj.pitchBend = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) shape.bendCount++;\r\n\t\t\t\t\t\t\t\t\t\tshape.length += (beforeSeven && variant == \"beepbox\")\r\n\t\t\t\t\t\t\t\t\t\t\t? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n\t\t\t\t\t\t\t\t\t\t\t: bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\t\tpinObj.time = shape.length;\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (variant == \"beepbox\") {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(2) * 2;\r\n\t\t\t\t\t\t\t\t\t\t} else if (!isModChannel) {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(3);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(9);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tshape.pins.push(pinObj);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\trecentShapes.unshift(shape);\r\n\t\t\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\r\n\t\t\t\t\t\t\t\tnote = new Note(0, curPart, curPart + shape.length, shape.initialVolume);\r\n\t\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\t\tnote.pins.length = 1;\r\n\t\t\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n\t\t\t\t\t\t\t\t\tconst useOldPitch: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\tif (!useOldPitch) {\r\n\t\t\t\t\t\t\t\t\t\tconst interval: number = bits.readPitchInterval();\r\n\t\t\t\t\t\t\t\t\t\tpitch = lastPitch;\r\n\t\t\t\t\t\t\t\t\t\tlet intervalIter: number = interval;\r\n\t\t\t\t\t\t\t\t\t\twhile (intervalIter > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitch++;\r\n\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch++;\r\n\t\t\t\t\t\t\t\t\t\t\tintervalIter--;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\twhile (intervalIter < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitch--;\r\n\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch--;\r\n\t\t\t\t\t\t\t\t\t\t\tintervalIter++;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tconst pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\r\n\t\t\t\t\t\t\t\t\t\tpitch = recentPitches[pitchIndex];\r\n\t\t\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\t\t\tif (recentPitches.length > recentPitchLength) recentPitches.pop();\r\n\r\n\t\t\t\t\t\t\t\t\tif (j < shape.pitchCount) {\r\n\t\t\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tpitchBends.push(pitch);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif (j == shape.pitchCount - 1) {\r\n\t\t\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tpitchBends.unshift(note.pitches[0]);\r\n\r\n\t\t\t\t\t\t\t\tfor (const pinObj of shape.pins) {\r\n\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) pitchBends.shift();\r\n\t\t\t\t\t\t\t\t\tpin = makeNotePin(pitchBends[0] - note.pitches[0], pinObj.time, pinObj.volume);\r\n\t\t\t\t\t\t\t\t\tnote.pins.push(pin);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcurPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\r\n\t\t\t\t\t\t\t\tnewNotes.push(note);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (beforeThree && variant == \"beepbox\") {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchannel++;\r\n\t\t\t\t\t\tif (channel >= this.getChannelCount()) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t} // while (true)\r\n\t\t\t} break;\r\n\t\t\tdefault: {\r\n\t\t\t\tthrow new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1));\r\n\t\t\t} break;\r\n\t\t}\r\n\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tif (toSetOctaves[channel] != null) {\r\n\t\t\t\tthis.channels[channel].octave = toSetOctaves[channel];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n\t\tconst channelArray: Object[] = [];\r\n\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\tconst instrumentArray: Object[] = [];\r\n\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n\t\t\tconst isModChannel: boolean = this.getChannelIsMod(channel);\r\n\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\tinstrumentArray.push(this.channels[channel].instruments[i].toJsonObject());\r\n\t\t\t}\r\n\r\n\t\t\tconst patternArray: Object[] = [];\r\n\t\t\tfor (const pattern of this.channels[channel].patterns) {\r\n\t\t\t\tconst noteArray: Object[] = [];\r\n\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\tlet volumeCap: number = this.getVolumeCapForSetting(isModChannel, this.channels[channel].instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\t\t\t\t\tconst pointArray: Object[] = [];\r\n\t\t\t\t\tfor (const pin of note.pins) {\r\n\t\t\t\t\t\tlet useVol: number = isModChannel ? Math.round(pin.volume) : Math.round(pin.volume * 100 / volumeCap);\r\n\t\t\t\t\t\tpointArray.push({\r\n\t\t\t\t\t\t\t\"tick\": (pin.time + note.start) * Config.rhythms[this.rhythm].stepsPerBeat / Config.partsPerBeat,\r\n\t\t\t\t\t\t\t\"pitchBend\": pin.interval,\r\n\t\t\t\t\t\t\t\"volume\": useVol,\r\n\t\t\t\t\t\t\t\"forMod\": isModChannel,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnoteArray.push({\r\n\t\t\t\t\t\t\"pitches\": note.pitches,\r\n\t\t\t\t\t\t\"points\": pointArray,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpatternArray.push({\r\n\t\t\t\t\t\"instrument\": pattern.instrument + 1,\r\n\t\t\t\t\t\"notes\": noteArray,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst sequenceArray: number[] = [];\r\n\t\t\tif (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\t\t\tfor (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\t\t\tif (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\r\n\t\t\tchannelArray.push({\r\n\t\t\t\t\"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\r\n\t\t\t\t\"octaveScrollBar\": this.channels[channel].octave,\r\n\t\t\t\t\"instruments\": instrumentArray,\r\n\t\t\t\t\"patterns\": patternArray,\r\n\t\t\t\t\"sequence\": sequenceArray,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t\"name\": this.title,\r\n\t\t\t\"format\": Song._format,\r\n\t\t\t\"version\": Song._latestJummBoxVersion,\r\n\t\t\t\"scale\": Config.scales[this.scale].name,\r\n\t\t\t\"key\": Config.keys[this.key].name,\r\n\t\t\t\"introBars\": this.loopStart,\r\n\t\t\t\"loopBars\": this.loopLength,\r\n\t\t\t\"beatsPerBar\": this.beatsPerBar,\r\n\t\t\t\"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\r\n\t\t\t\"beatsPerMinute\": this.tempo,\r\n\t\t\t\"reverb\": this.reverb,\r\n\t\t\t//\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n\t\t\t//\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\r\n\t\t\t//\"instrumentsPerChannel\": this.instrumentsPerChannel, //derive this from instrument arrays?\r\n\t\t\t\"channels\": channelArray,\r\n\t\t};\r\n\t}\r\n\r\n\tpublic fromJsonObject(jsonObject: any): void {\r\n\t\tthis.initToDefault(true);\r\n\t\tif (!jsonObject) return;\r\n\r\n\t\t//const version: number = jsonObject[\"version\"] | 0;\r\n\t\t//if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\r\n\r\n\t\tif (jsonObject[\"name\"] != undefined) {\r\n\t\t\tthis.title = jsonObject[\"name\"];\r\n\t\t}\r\n\r\n\t\tthis.scale = 0; // default to free.\r\n\t\tif (jsonObject[\"scale\"] != undefined) {\r\n\t\t\tconst oldScaleNames: Dictionary<string> = {\r\n\t\t\t\t\"romani :)\": \"dbl harmonic :)\",\r\n\t\t\t\t\"romani :(\": \"dbl harmonic :(\",\r\n\t\t\t\t\"enigma\": \"strange\",\r\n\t\t\t};\r\n\t\t\tconst scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\r\n\t\t\tconst scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\r\n\t\t\tif (scale != -1) this.scale = scale;\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"key\"] != undefined) {\r\n\t\t\tif (typeof (jsonObject[\"key\"]) == \"number\") {\r\n\t\t\t\tthis.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\r\n\t\t\t} else if (typeof (jsonObject[\"key\"]) == \"string\") {\r\n\t\t\t\tconst key: string = jsonObject[\"key\"];\r\n\t\t\t\tconst letter: string = key.charAt(0).toUpperCase();\r\n\t\t\t\tconst symbol: string = key.charAt(1).toLowerCase();\r\n\t\t\t\tconst letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\r\n\t\t\t\tconst accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\r\n\t\t\t\tlet index: number | undefined = letterMap[letter];\r\n\t\t\t\tconst offset: number | undefined = accidentalMap[symbol];\r\n\t\t\t\tif (index != undefined) {\r\n\t\t\t\t\tif (offset != undefined) index += offset;\r\n\t\t\t\t\tif (index < 0) index += 12;\r\n\t\t\t\t\tindex = index % 12;\r\n\t\t\t\t\tthis.key = index;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"beatsPerMinute\"] != undefined) {\r\n\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"reverb\"] != undefined) {\r\n\t\t\tthis.reverb = clamp(0, Config.reverbRange, jsonObject[\"reverb\"] | 0);\r\n\t\t}\r\n\r\n\t\tif (jsonObject[\"beatsPerBar\"] != undefined) {\r\n\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\r\n\t\t}\r\n\r\n\t\tlet importedPartsPerBeat: number = 4;\r\n\t\tif (jsonObject[\"ticksPerBeat\"] != undefined) {\r\n\t\t\timportedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\r\n\t\t\tthis.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\r\n\t\t\tif (this.rhythm == -1) {\r\n\t\t\t\tthis.rhythm = 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet maxInstruments: number = 1;\r\n\t\tlet maxPatterns: number = 1;\r\n\t\tlet maxBars: number = 1;\r\n\t\tif (jsonObject[\"channels\"]) {\r\n\t\t\tfor (const channelObject of jsonObject[\"channels\"]) {\r\n\t\t\t\tif (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\r\n\t\t\t\tif (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\r\n\t\t\t\tif (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.instrumentsPerChannel = Math.min(maxInstruments, Config.instrumentsPerChannelMax);\r\n\t\tthis.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\r\n\t\tthis.barCount = Math.min(maxBars, Config.barCountMax);\r\n\r\n\t\tif (jsonObject[\"introBars\"] != undefined) {\r\n\t\t\tthis.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\r\n\t\t}\r\n\t\tif (jsonObject[\"loopBars\"] != undefined) {\r\n\t\t\tthis.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\r\n\t\t}\r\n\r\n\t\tconst newPitchChannels: Channel[] = [];\r\n\t\tconst newNoiseChannels: Channel[] = [];\r\n\t\tconst newModChannels: Channel[] = [];\r\n\t\tif (jsonObject[\"channels\"]) {\r\n\t\t\tfor (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n\t\t\t\tlet channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n\r\n\t\t\t\tconst channel: Channel = new Channel();\r\n\r\n\t\t\t\tlet isNoiseChannel: boolean = false;\r\n\t\t\t\tlet isModChannel: boolean = false;\r\n\t\t\t\tif (channelObject[\"type\"] != undefined) {\r\n\t\t\t\t\tisNoiseChannel = (channelObject[\"type\"] == \"drum\");\r\n\t\t\t\t\tisModChannel = (channelObject[\"type\"] == \"mod\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// for older files, assume drums are channel 3.\r\n\t\t\t\t\tisNoiseChannel = (channelIndex >= 3);\r\n\t\t\t\t}\r\n\t\t\t\tif (isNoiseChannel) {\r\n\t\t\t\t\tnewNoiseChannels.push(channel);\r\n\t\t\t\t} else if (isModChannel) {\r\n\t\t\t\t\tnewModChannels.push(channel);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnewPitchChannels.push(channel);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (channelObject[\"octaveScrollBar\"] != undefined) {\r\n\t\t\t\t\tchannel.octave = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, channelObject[\"octaveScrollBar\"] | 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = channel.instruments.length; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tchannel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\r\n\t\t\t\t}\r\n\t\t\t\tchannel.instruments.length = this.instrumentsPerChannel;\r\n\r\n\t\t\t\tfor (let i: number = channel.patterns.length; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\tchannel.patterns[i] = new Pattern();\r\n\t\t\t\t}\r\n\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\tchannel.bars[i] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tchannel.bars.length = this.barCount;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tconst instrument: Instrument = channel.instruments[i];\r\n\t\t\t\t\tinstrument.fromJsonObject(channelObject[\"instruments\"][i], isNoiseChannel, isModChannel, this.rhythm == 0 || this.rhythm == 2, this.rhythm >= 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\tconst pattern: Pattern = channel.patterns[i];\r\n\r\n\t\t\t\t\tlet patternObject: any = undefined;\r\n\t\t\t\t\tif (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\r\n\t\t\t\t\tif (patternObject == undefined) continue;\r\n\r\n\t\t\t\t\tpattern.instrument = clamp(0, this.instrumentsPerChannel, (patternObject[\"instrument\"] | 0) - 1);\r\n\r\n\t\t\t\t\tif (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\r\n\t\t\t\t\t\tconst maxNoteCount: number = Math.min(this.beatsPerBar * Config.partsPerBeat, patternObject[\"notes\"].length >>> 0);\r\n\r\n\t\t\t\t\t\t//let tickClock: number = 0;\r\n\t\t\t\t\t\tfor (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\r\n\t\t\t\t\t\t\tif (j >= maxNoteCount) break;\r\n\r\n\t\t\t\t\t\t\tconst noteObject = patternObject[\"notes\"][j];\r\n\t\t\t\t\t\t\tif (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tconst note: Note = new Note(0, 0, 0, 0);\r\n\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\tnote.pins = [];\r\n\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\r\n\t\t\t\t\t\t\t\tconst pitch: number = noteObject[\"pitches\"][k] | 0;\r\n\t\t\t\t\t\t\t\tif (note.pitches.indexOf(pitch) != -1) continue;\r\n\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\tif (note.pitches.length >= Config.maxChordSize) break;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\r\n\t\t\t\t\t\t\t//let noteClock: number = tickClock;\r\n\t\t\t\t\t\t\tlet startInterval: number = 0;\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject[\"points\"].length; k++) {\r\n\t\t\t\t\t\t\t\tconst pointObject: any = noteObject[\"points\"][k];\r\n\t\t\t\t\t\t\t\tif (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\r\n\t\t\t\t\t\t\t\tconst interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\r\n\r\n\t\t\t\t\t\t\t\tconst time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\r\n\r\n\t\t\t\t\t\t\t\tlet volumeCap: number = this.getVolumeCapForSetting(isModChannel, channel.instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\r\n\t\t\t\t\t\t\t\t// The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\r\n\t\t\t\t\t\t\t\t// A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\r\n\t\t\t\t\t\t\t\tlet volume: number;\r\n\t\t\t\t\t\t\t\tif (pointObject[\"volume\"] == undefined) {\r\n\t\t\t\t\t\t\t\t\tvolume = volumeCap;\r\n\t\t\t\t\t\t\t\t} else if (pointObject[\"forMod\"] == undefined) {\r\n\t\t\t\t\t\t\t\t\tvolume = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvolume = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (time > this.beatsPerBar * Config.partsPerBeat) continue;\r\n\t\t\t\t\t\t\t\tif (note.pins.length == 0) {\r\n\t\t\t\t\t\t\t\t\t//if (time < noteClock) continue;\r\n\t\t\t\t\t\t\t\t\tnote.start = time;\r\n\t\t\t\t\t\t\t\t\tstartInterval = interval;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t//if (time <= noteClock) continue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//noteClock = time;\r\n\r\n\t\t\t\t\t\t\t\tnote.pins.push(makeNotePin(interval - startInterval, time - note.start, volume));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pins.length < 2) continue;\r\n\r\n\t\t\t\t\t\t\tnote.end = note.pins[note.pins.length - 1].time + note.start;\r\n\r\n\t\t\t\t\t\t\tconst maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\r\n\t\t\t\t\t\t\tlet lowestPitch: number = maxPitch;\r\n\t\t\t\t\t\t\tlet highestPitch: number = 0;\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pitches.length; k++) {\r\n\t\t\t\t\t\t\t\tnote.pitches[k] += startInterval;\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n\t\t\t\t\t\t\t\t\tnote.pitches.splice(k, 1);\r\n\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t\tif (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\r\n\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pins.length; k++) {\r\n\t\t\t\t\t\t\t\tconst pin: NotePin = note.pins[k];\r\n\t\t\t\t\t\t\t\tif (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n\t\t\t\t\t\t\t\tif (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n\t\t\t\t\t\t\t\tif (k >= 2) {\r\n\t\t\t\t\t\t\t\t\tif (pin.interval == note.pins[k - 1].interval &&\r\n\t\t\t\t\t\t\t\t\t\tpin.interval == note.pins[k - 2].interval &&\r\n\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k - 1].volume &&\r\n\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k - 2].volume) {\r\n\t\t\t\t\t\t\t\t\t\tnote.pins.splice(k - 1, 1);\r\n\t\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tpattern.notes.push(note);\r\n\t\t\t\t\t\t\t//tickClock = note.end;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\tchannel.bars[i] = channelObject[\"sequence\"] ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\r\n\t\tif (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\r\n\t\tif (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\r\n\t\tthis.pitchChannelCount = newPitchChannels.length;\r\n\t\tthis.noiseChannelCount = newNoiseChannels.length;\r\n\t\tthis.modChannelCount = newModChannels.length;\r\n\t\tthis.channels.length = 0;\r\n\t\tArray.prototype.push.apply(this.channels, newPitchChannels);\r\n\t\tArray.prototype.push.apply(this.channels, newNoiseChannels);\r\n\t\tArray.prototype.push.apply(this.channels, newModChannels);\r\n\t}\r\n\r\n\tpublic getPattern(channel: number, bar: number): Pattern | null {\r\n\t\tif (bar < 0 || bar >= this.barCount) return null;\r\n\t\tconst patternIndex: number = this.channels[channel].bars[bar];\r\n\t\tif (patternIndex == 0) return null;\r\n\t\treturn this.channels[channel].patterns[patternIndex - 1];\r\n\t}\r\n\r\n\tpublic getPatternInstrument(channel: number, bar: number): number {\r\n\t\tconst pattern: Pattern | null = this.getPattern(channel, bar);\r\n\t\treturn pattern == null ? 0 : pattern.instrument;\r\n\t}\r\n\r\n\tpublic getBeatsPerMinute(): number {\r\n\t\treturn this.tempo;\r\n\t}\r\n\r\n}\r\n\r\nclass Tone {\r\n\tpublic instrument: Instrument;\r\n\tpublic readonly pitches: number[] = [0, 0, 0, 0];\r\n\tpublic pitchCount: number = 0;\r\n\tpublic chordSize: number = 0;\r\n\tpublic drumsetPitch: number = 0;\r\n\tpublic note: Note | null = null;\r\n\tpublic prevNote: Note | null = null;\r\n\tpublic nextNote: Note | null = null;\r\n\tpublic prevNotePitchIndex: number = 0;\r\n\tpublic nextNotePitchIndex: number = 0;\r\n\tpublic active: boolean = false;\r\n\tpublic noteStart: number = 0;\r\n\tpublic noteEnd: number = 0;\r\n\tpublic noteLengthTicks: number = 0;\r\n\tpublic ticksSinceReleased: number = 0;\r\n\tpublic liveInputSamplesHeld: number = 0;\r\n\tpublic lastInterval: number = 0;\r\n\tpublic lastVolume: number = 0;\r\n\tpublic stereoVolume1: number = 0.0;\r\n\tpublic stereoVolume2: number = 0.0;\r\n\tpublic stereoOffset: number = 0.0;\r\n\tpublic stereoDelay: number = 0.0;\r\n\tpublic sample: number = 0.0;\r\n\tpublic readonly phases: number[] = [];\r\n\tpublic readonly phaseDeltas: number[] = [];\r\n\tpublic readonly volumeStarts: number[] = [];\r\n\tpublic readonly volumeDeltas: number[] = [];\r\n\tpublic volumeStart: number = 0.0;\r\n\tpublic volumeDelta: number = 0.0;\r\n\tpublic phaseDeltaScale: number = 0.0;\r\n\tpublic pulseWidth: number = 0.0;\r\n\tpublic pulseWidthDelta: number = 0.0;\r\n\tpublic filter: number = 0.0;\r\n\tpublic filterScale: number = 0.0;\r\n\tpublic filterSample0: number = 0.0;\r\n\tpublic filterSample1: number = 0.0;\r\n\tpublic vibratoScale: number = 0.0;\r\n\tpublic intervalMult: number = 0.0;\r\n\tpublic intervalVolumeMult: number = 1.0;\r\n\tpublic feedbackOutputs: number[] = [];\r\n\tpublic feedbackMult: number = 0.0;\r\n\tpublic feedbackDelta: number = 0.0;\r\n\tpublic stereoVolumeLStart: number = 0.0;\r\n\tpublic stereoVolumeRStart: number = 0.0;\r\n\tpublic stereoVolumeLDelta: number = 0.0;\r\n\tpublic stereoVolumeRDelta: number = 0.0;\r\n\tpublic stereoDelayStart: number = 0.0;\r\n\tpublic stereoDelayEnd: number = 0.0;\r\n\tpublic stereoDelayDelta: number = 0.0;\r\n\tpublic customVolumeStart: number = 0.0;\r\n\tpublic customVolumeEnd: number = 0.0;\r\n\tpublic filterResonanceStart: number = 0.0;\r\n\tpublic filterResonanceDelta: number = 0.0;\r\n\tpublic isFirstOrder: boolean = false;\r\n\r\n\tconstructor() {\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\tthis.phases[i] = 0.0;\r\n\t\t\tthis.feedbackOutputs[i] = 0.0;\r\n\t\t}\r\n\t\tthis.sample = 0.0;\r\n\t\tthis.filterSample0 = 0.0;\r\n\t\tthis.filterSample1 = 0.0;\r\n\t\tthis.liveInputSamplesHeld = 0.0;\r\n\t}\r\n\r\n}\r\n\r\nexport class Synth {\r\n\r\n\tpublic warmUpSynthesizer(song: Song | null): void {\r\n\t\t// Don't bother to generate the drum waves unless the song actually\r\n\t\t// uses them, since they may require a lot of computation.\r\n\t\tif (song != null) {\r\n\t\t\tfor (let channel: number = 0; channel < song.getChannelCount(); channel++) {\r\n\t\t\t\tfor (let instrument: number = 0; instrument < song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tSynth.getInstrumentSynthFunction(song.channels[channel].instruments[instrument]);\r\n\t\t\t\t\tsong.channels[channel].instruments[instrument].warmUp();\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic computeLatestModValues(): void {\r\n\r\n\t\tif (this.song != null && this.song.modChannelCount > 0) {\r\n\r\n\t\t\t// Clear all mod values, and set up temp variables for the time a mod would be set at.\r\n\t\t\tlet latestModTimes: (number | null)[] = [];\r\n\t\t\tlet latestModInsTimes: (number | null)[][][] = [];\r\n\t\t\tthis.modValues = [];\r\n\t\t\tthis.nextModValues = [];\r\n\t\t\tthis.modInsValues = [];\r\n\t\t\tthis.nextModInsValues = [];\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\tlatestModInsTimes[channel] = [];\r\n\t\t\t\tthis.modInsValues[channel] = [];\r\n\t\t\t\tthis.nextModInsValues[channel] = [];\r\n\t\t\t\tfor (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\tthis.modInsValues[channel][instrument] = [];\r\n\t\t\t\t\tthis.nextModInsValues[channel][instrument] = [];\r\n\t\t\t\t\tlatestModInsTimes[channel][instrument] = [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Find out where we're at in the fraction of the current bar.\r\n\t\t\tlet currentPart: number = this.beat * Config.partsPerBeat + this.part;\r\n\r\n\t\t\t// For mod channels, calculate last set value for each mod\r\n\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\tif (!(this.song.channels[channel].muted)) {\r\n\r\n\t\t\t\t\tlet pattern: Pattern | null;\r\n\r\n\t\t\t\t\tfor (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\r\n\t\t\t\t\t\tpattern = this.song.getPattern(channel, currentBar);\r\n\r\n\t\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\t\tlet instrumentIdx: number = this.song.getPatternInstrument(channel, currentBar);\r\n\t\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\t\t\tlet latestPinParts: number[] = [];\r\n\t\t\t\t\t\t\tlet latestPinValues: number[] = [];\r\n\r\n\t\t\t\t\t\t\tlet partsInBar: number = (currentBar == this.bar)\r\n\t\t\t\t\t\t\t\t? currentPart\r\n\t\t\t\t\t\t\t\t: this.findPartsInBar(currentBar);\r\n\r\n\t\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\t\tif (note.start < partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\r\n\t\t\t\t\t\t\t\t\tif (note.end <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\tlatestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\r\n\t\t\t\t\t\t\t\t\t\tlatestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].volume;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tlatestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\r\n\t\t\t\t\t\t\t\t\t\t// Find the pin where bar change happens, and compute where pin volume would be at that time\r\n\t\t\t\t\t\t\t\t\t\tfor (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tlatestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n\t\t\t\t\t\t\t\t\t\t\t\tpinIdx = note.pins.length;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Set modulator value, if it wasn't set in another pattern already scanned\r\n\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\tif (latestPinParts[mod] != null) {\r\n\t\t\t\t\t\t\t\t\tif (instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\t\t\t\tif (latestModTimes[instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modSettings[mod]] as number)) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n\t\t\t\t\t\t\t\t\t\t\tlatestModTimes[instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] as number)) {\r\n\t\t\t\t\t\t\t\t\t\tthis.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n\t\t\t\t\t\t\t\t\t\tlatestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static operatorAmplitudeCurve(amplitude: number): number {\r\n\t\treturn (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n\t}\r\n\r\n\tpublic samplesPerSecond: number = 44100;\r\n\r\n\tpublic song: Song | null = null;\r\n\tpublic liveInputDuration: number = 0;\r\n\tpublic liveInputStarted: boolean = false;\r\n\tpublic liveInputPitches: number[] = [];\r\n\tpublic liveInputChannel: number = 0;\r\n\tpublic loopRepeatCount: number = -1;\r\n\tpublic volume: number = 1.0;\r\n\r\n\tprivate wantToSkip: boolean = false;\r\n\tprivate playheadInternal: number = 0.0;\r\n\tprivate bar: number = 0;\r\n\tprivate beat: number = 0;\r\n\tprivate part: number = 0;\r\n\tprivate tick: number = 0;\r\n\tprivate tickSampleCountdown: number = 0;\r\n\tprivate modValues: (number | null)[];\r\n\tprivate modInsValues: (number | null)[][][];\r\n\tprivate nextModValues: (number | null)[];\r\n\tprivate nextModInsValues: (number | null)[][][];\r\n\tprivate isPlayingSong: boolean = false;\r\n\tprivate liveInputEndTime: number = 0.0;\r\n\tprivate readonly tonePool: Deque<Tone> = new Deque<Tone>();\r\n\tprivate readonly activeTones: Array<Deque<Tone>> = [];\r\n\tprivate tyingOver: number[] = [];\r\n\tprivate readonly activeModTones: Array<Array<Deque<Tone>>> = [];\r\n\t//private readonly releasedModTones: Array<Array<Deque<Tone>>> = [];\r\n\tprivate readonly releasedTones: Array<Deque<Tone>> = [];\r\n\tprivate readonly liveInputTones: Deque<Tone> = new Deque<Tone>();\r\n\r\n\t//private highpassInput: number = 0.0;\r\n\t//private highpassOutput: number = 0.0;\r\n\tprivate limit: number = 0.0;\r\n\r\n\tprivate stereoBufferIndex: number = 0;\r\n\tprivate samplesForNone: Float32Array | null = null;\r\n\tprivate samplesForReverb: Float32Array | null = null;\r\n\tprivate samplesForChorus: Float32Array | null = null;\r\n\tprivate samplesForChorusReverb: Float32Array | null = null;\r\n\r\n\tprivate chorusDelayLine: Float32Array = new Float32Array(2048);\r\n\tprivate chorusDelayPos: number = 0;\r\n\tprivate chorusPhase: number = 0;\r\n\r\n\tprivate reverbDelayLine: Float32Array = new Float32Array(16384);\r\n\tprivate reverbDelayPos: number = 0;\r\n\tprivate reverbFeedback0: number = 0.0;\r\n\tprivate reverbFeedback1: number = 0.0;\r\n\tprivate reverbFeedback2: number = 0.0;\r\n\tprivate reverbFeedback3: number = 0.0;\r\n\r\n\tprivate audioCtx: any | null = null;\r\n\tprivate scriptNode: any | null = null;\r\n\r\n\tpublic get playing(): boolean {\r\n\t\treturn this.isPlayingSong;\r\n\t}\r\n\r\n\tpublic get playhead(): number {\r\n\t\treturn this.playheadInternal;\r\n\t}\r\n\r\n\tpublic set playhead(value: number) {\r\n\t\tif (this.song != null) {\r\n\t\t\tthis.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n\t\t\tlet remainder: number = this.playheadInternal;\r\n\t\t\tthis.bar = Math.floor(remainder);\r\n\t\t\tremainder = this.song.beatsPerBar * (remainder - this.bar);\r\n\t\t\tthis.beat = Math.floor(remainder);\r\n\t\t\tremainder = Config.partsPerBeat * (remainder - this.beat);\r\n\t\t\tthis.part = Math.floor(remainder);\r\n\t\t\tremainder = Config.ticksPerPart * (remainder - this.part);\r\n\t\t\tthis.tick = Math.floor(remainder);\r\n\t\t\tconst samplesPerTick: number = this.getSamplesPerTick();\r\n\t\t\tremainder = samplesPerTick * (remainder - this.tick);\r\n\t\t\tthis.tickSampleCountdown = samplesPerTick - remainder;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getSamplesPerBar(): number {\r\n\t\tif (this.song == null) throw new Error();\r\n\t\treturn this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\r\n\t}\r\n\r\n\t// Calculate the total number of parts that will be played in the current bar before any next bar mods trigger.\r\n\tprivate findPartsInBar(bar: number): number {\r\n\t\tif (this.song == null) return 0;\r\n\t\tlet partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\tif (pattern != null) {\r\n\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\tif (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n\t\t\t\t\t\t\t\t// Find the earliest next bar note.\r\n\t\t\t\t\t\t\t\tif (partsInBar > note.start)\r\n\t\t\t\t\t\t\t\t\tpartsInBar = note.start;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn partsInBar;\r\n\t}\r\n\r\n\t// Returns the total samples in the song\r\n\tpublic getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\r\n\t\tif (this.song == null)\r\n\t\t\treturn -1;\r\n\r\n\t\t// Compute the window to be checked (start bar to end bar)\r\n\t\tlet startBar: number = enableIntro ? 0 : this.song.loopStart;\r\n\t\tlet endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\r\n\t\tlet hasTempoMods: boolean = false;\r\n\t\tlet hasNextBarMods: boolean = false;\r\n\t\tlet prevTempo: number = this.song.tempo;\r\n\r\n\t\t// Determine if any tempo or next bar mods happen anywhere in the window\r\n\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\tfor (let bar: number = startBar; bar < endBar; bar++) {\r\n\t\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\thasTempoMods = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\thasNextBarMods = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\r\n\t\tif (startBar > 0) {\r\n\t\t\tlet latestTempoPin: number | null = null;\r\n\t\t\tlet latestTempoValue: number = 0;\r\n\r\n\t\t\tfor (let bar: number = startBar - 1; bar >= 0; bar--) {\r\n\t\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\t\tlet pattern = this.song.getPattern(channel, bar);\r\n\r\n\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\tlet instrumentIdx: number = this.song.getPatternInstrument(channel, bar);\r\n\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\r\n\t\t\t\t\t\tlet partsInBar: number = this.findPartsInBar(bar);\r\n\r\n\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\tif (instrument.modSettings[Config.modCount - 1 - note.pitches[0]] == ModSetting.mstTempo && instrument.modStatuses[Config.modCount - 1 - note.pitches[0]] == ModStatus.msForSong) {\r\n\t\t\t\t\t\t\t\tif (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\r\n\t\t\t\t\t\t\t\t\tif (note.end <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoPin = note.end;\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoValue = note.pins[note.pins.length - 1].volume;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tlatestTempoPin = partsInBar;\r\n\t\t\t\t\t\t\t\t\t\t// Find the pin where bar change happens, and compute where pin volume would be at that time\r\n\t\t\t\t\t\t\t\t\t\tfor (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tlatestTempoValue = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n\t\t\t\t\t\t\t\t\t\t\t\tpinIdx = note.pins.length;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Done once you process a pattern where tempo mods happened, since the search happens backward\r\n\t\t\t\tif (latestTempoPin != null) {\r\n\t\t\t\t\tprevTempo = this.song.modValueToReal(latestTempoValue, ModSetting.mstTempo);\r\n\t\t\t\t\tbar = -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (hasTempoMods || hasNextBarMods) {\r\n\t\t\t// Run from start bar to end bar and observe looping, computing average tempo across each bar\r\n\t\t\tlet bar: number = startBar;\r\n\t\t\tlet ended: boolean = false;\r\n\t\t\tlet totalSamples: number = 0;\r\n\r\n\t\t\twhile (!ended) {\r\n\t\t\t\t// Compute the subsection of the pattern that will play\r\n\t\t\t\tlet partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n\t\t\t\tlet currentPart: number = 0;\r\n\r\n\t\t\t\tif (hasNextBarMods) {\r\n\t\t\t\t\tpartsInBar = this.findPartsInBar(bar);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Compute average tempo in this tick window, or use last tempo if nothing happened\r\n\t\t\t\tif (hasTempoMods) {\r\n\t\t\t\t\tlet foundMod: boolean = false;\r\n\t\t\t\t\tfor (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tif (foundMod == false) {\r\n\t\t\t\t\t\t\tlet pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n\t\t\t\t\t\t\tif (pattern != null) {\r\n\t\t\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n\t\t\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\t\t\tif (foundMod == false && instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong\r\n\t\t\t\t\t\t\t\t\t\t&& pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\r\n\t\t\t\t\t\t\t\t\t\t// Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\r\n\t\t\t\t\t\t\t\t\t\tfoundMod = true;\r\n\t\t\t\t\t\t\t\t\t\t// Need to re-sort the notes by start time to make the next part much less painful.\r\n\t\t\t\t\t\t\t\t\t\tpattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\r\n\t\t\t\t\t\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// Compute samples up to this note\r\n\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (note.start < partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Compute samples up to this pin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst prevPinTempo: number = this.song.modValueToReal(note.pins[pinIdx - 1].volume, ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet currPinTempo: number = this.song.modValueToReal(note.pins[pinIdx].volume, ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (note.pins[pinIdx].time + note.start > partsInBar) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrPinTempo = this.song.modValueToReal(note.pins[pinIdx - 1].volume + (note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time), ModSetting.mstTempo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (currPinTempo != prevPinTempo) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The starting formula is\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Substituting BPM for a step variable that moves with respect to the current tick, we get\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// No tempo change between the two pins.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprevTempo = currPinTempo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Compute samples for the rest of the bar\r\n\t\t\t\ttotalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n\t\t\t\tbar++;\r\n\t\t\t\tif (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\tbar = this.song.loopStart;\r\n\t\t\t\t\tif (loop > 0) loop--;\r\n\t\t\t\t}\r\n\t\t\t\tif (bar >= endBar) {\r\n\t\t\t\t\tended = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn Math.ceil(totalSamples);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// No tempo or next bar mods... phew! Just calculate normally.\r\n\t\t\treturn this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\r\n\t\tif (this.song == null) throw new Error();\r\n\t\tlet bars: number = this.song.loopLength * (useLoopCount + 1);\r\n\t\tif (enableIntro) bars += this.song.loopStart;\r\n\t\tif (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n\t\treturn bars;\r\n\t}\r\n\r\n\tconstructor(song: Song | string | null = null) {\r\n\t\tif (song != null) this.setSong(song);\r\n\t}\r\n\r\n\tpublic setSong(song: Song | string): void {\r\n\t\tif (typeof (song) == \"string\") {\r\n\t\t\tthis.song = new Song(song);\r\n\t\t} else if (song instanceof Song) {\r\n\t\t\tthis.song = song;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic setModValue(volumeStart: number, volumeEnd: number, mod: number, instrument: Instrument, setting: ModSetting): number {\r\n\t\tlet val: number;\r\n\t\tlet nextVal: number;\r\n\t\tswitch (setting) {\r\n\t\t\tcase ModSetting.mstSongVolume:\r\n\t\t\tcase ModSetting.mstReverb:\r\n\t\t\tcase ModSetting.mstTempo:\r\n\t\t\tcase ModSetting.mstSongDetune:\r\n\t\t\t\tval = (this.song as Song).modValueToReal(volumeStart, setting);\r\n\t\t\t\tnextVal = (this.song as Song).modValueToReal(volumeEnd, setting);\r\n\t\t\t\tif (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\r\n\t\t\t\t\tthis.modValues[setting] = val;\r\n\t\t\t\t\tthis.nextModValues[setting] = nextVal;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstInsVolume:\r\n\t\t\tcase ModSetting.mstPan:\r\n\t\t\tcase ModSetting.mstPulseWidth:\r\n\t\t\tcase ModSetting.mstFilterCut:\r\n\t\t\tcase ModSetting.mstFilterPeak:\r\n\t\t\tcase ModSetting.mstFMSlider1:\r\n\t\t\tcase ModSetting.mstFMSlider2:\r\n\t\t\tcase ModSetting.mstFMSlider3:\r\n\t\t\tcase ModSetting.mstFMSlider4:\r\n\t\t\tcase ModSetting.mstFMFeedback:\r\n\t\t\tcase ModSetting.mstVibratoDepth:\r\n\t\t\tcase ModSetting.mstVibratoSpeed:\r\n\t\t\tcase ModSetting.mstVibratoDelay:\r\n\t\t\tcase ModSetting.mstArpeggioSpeed:\r\n\t\t\tcase ModSetting.mstPanDelay:\r\n\t\t\tcase ModSetting.mstResetArpeggio:\r\n\t\t\tcase ModSetting.mstDetune:\r\n\t\t\t\tval = this.song!.modValueToReal(volumeStart, setting);\r\n\t\t\t\tnextVal = this.song!.modValueToReal(volumeEnd, setting);\r\n\t\t\t\tlet channelAdjust: number = instrument.modChannels[mod] + ((instrument.modStatuses[mod] == ModStatus.msForNoise) ? this.song!.pitchChannelCount : 0);\r\n\r\n\t\t\t\tif (this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] == null\r\n\t\t\t\t\t|| this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != val\r\n\t\t\t\t\t|| this.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != nextVal) {\r\n\t\t\t\t\tthis.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = val;\r\n\t\t\t\t\tthis.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = nextVal;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstNextBar:\r\n\t\t\t\tval = (this.song as Song).modValueToReal(volumeStart, setting);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ModSetting.mstNone:\r\n\t\t\tdefault:\r\n\t\t\t\tval = -1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn val;\r\n\t}\r\n\r\n\tpublic getModValue(setting: ModSetting, forSong: boolean, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\r\n\t\tif (forSong) {\r\n\t\t\tif (this.modValues[setting] != null && this.nextModValues[setting] != null) {\r\n\t\t\t\treturn nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\r\n\t\t\t}\r\n\t\t} else if (channel != undefined && instrument != undefined) {\r\n\t\t\tif (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n\t\t\t\treturn nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t// Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\r\n\tpublic isAnyModActive(channel: number, instrument: number): boolean {\r\n\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\tif ((this.modValues != undefined && this.modValues[setting] != null)\r\n\t\t\t\t|| (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic unsetMod(setting: ModSetting, channel?: number, instrument?: number) {\r\n\t\tif (this.isModActive(setting, true) || (channel != undefined && instrument != undefined && this.isModActive(setting, false, channel, instrument))) {\r\n\t\t\tthis.modValues[setting] = null;\r\n\t\t\tthis.nextModValues[setting] = null;\r\n\t\t\tif (channel != undefined && instrument != undefined) {\r\n\t\t\t\tthis.modInsValues[channel][instrument][setting] = null;\r\n\t\t\t\tthis.nextModInsValues[channel][instrument][setting] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isModActive(setting: ModSetting, forSong: boolean, channel?: number, instrument?: number): boolean {\r\n\t\tif (forSong) {\r\n\t\t\treturn (this.modValues != undefined && this.modValues[setting] != null);\r\n\t\t} else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null && this.modInsValues[channel][instrument][setting] != null) {\r\n\t\t\treturn (this.modInsValues[channel][instrument][setting] != null);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate activateAudio(): void {\r\n\t\tif (this.audioCtx == null || this.scriptNode == null) {\r\n\t\t\tthis.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)();\r\n\t\t\tthis.samplesPerSecond = this.audioCtx.sampleRate;\r\n\t\t\tthis.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(2048, 0, 2) : this.audioCtx.createJavaScriptNode(2048, 0, 2); // 2048, 0 input channels, 2 output channels\r\n\t\t\tthis.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n\t\t\tthis.scriptNode.channelCountMode = 'explicit';\r\n\t\t\tthis.scriptNode.channelInterpretation = 'speakers';\r\n\t\t\tthis.scriptNode.connect(this.audioCtx.destination);\r\n\t\t}\r\n\t\tthis.audioCtx.resume();\r\n\t}\r\n\r\n\tprivate deactivateAudio(): void {\r\n\t\tif (this.audioCtx != null && this.scriptNode != null) {\r\n\t\t\tthis.scriptNode.disconnect(this.audioCtx.destination);\r\n\t\t\tthis.scriptNode = null;\r\n\t\t\tif (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n\t\t\tthis.audioCtx = null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic maintainLiveInput(): void {\r\n\t\tthis.activateAudio();\r\n\t\tthis.liveInputEndTime = performance.now() + 10000.0;\r\n\t}\r\n\r\n\tpublic play(): void {\r\n\t\tif (this.isPlayingSong) return;\r\n\t\tthis.isPlayingSong = true;\r\n\t\tthis.warmUpSynthesizer(this.song);\r\n\t\tthis.computeLatestModValues();\r\n\t\tthis.activateAudio();\r\n\t}\r\n\r\n\tpublic pause(): void {\r\n\t\tif (!this.isPlayingSong) return;\r\n\t\tthis.isPlayingSong = false;\r\n\t\tif (this.song != null) {\r\n\t\t\tthis.song.inVolumeCap = 0.0;\r\n\t\t\tthis.song.outVolumeCap = 0.0;\r\n\t\t}\r\n\t\tthis.modValues = [];\r\n\t\tthis.modInsValues = [];\r\n\t\tthis.nextModValues = [];\r\n\t\tthis.nextModInsValues = [];\r\n\t\tthis.tyingOver = [];\r\n\t}\r\n\r\n\tpublic snapToStart(): void {\r\n\t\tthis.bar = 0;\r\n\t\tthis.snapToBar();\r\n\t}\r\n\r\n\tpublic goToBar(bar: number): void {\r\n\t\tthis.bar = bar;\r\n\t\tthis.playheadInternal = this.bar;\r\n\t}\r\n\r\n\tpublic snapToBar(): void {\r\n\t\tthis.playheadInternal = this.bar;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\t\tthis.tick = 0;\r\n\t\tthis.tickSampleCountdown = 0;\r\n\t}\r\n\r\n\tpublic resetEffects(): void {\r\n\t\tthis.reverbDelayPos = 0;\r\n\t\tthis.reverbFeedback0 = 0.0;\r\n\t\tthis.reverbFeedback1 = 0.0;\r\n\t\tthis.reverbFeedback2 = 0.0;\r\n\t\tthis.reverbFeedback3 = 0.0;\r\n\t\t//this.highpassInput = 0.0;\r\n\t\t//this.highpassOutput = 0.0;\r\n\t\tthis.freeAllTones();\r\n\t\tfor (let i: number = 0; i < this.reverbDelayLine.length; i++) this.reverbDelayLine[i] = 0.0;\r\n\t\tfor (let i: number = 0; i < this.chorusDelayLine.length; i++) this.chorusDelayLine[i] = 0.0;\r\n\t\tif (this.samplesForNone != null) for (let i: number = 0; i < this.samplesForNone.length; i++) this.samplesForNone[i] = 0.0;\r\n\t\tif (this.samplesForReverb != null) for (let i: number = 0; i < this.samplesForReverb.length; i++) this.samplesForReverb[i] = 0.0;\r\n\t\tif (this.samplesForChorus != null) for (let i: number = 0; i < this.samplesForChorus.length; i++) this.samplesForChorus[i] = 0.0;\r\n\t\tif (this.samplesForChorusReverb != null) for (let i: number = 0; i < this.samplesForChorusReverb.length; i++) this.samplesForChorusReverb[i] = 0.0;\r\n\t}\r\n\r\n\tpublic jumpIntoLoop(): void {\r\n\t\tif (!this.song) return;\r\n\t\tif (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\r\n\t\t\tconst oldBar: number = this.bar;\r\n\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t\tif (this.playing)\r\n\t\t\t\tthis.computeLatestModValues();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic nextBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst oldBar: number = this.bar;\r\n\t\tthis.bar++;\r\n\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\tthis.bar = 0;\r\n\t\t}\r\n\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic skipBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst samplesPerTick: number = this.getSamplesPerTick();\r\n\t\tthis.bar++;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\t\tthis.tick = 0;\r\n\t\tthis.tickSampleCountdown = samplesPerTick;\r\n\r\n\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic firstBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tthis.bar = 0;\r\n\t\tthis.playheadInternal = 0;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic jumpToEditingBar(bar: number): void {\r\n\t\tif (!this.song) return;\r\n\r\n\t\tthis.bar = bar;\r\n\r\n\t\tthis.playheadInternal = bar;\r\n\t\tthis.beat = 0;\r\n\t\tthis.part = 0;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tpublic prevBar(): void {\r\n\t\tif (!this.song) return;\r\n\t\tconst oldBar: number = this.bar;\r\n\t\tthis.bar--;\r\n\t\tif (this.bar < 0 || this.bar >= this.song.barCount) {\r\n\t\t\tthis.bar = this.song.barCount - 1;\r\n\t\t}\r\n\t\tthis.playheadInternal += this.bar - oldBar;\r\n\r\n\t\t// Reset note ties\r\n\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t}\r\n\r\n\t\tif (this.playing)\r\n\t\t\tthis.computeLatestModValues();\r\n\t}\r\n\r\n\tprivate audioProcessCallback = (audioProcessingEvent: any): void => {\r\n\t\tconst outputBuffer = audioProcessingEvent.outputBuffer;\r\n\t\tconst outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n\t\tconst outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n\t\tconst isPlayingLiveTones = performance.now() < this.liveInputEndTime;\r\n\t\tif (!isPlayingLiveTones && !this.isPlayingSong) {\r\n\t\t\tfor (let i: number = 0; i < outputBuffer.length; i++) {\r\n\t\t\t\toutputDataL[i] = 0.0;\r\n\t\t\t\toutputDataR[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.deactivateAudio();\r\n\t\t} else {\r\n\t\t\tthis.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\r\n\t\tif (this.song == null) {\r\n\t\t\tfor (let i: number = 0; i < outputBufferLength; i++) {\r\n\t\t\t\toutputDataL[i] = 0.0;\r\n\t\t\t\toutputDataR[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.deactivateAudio();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.song.inVolumeCap = 0.0; // Reset volume cap for this run\r\n\t\tthis.song.outVolumeCap = 0.0;\r\n\r\n\t\tconst channelCount: number = this.song.pitchChannelCount + this.song.noiseChannelCount;\r\n\r\n\t\tfor (let i: number = this.activeTones.length; i < channelCount; i++) {\r\n\t\t\tthis.activeTones[i] = new Deque<Tone>();\r\n\t\t\tthis.releasedTones[i] = new Deque<Tone>();\r\n\t\t}\r\n\t\tthis.activeTones.length = channelCount;\r\n\t\tthis.releasedTones.length = channelCount;\r\n\t\tif (channelCount != this.tyingOver.length) {\r\n\t\t\tlet idx: number = this.tyingOver.length;\r\n\t\t\tthis.tyingOver.length = channelCount;\r\n\t\t\twhile (idx < this.tyingOver.length) {\r\n\t\t\t\tthis.tyingOver[idx++] = -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i: number = this.activeModTones.length; i < this.song.modChannelCount; i++) {\r\n\t\t\tthis.activeModTones[i] = [];\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tthis.activeModTones[i][mod] = new Deque<Tone>();\r\n\t\t\t}\r\n\t\t\tthis.activeModTones[i].length = Config.modCount;\r\n\t\t}\r\n\t\tthis.activeModTones.length = this.song.modChannelCount;\r\n\r\n\t\tlet samplesPerTick: number = this.getSamplesPerTick();\r\n\t\tlet bufferIndex: number = 0;\r\n\t\tlet ended: boolean = false;\r\n\r\n\t\t// Check the bounds of the playhead:\r\n\t\twhile (this.tickSampleCountdown <= 0) this.tickSampleCountdown += samplesPerTick;\r\n\t\tif (this.tickSampleCountdown > samplesPerTick) this.tickSampleCountdown = samplesPerTick;\r\n\t\tif (playSong) {\r\n\t\t\tif (this.beat >= this.song.beatsPerBar) {\r\n\t\t\t\tthis.bar++;\r\n\t\t\t\tthis.beat = 0;\r\n\t\t\t\tthis.part = 0;\r\n\t\t\t\tthis.tick = 0;\r\n\t\t\t\tthis.tickSampleCountdown = samplesPerTick;\r\n\r\n\t\t\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\tthis.bar = 0;\r\n\t\t\t\tif (this.loopRepeatCount != -1) {\r\n\t\t\t\t\tended = true;\r\n\t\t\t\t\tthis.pause();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//const synthStartTime: number = performance.now();\r\n\r\n\t\tconst stereoBufferLength: number = outputBufferLength * 4;\r\n\t\tif (this.samplesForNone == null || this.samplesForNone.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForReverb == null || this.samplesForReverb.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForChorus == null || this.samplesForChorus.length != stereoBufferLength ||\r\n\t\t\tthis.samplesForChorusReverb == null || this.samplesForChorusReverb.length != stereoBufferLength) {\r\n\t\t\tthis.samplesForNone = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForReverb = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForChorus = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.samplesForChorusReverb = new Float32Array(stereoBufferLength);\r\n\t\t\tthis.stereoBufferIndex = 0;\r\n\t\t}\r\n\t\tlet stereoBufferIndex: number = this.stereoBufferIndex;\r\n\t\tconst samplesForNone: Float32Array = this.samplesForNone;\r\n\t\tconst samplesForReverb: Float32Array = this.samplesForReverb;\r\n\t\tconst samplesForChorus: Float32Array = this.samplesForChorus;\r\n\t\tconst samplesForChorusReverb: Float32Array = this.samplesForChorusReverb;\r\n\r\n\t\t// Post processing parameters:\r\n\t\tconst volume: number = +this.volume;\r\n\t\tconst chorusDelayLine: Float32Array = this.chorusDelayLine;\r\n\t\tconst reverbDelayLine: Float32Array = this.reverbDelayLine;\r\n\t\tconst chorusDuration: number = 2.0;\r\n\t\tconst chorusAngle: number = Math.PI * 2.0 / (chorusDuration * this.samplesPerSecond);\r\n\t\tconst chorusRange: number = 150 * this.samplesPerSecond / 44100;\r\n\t\tconst chorusOffset0: number = 0x800 - 1.51 * chorusRange;\r\n\t\tconst chorusOffset1: number = 0x800 - 2.10 * chorusRange;\r\n\t\tconst chorusOffset2: number = 0x800 - 3.35 * chorusRange;\r\n\t\tconst chorusOffset3: number = 0x800 - 1.47 * chorusRange;\r\n\t\tconst chorusOffset4: number = 0x800 - 2.15 * chorusRange;\r\n\t\tconst chorusOffset5: number = 0x800 - 3.25 * chorusRange;\r\n\t\tlet chorusPhase: number = this.chorusPhase % (Math.PI * 2.0);\r\n\t\tlet chorusDelayPos: number = this.chorusDelayPos & 0x7FF;\r\n\t\tlet reverbDelayPos: number = this.reverbDelayPos & 0x3FFF;\r\n\t\tlet reverbFeedback0: number = +this.reverbFeedback0;\r\n\t\tlet reverbFeedback1: number = +this.reverbFeedback1;\r\n\t\tlet reverbFeedback2: number = +this.reverbFeedback2;\r\n\t\tlet reverbFeedback3: number = +this.reverbFeedback3;\r\n\t\tlet useReverb: number = this.song.reverb;\r\n\t\tif (this.isModActive(ModSetting.mstReverb, true)) {\r\n\t\t\tuseReverb = this.getModValue(ModSetting.mstReverb, true);\r\n\t\t}\r\n\t\tlet reverb: number = Math.pow(useReverb / Config.reverbRange, 0.667) * 0.425;\r\n\t\t//const highpassFilter: number = Math.pow(0.5, 400 / this.samplesPerSecond);\r\n\t\tconst limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond); // Default 4.0\r\n\t\tconst limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond); // Default 4000.0;\r\n\t\tconst compressionThreshold: number = this.song.compressionThreshold; // Default 1\r\n\t\tconst limitThreshold: number = this.song.limitThreshold; // Default 1\r\n\t\tconst compressionRatio: number = this.song.compressionRatio; // Default 1\r\n\t\tconst limitRatio: number = this.song.limitRatio; // Default 1\r\n\t\tconst masterGain: number = this.song.masterGain; // Default 1\r\n\t\t//let highpassInput: number = +this.highpassInput;\r\n\t\t//let highpassOutput: number = +this.highpassOutput;\r\n\t\tlet limit: number = +this.limit;\r\n\r\n\t\twhile (bufferIndex < outputBufferLength && !ended) {\r\n\r\n\t\t\tconst samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\r\n\t\t\tconst runLength: number = Math.min(Math.ceil(this.tickSampleCountdown), samplesLeftInBuffer);\r\n\r\n\t\t\tfor (let modChannel: number = 0, channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; modChannel < this.song.modChannelCount; modChannel++, channel++) {\r\n\t\t\t\t// Also determines mod tones.\r\n\t\t\t\tthis.determineCurrentActiveTones(this.song, channel, playSong);\r\n\r\n\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\tfor (let i: number = 0; i < this.activeModTones[modChannel][mod].count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.activeModTones[modChannel][mod].get(i);\r\n\r\n\t\t\t\t\t\tif (this.song.channels[channel].muted == false)\r\n\t\t\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Handle next bar mods if they were set\r\n\t\t\tif (this.wantToSkip) {\r\n\t\t\t\tthis.wantToSkip = false;\r\n\t\t\t\tthis.skipBar();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.isModActive(ModSetting.mstReverb, true)) {\r\n\t\t\t\treverb = Math.pow(this.getModValue(ModSetting.mstReverb, true) / Config.reverbRange, 0.667) * 0.425;\r\n\t\t\t}\r\n\r\n\t\t\t// Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\r\n\r\n\t\t\tconst tickSampleCountdown: number = this.tickSampleCountdown;\r\n\t\t\tconst startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n\t\t\tconst endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n\t\t\tconst ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n\t\t\tconst partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n\t\t\tconst partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n\t\t\tconst partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n\t\t\tconst partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\tfor (let instrumentIdx: number = 0; instrumentIdx < this.song.instrumentsPerChannel; instrumentIdx++) {\r\n\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\tlet useVibratoSpeed: number = instrument.vibratoSpeed;\r\n\r\n\t\t\t\t\tinstrument.LFOtime = instrument.nextLFOtime;\r\n\r\n\t\t\t\t\tif (this.isModActive(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t\tuseVibratoSpeed = this.getModValue(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx, false);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (useVibratoSpeed == 0) {\r\n\t\t\t\t\t\tinstrument.LFOtime = 0;\r\n\t\t\t\t\t\tinstrument.nextLFOtime = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinstrument.nextLFOtime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\r\n\t\t\t\tif (channel == this.liveInputChannel) {\r\n\t\t\t\t\tthis.determineLiveInputTones(this.song);\r\n\r\n\t\t\t\t\tfor (let i: number = 0; i < this.liveInputTones.count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.liveInputTones.get(i);\r\n\t\t\t\t\t\t// Hmm. Will allow active input from a muted channel for now.\r\n\t\t\t\t\t\t//if (this.song.channels[channel].muted == false)\r\n\t\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.determineCurrentActiveTones(this.song, channel, playSong);\r\n\t\t\t\tfor (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n\t\t\t\t\tconst tone: Tone = this.activeTones[channel].get(i);\r\n\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n\t\t\t\t\tconst tone: Tone = this.releasedTones[channel].get(i);\r\n\t\t\t\t\tif (tone.ticksSinceReleased >= tone.instrument.getTransition().releaseTicks) {\r\n\t\t\t\t\t\tthis.freeReleasedTone(channel, i);\r\n\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\r\n\t\t\t\t\tthis.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, true, shouldFadeOutFast);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Post processing:\r\n\t\t\tlet chorusTap0Index: number = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n\t\t\tlet chorusTap1Index: number = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n\t\t\tlet chorusTap2Index: number = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n\t\t\tlet chorusTap3Index: number = chorusDelayPos + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n\t\t\tlet chorusTap4Index: number = chorusDelayPos + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n\t\t\tlet chorusTap5Index: number = chorusDelayPos + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n\t\t\tchorusPhase += chorusAngle * runLength;\r\n\t\t\tconst chorusTap0End: number = chorusDelayPos + runLength + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n\t\t\tconst chorusTap1End: number = chorusDelayPos + runLength + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n\t\t\tconst chorusTap2End: number = chorusDelayPos + runLength + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n\t\t\tconst chorusTap3End: number = chorusDelayPos + runLength + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n\t\t\tconst chorusTap4End: number = chorusDelayPos + runLength + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n\t\t\tconst chorusTap5End: number = chorusDelayPos + runLength + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n\t\t\tconst chorusTap0Delta: number = (chorusTap0End - chorusTap0Index) / runLength;\r\n\t\t\tconst chorusTap1Delta: number = (chorusTap1End - chorusTap1Index) / runLength;\r\n\t\t\tconst chorusTap2Delta: number = (chorusTap2End - chorusTap2Index) / runLength;\r\n\t\t\tconst chorusTap3Delta: number = (chorusTap3End - chorusTap3Index) / runLength;\r\n\t\t\tconst chorusTap4Delta: number = (chorusTap4End - chorusTap4Index) / runLength;\r\n\t\t\tconst chorusTap5Delta: number = (chorusTap5End - chorusTap5Index) / runLength;\r\n\t\t\tconst runEnd: number = bufferIndex + runLength;\r\n\t\t\tfor (let i: number = bufferIndex; i < runEnd; i++) {\r\n\t\t\t\tconst bufferIndexL: number = stereoBufferIndex;\r\n\t\t\t\tconst bufferIndexR: number = stereoBufferIndex + 1;\r\n\t\t\t\tconst sampleForNoneL: number = samplesForNone[bufferIndexL]; samplesForNone[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForNoneR: number = samplesForNone[bufferIndexR]; samplesForNone[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForReverbL: number = samplesForReverb[bufferIndexL]; samplesForReverb[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForReverbR: number = samplesForReverb[bufferIndexR]; samplesForReverb[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForChorusL: number = samplesForChorus[bufferIndexL]; samplesForChorus[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForChorusR: number = samplesForChorus[bufferIndexR]; samplesForChorus[bufferIndexR] = 0.0;\r\n\t\t\t\tconst sampleForChorusReverbL: number = samplesForChorusReverb[bufferIndexL]; samplesForChorusReverb[bufferIndexL] = 0.0;\r\n\t\t\t\tconst sampleForChorusReverbR: number = samplesForChorusReverb[bufferIndexR]; samplesForChorusReverb[bufferIndexR] = 0.0;\r\n\t\t\t\tstereoBufferIndex += 2;\r\n\r\n\t\t\t\tconst combinedChorusL: number = sampleForChorusL + sampleForChorusReverbL;\r\n\t\t\t\tconst combinedChorusR: number = sampleForChorusR + sampleForChorusReverbR;\r\n\r\n\t\t\t\tconst chorusTap0Ratio: number = chorusTap0Index % 1;\r\n\t\t\t\tconst chorusTap1Ratio: number = chorusTap1Index % 1;\r\n\t\t\t\tconst chorusTap2Ratio: number = chorusTap2Index % 1;\r\n\t\t\t\tconst chorusTap3Ratio: number = chorusTap3Index % 1;\r\n\t\t\t\tconst chorusTap4Ratio: number = chorusTap4Index % 1;\r\n\t\t\t\tconst chorusTap5Ratio: number = chorusTap5Index % 1;\r\n\t\t\t\tconst chorusTap0A: number = chorusDelayLine[(chorusTap0Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap0B: number = chorusDelayLine[(chorusTap0Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap1A: number = chorusDelayLine[(chorusTap1Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap1B: number = chorusDelayLine[(chorusTap1Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap2A: number = chorusDelayLine[(chorusTap2Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap2B: number = chorusDelayLine[(chorusTap2Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap3A: number = chorusDelayLine[(chorusTap3Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap3B: number = chorusDelayLine[(chorusTap3Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap4A: number = chorusDelayLine[(chorusTap4Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap4B: number = chorusDelayLine[(chorusTap4Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap5A: number = chorusDelayLine[(chorusTap5Index) & 0x7FF];\r\n\t\t\t\tconst chorusTap5B: number = chorusDelayLine[(chorusTap5Index + 1) & 0x7FF];\r\n\t\t\t\tconst chorusTap0: number = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n\t\t\t\tconst chorusTap1: number = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n\t\t\t\tconst chorusTap2: number = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n\t\t\t\tconst chorusTap3: number = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n\t\t\t\tconst chorusTap4: number = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n\t\t\t\tconst chorusTap5: number = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n\t\t\t\tconst chorusSampleL = 0.5 * (combinedChorusL - chorusTap0 + chorusTap1 - chorusTap2);\r\n\t\t\t\tconst chorusSampleR = 0.5 * (combinedChorusR - chorusTap3 + chorusTap4 - chorusTap5);\r\n\t\t\t\tchorusDelayLine[chorusDelayPos] = combinedChorusL;\r\n\t\t\t\tchorusDelayLine[(chorusDelayPos + 0x400) & 0x7FF] = combinedChorusR;\r\n\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & 0x7FF;\r\n\t\t\t\tchorusTap0Index += chorusTap0Delta;\r\n\t\t\t\tchorusTap1Index += chorusTap1Delta;\r\n\t\t\t\tchorusTap2Index += chorusTap2Delta;\r\n\t\t\t\tchorusTap3Index += chorusTap3Delta;\r\n\t\t\t\tchorusTap4Index += chorusTap4Delta;\r\n\t\t\t\tchorusTap5Index += chorusTap5Delta;\r\n\r\n\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n\t\t\t\t// good ratios:\t\t0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n\t\t\t\t// Delay lengths:\t3041\t + 3385\t\t+ 4481\t+  5477 = 16384 = 2^14\r\n\t\t\t\t// Buffer offsets:\t3041\t-> 6426\t   -> 10907 -> 16384\r\n\t\t\t\tconst reverbDelayPos1: number = (reverbDelayPos + 3041) & 0x3FFF;\r\n\t\t\t\tconst reverbDelayPos2: number = (reverbDelayPos + 6426) & 0x3FFF;\r\n\t\t\t\tconst reverbDelayPos3: number = (reverbDelayPos + 10907) & 0x3FFF;\r\n\t\t\t\tconst reverbSample0: number = (reverbDelayLine[reverbDelayPos]);\r\n\t\t\t\tconst reverbSample1: number = reverbDelayLine[reverbDelayPos1];\r\n\t\t\t\tconst reverbSample2: number = reverbDelayLine[reverbDelayPos2];\r\n\t\t\t\tconst reverbSample3: number = reverbDelayLine[reverbDelayPos3];\r\n\t\t\t\tconst reverbTemp0: number = -(reverbSample0 + sampleForChorusReverbL + sampleForReverbL) + reverbSample1;\r\n\t\t\t\tconst reverbTemp1: number = -(reverbSample0 + sampleForChorusReverbR + sampleForReverbR) - reverbSample1;\r\n\t\t\t\tconst reverbTemp2: number = -reverbSample2 + reverbSample3;\r\n\t\t\t\tconst reverbTemp3: number = -reverbSample2 - reverbSample3;\r\n\t\t\t\treverbFeedback0 += ((reverbTemp0 + reverbTemp2) * reverb - reverbFeedback0) * 0.5;\r\n\t\t\t\treverbFeedback1 += ((reverbTemp1 + reverbTemp3) * reverb - reverbFeedback1) * 0.5;\r\n\t\t\t\treverbFeedback2 += ((reverbTemp0 - reverbTemp2) * reverb - reverbFeedback2) * 0.5;\r\n\t\t\t\treverbFeedback3 += ((reverbTemp1 - reverbTemp3) * reverb - reverbFeedback3) * 0.5;\r\n\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbFeedback0;\r\n\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbFeedback1;\r\n\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbFeedback2;\r\n\t\t\t\treverbDelayLine[reverbDelayPos] = reverbFeedback3;\r\n\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & 0x3FFF;\r\n\r\n\t\t\t\t// Apply master pre-gain to the sound, before limiting. Master gain slider is 0-5, but it's squared for more range (0-25).\r\n\t\t\t\tconst sampleL = masterGain * masterGain * (sampleForNoneL + chorusSampleL + sampleForReverbL + reverbSample1 + reverbSample2 + reverbSample3);\r\n\t\t\t\tconst sampleR = masterGain * masterGain * (sampleForNoneR + chorusSampleR + sampleForReverbR + reverbSample0 + reverbSample2 - reverbSample3);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\thighpassOutput = highpassOutput * highpassFilter + sample - highpassInput;\r\n\t\t\t\thighpassInput = sample;\r\n\t\t\t\t// use highpassOutput instead of sample below?\r\n\t\t\t\t*/\r\n\r\n\t\t\t\t// A compressor/limiter.\r\n\t\t\t\tconst absL: number = sampleL < 0.0 ? -sampleL : sampleL;\r\n\t\t\t\tconst absR: number = sampleR < 0.0 ? -sampleR : sampleR;\r\n\t\t\t\tconst abs: number = absL > absR ? absL : absR;\r\n\t\t\t\tthis.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\r\n\t\t\t\t// Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\r\n\t\t\t\tconst limitRange: number = (+(abs > compressionThreshold)) + (+(abs > limitThreshold));\r\n\t\t\t\t// Determine the target amplification based on the range of the curve\r\n\t\t\t\tconst limitTarget: number =\r\n\t\t\t\t\t(+(limitRange == 0)) * (((abs + 1 - compressionThreshold) * 0.8 + 0.25) * compressionRatio + 1.05 * (1 - compressionRatio))\r\n\t\t\t\t\t+ (+(limitRange == 1)) * (1.05)\r\n\t\t\t\t\t+ (+(limitRange == 2)) * (1.05 * ((abs + 1 - limitThreshold) * limitRatio + (1 - limitThreshold)));\r\n\t\t\t\t// Move the limit towards the target\r\n\t\t\t\tlimit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\r\n\t\t\t\tconst limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\r\n\t\t\t\toutputDataL[i] = sampleL * limitedVolume;\r\n\t\t\t\toutputDataR[i] = sampleR * limitedVolume;\r\n\r\n\t\t\t\tthis.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\r\n\t\t\t}\r\n\r\n\t\t\tbufferIndex += runLength;\r\n\r\n\t\t\tthis.tickSampleCountdown -= runLength;\r\n\t\t\tif (this.tickSampleCountdown <= 0) {\r\n\r\n\t\t\t\t// Track how long tones have been released, and free them if there are too many.\r\n\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\tfor (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n\t\t\t\t\t\tconst tone: Tone = this.releasedTones[channel].get(i);\r\n\t\t\t\t\t\ttone.ticksSinceReleased++;\r\n\r\n\t\t\t\t\t\tconst shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\t\t\t\t\t\tif (shouldFadeOutFast) {\r\n\t\t\t\t\t\t\tthis.freeReleasedTone(channel, i);\r\n\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Update arpeggio time, which is used to calculate arpeggio position\r\n\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\tfor (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n\t\t\t\t\t\tlet instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\t\t\t\t\t\tlet useArpeggioSpeed: number = instrument.arpeggioSpeed;\r\n\t\t\t\t\t\tif (this.isModActive(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t\t\tuseArpeggioSpeed = this.getModValue(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx, false);\r\n\t\t\t\t\t\t\tif (Number.isInteger(useArpeggioSpeed)) {\r\n\t\t\t\t\t\t\t\tinstrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// Linear interpolate arpeggio values\r\n\t\t\t\t\t\t\t\tinstrument.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinstrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tick++;\r\n\t\t\t\tthis.tickSampleCountdown += samplesPerTick;\r\n\t\t\t\tif (this.tick == Config.ticksPerPart) {\r\n\t\t\t\t\tthis.tick = 0;\r\n\t\t\t\t\tthis.part++;\r\n\t\t\t\t\tthis.liveInputDuration--;\r\n\t\t\t\t\tvar atEnd = this.part + this.beat * Config.partsPerBeat >= this.findPartsInBar(this.bar) - 1;\r\n\t\t\t\t\t// Check if any active tones should be released.\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\t\t\t\t\t\t// Check if we're at the end of the bar and have a tie-over transition. If so, do not free tone\r\n\t\t\t\t\t\tvar carryOver = false;\r\n\t\t\t\t\t\tvar toneCount = this.activeTones[channel].count();\r\n\t\t\t\t\t\tvar pattern = this.song.getPattern(channel, this.bar);\r\n\t\t\t\t\t\tif (pattern != null && atEnd) {\r\n\t\t\t\t\t\t\tvar instrument = pattern.instrument;\r\n\t\t\t\t\t\t\tif (this.song.channels[channel].instruments[instrument].tieNoteTransition && toneCount > 0) {\r\n\t\t\t\t\t\t\t\t// Verify that all tie conditions are met\r\n\t\t\t\t\t\t\t\t// 1. Check for a note in this channel at the start of the next bar\r\n\t\t\t\t\t\t\t\t// 2. Check that the note's volume start matches the current volume\r\n\t\t\t\t\t\t\t\t// 3. Check that the shape (pitches, chord size) is a match\r\n\t\t\t\t\t\t\t\t// 4. Check that the instruments are the same\r\n\t\t\t\t\t\t\t\tvar targetBar = this.bar + 1;\r\n\t\t\t\t\t\t\t\tif (targetBar >= this.song.barCount || (targetBar >= this.song.loopStart + this.song.loopLength && this.loopRepeatCount != 0)) {\r\n\t\t\t\t\t\t\t\t\ttargetBar = this.song.loopStart;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvar nextPattern = this.song.getPattern(channel, targetBar);\r\n\t\t\t\t\t\t\t\tvar currNote = this.activeTones[channel].get(0).note;\r\n\t\t\t\t\t\t\t\tif (currNote != null) {\r\n\t\t\t\t\t\t\t\t\tvar pin = 0;\r\n\t\t\t\t\t\t\t\t\twhile (currNote.pins[pin].time + currNote.start < this.part + this.beat * Config.partsPerBeat && pin < currNote.pins.length - 1)\r\n\t\t\t\t\t\t\t\t\t\tpin++;\r\n\t\t\t\t\t\t\t\t\tvar currVolume = currNote.pins[pin].volume;\r\n\t\t\t\t\t\t\t\t\tvar lastInterval = currNote.pins[pin].interval;\r\n\r\n\t\t\t\t\t\t\t\t\tif (nextPattern != null && nextPattern.instrument == instrument) {\r\n\t\t\t\t\t\t\t\t\t\tfor (let i: number = 0; i < nextPattern.notes.length; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (nextPattern.notes[i].start == 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t&& nextPattern.notes[i].pins[0].volume == currVolume\r\n\t\t\t\t\t\t\t\t\t\t\t\t&& nextPattern.notes[i].pitches.length == currNote.pitches.length) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tcarryOver = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < currNote.pitches.length; j++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Allow any pitch order\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (nextPattern.notes[i].pitches.findIndex((p) => p == currNote!.pitches[j] + lastInterval) == -1) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcarryOver = false;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tj = currNote.pitches.length;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\ti = nextPattern.notes.length;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (carryOver) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Prior to an actual tie, all releasing for hard transitions also needs to be\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// cancelled. So, this check is ran a few parts before the end of a bar too.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// In those cases, just set tyingOver to 0 for that duration to cancel release\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// handling, but not affect note start time calculations.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.part + this.beat * Config.partsPerBeat < this.findPartsInBar(this.bar)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Only does this if it is needed, so if we're long tying (next else-if below) then don't ruin the math.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.tyingOver[channel] < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Special case: tying over a whole bar, just add the length.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (currNote.start == 0 && this.tyingOver[channel] >= 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] += this.part + this.beat * Config.partsPerBeat;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Set tyingOver to a number >= 0 representing how many parts back the tie note started.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = this.part + this.beat * Config.partsPerBeat - currNote.start;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n\t\t\t\t\t\t\tconst tone: Tone = this.activeTones[channel].get(i);\r\n\t\t\t\t\t\t\tconst transition: Transition = tone.instrument.getTransition();\r\n\r\n\t\t\t\t\t\t\tif (tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n\t\t\t\t\t\t\t\t// Free tone if the transition allows\r\n\t\t\t\t\t\t\t\tif (!(transition.isSeamless || tone.instrument.clicklessTransition || this.tyingOver[channel] >= 0)) {\r\n\t\t\t\t\t\t\t\t\tif (transition.releases) {\r\n\t\t\t\t\t\t\t\t\t\tthis.releaseTone(channel, tone);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tthis.freeTone(tone);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.activeTones[channel].remove(i);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// End of note: if not actively trying to carry over, kill note tie\r\n\t\t\t\t\t\t\t\tif (!carryOver) {\r\n\t\t\t\t\t\t\t\t\tthis.tyingOver[channel] = -1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let channel: number = 0; channel < this.song.modChannelCount; channel++) {\r\n\t\t\t\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.activeModTones[channel][mod].count(); i++) {\r\n\t\t\t\t\t\t\t\tconst tone: Tone = this.activeModTones[channel][mod].get(i);\r\n\t\t\t\t\t\t\t\tconst transition: Transition = tone.instrument.getTransition();\r\n\t\t\t\t\t\t\t\tif (!transition.isSeamless && tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n\t\t\t\t\t\t\t\t\tthis.freeTone(tone);\r\n\t\t\t\t\t\t\t\t\tthis.activeModTones[channel][mod].remove(i);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.part == Config.partsPerBeat) {\r\n\t\t\t\t\t\tthis.part = 0;\r\n\r\n\t\t\t\t\t\tif (playSong) {\r\n\t\t\t\t\t\t\tthis.beat++;\r\n\t\t\t\t\t\t\tif (this.beat == this.song.beatsPerBar) {\r\n\t\t\t\t\t\t\t\t// bar changed, reset for next bar:\r\n\t\t\t\t\t\t\t\tthis.beat = 0;\r\n\t\t\t\t\t\t\t\tthis.bar++;\r\n\t\t\t\t\t\t\t\tif (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\t\t\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\t\t\t\t\t\tthis.bar = 0;\r\n\t\t\t\t\t\t\t\t\tif (this.loopRepeatCount != -1) {\r\n\t\t\t\t\t\t\t\t\t\tended = true;\r\n\t\t\t\t\t\t\t\t\t\tthis.resetEffects();\r\n\t\t\t\t\t\t\t\t\t\tthis.pause();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Update mod values so that next values copy to current values\r\n\t\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\t\tif (this.nextModValues != null && this.nextModValues[setting] != null)\r\n\t\t\t\t\tthis.modValues[setting] = this.nextModValues[setting];\r\n\t\t\t}\r\n\r\n\t\t\t// Set samples per tick if song tempo mods changed it\r\n\t\t\tif (this.isModActive(ModSetting.mstTempo, true)) {\r\n\t\t\t\tsamplesPerTick = this.getSamplesPerTick();\r\n\t\t\t\tthis.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\r\n\t\t\t}\r\n\r\n\t\t\t// Bound LFO times to be within their period (to keep values from getting large)\r\n\t\t\t// I figured this modulo math probably doesn't have to happen every LFO tick.\r\n\t\t\tfor (let channel: number = 0; channel < this.song.pitchChannelCount; channel++) {\r\n\t\t\t\tfor (let instrument of this.song.channels[channel].instruments) {\r\n\t\t\t\t\tinstrument.nextLFOtime = (instrument.nextLFOtime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\r\n\t\t\t\t\tinstrument.arpTime = (instrument.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n\t\t\t\tfor (let channel: number = 0; channel < channelCount; channel++) {\r\n\t\t\t\t\tfor (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\t\tif (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n\t\t\t\t\t\t\tthis.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Optimization: Avoid persistent reverb values in the float denormal range.\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < reverbFeedback0 && reverbFeedback0 < epsilon) reverbFeedback0 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback1 && reverbFeedback1 < epsilon) reverbFeedback1 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback2 && reverbFeedback2 < epsilon) reverbFeedback2 = 0.0;\r\n\t\tif (-epsilon < reverbFeedback3 && reverbFeedback3 < epsilon) reverbFeedback3 = 0.0;\r\n\t\t//if (-epsilon < highpassInput && highpassInput < epsilon) highpassInput = 0.0;\r\n\t\t//if (-epsilon < highpassOutput && highpassOutput < epsilon) highpassOutput = 0.0;\r\n\t\tif (-epsilon < limit && limit < epsilon) limit = 0.0;\r\n\r\n\t\tthis.stereoBufferIndex = (this.stereoBufferIndex + outputBufferLength * 2) % stereoBufferLength;\r\n\t\tthis.chorusPhase = chorusPhase;\r\n\t\tthis.chorusDelayPos = chorusDelayPos;\r\n\t\tthis.reverbDelayPos = reverbDelayPos;\r\n\t\tthis.reverbFeedback0 = reverbFeedback0;\r\n\t\tthis.reverbFeedback1 = reverbFeedback1;\r\n\t\tthis.reverbFeedback2 = reverbFeedback2;\r\n\t\tthis.reverbFeedback3 = reverbFeedback3;\r\n\t\t//this.highpassInput = highpassInput;\r\n\t\t//this.highpassOutput = highpassOutput;\r\n\t\tthis.limit = limit;\r\n\r\n\t\tif (playSong) {\r\n\t\t\tthis.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / this.song.beatsPerBar + this.bar;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tconst synthDuration: number = performance.now() - synthStartTime;\r\n\t\t// Performance measurements:\r\n\t\tsamplesAccumulated += outputBufferLength;\r\n\t\tsamplePerformance += synthDuration;\r\n\t\t\r\n\t\tif (samplesAccumulated >= 44100 * 4) {\r\n\t\tconst secondsGenerated = samplesAccumulated / 44100;\r\n\t\tconst secondsRequired = samplePerformance / 1000;\r\n\t\tconst ratio = secondsRequired / secondsGenerated;\r\n\t\tconsole.log(ratio);\r\n\t\tsamplePerformance = 0;\r\n\t\tsamplesAccumulated = 0;\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tprivate freeTone(tone: Tone): void {\r\n\t\tthis.tonePool.pushBack(tone);\r\n\t}\r\n\r\n\tprivate newTone(): Tone {\r\n\t\tif (this.tonePool.count() > 0) {\r\n\t\t\tconst tone: Tone = this.tonePool.popBack();\r\n\t\t\ttone.reset();\r\n\t\t\ttone.active = false;\r\n\t\t\treturn tone;\r\n\t\t}\r\n\t\treturn new Tone();\r\n\t}\r\n\r\n\tprivate releaseTone(channel: number, tone: Tone): void {\r\n\t\tif (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n\t\t\tthis.releasedTones[channel].pushFront(tone);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t/*\r\n\t\t\tfor (let mod = 0; mod < Config.modCount; mod++) {\r\n\t\t\tthis.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].pushFront(tone);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t}\r\n\r\n\tprivate freeReleasedTone(channel: number, toneIndex: number): void {\r\n\t\tif (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n\t\t\tthis.freeTone(this.releasedTones[channel].get(toneIndex));\r\n\t\t\tthis.releasedTones[channel].remove(toneIndex);\r\n\t\t} else {\r\n\t\t\t/*\r\n\t\t\tfor (let mod = 0; mod < Config.modCount; mod++) {\r\n\t\t\tthis.freeTone(this.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].get(toneIndex));\r\n\t\t\tthis.releasedModTones[channel][mod].remove(toneIndex);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t}\r\n\r\n\tpublic freeAllTones(): void {\r\n\t\twhile (this.liveInputTones.count() > 0) {\r\n\t\t\tthis.freeTone(this.liveInputTones.popBack());\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < this.activeTones.length; i++) {\r\n\t\t\twhile (this.activeTones[i].count() > 0) {\r\n\t\t\t\tthis.freeTone(this.activeTones[i].popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i: number = 0; i < this.releasedTones.length; i++) {\r\n\t\t\twhile (this.releasedTones[i].count() > 0) {\r\n\t\t\t\tthis.freeTone(this.releasedTones[i].popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = 0; i < this.activeModTones.length; i++) {\r\n\t\t\tfor (let mod = 0; mod < this.activeModTones[i].length; mod++) {\r\n\t\t\t\twhile (this.activeModTones[i][mod].count() > 0) {\r\n\t\t\t\t\tthis.freeTone(this.activeModTones[i][mod].popBack());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*\r\n\t\tfor (let i = 0; i < this.releasedModTones.length; i++) {\r\n\t\tfor (let mod = 0; mod < this.releasedModTones[i].length; mod++) {\r\n\t\twhile (this.releasedModTones[i][mod].count() > 0) {\r\n\t\tthis.freeTone(this.releasedModTones[i][mod].popBack());\r\n\t\t}\r\n\t\t}\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tprivate determineLiveInputTones(song: Song): void {\r\n\t\tconst toneList: Deque<Tone> = this.liveInputTones;\r\n\t\tconst pitches: number[] = this.liveInputPitches;\r\n\t\tlet toneCount: number = 0;\r\n\t\tif (this.liveInputDuration > 0) {\r\n\t\t\tconst instrument: Instrument = song.channels[this.liveInputChannel].instruments[song.getPatternInstrument(this.liveInputChannel, this.bar)];\r\n\r\n\t\t\tif (instrument.getChord().arpeggiates) {\r\n\t\t\t\tlet tone: Tone;\r\n\t\t\t\tif (toneList.count() == 0) {\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popFront());\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttone = toneList.get(0);\r\n\t\t\t\t}\r\n\t\t\t\ttoneCount = 1;\r\n\r\n\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\ttone.pitches[i] = pitches[i];\r\n\t\t\t\t}\r\n\t\t\t\ttone.pitchCount = pitches.length;\r\n\t\t\t\ttone.chordSize = 1;\r\n\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t} else {\r\n\t\t\t\t//const transition: Transition = instrument.getTransition();\r\n\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\t//const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n\t\t\t\t\tlet tone: Tone;\r\n\t\t\t\t\tif (toneList.count() <= i) {\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.get(i));\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.set(i, tone);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttone = toneList.get(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoneCount++;\r\n\r\n\t\t\t\t\ttone.pitches[0] = pitches[i];\r\n\t\t\t\t\ttone.pitchCount = 1;\r\n\t\t\t\t\ttone.chordSize = pitches.length;\r\n\t\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (toneList.count() > toneCount) {\r\n\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popBack());\r\n\t\t}\r\n\r\n\t\tthis.liveInputStarted = false;\r\n\t}\r\n\r\n\tprivate determineCurrentActiveTones(song: Song, channel: number, playSong: boolean): void {\r\n\t\tconst instrument: Instrument = song.channels[channel].instruments[song.getPatternInstrument(channel, this.bar)];\r\n\t\tconst pattern: Pattern | null = song.getPattern(channel, this.bar);\r\n\t\tconst time: number = this.part + this.beat * Config.partsPerBeat;\r\n\r\n\t\tif (playSong && song.getChannelIsMod(channel) && !song.channels[channel].muted) {\r\n\t\t\t// Offset channel (first mod channel is 0 index in mod tone array)\r\n\t\t\tlet modChannelIdx = channel - (song.pitchChannelCount + song.noiseChannelCount);\r\n\r\n\t\t\t// For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\r\n\t\t\t// The same transition logic should apply though, even though it isn't really used by mod channels.\r\n\t\t\tlet notes: (Note | null)[] = [];\r\n\t\t\tlet prevNotes: (Note | null)[] = [];\r\n\t\t\tlet nextNotes: (Note | null)[] = [];\r\n\t\t\tlet fillCount: number = Config.modCount;\r\n\t\t\twhile (fillCount--) {\r\n\t\t\t\tnotes.push(null);\r\n\t\t\t\tprevNotes.push(null);\r\n\t\t\t\tnextNotes.push(null);\r\n\t\t\t}\r\n\r\n\t\t\tif (pattern != null) {\r\n\t\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\t\tif (pattern.notes[i].end <= time) {\r\n\t\t\t\t\t\t// Actually need to check which note starts closer to the start of this note.\r\n\t\t\t\t\t\tif (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n\t\t\t\t\t\t\tprevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n\t\t\t\t\t\tnotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (pattern.notes[i].start > time) {\r\n\t\t\t\t\t\t// Actually need to check which note starts closer to the end of this note.\r\n\t\t\t\t\t\tif (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n\t\t\t\t\t\t\tnextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let mod: number = 0; mod < Config.modCount; mod++) {\r\n\t\t\t\tconst toneList: Deque<Tone> = this.activeModTones[modChannelIdx][mod];\r\n\t\t\t\tif (notes[mod] != null) {\r\n\t\t\t\t\tif (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\r\n\t\t\t\t\tif (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\r\n\t\t\t\t\tthis.syncTones(channel, toneList, instrument, (notes[mod] as Note).pitches, (notes[mod] as Note), (prevNotes[mod] as Note), (nextNotes[mod] as Note), time);\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhile (toneList.count() > 0) {\r\n\t\t\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!song.getChannelIsMod(channel)) {\r\n\r\n\t\t\tlet note: Note | null = null;\r\n\t\t\tlet prevNote: Note | null = null;\r\n\t\t\tlet nextNote: Note | null = null;\r\n\r\n\t\t\tif (playSong && pattern != null && !song.channels[channel].muted) {\r\n\t\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\t\tif (pattern.notes[i].end <= time) {\r\n\t\t\t\t\t\tprevNote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n\t\t\t\t\t\tnote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start > time) {\r\n\t\t\t\t\t\tnextNote = pattern.notes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst toneList: Deque<Tone> = this.activeTones[channel];\r\n\t\t\tif (note != null) {\r\n\t\t\t\tif (prevNote != null && prevNote.end != note.start) prevNote = null;\r\n\t\t\t\tif (nextNote != null && nextNote.start != note.end) nextNote = null;\r\n\t\t\t\tthis.syncTones(channel, toneList, instrument, note.pitches, note, prevNote, nextNote, time);\r\n\t\t\t} else {\r\n\t\t\t\twhile (toneList.count() > 0) {\r\n\t\t\t\t\t// Automatically free or release seamless tones if there's no new note to take over.\r\n\t\t\t\t\tif (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n\t\t\t\t\t\tthis.releaseTone(channel, toneList.popBack());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate syncTones(channel: number, toneList: Deque<Tone>, instrument: Instrument, pitches: number[], note: Note, prevNote: Note | null, nextNote: Note | null, currentPart: number): void {\r\n\t\tlet toneCount: number = 0;\r\n\t\t// Mod channels don't ever tie over, so the real start point is always simply the note's start.\r\n\t\tlet noteStartAdjust = (channel < this.song!.pitchChannelCount + this.song!.noiseChannelCount)\r\n\t\t\t? Math.max(0, this.tyingOver[channel])\r\n\t\t\t: 0;\r\n\t\tif (instrument.getChord().arpeggiates) {\r\n\t\t\tlet tone: Tone;\r\n\t\t\tif (toneList.count() == 0) {\r\n\t\t\t\ttone = this.newTone();\r\n\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t} else {\r\n\t\t\t\ttone = toneList.get(0);\r\n\t\t\t}\r\n\t\t\ttoneCount = 1;\r\n\r\n\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\ttone.pitches[i] = pitches[i];\r\n\t\t\t}\r\n\t\t\ttone.pitchCount = pitches.length;\r\n\t\t\ttone.chordSize = 1;\r\n\t\t\ttone.instrument = instrument;\r\n\t\t\ttone.note = note;\r\n\t\t\ttone.noteStart = note.start - noteStartAdjust;\r\n\t\t\ttone.noteEnd = note.end;\r\n\t\t\ttone.prevNote = prevNote;\r\n\t\t\ttone.nextNote = nextNote;\r\n\t\t\ttone.prevNotePitchIndex = 0;\r\n\t\t\ttone.nextNotePitchIndex = 0;\r\n\t\t} else {\r\n\t\t\tconst transition: Transition = instrument.getTransition();\r\n\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\r\n\t\t\t\tconst strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\t\t\t\tlet prevNoteForThisTone: Note | null = (prevNote && prevNote.pitches.length > i) ? prevNote : null;\r\n\t\t\t\tlet noteForThisTone: Note = note;\r\n\t\t\t\tlet nextNoteForThisTone: Note | null = (nextNote && nextNote.pitches.length > i) ? nextNote : null;\r\n\t\t\t\tlet noteStart: number = noteForThisTone.start + strumOffsetParts - noteStartAdjust;\r\n\r\n\t\t\t\tif (noteStart > currentPart) {\r\n\t\t\t\t\tif (toneList.count() > i && (transition.isSeamless || this.tyingOver[channel] >= 0) && prevNoteForThisTone != null) {\r\n\t\t\t\t\t\tnextNoteForThisTone = noteForThisTone;\r\n\t\t\t\t\t\tnoteForThisTone = prevNoteForThisTone;\r\n\t\t\t\t\t\tprevNoteForThisTone = null;\r\n\t\t\t\t\t\tnoteStart = noteForThisTone.start + strumOffsetParts - noteStartAdjust;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet noteEnd: number = noteForThisTone.end;\r\n\t\t\t\tif ((transition.isSeamless || this.tyingOver[channel] >= 0) && nextNoteForThisTone != null) {\r\n\t\t\t\t\tnoteEnd = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEnd + strumOffsetParts);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet tone: Tone;\r\n\t\t\t\tif (toneList.count() <= i) {\r\n\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttone = toneList.get(i);\r\n\t\t\t\t}\r\n\t\t\t\ttoneCount++;\r\n\r\n\t\t\t\ttone.pitches[0] = noteForThisTone.pitches[i];\r\n\t\t\t\ttone.pitchCount = 1;\r\n\t\t\t\ttone.chordSize = noteForThisTone.pitches.length;\r\n\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\ttone.note = noteForThisTone;\r\n\t\t\t\ttone.noteStart = noteStart;\r\n\t\t\t\ttone.noteEnd = noteEnd;\r\n\t\t\t\ttone.prevNote = prevNoteForThisTone;\r\n\t\t\t\ttone.nextNote = nextNoteForThisTone;\r\n\t\t\t\ttone.prevNotePitchIndex = i;\r\n\t\t\t\ttone.nextNotePitchIndex = i;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (toneList.count() > toneCount) {\r\n\t\t\t// Automatically free or release seamless tones if there's no new note to take over.\r\n\t\t\tif (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n\t\t\t\tthis.releaseTone(channel, toneList.popBack());\r\n\t\t\t} else {\r\n\t\t\t\tthis.freeTone(toneList.popBack());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate playTone(song: Song, stereoBufferIndex: number, stereoBufferLength: number, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n\t\tSynth.computeTone(this, song, channel, samplesPerTick, runLength, tone, released, shouldFadeOutFast);\r\n\t\tlet synthBuffer: Float32Array;\r\n\t\tswitch (tone.instrument.effects) {\r\n\t\t\tcase 0: synthBuffer = this.samplesForNone!; break;\r\n\t\t\tcase 1: synthBuffer = this.samplesForReverb!; break;\r\n\t\t\tcase 2: synthBuffer = this.samplesForChorus!; break;\r\n\t\t\tcase 3: synthBuffer = this.samplesForChorusReverb!; break;\r\n\t\t\tdefault: throw new Error();\r\n\t\t}\r\n\t\tconst synthesizer: Function = Synth.getInstrumentSynthFunction(tone.instrument);\r\n\t\tsynthesizer(this, synthBuffer, stereoBufferIndex, stereoBufferLength, runLength * 2, tone, tone.instrument);\r\n\t}\r\n\r\n\tprivate static computeEnvelope(envelope: Envelope, time: number, beats: number, customVolume: number): number {\r\n\t\tswitch (envelope.type) {\r\n\t\t\tcase EnvelopeType.custom: return customVolume;\r\n\t\t\tcase EnvelopeType.steady: return 1.0;\r\n\t\t\tcase EnvelopeType.twang:\r\n\t\t\t\treturn 1.0 / (1.0 + time * envelope.speed);\r\n\t\t\tcase EnvelopeType.swell:\r\n\t\t\t\treturn 1.0 - 1.0 / (1.0 + time * envelope.speed);\r\n\t\t\tcase EnvelopeType.tremolo:\r\n\t\t\t\treturn 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\r\n\t\t\tcase EnvelopeType.tremolo2:\r\n\t\t\t\treturn 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\r\n\t\t\tcase EnvelopeType.punch:\r\n\t\t\t\treturn Math.max(1.0, 2.0 - time * 10.0);\r\n\t\t\tcase EnvelopeType.flare:\r\n\t\t\t\tconst speed: number = envelope.speed;\r\n\t\t\t\tconst attack: number = 0.25 / Math.sqrt(speed);\r\n\t\t\t\treturn time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * speed);\r\n\t\t\tcase EnvelopeType.decay:\r\n\t\t\t\treturn Math.pow(2, -envelope.speed * time);\r\n\t\t\tdefault: throw new Error(\"Unrecognized operator envelope type.\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static computeChordVolume(chordSize: number): number {\r\n\t\treturn 1.0 / ((chordSize - 1) * 0.25 + 1.0);\r\n\t}\r\n\r\n\tprivate static computeTone(synth: Synth, song: Song, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n\t\tconst instrument: Instrument = tone.instrument;\r\n\t\tconst transition: Transition = instrument.getTransition();\r\n\t\tconst chord: Chord = instrument.getChord();\r\n\t\tconst chordVolume: number = chord.arpeggiates ? 1 : Synth.computeChordVolume(tone.chordSize);\r\n\t\tconst isNoiseChannel: boolean = song.getChannelIsNoise(channel);\r\n\t\tconst intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\r\n\t\tconst secondsPerPart: number = Config.ticksPerPart * samplesPerTick / synth.samplesPerSecond;\r\n\t\tconst beatsPerPart: number = 1.0 / Config.partsPerBeat;\r\n\t\tconst toneWasActive: boolean = tone.active;\r\n\t\tconst tickSampleCountdown: number = synth.tickSampleCountdown;\r\n\t\tconst startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n\t\tconst endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n\t\tconst ticksIntoBar: number = (synth.beat * Config.partsPerBeat + synth.part) * Config.ticksPerPart + synth.tick;\r\n\t\tconst partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n\t\tconst partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n\t\tconst partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n\t\tconst partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\t\tconst instrumentIdx: number = (synth.song as Song).channels[channel].instruments.findIndex(i => i == instrument);\r\n\t\tconst treatAsSeamless: boolean = transition.isSeamless || synth.tyingOver[channel] >= 0;\r\n\r\n\t\ttone.phaseDeltaScale = 0.0;\r\n\t\ttone.filter = 1.0;\r\n\t\ttone.filterScale = 1.0;\r\n\t\ttone.vibratoScale = 0.0;\r\n\t\ttone.intervalMult = 1.0;\r\n\t\ttone.intervalVolumeMult = 1.0;\r\n\t\ttone.active = false;\r\n\r\n\t\tlet startPan: number = instrument.pan;\r\n\t\tlet endPan: number = instrument.pan;\r\n\t\tif (synth.isModActive(ModSetting.mstPan, false, channel, instrumentIdx)) {\r\n\t\t\tstartPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\r\n\t\t\tendPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\r\n\t\t}\r\n\r\n\t\tlet startPanDelay: number = instrument.panDelay;\r\n\t\tlet endPanDelay: number = instrument.panDelay;\r\n\t\tif (synth.isModActive(ModSetting.mstPanDelay, false, channel, instrumentIdx)) {\r\n\t\t\tstartPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, false);\r\n\t\t\tendPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, true);\r\n\t\t}\r\n\r\n\t\tconst useStartPan: number = (startPan - Config.panCenter) / Config.panCenter;\r\n\t\tconst useEndPan: number = (endPan - Config.panCenter) / Config.panCenter;\r\n\t\t// 10 pan delay is the same amount as vanilla beepbox.\r\n\t\tconst maxDelayStart: number = startPanDelay * 0.00013 * synth.samplesPerSecond;\r\n\t\tconst maxDelayEnd: number = endPanDelay * 0.00013 * synth.samplesPerSecond;\r\n\t\ttone.stereoDelayStart = -useStartPan * maxDelayStart;\r\n\t\tconst delayEnd: number = -useEndPan * maxDelayEnd;\r\n\t\ttone.stereoDelayDelta = (delayEnd - tone.stereoDelayStart) / runLength;\r\n\t\ttone.stereoVolumeLStart = Math.cos((1 + useStartPan) * Math.PI * 0.25) * 1.414;\r\n\t\ttone.stereoVolumeRStart = Math.cos((1 - useStartPan) * Math.PI * 0.25) * 1.414;\r\n\t\tconst stereoVolumeLEnd: number = Math.cos((1 + useEndPan) * Math.PI * 0.25) * 1.414;\r\n\t\tconst stereoVolumeREnd: number = Math.cos((1 - useEndPan) * Math.PI * 0.25) * 1.414;\r\n\t\ttone.stereoVolumeLDelta = (stereoVolumeLEnd - tone.stereoVolumeLStart) / runLength;\r\n\t\ttone.stereoVolumeRDelta = (stereoVolumeREnd - tone.stereoVolumeRStart) / runLength;\r\n\r\n\t\tlet resetPhases: boolean = true;\r\n\t\tlet partsSinceStart: number = 0.0;\r\n\t\tlet intervalStart: number = 0.0;\r\n\t\tlet intervalEnd: number = 0.0;\r\n\t\tlet transitionVolumeStart: number = 1.0;\r\n\t\tlet transitionVolumeEnd: number = 1.0;\r\n\t\tlet chordVolumeStart: number = chordVolume;\r\n\t\tlet chordVolumeEnd: number = chordVolume;\r\n\t\tlet customVolumeStart: number = 0.0;\r\n\t\tlet customVolumeEnd: number = 0.0;\r\n\t\tlet decayTimeStart: number = 0.0;\r\n\t\tlet decayTimeEnd: number = 0.0;\r\n\r\n\t\tlet volumeReferencePitch: number;\r\n\t\tlet basePitch: number;\r\n\t\tlet baseVolume: number;\r\n\t\tlet pitchDamping: number;\r\n\t\tif (instrument.type == InstrumentType.spectrum) {\r\n\t\t\tif (isNoiseChannel) {\r\n\t\t\t\tbasePitch = Config.spectrumBasePitch;\r\n\t\t\t\tbaseVolume = 0.6; // Note: spectrum is louder for drum channels than pitch channels!\r\n\t\t\t} else {\r\n\t\t\t\tbasePitch = Config.keys[song.key].basePitch;\r\n\t\t\t\tbaseVolume = 0.3;\r\n\t\t\t}\r\n\t\t\tvolumeReferencePitch = Config.spectrumBasePitch;\r\n\t\t\tpitchDamping = 28;\r\n\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\tbasePitch = Config.spectrumBasePitch;\r\n\t\t\tbaseVolume = 0.45;\r\n\t\t\tvolumeReferencePitch = basePitch;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\tbasePitch = Config.chipNoises[instrument.chipNoise].basePitch;\r\n\t\t\tbaseVolume = 0.19;\r\n\t\t\tvolumeReferencePitch = basePitch;\r\n\t\t\tpitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\r\n\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\tbasePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbaseVolume = 0.03;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\tbasePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbaseVolume = 0.03375; // looks low compared to drums, but it's doubled for chorus and drums tend to be loud anyway.\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\tbasePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbaseVolume = 0.025;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\tbasePitch = Config.keys[song.key].basePitch;\r\n\t\t\tbaseVolume = 0.04725;\r\n\t\t\tvolumeReferencePitch = 16;\r\n\t\t\tpitchDamping = 48;\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\tbaseVolume = 1.0;\r\n\t\t\tvolumeReferencePitch = 0;\r\n\t\t\tpitchDamping = 1.0;\r\n\t\t\tbasePitch = 0;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unknown instrument type in computeTone.\");\r\n\t\t}\r\n\r\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\ttone.phaseDeltas[i] = 0.0;\r\n\t\t\ttone.volumeStarts[i] = 0.0;\r\n\t\t\ttone.volumeDeltas[i] = 0.0;\r\n\t\t}\r\n\r\n\t\tif (released) {\r\n\t\t\tconst ticksSoFar: number = tone.noteLengthTicks + tone.ticksSinceReleased;\r\n\t\t\tconst startTicksSinceReleased: number = tone.ticksSinceReleased + startRatio;\r\n\t\t\tconst endTicksSinceReleased: number = tone.ticksSinceReleased + endRatio;\r\n\t\t\tconst startTick: number = tone.noteLengthTicks + startTicksSinceReleased;\r\n\t\t\tconst endTick: number = tone.noteLengthTicks + endTicksSinceReleased;\r\n\t\t\tconst toneTransition: Transition = tone.instrument.getTransition();\r\n\t\t\tresetPhases = false;\r\n\t\t\tpartsSinceStart = Math.floor(ticksSoFar / Config.ticksPerPart);\r\n\t\t\tintervalStart = intervalEnd = tone.lastInterval;\r\n\t\t\tcustomVolumeStart = customVolumeEnd = Synth.expressionToVolumeMult(tone.lastVolume);\r\n\t\t\ttransitionVolumeStart = Synth.expressionToVolumeMult((1.0 - startTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n\t\t\ttransitionVolumeEnd = Synth.expressionToVolumeMult((1.0 - endTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n\t\t\tdecayTimeStart = startTick / Config.ticksPerPart;\r\n\t\t\tdecayTimeEnd = endTick / Config.ticksPerPart;\r\n\r\n\t\t\tif (shouldFadeOutFast) {\r\n\t\t\t\ttransitionVolumeStart *= 1.0 - startRatio;\r\n\t\t\t\ttransitionVolumeEnd *= 1.0 - endRatio;\r\n\t\t\t}\r\n\t\t} else if (tone.note == null) {\r\n\t\t\ttransitionVolumeStart = transitionVolumeEnd = 1;\r\n\t\t\tcustomVolumeStart = customVolumeEnd = 1;\r\n\t\t\ttone.lastInterval = 0;\r\n\t\t\ttone.lastVolume = 6;\r\n\t\t\ttone.ticksSinceReleased = 0;\r\n\t\t\tresetPhases = false;\r\n\r\n\t\t\tconst heldTicksStart: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n\t\t\ttone.liveInputSamplesHeld += runLength;\r\n\t\t\tconst heldTicksEnd: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n\t\t\ttone.noteLengthTicks = heldTicksEnd;\r\n\t\t\tconst heldPartsStart: number = heldTicksStart / Config.ticksPerPart;\r\n\t\t\tconst heldPartsEnd: number = heldTicksEnd / Config.ticksPerPart;\r\n\t\t\tpartsSinceStart = Math.floor(heldPartsStart);\r\n\t\t\tdecayTimeStart = heldPartsStart;\r\n\t\t\tdecayTimeEnd = heldPartsEnd;\r\n\t\t} else {\r\n\t\t\tconst note: Note = tone.note;\r\n\t\t\tconst prevNote: Note | null = tone.prevNote;\r\n\t\t\tconst nextNote: Note | null = tone.nextNote;\r\n\r\n\t\t\tconst time: number = synth.part + synth.beat * Config.partsPerBeat;\r\n\t\t\tconst partsPerBar: number = Config.partsPerBeat * song.beatsPerBar;\r\n\t\t\tconst noteStart: number = tone.noteStart;// - Math.max(0, synth.tyingOver[channel] || 0);\r\n\t\t\tconst noteEnd: number = tone.noteEnd;\r\n\r\n\t\t\tpartsSinceStart = time - noteStart;\r\n\r\n\t\t\tlet endPinIndex: number;\r\n\t\t\tfor (endPinIndex = 1; endPinIndex < note.pins.length - 1; endPinIndex++) {\r\n\t\t\t\tif (note.pins[endPinIndex].time + note.start > time) break;\r\n\t\t\t}\r\n\t\t\tconst startPin: NotePin = note.pins[endPinIndex - 1];\r\n\t\t\tconst endPin: NotePin = note.pins[endPinIndex];\r\n\t\t\tconst noteStartTick: number = noteStart * Config.ticksPerPart;\r\n\t\t\tconst noteEndTick: number = noteEnd * Config.ticksPerPart;\r\n\t\t\tconst noteLengthTicks: number = noteEndTick - noteStartTick;\r\n\t\t\tconst pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\r\n\t\t\tconst pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\r\n\r\n\t\t\ttone.lastInterval = note.pins[note.pins.length - 1].interval;\r\n\t\t\ttone.lastVolume = note.pins[note.pins.length - 1].volume;\r\n\t\t\ttone.ticksSinceReleased = 0;\r\n\t\t\ttone.noteLengthTicks = noteLengthTicks;\r\n\r\n\t\t\tconst tickTimeStart: number = time * Config.ticksPerPart + synth.tick;\r\n\t\t\tconst tickTimeEnd: number = time * Config.ticksPerPart + synth.tick + 1;\r\n\t\t\tconst noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\r\n\t\t\tconst noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\r\n\t\t\tconst pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\r\n\t\t\tconst pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\r\n\t\t\tlet customVolumeTickStart: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioStart;\r\n\t\t\tlet customVolumeTickEnd: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioEnd;\r\n\t\t\tlet transitionVolumeTickStart: number = 1.0;\r\n\t\t\tlet transitionVolumeTickEnd: number = 1.0;\r\n\t\t\tlet chordVolumeTickStart: number = chordVolume;\r\n\t\t\tlet chordVolumeTickEnd: number = chordVolume;\r\n\t\t\tlet intervalTickStart: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n\t\t\tlet intervalTickEnd: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n\t\t\tlet decayTimeTickStart: number = partTimeTickStart - noteStart;\r\n\t\t\tlet decayTimeTickEnd: number = partTimeTickEnd - noteStart;\r\n\t\t\tresetPhases = (tickTimeStart + startRatio - noteStartTick == 0.0) || !toneWasActive;\r\n\r\n\t\t\t// if seamless, don't reset phases at start. (it's probably not necessary to constantly reset phases if there are no notes? Just do it once when note starts? But make sure that reset phases doesn't also reset stuff that this function did to set up the tone. Remember when the first run length was lost!\r\n\t\t\t// if slide, average the interval, decayTime, and custom volume at the endpoints and interpolate between over slide duration.\r\n\t\t\t// note that currently seamless and slide make different assumptions about whether a note at the end of a bar will connect with the next bar!\r\n\t\t\tconst maximumSlideTicks: number = noteLengthTicks * 0.5;\r\n\t\t\tif (treatAsSeamless && !transition.slides && note.start == 0) {\r\n\t\t\t\t// Special case for seamless, no-slide transition: assume the previous bar ends with another seamless note, don't reset tone history.\r\n\t\t\t\tresetPhases = !toneWasActive;\r\n\t\t\t} else if (treatAsSeamless && prevNote != null) {\r\n\t\t\t\tresetPhases = !toneWasActive;\r\n\t\t\t\tif (transition.slides) {\r\n\t\t\t\t\tconst slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n\t\t\t\t\tconst slideRatioStartTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickStart / slideTicks);\r\n\t\t\t\t\tconst slideRatioEndTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickEnd / slideTicks);\r\n\t\t\t\t\tconst intervalDiff: number = ((prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval) - tone.pitches[0]) * 0.5;\r\n\t\t\t\t\tconst volumeDiff: number = (prevNote.pins[prevNote.pins.length - 1].volume - note.pins[0].volume) * 0.5;\r\n\t\t\t\t\tconst decayTimeDiff: number = (prevNote.end - prevNote.start) * 0.5;\r\n\t\t\t\t\tintervalTickStart += slideRatioStartTick * intervalDiff;\r\n\t\t\t\t\tintervalTickEnd += slideRatioEndTick * intervalDiff;\r\n\t\t\t\t\tcustomVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n\t\t\t\t\tcustomVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n\t\t\t\t\tdecayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n\t\t\t\t\tdecayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n\t\t\t\t\tif (!chord.arpeggiates) {\r\n\t\t\t\t\t\tconst chordSizeDiff: number = (prevNote.pitches.length - tone.chordSize) * 0.5;\r\n\t\t\t\t\t\tchordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n\t\t\t\t\t\tchordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (treatAsSeamless && !transition.slides && note.end == partsPerBar) {\r\n\t\t\t\t// Special case for seamless, no-slide transition: assume the next bar starts with another seamless note, don't fade out.\r\n\t\t\t} else if (treatAsSeamless && nextNote != null) {\r\n\t\t\t\tif (transition.slides) {\r\n\t\t\t\t\tconst slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n\t\t\t\t\tconst slideRatioStartTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickStart) / slideTicks);\r\n\t\t\t\t\tconst slideRatioEndTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickEnd) / slideTicks);\r\n\t\t\t\t\tconst intervalDiff: number = (nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + note.pins[note.pins.length - 1].interval)) * 0.5;\r\n\t\t\t\t\tconst volumeDiff: number = (nextNote.pins[0].volume - note.pins[note.pins.length - 1].volume) * 0.5;\r\n\t\t\t\t\tconst decayTimeDiff: number = -(noteEnd - noteStart) * 0.5;\r\n\t\t\t\t\tintervalTickStart += slideRatioStartTick * intervalDiff;\r\n\t\t\t\t\tintervalTickEnd += slideRatioEndTick * intervalDiff;\r\n\t\t\t\t\tcustomVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n\t\t\t\t\tcustomVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n\t\t\t\t\tdecayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n\t\t\t\t\tdecayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n\t\t\t\t\tif (!chord.arpeggiates) {\r\n\t\t\t\t\t\tconst chordSizeDiff: number = (nextNote.pitches.length - tone.chordSize) * 0.5;\r\n\t\t\t\t\t\tchordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n\t\t\t\t\t\tchordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (!(transition.releases && synth.tyingOver[channel] < 0)) {\r\n\t\t\t\tconst releaseTicks: number = transition.releaseTicks;\r\n\t\t\t\tif (releaseTicks > 0.0) {\r\n\t\t\t\t\ttransitionVolumeTickStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / releaseTicks);\r\n\t\t\t\t\ttransitionVolumeTickEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / releaseTicks);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tintervalStart = intervalTickStart + (intervalTickEnd - intervalTickStart) * startRatio;\r\n\t\t\tintervalEnd = intervalTickStart + (intervalTickEnd - intervalTickStart) * endRatio;\r\n\t\t\tif (instrument.type != InstrumentType.mod) {\r\n\t\t\t\tcustomVolumeStart = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * startRatio);\r\n\t\t\t\tcustomVolumeEnd = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * endRatio);\r\n\t\t\t} else {\r\n\t\t\t\tcustomVolumeStart = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.max(0.0, startRatio);\r\n\t\t\t\tcustomVolumeEnd = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.min(1.0, endRatio);\r\n\t\t\t\ttone.customVolumeStart = customVolumeStart;\r\n\t\t\t\ttone.customVolumeEnd = customVolumeEnd;\r\n\t\t\t}\r\n\t\t\ttransitionVolumeStart = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * startRatio;\r\n\t\t\ttransitionVolumeEnd = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * endRatio;\r\n\t\t\tchordVolumeStart = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * startRatio;\r\n\t\t\tchordVolumeEnd = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * endRatio;\r\n\t\t\tdecayTimeStart = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * startRatio;\r\n\t\t\tdecayTimeEnd = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * endRatio;\r\n\t\t}\r\n\r\n\t\tconst sampleTime: number = 1.0 / synth.samplesPerSecond;\r\n\t\ttone.active = true;\r\n\r\n\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.fm || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.spectrum) {\r\n\r\n\t\t\tconst lfoEffectStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.LFOtime);\r\n\t\t\tconst lfoEffectEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.nextLFOtime);\r\n\r\n\t\t\tlet useVibratoStart: number = instrument.vibratoDepth;\r\n\t\t\tlet useVibratoEnd: number = instrument.vibratoDepth;\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstVibratoDepth, false, channel, instrumentIdx)) {\r\n\t\t\t\tuseVibratoStart = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tuseVibratoEnd = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\t// Only use vibrato properties if the instrument's vibrato is custom or mods are applied to it\r\n\t\t\tlet partsStart: number;\r\n\t\t\tlet partsEnd: number;\r\n\t\t\tconst activeVibratoDelayMods: boolean = synth.isModActive(ModSetting.mstVibratoDelay, false, channel, instrumentIdx);\r\n\t\t\tif (instrument.vibrato != Config.vibratos.length && !activeVibratoDelayMods) {\r\n\t\t\t\tpartsStart = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t\tpartsEnd = Config.vibratos[instrument.vibrato].delayParts;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet vibratoDelayStart: number = instrument.vibratoDelay;\r\n\t\t\t\tlet vibratoDelayEnd: number = instrument.vibratoDelay;\r\n\r\n\t\t\t\tif (activeVibratoDelayMods) {\r\n\t\t\t\t\tvibratoDelayStart = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, false);\r\n\t\t\t\t\tvibratoDelayEnd = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, true);\r\n\r\n\t\t\t\t\t// Special case - max vibrato delay means neeeeeever vibrato.\r\n\t\t\t\t\tif (vibratoDelayStart == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n\t\t\t\t\t\tvibratoDelayStart = Number.MAX_VALUE;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (vibratoDelayEnd == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n\t\t\t\t\t\tvibratoDelayEnd = Number.MAX_VALUE;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpartsStart = vibratoDelayStart;\r\n\t\t\t\tpartsEnd = vibratoDelayEnd;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst vibratoScaleStart: number = (partsSinceStart < partsStart) ? 0.0 : useVibratoStart;\r\n\t\t\tconst vibratoScaleEnd: number = (partsSinceStart < partsEnd) ? 0.0 : useVibratoEnd;\r\n\r\n\t\t\tconst vibratoStart: number = vibratoScaleStart * lfoEffectStart;\r\n\t\t\tconst vibratoEnd: number = vibratoScaleEnd * lfoEffectEnd;\r\n\t\t\tintervalStart += vibratoStart;\r\n\t\t\tintervalEnd += vibratoEnd;\r\n\t\t}\r\n\r\n\t\tif (!treatAsSeamless || (!(!transition.slides && tone.note != null && tone.note.start == 0) && !(tone.prevNote != null))) {\r\n\t\t\tconst attackSeconds: number = transition.attackSeconds;\r\n\t\t\tif (attackSeconds > 0.0) {\r\n\t\t\t\ttransitionVolumeStart *= Math.min(1.0, secondsPerPart * decayTimeStart / attackSeconds);\r\n\t\t\t\ttransitionVolumeEnd *= Math.min(1.0, secondsPerPart * decayTimeEnd / attackSeconds);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst instrumentVolumeMult: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\r\n\r\n\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\t// It's possible that the note will change while the user is editing it,\r\n\t\t\t// but the tone's pitches don't get updated because the tone has already\r\n\t\t\t// ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\r\n\t\t\ttone.drumsetPitch = tone.pitches[0];\r\n\t\t\tif (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\r\n\t\t\ttone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\r\n\t\t}\r\n\r\n\t\tlet filterCutModStart: number = instrument.filterCutoff;\r\n\t\tlet filterCutModEnd: number = instrument.filterCutoff;\r\n\t\tif (synth.isModActive(ModSetting.mstFilterCut, false, channel, instrumentIdx)) {\r\n\t\t\tfilterCutModStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, false), ModSetting.mstFilterCut);\r\n\t\t\tfilterCutModEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, true), ModSetting.mstFilterCut);\r\n\t\t}\r\n\r\n\t\tlet cutoffOctavesModStart: number;\r\n\t\tlet cutoffOctavesModEnd: number;\r\n\t\tif (instrument.type == InstrumentType.drumset) {\r\n\t\t\tcutoffOctavesModStart = 0;\r\n\t\t\tcutoffOctavesModEnd = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcutoffOctavesModStart = (filterCutModStart - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t\t\tcutoffOctavesModEnd = (filterCutModEnd - (Config.filterCutoffRange - 1)) * 0.5;\r\n\t\t}\r\n\r\n\t\tconst filterEnvelope: Envelope = (instrument.type == InstrumentType.drumset) ? instrument.getDrumsetEnvelope(tone.drumsetPitch) : instrument.getFilterEnvelope();\r\n\t\tconst filterCutoffHzStart: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModStart);\r\n\t\tconst filterCutoffHzEnd: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModEnd);\r\n\t\tconst filterBaseStart: number = 2.0 * Math.sin(Math.PI * filterCutoffHzStart / synth.samplesPerSecond);\r\n\t\tconst filterBaseEnd: number = 2.0 * Math.sin(Math.PI * filterCutoffHzEnd / synth.samplesPerSecond);\r\n\t\tconst filterMin: number = 2.0 * Math.sin(Math.PI * Config.filterCutoffMinHz / synth.samplesPerSecond);\r\n\t\ttone.filter = filterBaseStart * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\tlet endFilter: number = filterBaseEnd * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\t\ttone.filter = Math.min(Config.filterMax, Math.max(filterMin, tone.filter));\r\n\t\tendFilter = Math.min(Config.filterMax, Math.max(filterMin, endFilter));\r\n\t\ttone.filterScale = Math.pow(endFilter / tone.filter, 1.0 / runLength);\r\n\r\n\t\tlet filterVolumeStart: number = Math.pow(0.5, cutoffOctavesModStart * 0.35);\r\n\t\tlet filterVolumeEnd: number = Math.pow(0.5, cutoffOctavesModEnd * 0.35);\r\n\r\n\t\ttone.filterResonanceStart = instrument.getFilterResonance();\r\n\t\ttone.filterResonanceDelta = 0.0;\r\n\r\n\t\tlet useFilterResonanceStart: number = instrument.filterResonance;\r\n\t\tlet useFilterResonanceEnd: number = instrument.filterResonance;\r\n\r\n\t\ttone.isFirstOrder = (instrument.type == InstrumentType.drumset) ? false : (useFilterResonanceStart == 0);\r\n\r\n\t\tif (synth.isModActive(ModSetting.mstFilterPeak, false, channel, instrumentIdx)) {\r\n\t\t\t// This flag is used to avoid the special casing when filter resonance == 0 without mods. So, it will sound a bit different,\r\n\t\t\t// but the effect and ability to smoothly modulate will be preserved.\r\n\t\t\ttone.isFirstOrder = false;\r\n\r\n\t\t\tuseFilterResonanceStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, false), ModSetting.mstFilterPeak);\r\n\t\t\tuseFilterResonanceEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, true), ModSetting.mstFilterPeak);\r\n\r\n\t\t\t// Also set cut in the tone.\r\n\t\t\ttone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\t\t\tconst filterResonanceEnd: number = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceEnd - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\r\n\t\t\t// Just a linear delta. Could get messy since it's not an amazing approximation of sqrt?\r\n\t\t\ttone.filterResonanceDelta = (filterResonanceEnd - tone.filterResonanceStart) / runLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Still need to compute this, mods or no. This calc is delegated to the tone level instead of the synth level, a notable difference from beepbox.\r\n\t\t\t// No functional difference though.\r\n\t\t\ttone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\t\t}\r\n\r\n\t\tif (tone.isFirstOrder == false) {\r\n\t\t\tfilterVolumeStart = Math.pow(filterVolumeStart, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceStart - 1));\r\n\t\t\tfilterVolumeEnd = Math.pow(filterVolumeEnd, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceEnd - 1));\r\n\t\t}\r\n\t\tif (filterEnvelope.type == EnvelopeType.decay) {\r\n\t\t\tfilterVolumeStart *= (1.25 + .025 * filterEnvelope.speed);\r\n\t\t\tfilterVolumeEnd *= (1.25 + .025 * filterEnvelope.speed);\r\n\t\t} else if (filterEnvelope.type == EnvelopeType.twang) {\r\n\t\t\tfilterVolumeStart *= (1 + .02 * filterEnvelope.speed);\r\n\t\t\tfilterVolumeEnd *= (1 + .02 * filterEnvelope.speed);\r\n\t\t}\r\n\r\n\t\tif (resetPhases) {\r\n\t\t\ttone.reset();\r\n\t\t}\r\n\r\n\t\tif (instrument.type == InstrumentType.fm) {\r\n\t\t\t// phase modulation!\r\n\r\n\t\t\tlet sineVolumeBoostStart: number = 1.0;\r\n\t\t\tlet sineVolumeBoostEnd: number = 1.0;\r\n\t\t\tlet totalCarrierVolumeStart: number = 0.0;\r\n\t\t\tlet totalCarrierVolumeEnd: number = 0.0;\r\n\r\n\t\t\tlet arpeggioInterval: number = 0;\r\n\t\t\tif (tone.pitchCount > 1 && !chord.harmonizes) {\r\n\t\t\t\tconst arpeggio: number = Math.floor((instrument.arpTime) / Config.ticksPerArpeggio);\r\n\t\t\t\tarpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n\t\t\t}\r\n\r\n\t\t\tlet detuneStart: number = instrument.detune / 25;\r\n\t\t\tlet detuneEnd: number = instrument.detune / 25;\r\n\t\t\tif (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n\t\t\t\tdetuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tdetuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n\t\t\t\tdetuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n\t\t\t\tdetuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tconst carrierCount: number = Config.algorithms[instrument.algorithm].carrierCount;\r\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\r\n\t\t\t\tconst associatedCarrierIndex: number = Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1;\r\n\t\t\t\tconst pitch: number = tone.pitches[!chord.harmonizes ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\r\n\t\t\t\tconst freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\r\n\t\t\t\tconst interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\r\n\t\t\t\tconst startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale + interval;\r\n\t\t\t\tconst startFreq: number = freqMult * (Instrument.frequencyFromPitch(startPitch)) + Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n\r\n\t\t\t\ttone.phaseDeltas[i] = startFreq * sampleTime * Config.sineWaveLength;\r\n\r\n\t\t\t\tlet amplitudeStart: number = instrument.operators[i].amplitude;\r\n\t\t\t\tlet amplitudeEnd: number = instrument.operators[i].amplitude;\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx)) {\r\n\t\t\t\t\tamplitudeStart *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, false) / 15.0;\r\n\t\t\t\t\tamplitudeEnd *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, true) / 15.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\r\n\t\t\t\tconst amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\r\n\t\t\t\tconst amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\t\t\t\tconst amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\t\t\t\tlet volumeStart: number = amplitudeMultStart;\r\n\t\t\t\tlet volumeEnd: number = amplitudeMultEnd;\r\n\r\n\t\t\t\t// Check for mod-related volume delta\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n\t\t\t\t\t// Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n\t\t\t\t\tconst startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n\t\t\t\t\tconst endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n\t\t\t\t\tvolumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n\t\t\t\t\tvolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check for SONG mod-related volume delta\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n\t\t\t\t\tvolumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n\t\t\t\t\tvolumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (i < carrierCount) {\r\n\t\t\t\t\t// carrier\r\n\t\t\t\t\tconst endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale + interval;\r\n\t\t\t\t\tconst pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\t\t\tconst pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\t\t\tvolumeStart *= pitchVolumeStart;\r\n\t\t\t\t\tvolumeEnd *= pitchVolumeEnd;\r\n\r\n\t\t\t\t\ttotalCarrierVolumeStart += amplitudeCurveStart;\r\n\t\t\t\t\ttotalCarrierVolumeEnd += amplitudeCurveEnd;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// modulator\r\n\t\t\t\t\tvolumeStart *= Config.sineWaveLength * 1.5;\r\n\t\t\t\t\tvolumeEnd *= Config.sineWaveLength * 1.5;\r\n\r\n\t\t\t\t\tsineVolumeBoostStart *= 1.0 - Math.min(1.0, amplitudeStart / 15);\r\n\t\t\t\t\tsineVolumeBoostEnd *= 1.0 - Math.min(1.0, amplitudeEnd / 15);\r\n\t\t\t\t}\r\n\t\t\t\tconst operatorEnvelope: Envelope = Config.envelopes[instrument.operators[i].envelope];\r\n\r\n\t\t\t\tvolumeStart *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\t\tvolumeEnd *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n\t\t\t\ttone.volumeStarts[i] = volumeStart;\r\n\t\t\t\ttone.volumeDeltas[i] = (volumeEnd - volumeStart) / runLength;\r\n\t\t\t}\r\n\r\n\t\t\tlet useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\r\n\t\t\tlet useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\r\n\t\t\tif (synth.isModActive(ModSetting.mstFMFeedback, false, channel, instrumentIdx)) {\r\n\t\t\t\tuseFeedbackAmplitudeStart *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, false) / 15.0;\r\n\t\t\t\tuseFeedbackAmplitudeEnd *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, true) / 15.0;\r\n\t\t\t}\r\n\r\n\t\t\tconst feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\r\n\t\t\tconst feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\r\n\t\t\tconst feedbackEnvelope: Envelope = Config.envelopes[instrument.feedbackEnvelope];\r\n\t\t\tlet feedbackStart: number = feedbackAmplitudeStart * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\tlet feedbackEnd: number = feedbackAmplitudeEnd * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\t\t\ttone.feedbackMult = feedbackStart;\r\n\t\t\ttone.feedbackDelta = (feedbackEnd - tone.feedbackMult) / runLength;\r\n\r\n\t\t\tconst volumeMult: number = baseVolume * instrumentVolumeMult;\r\n\t\t\ttone.volumeStart = filterVolumeStart * volumeMult * transitionVolumeStart * chordVolumeStart;\r\n\t\t\tconst volumeEnd: number = filterVolumeEnd * volumeMult * transitionVolumeEnd * chordVolumeEnd;\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n\t\t\tsineVolumeBoostStart *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeStart / 15.0)) - 1.0) / 3.0;\r\n\t\t\tsineVolumeBoostEnd *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeEnd / 15.0)) - 1.0) / 3.0;\r\n\t\t\tsineVolumeBoostStart *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeStart - 1) / 2.0);\r\n\t\t\tsineVolumeBoostEnd *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeEnd - 1) / 2.0);\r\n\t\t\ttone.volumeStart *= 1.0 + sineVolumeBoostStart * 3.0;\r\n\t\t\ttone.volumeDelta *= 1.0 + (sineVolumeBoostStart + sineVolumeBoostEnd) * 1.5; // Volume boosts are averaged such that delta brings you to next target start boost.\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\t// Modulator value is used for data, so don't actually compute audio nonsense for it.\r\n\t\t\ttone.volumeStart = transitionVolumeStart;\r\n\t\t\tlet volumeEnd: number = transitionVolumeEnd;\r\n\r\n\t\t\ttone.volumeStart *= customVolumeStart;\r\n\t\t\tvolumeEnd *= customVolumeEnd;\r\n\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n\t\t} else {\r\n\t\t\tlet detuneStart: number = instrument.detune / 25;\r\n\t\t\tlet detuneEnd: number = instrument.detune / 25;\r\n\t\t\tif (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n\t\t\t\tdetuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n\t\t\t\tdetuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n\t\t\t\tdetuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n\t\t\t\tdetuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n\t\t\t}\r\n\r\n\t\t\tlet pitch: number = tone.pitches[0];\r\n\r\n\t\t\tif (tone.pitchCount > 1) {\r\n\t\t\t\tconst arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\r\n\t\t\t\tif (chord.harmonizes) {\r\n\t\t\t\t\tconst intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n\t\t\t\t\ttone.intervalMult = Math.pow(2.0, intervalOffset / 12.0);\r\n\t\t\t\t\ttone.intervalVolumeMult = Math.pow(2.0, -intervalOffset / pitchDamping);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale;\r\n\t\t\tconst endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale;\r\n\t\t\tconst startFreq: number = Instrument.frequencyFromPitch(startPitch);\r\n\t\t\tconst pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\tconst pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n\t\t\tlet settingsVolumeMultStart: number = baseVolume * filterVolumeStart;\r\n\t\t\tlet settingsVolumeMultEnd: number = baseVolume * filterVolumeEnd;\r\n\t\t\tif (instrument.type == InstrumentType.noise) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.chipNoises[instrument.chipNoise].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.chipNoises[instrument.chipNoise].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.chipWaves[instrument.chipWave].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.chipWaves[instrument.chipWave].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.customChipWave) {\r\n\t\t\t\tsettingsVolumeMultStart *= Config.intervals[instrument.interval].volume;\r\n\t\t\t\tsettingsVolumeMultEnd *= Config.intervals[instrument.interval].volume;\r\n\t\t\t}\r\n\t\t\tif (instrument.type == InstrumentType.pwm) {\r\n\r\n\t\t\t\t// Check for PWM mods to this instrument\r\n\t\t\t\tlet pulseWidthModStart: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n\t\t\t\tlet pulseWidthModEnd: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n\t\t\t\tif (synth.isModActive(ModSetting.mstPulseWidth, false, channel, instrumentIdx)) {\r\n\t\t\t\t\tpulseWidthModStart = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, false)) / (Config.pulseWidthRange * 2);\r\n\t\t\t\t\tpulseWidthModEnd = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, true)) / (Config.pulseWidthRange * 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst pulseEnvelope: Envelope = Config.envelopes[instrument.pulseEnvelope];\r\n\t\t\t\tconst pulseWidthStart: number = pulseWidthModStart * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n\t\t\t\tconst pulseWidthEnd: number = pulseWidthModEnd * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n\t\t\t\ttone.pulseWidth = pulseWidthStart;\r\n\t\t\t\ttone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / runLength;\r\n\t\t\t}\r\n\r\n\t\t\ttone.phaseDeltas[0] = startFreq * sampleTime;\r\n\r\n\t\t\ttone.volumeStart = transitionVolumeStart * chordVolumeStart * pitchVolumeStart * settingsVolumeMultStart * instrumentVolumeMult;\r\n\t\t\tlet volumeEnd: number = transitionVolumeEnd * chordVolumeEnd * pitchVolumeEnd * settingsVolumeMultEnd * instrumentVolumeMult;\r\n\r\n\t\t\tif (filterEnvelope.type != EnvelopeType.custom && (instrument.type != InstrumentType.pwm || Config.envelopes[instrument.pulseEnvelope].type != EnvelopeType.custom)) {\r\n\t\t\t\ttone.volumeStart *= customVolumeStart;\r\n\t\t\t\tvolumeEnd *= customVolumeEnd;\r\n\t\t\t}\r\n\r\n\t\t\t// Check for mod-related volume delta\r\n\t\t\tif (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n\t\t\t\t// Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n\t\t\t\tconst startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n\t\t\t\tconst endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n\t\t\t\ttone.volumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n\t\t\t\tvolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n\t\t\t}\r\n\t\t\t// Check for SONG mod-related volume delta\r\n\t\t\tif (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n\t\t\t\ttone.volumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n\t\t\t\tvolumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n\t\t\t}\r\n\r\n\t\t\ttone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\t\t}\r\n\r\n\t\ttone.phaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / 12.0) / runLength);\r\n\t}\r\n\r\n\tpublic static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\r\n\t\tlet effect: number = 0;\r\n\t\tfor (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\r\n\t\t\teffect += Math.sin(Math.PI * 2 * secondsIntoBar / vibratoPeriodSeconds);\r\n\t\t}\r\n\t\treturn effect;\r\n\t}\r\n\r\n\tprivate static readonly fmSynthFunctionCache: Dictionary<Function> = {};\r\n\r\n\tprivate static getInstrumentSynthFunction(instrument: Instrument): Function {\r\n\t\tif (instrument.type == InstrumentType.fm) {\r\n\t\t\tconst fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\r\n\t\t\tif (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\r\n\t\t\t\tconst synthSource: string[] = [];\r\n\r\n\t\t\t\tfor (const line of Synth.fmSourceTemplate) {\r\n\t\t\t\t\tif (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n\t\t\t\t\t\tconst outputs: string[] = [];\r\n\t\t\t\t\t\tfor (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\r\n\t\t\t\t\t\t\toutputs.push(\"operator\" + j + \"Scaled\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsynthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n\t\t\t\t\t} else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n\t\t\t\t\t\tfor (let j: number = Config.operatorCount - 1; j >= 0; j--) {\r\n\t\t\t\t\t\t\tfor (const operatorLine of Synth.operatorSourceTemplate) {\r\n\t\t\t\t\t\t\t\tif (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n\t\t\t\t\t\t\t\t\tlet modulators = \"\";\r\n\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\r\n\t\t\t\t\t\t\t\t\t\tmodulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tconst feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\r\n\t\t\t\t\t\t\t\t\tif (feedbackIndices.length > 0) {\r\n\t\t\t\t\t\t\t\t\t\tmodulators += \" + feedbackMult * (\";\r\n\t\t\t\t\t\t\t\t\t\tconst feedbacks: string[] = [];\r\n\t\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of feedbackIndices) {\r\n\t\t\t\t\t\t\t\t\t\t\tfeedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tmodulators += feedbacks.join(\" + \") + \")\";\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (line.indexOf(\"#\") != -1) {\r\n\t\t\t\t\t\tfor (let j = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\t\t\t\tsynthSource.push(line.replace(/\\#/g, j + \"\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsynthSource.push(line);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//console.log(synthSource.join(\"\\n\"));\r\n\r\n\t\t\t\tSynth.fmSynthFunctionCache[fingerprint] = new Function(\"synth\", \"data\", \"stereoBufferIndex\", \"stereoBufferLength\", \"runLength\", \"tone\", \"instrument\", synthSource.join(\"\\n\"));\r\n\t\t\t}\r\n\t\t\treturn Synth.fmSynthFunctionCache[fingerprint];\r\n\t\t} else if (instrument.type == InstrumentType.chip) {\r\n\t\t\treturn Synth.chipSynth;\r\n\t\t} else if (instrument.type == InstrumentType.customChipWave) {\r\n\t\t\treturn Synth.chipSynth;\r\n\t\t} else if (instrument.type == InstrumentType.harmonics) {\r\n\t\t\treturn Synth.harmonicsSynth;\r\n\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\treturn Synth.pulseWidthSynth;\r\n\t\t} else if (instrument.type == InstrumentType.noise) {\r\n\t\t\treturn Synth.noiseSynth;\r\n\t\t} else if (instrument.type == InstrumentType.spectrum) {\r\n\t\t\treturn Synth.spectrumSynth;\r\n\t\t} else if (instrument.type == InstrumentType.drumset) {\r\n\t\t\treturn Synth.drumsetSynth;\r\n\t\t} else if (instrument.type == InstrumentType.mod) {\r\n\t\t\treturn Synth.modSynth;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized instrument type: \" + instrument.type);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static chipSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tvar wave: Float64Array;\r\n\t\tvar volumeScale: number;\r\n\r\n\t\tconst isCustomWave: boolean = (instrument.type == InstrumentType.customChipWave);\r\n\r\n\t\tif (!isCustomWave) {\r\n\t\t\twave = Config.chipWaves[instrument.chipWave].samples;\r\n\t\t\tvolumeScale = 1.0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\twave = instrument.customChipWaveIntegral;\r\n\t\t\t// Integrals for custom chip wave can get rather big. This \"zero point\" can be config'ed later.\r\n\t\t\tvolumeScale = 0.1;\r\n\t\t}\r\n\r\n\t\tconst waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n\t\tconst intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / 12.0);\r\n\t\tconst intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / 12.0) * tone.intervalMult;\r\n\t\tconst intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n\t\tif (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n\t\tconst deltaRatio: number = intervalB / intervalA;\r\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n\t\tlet phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\tlet prevWaveIntegralA: number = wave[indexA];\r\n\t\tlet prevWaveIntegralB: number = wave[indexB];\r\n\t\tprevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n\t\tprevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\t//console.log(\"S: \" + stereoBufferIndex + \" P: \" + stopIndex);\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tphaseA += phaseDeltaA;\r\n\t\t\tphaseB += phaseDeltaB;\r\n\r\n\t\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\r\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\r\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\t\tnextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n\t\t\tnextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n\t\t\tlet waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n\t\t\tlet waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\r\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\r\n\r\n\t\t\tconst combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDeltaA *= phaseDeltaScale;\r\n\t\t\tphaseDeltaB *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume * volumeScale;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\t//debugString += \",\" + data.subarray(stereoBufferIndex - runLength, stereoBufferIndex).toString();\r\n\t\t//console.log(stereoBufferIndex);\r\n\r\n\t\ttone.phases[0] = phaseA / waveLength;\r\n\t\ttone.phases[1] = phaseB / waveLength;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\r\n\t}\r\n\r\n\r\n\tprivate static harmonicsSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tconst wave: Float32Array = instrument.harmonicsWave.getCustomWave();\r\n\t\tconst waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n\t\tconst intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / 12.0);\r\n\t\tconst intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / 12.0) * tone.intervalMult;\r\n\t\tconst intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n\t\tif (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n\t\tconst deltaRatio: number = intervalB / intervalA;\r\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n\t\tlet phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\tlet prevWaveIntegralA: number = wave[indexA];\r\n\t\tlet prevWaveIntegralB: number = wave[indexB];\r\n\t\tprevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n\t\tprevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tphaseA += phaseDeltaA;\r\n\t\t\tphaseB += phaseDeltaB;\r\n\r\n\t\t\tconst phaseAInt: number = phaseA | 0;\r\n\t\t\tconst phaseBInt: number = phaseB | 0;\r\n\t\t\tconst indexA: number = phaseAInt % waveLength;\r\n\t\t\tconst indexB: number = phaseBInt % waveLength;\r\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\r\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\r\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\r\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n\t\t\tnextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n\t\t\tnextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n\t\t\tlet waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n\t\t\tlet waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\r\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\r\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\r\n\r\n\t\t\tconst combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDeltaA *= phaseDeltaScale;\r\n\t\t\tphaseDeltaB *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phaseA / waveLength;\r\n\t\ttone.phases[1] = phaseB / waveLength;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static pulseWidthSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phase: number = (tone.phases[0] % 1);\r\n\r\n\t\tlet pulseWidth: number = tone.pulseWidth;\r\n\t\tconst pulseWidthDelta: number = tone.pulseWidthDelta;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\r\n\t\t\tconst sawPhaseA: number = phase % 1;\r\n\t\t\tconst sawPhaseB: number = (phase + pulseWidth) % 1;\r\n\r\n\t\t\tlet pulseWave: number = sawPhaseB - sawPhaseA;\r\n\r\n\t\t\t// This a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing.\r\n\t\t\tif (sawPhaseA < phaseDelta) {\r\n\t\t\t\tvar t = sawPhaseA / phaseDelta;\r\n\t\t\t\tpulseWave += (t + t - t * t - 1) * 0.5;\r\n\t\t\t} else if (sawPhaseA > 1.0 - phaseDelta) {\r\n\t\t\t\tvar t = (sawPhaseA - 1.0) / phaseDelta;\r\n\t\t\t\tpulseWave += (t + t + t * t + 1) * 0.5;\r\n\t\t\t}\r\n\t\t\tif (sawPhaseB < phaseDelta) {\r\n\t\t\t\tvar t = sawPhaseB / phaseDelta;\r\n\t\t\t\tpulseWave -= (t + t - t * t - 1) * 0.5;\r\n\t\t\t} else if (sawPhaseB > 1.0 - phaseDelta) {\r\n\t\t\t\tvar t = (sawPhaseB - 1.0) / phaseDelta;\r\n\t\t\t\tpulseWave -= (t + t + t * t + 1) * 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (pulseWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tpulseWidth += pulseWidthDelta;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static fmSourceTemplate: string[] = (`\r\nconst sineWave = beepbox.Config.sineWave;\r\n\r\nlet phaseDeltaScale = +tone.phaseDeltaScale;\r\n// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\nlet operator#Phase\t   = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\r\nlet operator#PhaseDelta  = +tone.phaseDeltas[#];\r\nlet operator#OutputMult  = +tone.volumeStarts[#];\r\nconst operator#OutputDelta = +tone.volumeDeltas[#];\r\nlet operator#Output\t  = +tone.feedbackOutputs[#];\r\nlet feedbackMult\t\t = +tone.feedbackMult;\r\nconst feedbackDelta\t\t= +tone.feedbackDelta;\r\nlet volume = +tone.volumeStart;\r\nconst volumeDelta = +tone.volumeDelta;\r\n\r\nconst isFirstOrder = tone.isFirstOrder;\r\nlet filter1 = +tone.filter;\r\nlet filter2 = isFirstOrder ? 1.0 : filter1;\r\nconst filterScale1 = +tone.filterScale;\r\nconst filterScale2 = isFirstOrder ? 1.0 : filterScale1;\r\nlet filterResonance = tone.filterResonanceStart;\r\nlet filterResonanceDelta = tone.filterResonanceDelta;\r\nlet filterSample0 = +tone.filterSample0;\r\nlet filterSample1 = +tone.filterSample1;\r\n\r\nconst stopIndex = stereoBufferIndex + runLength;\r\nstereoBufferIndex += tone.stereoOffset;\r\nlet stereoVolumeL = tone.stereoVolumeLStart;\r\nlet stereoVolumeLDelta = tone.stereoVolumeLDelta;\r\nlet stereoVolumeR = tone.stereoVolumeRStart;\r\nlet stereoVolumeRDelta = tone.stereoVolumeRDelta;\r\nlet stereoDelay = tone.stereoDelayStart;\r\nlet stereoDelayDelta = tone.stereoDelayDelta;\r\nlet delays = [];\r\nwhile (stereoBufferIndex < stopIndex) {\r\n// INSERT OPERATOR COMPUTATION HERE\r\nconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\r\nconst feedback = filterResonance + filterResonance / (1.0 - filter1);\r\nfilterSample0 += filter1 * (fmOutput - filterSample0 + feedback * (filterSample0 - filterSample1));\r\nfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\nfeedbackMult += feedbackDelta;\r\noperator#OutputMult += operator#OutputDelta;\r\noperator#Phase += operator#PhaseDelta;\r\noperator#PhaseDelta *= phaseDeltaScale;\r\nfilter1 *= filterScale1;\r\nfilter2 *= filterScale2;\r\nfilterResonance += filterResonanceDelta;\r\n\r\nconst output = filterSample1 * volume;\r\nvolume += volumeDelta;\r\n\r\n//const absStereoDelay: number = Math.abs(stereoDelay);\r\n//const fracStereoDelay: number = absStereoDelay % 1;\r\n//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\ndelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\ndata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\ndata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\ndata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\ndata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\nstereoVolumeL += stereoVolumeLDelta;\r\nstereoVolumeR += stereoVolumeRDelta;\r\nstereoDelay += stereoDelayDelta;\r\n\r\nstereoBufferIndex += 2;\r\n}\r\n\r\ntone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\ntone.feedbackOutputs[#] = operator#Output;\r\n\r\nconst epsilon = (1.0e-24);\r\nif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\nif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\ntone.filterSample0 = filterSample0;\r\ntone.filterSample1 = filterSample1;\r\n`).split(\"\\n\");\r\n\r\n\tprivate static operatorSourceTemplate: string[] = (`\r\nconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\nconst operator#PhaseInt = operator#PhaseMix|0;\r\nconst operator#Index\t= operator#PhaseInt & ` + Config.sineWaveMask + `;\r\nconst operator#Sample   = sineWave[operator#Index];\r\noperator#Output\t   = operator#Sample + (sineWave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\nconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n`).split(\"\\n\");\r\n\r\n\tprivate static noiseSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumWave();\r\n\t\tlet phaseDelta: number = +tone.phaseDeltas[0];\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\tif (tone.phases[0] == 0) {\r\n\t\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\t\tphase = Math.random() * Config.chipNoiseLength;\r\n\t\t}\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tconst pitchRelativefilter: number = Math.min(1.0, tone.phaseDeltas[0] * Config.chipNoises[instrument.chipNoise].pitchFilterMult);\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst waveSample: number = wave[phase & 0x7fff];\r\n\r\n\t\t\tsample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static spectrumSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumWave();\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] * (1 << 7);\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\tif (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n\t\tconst pitchRelativefilter: number = Math.min(1.0, phaseDelta);\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst phaseInt: number = phase | 0;\r\n\t\t\tconst index: number = phaseInt & 0x7fff;\r\n\t\t\tlet waveSample: number = wave[index];\r\n\t\t\tconst phaseRatio: number = phase - phaseInt;\r\n\t\t\twaveSample += (wave[index + 1] - waveSample) * phaseRatio;\r\n\r\n\t\t\tsample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static drumsetSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\tlet wave: Float32Array = instrument.getDrumsetWave(tone.drumsetPitch);\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] / Instrument.drumsetIndexReferenceDelta(tone.drumsetPitch);;\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n\t\tlet volume: number = +tone.volumeStart;\r\n\t\tconst volumeDelta: number = +tone.volumeDelta;\r\n\t\tlet sample: number = +tone.sample;\r\n\r\n\t\tconst isFirstOrder: boolean = tone.isFirstOrder;\r\n\t\tlet filter1: number = +tone.filter;\r\n\t\tlet filter2: number = isFirstOrder ? 1.0 : filter1;\r\n\t\tconst filterScale1: number = +tone.filterScale;\r\n\t\tconst filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n\t\tlet filterResonance: number = tone.filterResonanceStart;\r\n\t\tlet filterResonanceDelta: number = tone.filterResonanceDelta;\r\n\t\tlet filterSample0: number = +tone.filterSample0;\r\n\t\tlet filterSample1: number = +tone.filterSample1;\r\n\r\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\r\n\t\tif (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n\t\tconst stopIndex: number = stereoBufferIndex + runLength;\r\n\t\tstereoBufferIndex += tone.stereoOffset;\r\n\t\tlet stereoVolumeL: number = tone.stereoVolumeLStart;\r\n\t\tlet stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n\t\tlet stereoVolumeR: number = tone.stereoVolumeRStart;\r\n\t\tlet stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n\t\tlet stereoDelay: number = tone.stereoDelayStart;\r\n\t\tlet stereoDelayDelta: number = tone.stereoDelayDelta;\r\n\t\tlet delays: number[];\r\n\t\twhile (stereoBufferIndex < stopIndex) {\r\n\t\t\tconst phaseInt: number = phase | 0;\r\n\t\t\tconst index: number = phaseInt & 0x7fff;\r\n\t\t\tsample = wave[index];\r\n\t\t\tconst phaseRatio: number = phase - phaseInt;\r\n\t\t\tsample += (wave[index + 1] - sample) * phaseRatio;\r\n\r\n\t\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n\t\t\tfilterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n\t\t\tphase += phaseDelta;\r\n\t\t\tfilter1 *= filterScale1;\r\n\t\t\tfilter2 *= filterScale2;\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tfilterResonance += filterResonanceDelta;\r\n\r\n\t\t\tconst output: number = filterSample1 * volume;\r\n\t\t\tvolume += volumeDelta;\r\n\r\n\t\t\t//const absStereoDelay: number = Math.abs(stereoDelay);\r\n\t\t\t//const fracStereoDelay: number = absStereoDelay % 1;\r\n\t\t\t//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n\t\t\t//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n\t\t\t// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n\t\t\tdelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n\t\t\tdata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n\t\t\tdata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n\t\t\tdata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n\t\t\tstereoVolumeL += stereoVolumeLDelta;\r\n\t\t\tstereoVolumeR += stereoVolumeRDelta;\r\n\t\t\tstereoDelay += stereoDelayDelta;\r\n\r\n\t\t\tstereoBufferIndex += 2;\r\n\t\t}\r\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\r\n\t\ttone.sample = sample;\r\n\r\n\t\tconst epsilon: number = (1.0e-24);\r\n\t\tif (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n\t\ttone.filterSample0 = filterSample0;\r\n\t\ttone.filterSample1 = filterSample1;\r\n\t}\r\n\r\n\tprivate static modSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n\t\t// Note: present modulator value is tone.volumeStart.\r\n\r\n\t\tif (!synth.song) return;\r\n\r\n\t\tlet mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\t\tlet setting: ModSetting = instrument.modSettings[mod];\r\n\r\n\t\tsynth.setModValue(tone.customVolumeStart, tone.customVolumeEnd, mod, instrument, setting);\r\n\r\n\t\t// Reset arps, but only at the start of the note\r\n\t\tif (setting == ModSetting.mstResetArpeggio && synth.tick == 0 && tone.noteStart == synth.beat * Config.partsPerBeat + synth.part) {\r\n\t\t\tsynth.song.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].arpTime = 0;\r\n\t\t}\r\n\t\telse if (setting == ModSetting.mstNextBar) {\r\n\t\t\tsynth.wantToSkip = true;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static findRandomZeroCrossing(wave: Float32Array): number {\r\n\t\tlet phase: number = Math.random() * Config.chipNoiseLength;\r\n\r\n\t\t// Spectrum and drumset waves sounds best when they start at a zero crossing,\r\n\t\t// otherwise they pop. Try to find a zero crossing.\r\n\t\tlet indexPrev: number = phase & 0x7fff;\r\n\t\tlet wavePrev: number = wave[indexPrev];\r\n\t\tconst stride: number = 16;\r\n\t\tfor (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\r\n\t\t\tconst indexNext: number = (indexPrev + stride) & 0x7fff;\r\n\t\t\tconst waveNext: number = wave[indexNext];\r\n\t\t\tif (wavePrev * waveNext <= 0.0) {\r\n\t\t\t\t// Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\r\n\t\t\t\tfor (let i: number = 0; i < 16; i++) {\r\n\t\t\t\t\tconst innerIndexNext: number = (indexPrev + 1) & 0x7fff;\r\n\t\t\t\t\tconst innerWaveNext: number = wave[innerIndexNext];\r\n\t\t\t\t\tif (wavePrev * innerWaveNext <= 0.0) {\r\n\t\t\t\t\t\t// Found the zero crossing again! Now let's find the exact intersection.\r\n\t\t\t\t\t\tconst slope: number = innerWaveNext - wavePrev;\r\n\t\t\t\t\t\tphase = indexPrev;\r\n\t\t\t\t\t\tif (Math.abs(slope) > 0.00000001) {\r\n\t\t\t\t\t\t\tphase += -wavePrev / slope;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tphase = Math.max(0, phase) % Config.chipNoiseLength;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tindexPrev = innerIndexNext;\r\n\t\t\t\t\t\twavePrev = innerWaveNext;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tindexPrev = indexNext;\r\n\t\t\t\twavePrev = waveNext;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn phase;\r\n\t}\r\n\r\n\tpublic static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\r\n\t\treturn (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\r\n\t}\r\n\tpublic static volumeMultToInstrumentVolume(volumeMult: number): number {\r\n\t\treturn (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\r\n\t}\r\n\tpublic static expressionToVolumeMult(expression: number): number {\r\n\t\treturn Math.pow(Math.max(0.0, expression) / 6.0, 1.5);\r\n\t}\r\n\tpublic static volumeMultToExpression(volumeMult: number): number {\r\n\t\treturn Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * 6.0;\r\n\t}\r\n\r\n\tprivate getSamplesPerTick(): number {\r\n\t\tif (this.song == null) return 0;\r\n\t\tlet beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n\t\tif (this.isModActive(ModSetting.mstTempo, true)) {\r\n\t\t\tbeatsPerMinute = this.getModValue(ModSetting.mstTempo, true);\r\n\t\t}\r\n\t\treturn this.getSamplesPerTickSpecificBPM(beatsPerMinute);\r\n\t}\r\n\r\n\tprivate getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\r\n\t\tconst beatsPerSecond: number = beatsPerMinute / 60.0;\r\n\t\tconst partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\r\n\t\tconst tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\r\n\t\treturn this.samplesPerSecond / tickPerSecond;\r\n\t}\r\n}\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\r\n//}\r\n"]}